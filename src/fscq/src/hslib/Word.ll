target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-linux-gnu"
declare ccc i8* @memcpy$def(i8*, i8*, i64)
declare ccc i8* @memmove$def(i8*, i8*, i64)
declare ccc i8* @memset$def(i8*, i64, i64)
declare ccc i64 @newSpark$def(i8*, i8*)
!0 = !{!"top", null}
!1 = !{!"stack", !0}
!2 = !{!"heap", !0}
!3 = !{!"rx", !2}
!4 = !{!"base", !0}
!5 = !{!"other", !0}
%__stginit_Word_struct = type <{}>
@__stginit_Word$def = internal global %__stginit_Word_struct<{}>
@__stginit_Word = alias i8* bitcast (%__stginit_Word_struct* @__stginit_Word$def to i8*)
%Word_zdWW64_closure_struct = type <{i64}>
@Word_zdWW64_closure$def = internal global %Word_zdWW64_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdWW64_info$def to i64)}>
@Word_zdWW64_closure = alias i8* bitcast (%Word_zdWW64_closure_struct* @Word_zdWW64_closure$def to i8*)
@Word_zdWW64_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdWW64_info$def to i8*)
define ghccc void @Word_zdWW64_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
c8h2:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8hc = load i64*, i64** %Sp_Var
  %ln8hd = getelementptr inbounds i64, i64* %ln8hc, i32 -1
  %ln8he = ptrtoint i64* %ln8hd to i64
  %ln8hf = icmp ult i64 %ln8he, %SpLim_Arg
  br i1 %ln8hf, label %c8h6, label %c8h7
c8h7:
  %ln8hh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gZ_info$def to i64
  %ln8hg = load i64*, i64** %Sp_Var
  %ln8hi = getelementptr inbounds i64, i64* %ln8hg, i32 -1
  store i64 %ln8hh, i64* %ln8hi, !tbaa !1
  %ln8hj = load i64, i64* %R2_Var
  store i64 %ln8hj, i64* %R1_Var
  %ln8hk = load i64*, i64** %Sp_Var
  %ln8hl = getelementptr inbounds i64, i64* %ln8hk, i32 -1
  %ln8hm = ptrtoint i64* %ln8hl to i64
  %ln8hn = inttoptr i64 %ln8hm to i64*
  store i64* %ln8hn, i64** %Sp_Var
  %ln8ho = load i64, i64* %R1_Var
  %ln8hp = and i64 %ln8ho, 7
  %ln8hq = icmp ne i64 %ln8hp, 0
  br i1 %ln8hq, label %u8hb, label %c8h0
c8h0:
  %ln8hs = load i64, i64* %R1_Var
  %ln8ht = inttoptr i64 %ln8hs to i64*
  %ln8hu = load i64, i64* %ln8ht, !tbaa !3
  %ln8hv = inttoptr i64 %ln8hu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8hw = load i64*, i64** %Sp_Var
  %ln8hx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8hv( i64* %Base_Arg, i64* %ln8hw, i64* %Hp_Arg, i64 %ln8hx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8hb:
  %ln8hy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8hz = load i64*, i64** %Sp_Var
  %ln8hA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8hy( i64* %Base_Arg, i64* %ln8hz, i64* %Hp_Arg, i64 %ln8hA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8h6:
  %ln8hB = load i64, i64* %R2_Var
  store i64 %ln8hB, i64* %R2_Var
  %ln8hC = ptrtoint %Word_zdWW64_closure_struct* @Word_zdWW64_closure$def to i64
  store i64 %ln8hC, i64* %R1_Var
  %ln8hD = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8hE = bitcast i64* %ln8hD to i64*
  %ln8hF = load i64, i64* %ln8hE, !tbaa !4
  %ln8hG = inttoptr i64 %ln8hF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8hH = load i64*, i64** %Sp_Var
  %ln8hI = load i64, i64* %R1_Var
  %ln8hJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8hG( i64* %Base_Arg, i64* %ln8hH, i64* %Hp_Arg, i64 %ln8hI, i64 %ln8hJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8gZ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8gZ_info$def to i8*)
define internal ghccc void @c8gZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8gZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7YW = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8hK = load i64*, i64** %Hp_Var
  %ln8hL = getelementptr inbounds i64, i64* %ln8hK, i32 2
  %ln8hM = ptrtoint i64* %ln8hL to i64
  %ln8hN = inttoptr i64 %ln8hM to i64*
  store i64* %ln8hN, i64** %Hp_Var
  %ln8hO = load i64*, i64** %Hp_Var
  %ln8hP = ptrtoint i64* %ln8hO to i64
  %ln8hQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8hR = bitcast i64* %ln8hQ to i64*
  %ln8hS = load i64, i64* %ln8hR, !tbaa !4
  %ln8hT = icmp ugt i64 %ln8hP, %ln8hS
  br i1 %ln8hT, label %c8ha, label %c8h9
c8h9:
  %ln8hW = load i64, i64* %R1_Var
  %ln8hX = add i64 %ln8hW, 7
  %ln8hY = inttoptr i64 %ln8hX to i64*
  %ln8hZ = load i64, i64* %ln8hY, !tbaa !3
  store i64 %ln8hZ, i64* %ls7YW
  %ln8i1 = ptrtoint i8* @Word_W64_con_info to i64
  %ln8i0 = load i64*, i64** %Hp_Var
  %ln8i2 = getelementptr inbounds i64, i64* %ln8i0, i32 -1
  store i64 %ln8i1, i64* %ln8i2, !tbaa !2
  %ln8i4 = load i64, i64* %ls7YW
  %ln8i3 = load i64*, i64** %Hp_Var
  %ln8i5 = getelementptr inbounds i64, i64* %ln8i3, i32 0
  store i64 %ln8i4, i64* %ln8i5, !tbaa !2
  %ln8i7 = load i64*, i64** %Hp_Var
  %ln8i8 = ptrtoint i64* %ln8i7 to i64
  %ln8i9 = add i64 %ln8i8, -6
  store i64 %ln8i9, i64* %R1_Var
  %ln8ia = load i64*, i64** %Sp_Var
  %ln8ib = getelementptr inbounds i64, i64* %ln8ia, i32 1
  %ln8ic = ptrtoint i64* %ln8ib to i64
  %ln8id = inttoptr i64 %ln8ic to i64*
  store i64* %ln8id, i64** %Sp_Var
  %ln8ie = load i64*, i64** %Sp_Var
  %ln8if = getelementptr inbounds i64, i64* %ln8ie, i32 0
  %ln8ig = bitcast i64* %ln8if to i64*
  %ln8ih = load i64, i64* %ln8ig, !tbaa !1
  %ln8ii = inttoptr i64 %ln8ih to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ij = load i64*, i64** %Sp_Var
  %ln8ik = load i64*, i64** %Hp_Var
  %ln8il = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ii( i64* %Base_Arg, i64* %ln8ij, i64* %ln8ik, i64 %ln8il, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ha:
  %ln8im = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8im, !tbaa !4
  %ln8in = load i64, i64* %R1_Var
  store i64 %ln8in, i64* %R1_Var
  %ln8io = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ip = load i64*, i64** %Sp_Var
  %ln8iq = load i64*, i64** %Hp_Var
  %ln8ir = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8io( i64* %Base_Arg, i64* %ln8ip, i64* %ln8iq, i64 %ln8ir, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdWWBS_closure_struct = type <{i64}>
@Word_zdWWBS_closure$def = internal global %Word_zdWWBS_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdWWBS_info$def to i64)}>
@Word_zdWWBS_closure = alias i8* bitcast (%Word_zdWWBS_closure_struct* @Word_zdWWBS_closure$def to i8*)
@Word_zdWWBS_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdWWBS_info$def to i8*)
define ghccc void @Word_zdWWBS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
c8iD:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8iN = load i64*, i64** %Sp_Var
  %ln8iO = getelementptr inbounds i64, i64* %ln8iN, i32 -1
  %ln8iP = ptrtoint i64* %ln8iO to i64
  %ln8iQ = icmp ult i64 %ln8iP, %SpLim_Arg
  br i1 %ln8iQ, label %c8iH, label %c8iI
c8iI:
  %ln8iS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8iA_info$def to i64
  %ln8iR = load i64*, i64** %Sp_Var
  %ln8iT = getelementptr inbounds i64, i64* %ln8iR, i32 -1
  store i64 %ln8iS, i64* %ln8iT, !tbaa !1
  %ln8iU = load i64, i64* %R2_Var
  store i64 %ln8iU, i64* %R1_Var
  %ln8iV = load i64*, i64** %Sp_Var
  %ln8iW = getelementptr inbounds i64, i64* %ln8iV, i32 -1
  %ln8iX = ptrtoint i64* %ln8iW to i64
  %ln8iY = inttoptr i64 %ln8iX to i64*
  store i64* %ln8iY, i64** %Sp_Var
  %ln8iZ = load i64, i64* %R1_Var
  %ln8j0 = and i64 %ln8iZ, 7
  %ln8j1 = icmp ne i64 %ln8j0, 0
  br i1 %ln8j1, label %u8iM, label %c8iB
c8iB:
  %ln8j3 = load i64, i64* %R1_Var
  %ln8j4 = inttoptr i64 %ln8j3 to i64*
  %ln8j5 = load i64, i64* %ln8j4, !tbaa !3
  %ln8j6 = inttoptr i64 %ln8j5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8j7 = load i64*, i64** %Sp_Var
  %ln8j8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8j6( i64* %Base_Arg, i64* %ln8j7, i64* %Hp_Arg, i64 %ln8j8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8iM:
  %ln8j9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8iA_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ja = load i64*, i64** %Sp_Var
  %ln8jb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8j9( i64* %Base_Arg, i64* %ln8ja, i64* %Hp_Arg, i64 %ln8jb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8iH:
  %ln8jc = load i64, i64* %R2_Var
  store i64 %ln8jc, i64* %R2_Var
  %ln8jd = ptrtoint %Word_zdWWBS_closure_struct* @Word_zdWWBS_closure$def to i64
  store i64 %ln8jd, i64* %R1_Var
  %ln8je = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8jf = bitcast i64* %ln8je to i64*
  %ln8jg = load i64, i64* %ln8jf, !tbaa !4
  %ln8jh = inttoptr i64 %ln8jg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ji = load i64*, i64** %Sp_Var
  %ln8jj = load i64, i64* %R1_Var
  %ln8jk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jh( i64* %Base_Arg, i64* %ln8ji, i64* %Hp_Arg, i64 %ln8jj, i64 %ln8jk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8iA_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8iA_info$def to i8*)
define internal ghccc void @c8iA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8iA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8jl = load i64*, i64** %Hp_Var
  %ln8jm = getelementptr inbounds i64, i64* %ln8jl, i32 2
  %ln8jn = ptrtoint i64* %ln8jm to i64
  %ln8jo = inttoptr i64 %ln8jn to i64*
  store i64* %ln8jo, i64** %Hp_Var
  %ln8jp = load i64*, i64** %Hp_Var
  %ln8jq = ptrtoint i64* %ln8jp to i64
  %ln8jr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8js = bitcast i64* %ln8jr to i64*
  %ln8jt = load i64, i64* %ln8js, !tbaa !4
  %ln8ju = icmp ugt i64 %ln8jq, %ln8jt
  br i1 %ln8ju, label %c8iL, label %c8iK
c8iK:
  %ln8jw = ptrtoint i8* @Word_WBS_con_info to i64
  %ln8jv = load i64*, i64** %Hp_Var
  %ln8jx = getelementptr inbounds i64, i64* %ln8jv, i32 -1
  store i64 %ln8jw, i64* %ln8jx, !tbaa !2
  %ln8jz = load i64, i64* %R1_Var
  %ln8jy = load i64*, i64** %Hp_Var
  %ln8jA = getelementptr inbounds i64, i64* %ln8jy, i32 0
  store i64 %ln8jz, i64* %ln8jA, !tbaa !2
  %ln8jC = load i64*, i64** %Hp_Var
  %ln8jD = ptrtoint i64* %ln8jC to i64
  %ln8jE = add i64 %ln8jD, -5
  store i64 %ln8jE, i64* %R1_Var
  %ln8jF = load i64*, i64** %Sp_Var
  %ln8jG = getelementptr inbounds i64, i64* %ln8jF, i32 1
  %ln8jH = ptrtoint i64* %ln8jG to i64
  %ln8jI = inttoptr i64 %ln8jH to i64*
  store i64* %ln8jI, i64** %Sp_Var
  %ln8jJ = load i64*, i64** %Sp_Var
  %ln8jK = getelementptr inbounds i64, i64* %ln8jJ, i32 0
  %ln8jL = bitcast i64* %ln8jK to i64*
  %ln8jM = load i64, i64* %ln8jL, !tbaa !1
  %ln8jN = inttoptr i64 %ln8jM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8jO = load i64*, i64** %Sp_Var
  %ln8jP = load i64*, i64** %Hp_Var
  %ln8jQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jN( i64* %Base_Arg, i64* %ln8jO, i64* %ln8jP, i64 %ln8jQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8iL:
  %ln8jR = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8jR, !tbaa !4
  %ln8jS = load i64, i64* %R1_Var
  store i64 %ln8jS, i64* %R1_Var
  %ln8jT = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8jU = load i64*, i64** %Sp_Var
  %ln8jV = load i64*, i64** %Hp_Var
  %ln8jW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8jT( i64* %Base_Arg, i64* %ln8jU, i64* %ln8jV, i64 %ln8jW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdszc1_closure_struct = type <{i64, i64}>
@Word_zdszc1_closure$def = internal global %Word_zdszc1_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 1}>
@Word_zdszc1_closure = alias i8* bitcast (%Word_zdszc1_closure_struct* @Word_zdszc1_closure$def to i8*)
%r7YJ_closure_struct = type <{i64, i64}>
@r7YJ_closure$def = internal global %r7YJ_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YJ_info$def to i64), i64 0}>
@r7YJ_closure = internal alias i8* bitcast (%r7YJ_closure_struct* @r7YJ_closure$def to i8*)
@r7YJ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YJ_info$def to i8*)
define internal ghccc void @r7YJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YJ_info$def to i64)),i64 0), i64 12884901909, i64 0, i64 12884901903}>
{
c8kA:
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8ln = load i64*, i64** %Sp_Var
  %ln8lo = getelementptr inbounds i64, i64* %ln8ln, i32 -4
  %ln8lp = ptrtoint i64* %ln8lo to i64
  %ln8lq = icmp uge i64 %ln8lp, %SpLim_Arg
  br i1 %ln8lq, label %u8lg, label %c8kB
c8kB:
  %ln8lr = load i64, i64* %R4_Var
  store i64 %ln8lr, i64* %R4_Var
  %ln8ls = load i64, i64* %R3_Var
  store i64 %ln8ls, i64* %R3_Var
  %ln8lt = load i64, i64* %R2_Var
  store i64 %ln8lt, i64* %R2_Var
  %ln8lu = ptrtoint %r7YJ_closure_struct* @r7YJ_closure$def to i64
  store i64 %ln8lu, i64* %R1_Var
  %ln8lv = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8lw = bitcast i64* %ln8lv to i64*
  %ln8lx = load i64, i64* %ln8lw, !tbaa !4
  %ln8ly = inttoptr i64 %ln8lx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8lz = load i64*, i64** %Sp_Var
  %ln8lA = load i64, i64* %R1_Var
  %ln8lB = load i64, i64* %R2_Var
  %ln8lC = load i64, i64* %R3_Var
  %ln8lD = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ly( i64* %Base_Arg, i64* %ln8lz, i64* %Hp_Arg, i64 %ln8lA, i64 %ln8lB, i64 %ln8lC, i64 %ln8lD, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8lg:
  %ln8lF = load i64, i64* %R2_Var
  %ln8lE = load i64*, i64** %Sp_Var
  %ln8lG = getelementptr inbounds i64, i64* %ln8lE, i32 -3
  store i64 %ln8lF, i64* %ln8lG, !tbaa !1
  %ln8lI = load i64, i64* %R3_Var
  %ln8lH = load i64*, i64** %Sp_Var
  %ln8lJ = getelementptr inbounds i64, i64* %ln8lH, i32 -2
  store i64 %ln8lI, i64* %ln8lJ, !tbaa !1
  %ln8lL = load i64, i64* %R4_Var
  %ln8lK = load i64*, i64** %Sp_Var
  %ln8lM = getelementptr inbounds i64, i64* %ln8lK, i32 -1
  store i64 %ln8lL, i64* %ln8lM, !tbaa !1
  %ln8lN = load i64*, i64** %Sp_Var
  %ln8lO = getelementptr inbounds i64, i64* %ln8lN, i32 -3
  %ln8lP = ptrtoint i64* %ln8lO to i64
  %ln8lQ = inttoptr i64 %ln8lP to i64*
  store i64* %ln8lQ, i64** %Sp_Var
  %ln8lR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ks_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8lS = load i64*, i64** %Sp_Var
  %ln8lT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8lR( i64* %Base_Arg, i64* %ln8lS, i64* %Hp_Arg, i64 %ln8lT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8ks_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ks_entry$def to i8*)
define internal ghccc void @c8ks_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8ks:
  %ls7YZ = alloca i64, i32 1
  %ls7Z0 = alloca i64, i32 1
  %ls7Z1 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8lU = load i64*, i64** %Sp_Var
  %ln8lV = getelementptr inbounds i64, i64* %ln8lU, i32 0
  %ln8lW = bitcast i64* %ln8lV to i64*
  %ln8lX = load i64, i64* %ln8lW, !tbaa !1
  store i64 %ln8lX, i64* %ls7YZ
  %ln8lY = load i64*, i64** %Sp_Var
  %ln8lZ = getelementptr inbounds i64, i64* %ln8lY, i32 1
  %ln8m0 = bitcast i64* %ln8lZ to i64*
  %ln8m1 = load i64, i64* %ln8m0, !tbaa !1
  store i64 %ln8m1, i64* %ls7Z0
  %ln8m2 = load i64, i64* %ls7Z0
  %ln8m3 = urem i64 %ln8m2, 2
  switch i64 %ln8m3, label %c8ky [i64 0, label %c8kz]
c8ky:
  %ln8m4 = load i64*, i64** %Sp_Var
  %ln8m5 = getelementptr inbounds i64, i64* %ln8m4, i32 2
  %ln8m6 = bitcast i64* %ln8m5 to i64*
  %ln8m7 = load i64, i64* %ln8m6, !tbaa !1
  store i64 %ln8m7, i64* %ls7Z1
  %ln8m8 = load i64, i64* %ls7Z0
  switch i64 %ln8m8, label %c8kW [i64 1, label %c8l2]
c8kW:
  %ln8ma = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kK_info$def to i64
  %ln8m9 = load i64*, i64** %Sp_Var
  %ln8mb = getelementptr inbounds i64, i64* %ln8m9, i32 -1
  store i64 %ln8ma, i64* %ln8mb, !tbaa !1
  %ln8mc = load i64, i64* %ls7Z1
  store i64 %ln8mc, i64* %R3_Var
  %ln8md = load i64, i64* %ls7YZ
  store i64 %ln8md, i64* %R2_Var
  %ln8mf = load i64, i64* %ls7Z0
  %ln8me = load i64*, i64** %Sp_Var
  %ln8mg = getelementptr inbounds i64, i64* %ln8me, i32 2
  store i64 %ln8mf, i64* %ln8mg, !tbaa !1
  %ln8mh = load i64*, i64** %Sp_Var
  %ln8mi = getelementptr inbounds i64, i64* %ln8mh, i32 -1
  %ln8mj = ptrtoint i64* %ln8mi to i64
  %ln8mk = inttoptr i64 %ln8mj to i64*
  store i64* %ln8mk, i64** %Sp_Var
  %ln8ml = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8mm = load i64*, i64** %Sp_Var
  %ln8mn = load i64, i64* %R2_Var
  %ln8mo = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ml( i64* %Base_Arg, i64* %ln8mm, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8mn, i64 %ln8mo, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8l2:
  %ln8mp = load i64, i64* %ls7Z1
  store i64 %ln8mp, i64* %R3_Var
  %ln8mq = load i64, i64* %ls7YZ
  store i64 %ln8mq, i64* %R2_Var
  %ln8mr = load i64*, i64** %Sp_Var
  %ln8ms = getelementptr inbounds i64, i64* %ln8mr, i32 3
  %ln8mt = ptrtoint i64* %ln8ms to i64
  %ln8mu = inttoptr i64 %ln8mt to i64*
  store i64* %ln8mu, i64** %Sp_Var
  %ln8mv = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8mw = load i64*, i64** %Sp_Var
  %ln8mx = load i64, i64* %R2_Var
  %ln8my = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mv( i64* %Base_Arg, i64* %ln8mw, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8mx, i64 %ln8my, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8kz:
  %ln8mA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8la_info$def to i64
  %ln8mz = load i64*, i64** %Sp_Var
  %ln8mB = getelementptr inbounds i64, i64* %ln8mz, i32 0
  store i64 %ln8mA, i64* %ln8mB, !tbaa !1
  %ln8mC = load i64, i64* %ls7YZ
  store i64 %ln8mC, i64* %R3_Var
  %ln8mD = load i64, i64* %ls7YZ
  store i64 %ln8mD, i64* %R2_Var
  %ln8mF = load i64, i64* %ls7Z0
  %ln8mG = lshr i64 %ln8mF, 1
  %ln8mE = load i64*, i64** %Sp_Var
  %ln8mH = getelementptr inbounds i64, i64* %ln8mE, i32 1
  store i64 %ln8mG, i64* %ln8mH, !tbaa !1
  %ln8mI = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8mJ = load i64*, i64** %Sp_Var
  %ln8mK = load i64, i64* %R2_Var
  %ln8mL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mI( i64* %Base_Arg, i64* %ln8mJ, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8mK, i64 %ln8mL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8la_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8la_info$def to i8*)
define internal ghccc void @c8la_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8la_info$def to i64)),i64 0), i64 66, i64 4294967328}>
{
c8la:
  %ln8mM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8mM, !tbaa !1
  %ln8mN = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8mO = bitcast i64* %ln8mN to i64*
  %ln8mP = load i64, i64* %ln8mO, !tbaa !1
  %ln8mQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8mP, i64* %ln8mQ, !tbaa !1
  %ln8mR = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8mS = bitcast i64* %ln8mR to i64*
  %ln8mT = load i64, i64* %ln8mS, !tbaa !1
  %ln8mU = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %ln8mT, i64* %ln8mU, !tbaa !1
  %ln8mV = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ks_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8mV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8kK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kK_info$def to i8*)
define internal ghccc void @c8kK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kK_info$def to i64)),i64 0), i64 387, i64 4294967328}>
{
c8kK:
  %ls7YZ = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8mW = load i64*, i64** %Sp_Var
  %ln8mX = getelementptr inbounds i64, i64* %ln8mW, i32 1
  %ln8mY = bitcast i64* %ln8mX to i64*
  %ln8mZ = load i64, i64* %ln8mY, !tbaa !1
  store i64 %ln8mZ, i64* %ls7YZ
  %ln8n1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kU_info$def to i64
  %ln8n0 = load i64*, i64** %Sp_Var
  %ln8n2 = getelementptr inbounds i64, i64* %ln8n0, i32 1
  store i64 %ln8n1, i64* %ln8n2, !tbaa !1
  %ln8n3 = load i64, i64* %ls7YZ
  store i64 %ln8n3, i64* %R3_Var
  %ln8n4 = load i64, i64* %ls7YZ
  store i64 %ln8n4, i64* %R2_Var
  %ln8n5 = load i64*, i64** %Sp_Var
  %ln8n6 = getelementptr inbounds i64, i64* %ln8n5, i32 2
  store i64 %R1_Arg, i64* %ln8n6, !tbaa !1
  %ln8n8 = load i64*, i64** %Sp_Var
  %ln8n9 = getelementptr inbounds i64, i64* %ln8n8, i32 3
  %ln8na = bitcast i64* %ln8n9 to i64*
  %ln8nb = load i64, i64* %ln8na, !tbaa !1
  %ln8nc = add i64 %ln8nb, -1
  %ln8nd = lshr i64 %ln8nc, 1
  %ln8n7 = load i64*, i64** %Sp_Var
  %ln8ne = getelementptr inbounds i64, i64* %ln8n7, i32 3
  store i64 %ln8nd, i64* %ln8ne, !tbaa !1
  %ln8nf = load i64*, i64** %Sp_Var
  %ln8ng = getelementptr inbounds i64, i64* %ln8nf, i32 1
  %ln8nh = ptrtoint i64* %ln8ng to i64
  %ln8ni = inttoptr i64 %ln8nh to i64*
  store i64* %ln8ni, i64** %Sp_Var
  %ln8nj = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8nk = load i64*, i64** %Sp_Var
  %ln8nl = load i64, i64* %R2_Var
  %ln8nm = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8nj( i64* %Base_Arg, i64* %ln8nk, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8nl, i64 %ln8nm, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8kU_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kU_info$def to i8*)
define internal ghccc void @c8kU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8kU_info$def to i64)),i64 0), i64 130, i64 4294967328}>
{
c8kU:
  %ls7Z1 = alloca i64, i32 1
  %ln8nn = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8nn, !tbaa !1
  %ln8no = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8np = bitcast i64* %ln8no to i64*
  %ln8nq = load i64, i64* %ln8np, !tbaa !1
  store i64 %ln8nq, i64* %ls7Z1
  %ln8nr = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8ns = bitcast i64* %ln8nr to i64*
  %ln8nt = load i64, i64* %ln8ns, !tbaa !1
  %ln8nu = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8nt, i64* %ln8nu, !tbaa !1
  %ln8nv = load i64, i64* %ls7Z1
  %ln8nw = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %ln8nv, i64* %ln8nw, !tbaa !1
  %ln8nx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8ks_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8nx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwf_closure_struct = type <{i64, i64}>
@Word_zdwf_closure$def = internal global %Word_zdwf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwf_info$def to i64), i64 0}>
@Word_zdwf_closure = alias i8* bitcast (%Word_zdwf_closure_struct* @Word_zdwf_closure$def to i8*)
@Word_zdwf_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwf_info$def to i8*)
define ghccc void @Word_zdwf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwf_info$def to i64)),i64 0), i64 8589934606, i64 0, i64 30064771087}>
{
c8o7:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8oM = load i64*, i64** %Sp_Var
  %ln8oN = getelementptr inbounds i64, i64* %ln8oM, i32 -3
  %ln8oO = ptrtoint i64* %ln8oN to i64
  %ln8oP = icmp uge i64 %ln8oO, %SpLim_Arg
  br i1 %ln8oP, label %u8oI, label %c8o8
c8o8:
  %ln8oQ = load i64, i64* %R3_Var
  store i64 %ln8oQ, i64* %R3_Var
  %ln8oR = load i64, i64* %R2_Var
  store i64 %ln8oR, i64* %R2_Var
  %ln8oS = ptrtoint %Word_zdwf_closure_struct* @Word_zdwf_closure$def to i64
  store i64 %ln8oS, i64* %R1_Var
  %ln8oT = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8oU = bitcast i64* %ln8oT to i64*
  %ln8oV = load i64, i64* %ln8oU, !tbaa !4
  %ln8oW = inttoptr i64 %ln8oV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8oX = load i64*, i64** %Sp_Var
  %ln8oY = load i64, i64* %R1_Var
  %ln8oZ = load i64, i64* %R2_Var
  %ln8p0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8oW( i64* %Base_Arg, i64* %ln8oX, i64* %Hp_Arg, i64 %ln8oY, i64 %ln8oZ, i64 %ln8p0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8oI:
  %ln8p2 = load i64, i64* %R2_Var
  %ln8p1 = load i64*, i64** %Sp_Var
  %ln8p3 = getelementptr inbounds i64, i64* %ln8p1, i32 -2
  store i64 %ln8p2, i64* %ln8p3, !tbaa !1
  %ln8p5 = load i64, i64* %R3_Var
  %ln8p4 = load i64*, i64** %Sp_Var
  %ln8p6 = getelementptr inbounds i64, i64* %ln8p4, i32 -1
  store i64 %ln8p5, i64* %ln8p6, !tbaa !1
  %ln8p7 = load i64*, i64** %Sp_Var
  %ln8p8 = getelementptr inbounds i64, i64* %ln8p7, i32 -2
  %ln8p9 = ptrtoint i64* %ln8p8 to i64
  %ln8pa = inttoptr i64 %ln8p9 to i64*
  store i64* %ln8pa, i64** %Sp_Var
  %ln8pb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nZ_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8pc = load i64*, i64** %Sp_Var
  %ln8pd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8pb( i64* %Base_Arg, i64* %ln8pc, i64* %Hp_Arg, i64 %ln8pd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8nZ_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nZ_entry$def to i8*)
define internal ghccc void @c8nZ_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8nZ:
  %ls7Za = alloca i64, i32 1
  %ls7Zb = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8pe = load i64*, i64** %Sp_Var
  %ln8pf = getelementptr inbounds i64, i64* %ln8pe, i32 0
  %ln8pg = bitcast i64* %ln8pf to i64*
  %ln8ph = load i64, i64* %ln8pg, !tbaa !1
  store i64 %ln8ph, i64* %ls7Za
  %ln8pi = load i64*, i64** %Sp_Var
  %ln8pj = getelementptr inbounds i64, i64* %ln8pi, i32 1
  %ln8pk = bitcast i64* %ln8pj to i64*
  %ln8pl = load i64, i64* %ln8pk, !tbaa !1
  store i64 %ln8pl, i64* %ls7Zb
  %ln8pm = load i64, i64* %ls7Zb
  %ln8pn = urem i64 %ln8pm, 2
  switch i64 %ln8pn, label %c8o5 [i64 0, label %c8o6]
c8o5:
  %ln8po = load i64, i64* %ls7Zb
  switch i64 %ln8po, label %c8op [i64 1, label %c8ou]
c8op:
  %ln8pq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8on_info$def to i64
  %ln8pp = load i64*, i64** %Sp_Var
  %ln8pr = getelementptr inbounds i64, i64* %ln8pp, i32 -1
  store i64 %ln8pq, i64* %ln8pr, !tbaa !1
  %ln8ps = load i64, i64* %ls7Za
  store i64 %ln8ps, i64* %R3_Var
  %ln8pt = load i64, i64* %ls7Za
  store i64 %ln8pt, i64* %R2_Var
  %ln8pv = load i64, i64* %ls7Zb
  %ln8pw = add i64 %ln8pv, -1
  %ln8px = lshr i64 %ln8pw, 1
  %ln8pu = load i64*, i64** %Sp_Var
  %ln8py = getelementptr inbounds i64, i64* %ln8pu, i32 1
  store i64 %ln8px, i64* %ln8py, !tbaa !1
  %ln8pz = load i64*, i64** %Sp_Var
  %ln8pA = getelementptr inbounds i64, i64* %ln8pz, i32 -1
  %ln8pB = ptrtoint i64* %ln8pA to i64
  %ln8pC = inttoptr i64 %ln8pB to i64*
  store i64* %ln8pC, i64** %Sp_Var
  %ln8pD = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8pE = load i64*, i64** %Sp_Var
  %ln8pF = load i64, i64* %R1_Var
  %ln8pG = load i64, i64* %R2_Var
  %ln8pH = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8pD( i64* %Base_Arg, i64* %ln8pE, i64* %Hp_Arg, i64 %ln8pF, i64 %ln8pG, i64 %ln8pH, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ou:
  %ln8pI = load i64, i64* %ls7Za
  %ln8pJ = and i64 %ln8pI, -8
  store i64 %ln8pJ, i64* %R1_Var
  %ln8pK = load i64*, i64** %Sp_Var
  %ln8pL = getelementptr inbounds i64, i64* %ln8pK, i32 2
  %ln8pM = ptrtoint i64* %ln8pL to i64
  %ln8pN = inttoptr i64 %ln8pM to i64*
  store i64* %ln8pN, i64** %Sp_Var
  %ln8pP = load i64, i64* %R1_Var
  %ln8pQ = inttoptr i64 %ln8pP to i64*
  %ln8pR = load i64, i64* %ln8pQ, !tbaa !3
  %ln8pS = inttoptr i64 %ln8pR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8pT = load i64*, i64** %Sp_Var
  %ln8pU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8pS( i64* %Base_Arg, i64* %ln8pT, i64* %Hp_Arg, i64 %ln8pU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8o6:
  %ln8pW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8oC_info$def to i64
  %ln8pV = load i64*, i64** %Sp_Var
  %ln8pX = getelementptr inbounds i64, i64* %ln8pV, i32 0
  store i64 %ln8pW, i64* %ln8pX, !tbaa !1
  %ln8pY = load i64, i64* %ls7Za
  store i64 %ln8pY, i64* %R3_Var
  %ln8pZ = load i64, i64* %ls7Za
  store i64 %ln8pZ, i64* %R2_Var
  %ln8q1 = load i64, i64* %ls7Zb
  %ln8q2 = lshr i64 %ln8q1, 1
  %ln8q0 = load i64*, i64** %Sp_Var
  %ln8q3 = getelementptr inbounds i64, i64* %ln8q0, i32 1
  store i64 %ln8q2, i64* %ln8q3, !tbaa !1
  %ln8q4 = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8q5 = load i64*, i64** %Sp_Var
  %ln8q6 = load i64, i64* %R1_Var
  %ln8q7 = load i64, i64* %R2_Var
  %ln8q8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8q4( i64* %Base_Arg, i64* %ln8q5, i64* %Hp_Arg, i64 %ln8q6, i64 %ln8q7, i64 %ln8q8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8oC_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8oC_info$def to i8*)
define internal ghccc void @c8oC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8oC_info$def to i64)),i64 0), i64 65, i64 12884901920}>
{
c8oC:
  %ln8q9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8q9, !tbaa !1
  %ln8qa = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8qb = bitcast i64* %ln8qa to i64*
  %ln8qc = load i64, i64* %ln8qb, !tbaa !1
  %ln8qd = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8qc, i64* %ln8qd, !tbaa !1
  %ln8qe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8nZ_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8qe( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8on_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8on_info$def to i8*)
define internal ghccc void @c8on_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8on_info$def to i64)),i64 8), i64 130, i64 4294967328}>
{
c8on:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8qf = load i64*, i64** %Sp_Var
  %ln8qg = getelementptr inbounds i64, i64* %ln8qf, i32 1
  %ln8qh = bitcast i64* %ln8qg to i64*
  %ln8qi = load i64, i64* %ln8qh, !tbaa !1
  store i64 %ln8qi, i64* %R4_Var
  %ln8qj = load i64*, i64** %Sp_Var
  %ln8qk = getelementptr inbounds i64, i64* %ln8qj, i32 2
  %ln8ql = bitcast i64* %ln8qk to i64*
  %ln8qm = load i64, i64* %ln8ql, !tbaa !1
  store i64 %ln8qm, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8qn = load i64*, i64** %Sp_Var
  %ln8qo = getelementptr inbounds i64, i64* %ln8qn, i32 3
  %ln8qp = ptrtoint i64* %ln8qo to i64
  %ln8qq = inttoptr i64 %ln8qp to i64*
  store i64* %ln8qq, i64** %Sp_Var
  %ln8qr = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8qs = load i64*, i64** %Sp_Var
  %ln8qt = load i64, i64* %R2_Var
  %ln8qu = load i64, i64* %R3_Var
  %ln8qv = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8qr( i64* %Base_Arg, i64* %ln8qs, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8qt, i64 %ln8qu, i64 %ln8qv, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdfShowCoqzuword2_closure_struct = type <{i64, i64, i64, i64}>
@Word_zdfShowCoqzuword2_closure$def = internal global %Word_zdfShowCoqzuword2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZC_static_info to i64), i64 ptrtoint (i8* @base_GHCziShow_shows8_closure to i64), i64 add (i64 ptrtoint (i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64),i64 1), i64 3}>
@Word_zdfShowCoqzuword2_closure = alias i8* bitcast (%Word_zdfShowCoqzuword2_closure_struct* @Word_zdfShowCoqzuword2_closure$def to i8*)
%Word_zdwzdcshow_closure_struct = type <{i64, i64}>
@Word_zdwzdcshow_closure$def = internal global %Word_zdwzdcshow_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwzdcshow_info$def to i64), i64 0}>
@Word_zdwzdcshow_closure = alias i8* bitcast (%Word_zdwzdcshow_closure_struct* @Word_zdwzdcshow_closure$def to i8*)
@s7Zz_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Zz_info$def to i8*)
define internal ghccc void @s7Zz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Zz_info$def to i64)),i64 24), i64 12884901889, i64 4294967312}>
{
c8rm:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8s6 = load i64*, i64** %Sp_Var
  %ln8s7 = getelementptr inbounds i64, i64* %ln8s6, i32 -3
  %ln8s8 = ptrtoint i64* %ln8s7 to i64
  %ln8s9 = icmp ult i64 %ln8s8, %SpLim_Arg
  br i1 %ln8s9, label %c8rn, label %c8ro
c8ro:
  %ln8sb = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8sa = load i64*, i64** %Sp_Var
  %ln8sc = getelementptr inbounds i64, i64* %ln8sa, i32 -2
  store i64 %ln8sb, i64* %ln8sc, !tbaa !1
  %ln8se = load i64, i64* %R1_Var
  %ln8sd = load i64*, i64** %Sp_Var
  %ln8sf = getelementptr inbounds i64, i64* %ln8sd, i32 -1
  store i64 %ln8se, i64* %ln8sf, !tbaa !1
  %ln8sh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rk_info$def to i64
  %ln8sg = load i64*, i64** %Sp_Var
  %ln8si = getelementptr inbounds i64, i64* %ln8sg, i32 -3
  store i64 %ln8sh, i64* %ln8si, !tbaa !1
  %ln8sj = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln8sk = add i64 %ln8sj, 1
  store i64 %ln8sk, i64* %R6_Var
  %ln8sn = load i64, i64* %R1_Var
  %ln8so = add i64 %ln8sn, 40
  %ln8sp = inttoptr i64 %ln8so to i64*
  %ln8sq = load i64, i64* %ln8sp, !tbaa !3
  store i64 %ln8sq, i64* %R5_Var
  %ln8st = load i64, i64* %R1_Var
  %ln8su = add i64 %ln8st, 32
  %ln8sv = inttoptr i64 %ln8su to i64*
  %ln8sw = load i64, i64* %ln8sv, !tbaa !3
  store i64 %ln8sw, i64* %R4_Var
  %ln8sz = load i64, i64* %R1_Var
  %ln8sA = add i64 %ln8sz, 16
  %ln8sB = inttoptr i64 %ln8sA to i64*
  %ln8sC = load i64, i64* %ln8sB, !tbaa !3
  store i64 %ln8sC, i64* %R3_Var
  %ln8sF = load i64, i64* %R1_Var
  %ln8sG = add i64 %ln8sF, 24
  %ln8sH = inttoptr i64 %ln8sG to i64*
  %ln8sI = load i64, i64* %ln8sH, !tbaa !3
  store i64 %ln8sI, i64* %R2_Var
  %ln8sJ = load i64*, i64** %Sp_Var
  %ln8sK = getelementptr inbounds i64, i64* %ln8sJ, i32 -3
  %ln8sL = ptrtoint i64* %ln8sK to i64
  %ln8sM = inttoptr i64 %ln8sL to i64*
  store i64* %ln8sM, i64** %Sp_Var
  %ln8sN = bitcast i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_zdwunpackAppendCharsLazzy_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8sO = load i64*, i64** %Sp_Var
  %ln8sP = load i64, i64* %R1_Var
  %ln8sQ = load i64, i64* %R2_Var
  %ln8sR = load i64, i64* %R3_Var
  %ln8sS = load i64, i64* %R4_Var
  %ln8sT = load i64, i64* %R5_Var
  %ln8sU = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8sN( i64* %Base_Arg, i64* %ln8sO, i64* %Hp_Arg, i64 %ln8sP, i64 %ln8sQ, i64 %ln8sR, i64 %ln8sS, i64 %ln8sT, i64 %ln8sU, i64 %SpLim_Arg ) nounwind
  ret void
c8rn:
  %ln8sV = load i64, i64* %R1_Var
  store i64 %ln8sV, i64* %R1_Var
  %ln8sW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8sX = bitcast i64* %ln8sW to i64*
  %ln8sY = load i64, i64* %ln8sX, !tbaa !4
  %ln8sZ = inttoptr i64 %ln8sY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8t0 = load i64*, i64** %Sp_Var
  %ln8t1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8sZ( i64* %Base_Arg, i64* %ln8t0, i64* %Hp_Arg, i64 %ln8t1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rk_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rk_info$def to i8*)
define internal ghccc void @c8rk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rk_info$def to i64)),i64 24), i64 0, i64 4294967328}>
{
c8rk:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8t2 = ptrtoint %Word_zdfShowCoqzuword2_closure_struct* @Word_zdfShowCoqzuword2_closure$def to i64
  %ln8t3 = add i64 %ln8t2, 2
  store i64 %ln8t3, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %ln8t4 = load i64*, i64** %Sp_Var
  %ln8t5 = getelementptr inbounds i64, i64* %ln8t4, i32 1
  %ln8t6 = ptrtoint i64* %ln8t5 to i64
  %ln8t7 = inttoptr i64 %ln8t6 to i64*
  store i64* %ln8t7, i64** %Sp_Var
  %ln8t8 = bitcast i8* @base_GHCziShow_showLitString_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8t9 = load i64*, i64** %Sp_Var
  %ln8ta = load i64, i64* %R2_Var
  %ln8tb = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8t8( i64* %Base_Arg, i64* %ln8t9, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8ta, i64 %ln8tb, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwzdcshow_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwzdcshow_info$def to i8*)
define ghccc void @Word_zdwzdcshow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwzdcshow_info$def to i64)),i64 24), i64 4294967301, i64 0, i64 64424509455}>
{
c8rx:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8tc = load i64*, i64** %Sp_Var
  %ln8td = getelementptr inbounds i64, i64* %ln8tc, i32 -1
  %ln8te = ptrtoint i64* %ln8td to i64
  %ln8tf = icmp ult i64 %ln8te, %SpLim_Arg
  br i1 %ln8tf, label %c8ry, label %c8rz
c8rz:
  %ln8th = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r4_info$def to i64
  %ln8tg = load i64*, i64** %Sp_Var
  %ln8ti = getelementptr inbounds i64, i64* %ln8tg, i32 -1
  store i64 %ln8th, i64* %ln8ti, !tbaa !1
  %ln8tj = load i64, i64* %R2_Var
  store i64 %ln8tj, i64* %R1_Var
  %ln8tk = load i64*, i64** %Sp_Var
  %ln8tl = getelementptr inbounds i64, i64* %ln8tk, i32 -1
  %ln8tm = ptrtoint i64* %ln8tl to i64
  %ln8tn = inttoptr i64 %ln8tm to i64*
  store i64* %ln8tn, i64** %Sp_Var
  %ln8to = load i64, i64* %R1_Var
  %ln8tp = and i64 %ln8to, 7
  %ln8tq = icmp ne i64 %ln8tp, 0
  br i1 %ln8tq, label %u8s5, label %c8r5
c8r5:
  %ln8ts = load i64, i64* %R1_Var
  %ln8tt = inttoptr i64 %ln8ts to i64*
  %ln8tu = load i64, i64* %ln8tt, !tbaa !3
  %ln8tv = inttoptr i64 %ln8tu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tw = load i64*, i64** %Sp_Var
  %ln8tx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tv( i64* %Base_Arg, i64* %ln8tw, i64* %Hp_Arg, i64 %ln8tx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8s5:
  %ln8ty = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tz = load i64*, i64** %Sp_Var
  %ln8tA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ty( i64* %Base_Arg, i64* %ln8tz, i64* %Hp_Arg, i64 %ln8tA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ry:
  %ln8tB = load i64, i64* %R2_Var
  store i64 %ln8tB, i64* %R2_Var
  %ln8tC = ptrtoint %Word_zdwzdcshow_closure_struct* @Word_zdwzdcshow_closure$def to i64
  store i64 %ln8tC, i64* %R1_Var
  %ln8tD = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8tE = bitcast i64* %ln8tD to i64*
  %ln8tF = load i64, i64* %ln8tE, !tbaa !4
  %ln8tG = inttoptr i64 %ln8tF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tH = load i64*, i64** %Sp_Var
  %ln8tI = load i64, i64* %R1_Var
  %ln8tJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tG( i64* %Base_Arg, i64* %ln8tH, i64* %Hp_Arg, i64 %ln8tI, i64 %ln8tJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8r4_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r4_info$def to i8*)
define internal ghccc void @c8r4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8r4_info$def to i64)),i64 24), i64 0, i64 30064771104}>
{
c8r4:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7Zm = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8tK = load i64, i64* %R1_Var
  %ln8tL = and i64 %ln8tK, 7
  switch i64 %ln8tL, label %c8rt [i64 1, label %c8rt
i64 2, label %c8ru
i64 3, label %c8rv]
c8rt:
  %ln8tM = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln8tN = add i64 %ln8tM, 1
  store i64 %ln8tN, i64* %R4_Var
  %ln8tQ = load i64, i64* %R1_Var
  %ln8tR = add i64 %ln8tQ, 7
  %ln8tS = inttoptr i64 %ln8tR to i64*
  %ln8tT = load i64, i64* %ln8tS, !tbaa !3
  store i64 %ln8tT, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln8tU = load i64*, i64** %Sp_Var
  %ln8tV = getelementptr inbounds i64, i64* %ln8tU, i32 1
  %ln8tW = ptrtoint i64* %ln8tV to i64
  %ln8tX = inttoptr i64 %ln8tW to i64*
  store i64* %ln8tX, i64** %Sp_Var
  %ln8tY = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8tZ = load i64*, i64** %Sp_Var
  %ln8u0 = load i64, i64* %R1_Var
  %ln8u1 = load i64, i64* %R2_Var
  %ln8u2 = load i64, i64* %R3_Var
  %ln8u3 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8tY( i64* %Base_Arg, i64* %ln8tZ, i64* %Hp_Arg, i64 %ln8u0, i64 %ln8u1, i64 %ln8u2, i64 %ln8u3, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8ru:
  %ln8u6 = load i64, i64* %R1_Var
  %ln8u7 = add i64 %ln8u6, 6
  %ln8u8 = inttoptr i64 %ln8u7 to i64*
  %ln8u9 = load i64, i64* %ln8u8, !tbaa !3
  store i64 %ln8u9, i64* %ls7Zm
  %ln8ua = load i64, i64* %ls7Zm
  %ln8ub = icmp sge i64 %ln8ua, 0
  %ln8uc = zext i1 %ln8ub to i64
  switch i64 %ln8uc, label %c8rO [i64 0, label %c8rO
i64 1, label %c8rV]
c8rO:
  %ln8ue = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rM_info$def to i64
  %ln8ud = load i64*, i64** %Sp_Var
  %ln8uf = getelementptr inbounds i64, i64* %ln8ud, i32 0
  store i64 %ln8ue, i64* %ln8uf, !tbaa !1
  %ln8ug = load i64, i64* %ls7Zm
  store i64 %ln8ug, i64* %R2_Var
  %ln8uh = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ui = load i64*, i64** %Sp_Var
  %ln8uj = load i64, i64* %R1_Var
  %ln8uk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uh( i64* %Base_Arg, i64* %ln8ui, i64* %Hp_Arg, i64 %ln8uj, i64 %ln8uk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8rV:
  %ln8um = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rU_info$def to i64
  %ln8ul = load i64*, i64** %Sp_Var
  %ln8un = getelementptr inbounds i64, i64* %ln8ul, i32 0
  store i64 %ln8um, i64* %ln8un, !tbaa !1
  %ln8uo = load i64, i64* %ls7Zm
  store i64 %ln8uo, i64* %R2_Var
  %ln8up = bitcast i8* @integerzmgmp_GHCziIntegerziType_smallInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uq = load i64*, i64** %Sp_Var
  %ln8ur = load i64, i64* %R1_Var
  %ln8us = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8up( i64* %Base_Arg, i64* %ln8uq, i64* %Hp_Arg, i64 %ln8ur, i64 %ln8us, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8rv:
  %ln8uu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rb_info$def to i64
  %ln8ut = load i64*, i64** %Sp_Var
  %ln8uv = getelementptr inbounds i64, i64* %ln8ut, i32 0
  store i64 %ln8uu, i64* %ln8uv, !tbaa !1
  %ln8uy = load i64, i64* %R1_Var
  %ln8uz = add i64 %ln8uy, 5
  %ln8uA = inttoptr i64 %ln8uz to i64*
  %ln8uB = load i64, i64* %ln8uA, !tbaa !3
  store i64 %ln8uB, i64* %R1_Var
  %ln8uC = load i64, i64* %R1_Var
  %ln8uD = and i64 %ln8uC, 7
  %ln8uE = icmp ne i64 %ln8uD, 0
  br i1 %ln8uE, label %u8s4, label %c8rc
c8rc:
  %ln8uG = load i64, i64* %R1_Var
  %ln8uH = inttoptr i64 %ln8uG to i64*
  %ln8uI = load i64, i64* %ln8uH, !tbaa !3
  %ln8uJ = inttoptr i64 %ln8uI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uK = load i64*, i64** %Sp_Var
  %ln8uL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uJ( i64* %Base_Arg, i64* %ln8uK, i64* %Hp_Arg, i64 %ln8uL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8s4:
  %ln8uM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8uN = load i64*, i64** %Sp_Var
  %ln8uO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8uM( i64* %Base_Arg, i64* %ln8uN, i64* %Hp_Arg, i64 %ln8uO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rb_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rb_info$def to i8*)
define internal ghccc void @c8rb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rb_info$def to i64)),i64 24), i64 0, i64 4294967328}>
{
c8rb:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7Zv = alloca i64, i32 1
  %ls7Zu = alloca i64, i32 1
  %ls7Zw = alloca i64, i32 1
  %ls7Zx = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8uP = load i64*, i64** %Hp_Var
  %ln8uQ = getelementptr inbounds i64, i64* %ln8uP, i32 6
  %ln8uR = ptrtoint i64* %ln8uQ to i64
  %ln8uS = inttoptr i64 %ln8uR to i64*
  store i64* %ln8uS, i64** %Hp_Var
  %ln8uT = load i64*, i64** %Hp_Var
  %ln8uU = ptrtoint i64* %ln8uT to i64
  %ln8uV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8uW = bitcast i64* %ln8uV to i64*
  %ln8uX = load i64, i64* %ln8uW, !tbaa !4
  %ln8uY = icmp ugt i64 %ln8uU, %ln8uX
  br i1 %ln8uY, label %c8s3, label %c8s2
c8s2:
  %ln8v1 = load i64, i64* %R1_Var
  %ln8v2 = add i64 %ln8v1, 7
  %ln8v3 = inttoptr i64 %ln8v2 to i64*
  %ln8v4 = load i64, i64* %ln8v3, !tbaa !3
  store i64 %ln8v4, i64* %ls7Zv
  %ln8v7 = load i64, i64* %R1_Var
  %ln8v8 = add i64 %ln8v7, 15
  %ln8v9 = inttoptr i64 %ln8v8 to i64*
  %ln8va = load i64, i64* %ln8v9, !tbaa !3
  store i64 %ln8va, i64* %ls7Zu
  %ln8vd = load i64, i64* %R1_Var
  %ln8ve = add i64 %ln8vd, 23
  %ln8vf = inttoptr i64 %ln8ve to i64*
  %ln8vg = load i64, i64* %ln8vf, !tbaa !3
  store i64 %ln8vg, i64* %ls7Zw
  %ln8vj = load i64, i64* %R1_Var
  %ln8vk = add i64 %ln8vj, 31
  %ln8vl = inttoptr i64 %ln8vk to i64*
  %ln8vm = load i64, i64* %ln8vl, !tbaa !3
  store i64 %ln8vm, i64* %ls7Zx
  %ln8vo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s7Zz_info$def to i64
  %ln8vn = load i64*, i64** %Hp_Var
  %ln8vp = getelementptr inbounds i64, i64* %ln8vn, i32 -5
  store i64 %ln8vo, i64* %ln8vp, !tbaa !2
  %ln8vr = load i64, i64* %ls7Zv
  %ln8vq = load i64*, i64** %Hp_Var
  %ln8vs = getelementptr inbounds i64, i64* %ln8vq, i32 -3
  store i64 %ln8vr, i64* %ln8vs, !tbaa !2
  %ln8vu = load i64, i64* %ls7Zu
  %ln8vt = load i64*, i64** %Hp_Var
  %ln8vv = getelementptr inbounds i64, i64* %ln8vt, i32 -2
  store i64 %ln8vu, i64* %ln8vv, !tbaa !2
  %ln8vx = load i64, i64* %ls7Zw
  %ln8vw = load i64*, i64** %Hp_Var
  %ln8vy = getelementptr inbounds i64, i64* %ln8vw, i32 -1
  store i64 %ln8vx, i64* %ln8vy, !tbaa !2
  %ln8vA = load i64, i64* %ls7Zx
  %ln8vz = load i64*, i64** %Hp_Var
  %ln8vB = getelementptr inbounds i64, i64* %ln8vz, i32 0
  store i64 %ln8vA, i64* %ln8vB, !tbaa !2
  %ln8vC = load i64*, i64** %Hp_Var
  %ln8vD = getelementptr inbounds i64, i64* %ln8vC, i32 -5
  %ln8vE = ptrtoint i64* %ln8vD to i64
  store i64 %ln8vE, i64* %R2_Var
  %ln8vF = ptrtoint i8* @base_GHCziShow_shows8_closure to i64
  store i64 %ln8vF, i64* %R1_Var
  %ln8vG = load i64*, i64** %Sp_Var
  %ln8vH = getelementptr inbounds i64, i64* %ln8vG, i32 1
  %ln8vI = ptrtoint i64* %ln8vH to i64
  %ln8vJ = inttoptr i64 %ln8vI to i64*
  store i64* %ln8vJ, i64** %Sp_Var
  %ln8vK = load i64*, i64** %Sp_Var
  %ln8vL = getelementptr inbounds i64, i64* %ln8vK, i32 0
  %ln8vM = bitcast i64* %ln8vL to i64*
  %ln8vN = load i64, i64* %ln8vM, !tbaa !1
  %ln8vO = inttoptr i64 %ln8vN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vP = load i64*, i64** %Sp_Var
  %ln8vQ = load i64*, i64** %Hp_Var
  %ln8vR = load i64, i64* %R1_Var
  %ln8vS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vO( i64* %Base_Arg, i64* %ln8vP, i64* %ln8vQ, i64 %ln8vR, i64 %ln8vS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8s3:
  %ln8vT = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln8vT, !tbaa !4
  %ln8vU = load i64, i64* %R1_Var
  store i64 %ln8vU, i64* %R1_Var
  %ln8vV = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8vW = load i64*, i64** %Sp_Var
  %ln8vX = load i64*, i64** %Hp_Var
  %ln8vY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8vV( i64* %Base_Arg, i64* %ln8vW, i64* %ln8vX, i64 %ln8vY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rU_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rU_info$def to i8*)
define internal ghccc void @c8rU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rU_info$def to i64)),i64 40), i64 0, i64 4294967328}>
{
c8rU:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8vZ = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln8w0 = add i64 %ln8vZ, 1
  store i64 %ln8w0, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln8w1 = load i64*, i64** %Sp_Var
  %ln8w2 = getelementptr inbounds i64, i64* %ln8w1, i32 1
  %ln8w3 = ptrtoint i64* %ln8w2 to i64
  %ln8w4 = inttoptr i64 %ln8w3 to i64*
  store i64* %ln8w4, i64** %Sp_Var
  %ln8w5 = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8w6 = load i64*, i64** %Sp_Var
  %ln8w7 = load i64, i64* %R2_Var
  %ln8w8 = load i64, i64* %R3_Var
  %ln8w9 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8w5( i64* %Base_Arg, i64* %ln8w6, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8w7, i64 %ln8w8, i64 %ln8w9, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8rM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rM_info$def to i8*)
define internal ghccc void @c8rM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8rM_info$def to i64)),i64 40), i64 0, i64 4294967328}>
{
c8rM:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8wa = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %ln8wb = add i64 %ln8wa, 1
  store i64 %ln8wb, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  store i64 0, i64* %R2_Var
  %ln8wc = load i64*, i64** %Sp_Var
  %ln8wd = getelementptr inbounds i64, i64* %ln8wc, i32 1
  %ln8we = ptrtoint i64* %ln8wd to i64
  %ln8wf = inttoptr i64 %ln8we to i64*
  store i64* %ln8wf, i64** %Sp_Var
  %ln8wg = bitcast i8* @base_GHCziShow_zdwzdcshowsPrec3_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wh = load i64*, i64** %Sp_Var
  %ln8wi = load i64, i64* %R2_Var
  %ln8wj = load i64, i64* %R3_Var
  %ln8wk = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wg( i64* %Base_Arg, i64* %ln8wh, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8wi, i64 %ln8wj, i64 %ln8wk, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdfShowCoqzuwordzuzdcshow_closure_struct = type <{i64, i64}>
@Word_zdfShowCoqzuwordzuzdcshow_closure$def = internal global %Word_zdfShowCoqzuwordzuzdcshow_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshow_info$def to i64), i64 0}>
@Word_zdfShowCoqzuwordzuzdcshow_closure = alias i8* bitcast (%Word_zdfShowCoqzuwordzuzdcshow_closure_struct* @Word_zdfShowCoqzuwordzuzdcshow_closure$def to i8*)
@Word_zdfShowCoqzuwordzuzdcshow_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshow_info$def to i8*)
define ghccc void @Word_zdfShowCoqzuwordzuzdcshow_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshow_info$def to i64)),i64 48), i64 4294967301, i64 0, i64 12884901903}>
{
c8wt:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8wz = load i64*, i64** %Sp_Var
  %ln8wA = getelementptr inbounds i64, i64* %ln8wz, i32 -1
  %ln8wB = ptrtoint i64* %ln8wA to i64
  %ln8wC = icmp ult i64 %ln8wB, %SpLim_Arg
  br i1 %ln8wC, label %c8wu, label %c8wv
c8wv:
  %ln8wE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8wq_info$def to i64
  %ln8wD = load i64*, i64** %Sp_Var
  %ln8wF = getelementptr inbounds i64, i64* %ln8wD, i32 -1
  store i64 %ln8wE, i64* %ln8wF, !tbaa !1
  %ln8wG = load i64, i64* %R2_Var
  store i64 %ln8wG, i64* %R2_Var
  %ln8wH = load i64*, i64** %Sp_Var
  %ln8wI = getelementptr inbounds i64, i64* %ln8wH, i32 -1
  %ln8wJ = ptrtoint i64* %ln8wI to i64
  %ln8wK = inttoptr i64 %ln8wJ to i64*
  store i64* %ln8wK, i64** %Sp_Var
  %ln8wL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwzdcshow_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wM = load i64*, i64** %Sp_Var
  %ln8wN = load i64, i64* %R1_Var
  %ln8wO = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wL( i64* %Base_Arg, i64* %ln8wM, i64* %Hp_Arg, i64 %ln8wN, i64 %ln8wO, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8wu:
  %ln8wP = load i64, i64* %R2_Var
  store i64 %ln8wP, i64* %R2_Var
  %ln8wQ = ptrtoint %Word_zdfShowCoqzuwordzuzdcshow_closure_struct* @Word_zdfShowCoqzuwordzuzdcshow_closure$def to i64
  store i64 %ln8wQ, i64* %R1_Var
  %ln8wR = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8wS = bitcast i64* %ln8wR to i64*
  %ln8wT = load i64, i64* %ln8wS, !tbaa !4
  %ln8wU = inttoptr i64 %ln8wT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8wV = load i64*, i64** %Sp_Var
  %ln8wW = load i64, i64* %R1_Var
  %ln8wX = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8wU( i64* %Base_Arg, i64* %ln8wV, i64* %Hp_Arg, i64 %ln8wW, i64 %ln8wX, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8wq_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8wq_info$def to i8*)
define internal ghccc void @c8wq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8wq:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8wY = load i64*, i64** %Hp_Var
  %ln8wZ = getelementptr inbounds i64, i64* %ln8wY, i32 3
  %ln8x0 = ptrtoint i64* %ln8wZ to i64
  %ln8x1 = inttoptr i64 %ln8x0 to i64*
  store i64* %ln8x1, i64** %Hp_Var
  %ln8x2 = load i64*, i64** %Hp_Var
  %ln8x3 = ptrtoint i64* %ln8x2 to i64
  %ln8x4 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8x5 = bitcast i64* %ln8x4 to i64*
  %ln8x6 = load i64, i64* %ln8x5, !tbaa !4
  %ln8x7 = icmp ugt i64 %ln8x3, %ln8x6
  br i1 %ln8x7, label %c8wy, label %c8wx
c8wx:
  %ln8x9 = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln8x8 = load i64*, i64** %Hp_Var
  %ln8xa = getelementptr inbounds i64, i64* %ln8x8, i32 -2
  store i64 %ln8x9, i64* %ln8xa, !tbaa !2
  %ln8xc = load i64, i64* %R1_Var
  %ln8xb = load i64*, i64** %Hp_Var
  %ln8xd = getelementptr inbounds i64, i64* %ln8xb, i32 -1
  store i64 %ln8xc, i64* %ln8xd, !tbaa !2
  %ln8xf = load i64, i64* %R2_Var
  %ln8xe = load i64*, i64** %Hp_Var
  %ln8xg = getelementptr inbounds i64, i64* %ln8xe, i32 0
  store i64 %ln8xf, i64* %ln8xg, !tbaa !2
  %ln8xi = load i64*, i64** %Hp_Var
  %ln8xj = ptrtoint i64* %ln8xi to i64
  %ln8xk = add i64 %ln8xj, -14
  store i64 %ln8xk, i64* %R1_Var
  %ln8xl = load i64*, i64** %Sp_Var
  %ln8xm = getelementptr inbounds i64, i64* %ln8xl, i32 1
  %ln8xn = ptrtoint i64* %ln8xm to i64
  %ln8xo = inttoptr i64 %ln8xn to i64*
  store i64* %ln8xo, i64** %Sp_Var
  %ln8xp = load i64*, i64** %Sp_Var
  %ln8xq = getelementptr inbounds i64, i64* %ln8xp, i32 0
  %ln8xr = bitcast i64* %ln8xq to i64*
  %ln8xs = load i64, i64* %ln8xr, !tbaa !1
  %ln8xt = inttoptr i64 %ln8xs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xu = load i64*, i64** %Sp_Var
  %ln8xv = load i64*, i64** %Hp_Var
  %ln8xw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xt( i64* %Base_Arg, i64* %ln8xu, i64* %ln8xv, i64 %ln8xw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8wy:
  %ln8xx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8xx, !tbaa !4
  %ln8xy = load i64, i64* %R2_Var
  store i64 %ln8xy, i64* %R2_Var
  %ln8xz = load i64, i64* %R1_Var
  store i64 %ln8xz, i64* %R1_Var
  %ln8xA = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8xB = load i64*, i64** %Sp_Var
  %ln8xC = load i64*, i64** %Hp_Var
  %ln8xD = load i64, i64* %R1_Var
  %ln8xE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8xA( i64* %Base_Arg, i64* %ln8xB, i64* %ln8xC, i64 %ln8xD, i64 %ln8xE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct = type <{i64, i64}>
@Word_zdfShowCoqzuwordzuzdcshowsPrec_closure$def = internal global %Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshowsPrec_info$def to i64), i64 0}>
@Word_zdfShowCoqzuwordzuzdcshowsPrec_closure = alias i8* bitcast (%Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowsPrec_closure$def to i8*)
@Word_zdfShowCoqzuwordzuzdcshowsPrec_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshowsPrec_info$def to i8*)
define ghccc void @Word_zdfShowCoqzuwordzuzdcshowsPrec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshowsPrec_info$def to i64)),i64 48), i64 12884901911, i64 0, i64 21474836495}>
{
c8xN:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8xT = load i64*, i64** %Sp_Var
  %ln8xU = getelementptr inbounds i64, i64* %ln8xT, i32 -2
  %ln8xV = ptrtoint i64* %ln8xU to i64
  %ln8xW = icmp ult i64 %ln8xV, %SpLim_Arg
  br i1 %ln8xW, label %c8xO, label %c8xP
c8xP:
  %ln8xY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8xK_info$def to i64
  %ln8xX = load i64*, i64** %Sp_Var
  %ln8xZ = getelementptr inbounds i64, i64* %ln8xX, i32 -2
  store i64 %ln8xY, i64* %ln8xZ, !tbaa !1
  %ln8y0 = load i64, i64* %R3_Var
  store i64 %ln8y0, i64* %R2_Var
  %ln8y2 = load i64, i64* %R4_Var
  %ln8y1 = load i64*, i64** %Sp_Var
  %ln8y3 = getelementptr inbounds i64, i64* %ln8y1, i32 -1
  store i64 %ln8y2, i64* %ln8y3, !tbaa !1
  %ln8y4 = load i64*, i64** %Sp_Var
  %ln8y5 = getelementptr inbounds i64, i64* %ln8y4, i32 -2
  %ln8y6 = ptrtoint i64* %ln8y5 to i64
  %ln8y7 = inttoptr i64 %ln8y6 to i64*
  store i64* %ln8y7, i64** %Sp_Var
  %ln8y8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwzdcshow_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8y9 = load i64*, i64** %Sp_Var
  %ln8ya = load i64, i64* %R1_Var
  %ln8yb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8y8( i64* %Base_Arg, i64* %ln8y9, i64* %Hp_Arg, i64 %ln8ya, i64 %ln8yb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8xO:
  %ln8yc = load i64, i64* %R4_Var
  store i64 %ln8yc, i64* %R4_Var
  %ln8yd = load i64, i64* %R3_Var
  store i64 %ln8yd, i64* %R3_Var
  %ln8ye = load i64, i64* %R2_Var
  store i64 %ln8ye, i64* %R2_Var
  %ln8yf = ptrtoint %Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowsPrec_closure$def to i64
  store i64 %ln8yf, i64* %R1_Var
  %ln8yg = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8yh = bitcast i64* %ln8yg to i64*
  %ln8yi = load i64, i64* %ln8yh, !tbaa !4
  %ln8yj = inttoptr i64 %ln8yi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yk = load i64*, i64** %Sp_Var
  %ln8yl = load i64, i64* %R1_Var
  %ln8ym = load i64, i64* %R2_Var
  %ln8yn = load i64, i64* %R3_Var
  %ln8yo = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yj( i64* %Base_Arg, i64* %ln8yk, i64* %Hp_Arg, i64 %ln8yl, i64 %ln8ym, i64 %ln8yn, i64 %ln8yo, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8xK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8xK_info$def to i8*)
define internal ghccc void @c8xK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 32}>
{
c8xK:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8yp = load i64*, i64** %Hp_Var
  %ln8yq = getelementptr inbounds i64, i64* %ln8yp, i32 3
  %ln8yr = ptrtoint i64* %ln8yq to i64
  %ln8ys = inttoptr i64 %ln8yr to i64*
  store i64* %ln8ys, i64** %Hp_Var
  %ln8yt = load i64*, i64** %Hp_Var
  %ln8yu = ptrtoint i64* %ln8yt to i64
  %ln8yv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8yw = bitcast i64* %ln8yv to i64*
  %ln8yx = load i64, i64* %ln8yw, !tbaa !4
  %ln8yy = icmp ugt i64 %ln8yu, %ln8yx
  br i1 %ln8yy, label %c8xS, label %c8xR
c8xR:
  %ln8yA = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln8yz = load i64*, i64** %Hp_Var
  %ln8yB = getelementptr inbounds i64, i64* %ln8yz, i32 -2
  store i64 %ln8yA, i64* %ln8yB, !tbaa !2
  %ln8yD = load i64, i64* %R1_Var
  %ln8yC = load i64*, i64** %Hp_Var
  %ln8yE = getelementptr inbounds i64, i64* %ln8yC, i32 -1
  store i64 %ln8yD, i64* %ln8yE, !tbaa !2
  %ln8yG = load i64, i64* %R2_Var
  %ln8yF = load i64*, i64** %Hp_Var
  %ln8yH = getelementptr inbounds i64, i64* %ln8yF, i32 0
  store i64 %ln8yG, i64* %ln8yH, !tbaa !2
  %ln8yI = load i64*, i64** %Sp_Var
  %ln8yJ = getelementptr inbounds i64, i64* %ln8yI, i32 1
  %ln8yK = bitcast i64* %ln8yJ to i64*
  %ln8yL = load i64, i64* %ln8yK, !tbaa !1
  store i64 %ln8yL, i64* %R3_Var
  %ln8yN = load i64*, i64** %Hp_Var
  %ln8yO = ptrtoint i64* %ln8yN to i64
  %ln8yP = add i64 %ln8yO, -14
  store i64 %ln8yP, i64* %R2_Var
  %ln8yQ = load i64*, i64** %Sp_Var
  %ln8yR = getelementptr inbounds i64, i64* %ln8yQ, i32 2
  %ln8yS = ptrtoint i64* %ln8yR to i64
  %ln8yT = inttoptr i64 %ln8yS to i64*
  store i64* %ln8yT, i64** %Sp_Var
  %ln8yU = bitcast i8* @base_GHCziBase_zpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8yV = load i64*, i64** %Sp_Var
  %ln8yW = load i64*, i64** %Hp_Var
  %ln8yX = load i64, i64* %R1_Var
  %ln8yY = load i64, i64* %R2_Var
  %ln8yZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8yU( i64* %Base_Arg, i64* %ln8yV, i64* %ln8yW, i64 %ln8yX, i64 %ln8yY, i64 %ln8yZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8xS:
  %ln8z0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8z0, !tbaa !4
  %ln8z1 = load i64, i64* %R2_Var
  store i64 %ln8z1, i64* %R2_Var
  %ln8z2 = load i64, i64* %R1_Var
  store i64 %ln8z2, i64* %R1_Var
  %ln8z3 = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8z4 = load i64*, i64** %Sp_Var
  %ln8z5 = load i64*, i64** %Hp_Var
  %ln8z6 = load i64, i64* %R1_Var
  %ln8z7 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8z3( i64* %Base_Arg, i64* %ln8z4, i64* %ln8z5, i64 %ln8z6, i64 %ln8z7, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdfShowCoqzuword1_closure_struct = type <{i64, i64}>
@Word_zdfShowCoqzuword1_closure$def = internal global %Word_zdfShowCoqzuword1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuword1_info$def to i64), i64 0}>
@Word_zdfShowCoqzuword1_closure = alias i8* bitcast (%Word_zdfShowCoqzuword1_closure_struct* @Word_zdfShowCoqzuword1_closure$def to i8*)
@Word_zdfShowCoqzuword1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuword1_info$def to i8*)
define ghccc void @Word_zdfShowCoqzuword1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuword1_info$def to i64)),i64 48), i64 8589934607, i64 0, i64 38654705679}>
{
c8zg:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8zm = load i64*, i64** %Sp_Var
  %ln8zn = getelementptr inbounds i64, i64* %ln8zm, i32 -2
  %ln8zo = ptrtoint i64* %ln8zn to i64
  %ln8zp = icmp ult i64 %ln8zo, %SpLim_Arg
  br i1 %ln8zp, label %c8zh, label %c8zi
c8zi:
  %ln8zr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8zd_info$def to i64
  %ln8zq = load i64*, i64** %Sp_Var
  %ln8zs = getelementptr inbounds i64, i64* %ln8zq, i32 -2
  store i64 %ln8zr, i64* %ln8zs, !tbaa !1
  %ln8zt = load i64, i64* %R2_Var
  store i64 %ln8zt, i64* %R2_Var
  %ln8zv = load i64, i64* %R3_Var
  %ln8zu = load i64*, i64** %Sp_Var
  %ln8zw = getelementptr inbounds i64, i64* %ln8zu, i32 -1
  store i64 %ln8zv, i64* %ln8zw, !tbaa !1
  %ln8zx = load i64*, i64** %Sp_Var
  %ln8zy = getelementptr inbounds i64, i64* %ln8zx, i32 -2
  %ln8zz = ptrtoint i64* %ln8zy to i64
  %ln8zA = inttoptr i64 %ln8zz to i64*
  store i64* %ln8zA, i64** %Sp_Var
  %ln8zB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwzdcshow_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zC = load i64*, i64** %Sp_Var
  %ln8zD = load i64, i64* %R1_Var
  %ln8zE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zB( i64* %Base_Arg, i64* %ln8zC, i64* %Hp_Arg, i64 %ln8zD, i64 %ln8zE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8zh:
  %ln8zF = load i64, i64* %R3_Var
  store i64 %ln8zF, i64* %R3_Var
  %ln8zG = load i64, i64* %R2_Var
  store i64 %ln8zG, i64* %R2_Var
  %ln8zH = ptrtoint %Word_zdfShowCoqzuword1_closure_struct* @Word_zdfShowCoqzuword1_closure$def to i64
  store i64 %ln8zH, i64* %R1_Var
  %ln8zI = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8zJ = bitcast i64* %ln8zI to i64*
  %ln8zK = load i64, i64* %ln8zJ, !tbaa !4
  %ln8zL = inttoptr i64 %ln8zK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8zM = load i64*, i64** %Sp_Var
  %ln8zN = load i64, i64* %R1_Var
  %ln8zO = load i64, i64* %R2_Var
  %ln8zP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8zL( i64* %Base_Arg, i64* %ln8zM, i64* %Hp_Arg, i64 %ln8zN, i64 %ln8zO, i64 %ln8zP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8zd_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8zd_info$def to i8*)
define internal ghccc void @c8zd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 32}>
{
c8zd:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8zQ = load i64*, i64** %Hp_Var
  %ln8zR = getelementptr inbounds i64, i64* %ln8zQ, i32 3
  %ln8zS = ptrtoint i64* %ln8zR to i64
  %ln8zT = inttoptr i64 %ln8zS to i64*
  store i64* %ln8zT, i64** %Hp_Var
  %ln8zU = load i64*, i64** %Hp_Var
  %ln8zV = ptrtoint i64* %ln8zU to i64
  %ln8zW = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8zX = bitcast i64* %ln8zW to i64*
  %ln8zY = load i64, i64* %ln8zX, !tbaa !4
  %ln8zZ = icmp ugt i64 %ln8zV, %ln8zY
  br i1 %ln8zZ, label %c8zl, label %c8zk
c8zk:
  %ln8A1 = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %ln8A0 = load i64*, i64** %Hp_Var
  %ln8A2 = getelementptr inbounds i64, i64* %ln8A0, i32 -2
  store i64 %ln8A1, i64* %ln8A2, !tbaa !2
  %ln8A4 = load i64, i64* %R1_Var
  %ln8A3 = load i64*, i64** %Hp_Var
  %ln8A5 = getelementptr inbounds i64, i64* %ln8A3, i32 -1
  store i64 %ln8A4, i64* %ln8A5, !tbaa !2
  %ln8A7 = load i64, i64* %R2_Var
  %ln8A6 = load i64*, i64** %Hp_Var
  %ln8A8 = getelementptr inbounds i64, i64* %ln8A6, i32 0
  store i64 %ln8A7, i64* %ln8A8, !tbaa !2
  %ln8A9 = load i64*, i64** %Sp_Var
  %ln8Aa = getelementptr inbounds i64, i64* %ln8A9, i32 1
  %ln8Ab = bitcast i64* %ln8Aa to i64*
  %ln8Ac = load i64, i64* %ln8Ab, !tbaa !1
  store i64 %ln8Ac, i64* %R3_Var
  %ln8Ae = load i64*, i64** %Hp_Var
  %ln8Af = ptrtoint i64* %ln8Ae to i64
  %ln8Ag = add i64 %ln8Af, -14
  store i64 %ln8Ag, i64* %R2_Var
  %ln8Ah = load i64*, i64** %Sp_Var
  %ln8Ai = getelementptr inbounds i64, i64* %ln8Ah, i32 2
  %ln8Aj = ptrtoint i64* %ln8Ai to i64
  %ln8Ak = inttoptr i64 %ln8Aj to i64*
  store i64* %ln8Ak, i64** %Sp_Var
  %ln8Al = bitcast i8* @base_GHCziBase_zpzp_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Am = load i64*, i64** %Sp_Var
  %ln8An = load i64*, i64** %Hp_Var
  %ln8Ao = load i64, i64* %R1_Var
  %ln8Ap = load i64, i64* %R2_Var
  %ln8Aq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Al( i64* %Base_Arg, i64* %ln8Am, i64* %ln8An, i64 %ln8Ao, i64 %ln8Ap, i64 %ln8Aq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8zl:
  %ln8Ar = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8Ar, !tbaa !4
  %ln8As = load i64, i64* %R2_Var
  store i64 %ln8As, i64* %R2_Var
  %ln8At = load i64, i64* %R1_Var
  store i64 %ln8At, i64* %R1_Var
  %ln8Au = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Av = load i64*, i64** %Sp_Var
  %ln8Aw = load i64*, i64** %Hp_Var
  %ln8Ax = load i64, i64* %R1_Var
  %ln8Ay = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Au( i64* %Base_Arg, i64* %ln8Av, i64* %ln8Aw, i64 %ln8Ax, i64 %ln8Ay, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdfShowCoqzuwordzuzdcshowList_closure_struct = type <{i64, i64}>
@Word_zdfShowCoqzuwordzuzdcshowList_closure$def = internal global %Word_zdfShowCoqzuwordzuzdcshowList_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshowList_info$def to i64), i64 0}>
@Word_zdfShowCoqzuwordzuzdcshowList_closure = alias i8* bitcast (%Word_zdfShowCoqzuwordzuzdcshowList_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowList_closure$def to i8*)
@Word_zdfShowCoqzuwordzuzdcshowList_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshowList_info$def to i8*)
define ghccc void @Word_zdfShowCoqzuwordzuzdcshowList_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdfShowCoqzuwordzuzdcshowList_info$def to i64)),i64 72), i64 8589934607, i64 0, i64 4294967311}>
{
c8AE:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8AH = load i64, i64* %R3_Var
  store i64 %ln8AH, i64* %R4_Var
  %ln8AI = load i64, i64* %R2_Var
  store i64 %ln8AI, i64* %R3_Var
  %ln8AJ = ptrtoint %Word_zdfShowCoqzuword1_closure_struct* @Word_zdfShowCoqzuword1_closure$def to i64
  %ln8AK = add i64 %ln8AJ, 2
  store i64 %ln8AK, i64* %R2_Var
  %ln8AL = bitcast i8* @base_GHCziShow_showListzuzu_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8AM = load i64, i64* %R2_Var
  %ln8AN = load i64, i64* %R3_Var
  %ln8AO = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8AL( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8AM, i64 %ln8AN, i64 %ln8AO, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdfShowCoqzuword_closure_struct = type <{i64, i64, i64, i64, i64}>
@Word_zdfShowCoqzuword_closure$def = internal global %Word_zdfShowCoqzuword_closure_struct<{i64 ptrtoint (i8* @base_GHCziShow_CZCShow_static_info to i64), i64 add (i64 ptrtoint (%Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowsPrec_closure$def to i64),i64 3), i64 add (i64 ptrtoint (%Word_zdfShowCoqzuwordzuzdcshow_closure_struct* @Word_zdfShowCoqzuwordzuzdcshow_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Word_zdfShowCoqzuwordzuzdcshowList_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowList_closure$def to i64),i64 2), i64 0}>
@Word_zdfShowCoqzuword_closure = alias i8* bitcast (%Word_zdfShowCoqzuword_closure_struct* @Word_zdfShowCoqzuword_closure$def to i8*)
%Word_bs2i2_closure_struct = type <{i64, i64, i64, i64}>
@Word_bs2i2_closure$def = internal global %Word_bs2i2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i2_info$def to i64), i64 0, i64 0, i64 0}>
@Word_bs2i2_closure = alias i8* bitcast (%Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i8*)
@Word_bs2i2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i2_info$def to i8*)
define ghccc void @Word_bs2i2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i2_info$def to i64)),i64 80), i64 0, i64 4294967318}>
{
c8Bq:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8Bk = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Cm = load i64*, i64** %Sp_Var
  %ln8Cn = getelementptr inbounds i64, i64* %ln8Cm, i32 -4
  %ln8Co = ptrtoint i64* %ln8Cn to i64
  %ln8Cp = icmp ult i64 %ln8Co, %SpLim_Arg
  br i1 %ln8Cp, label %c8Br, label %c8Bs
c8Bs:
  %ln8Cq = ptrtoint i64* %Base_Arg to i64
  %ln8Cr = inttoptr i64 %ln8Cq to i8*
  %ln8Cs = load i64, i64* %R1_Var
  %ln8Ct = inttoptr i64 %ln8Cs to i8*
  %ln8Cu = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8Cv = call ccc i8* (i8*, i8*) %ln8Cu( i8* %ln8Cr, i8* %ln8Ct ) nounwind
  %ln8Cw = ptrtoint i8* %ln8Cv to i64
  store i64 %ln8Cw, i64* %lc8Bk
  %ln8Cx = load i64, i64* %lc8Bk
  %ln8Cy = icmp eq i64 %ln8Cx, 0
  br i1 %ln8Cy, label %c8Bm, label %c8Bl
c8Bl:
  %ln8CA = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8Cz = load i64*, i64** %Sp_Var
  %ln8CB = getelementptr inbounds i64, i64* %ln8Cz, i32 -2
  store i64 %ln8CA, i64* %ln8CB, !tbaa !1
  %ln8CD = load i64, i64* %lc8Bk
  %ln8CC = load i64*, i64** %Sp_Var
  %ln8CE = getelementptr inbounds i64, i64* %ln8CC, i32 -1
  store i64 %ln8CD, i64* %ln8CE, !tbaa !1
  %ln8CG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Bn_info$def to i64
  %ln8CF = load i64*, i64** %Sp_Var
  %ln8CH = getelementptr inbounds i64, i64* %ln8CF, i32 -3
  store i64 %ln8CG, i64* %ln8CH, !tbaa !1
  %ln8CI = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_zzeroBigNat_closure to i64
  store i64 %ln8CI, i64* %R1_Var
  %ln8CJ = load i64*, i64** %Sp_Var
  %ln8CK = getelementptr inbounds i64, i64* %ln8CJ, i32 -3
  %ln8CL = ptrtoint i64* %ln8CK to i64
  %ln8CM = inttoptr i64 %ln8CL to i64*
  store i64* %ln8CM, i64** %Sp_Var
  %ln8CN = load i64, i64* %R1_Var
  %ln8CO = and i64 %ln8CN, 7
  %ln8CP = icmp ne i64 %ln8CO, 0
  br i1 %ln8CP, label %u8Cj, label %c8Bo
c8Bo:
  %ln8CR = load i64, i64* %R1_Var
  %ln8CS = inttoptr i64 %ln8CR to i64*
  %ln8CT = load i64, i64* %ln8CS, !tbaa !3
  %ln8CU = inttoptr i64 %ln8CT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8CV = load i64*, i64** %Sp_Var
  %ln8CW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8CU( i64* %Base_Arg, i64* %ln8CV, i64* %Hp_Arg, i64 %ln8CW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Cj:
  %ln8CX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Bn_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8CY = load i64*, i64** %Sp_Var
  %ln8CZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8CX( i64* %Base_Arg, i64* %ln8CY, i64* %Hp_Arg, i64 %ln8CZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Bm:
  %ln8D1 = load i64, i64* %R1_Var
  %ln8D2 = inttoptr i64 %ln8D1 to i64*
  %ln8D3 = load i64, i64* %ln8D2, !tbaa !3
  %ln8D4 = inttoptr i64 %ln8D3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8D5 = load i64*, i64** %Sp_Var
  %ln8D6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8D4( i64* %Base_Arg, i64* %ln8D5, i64* %Hp_Arg, i64 %ln8D6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Br:
  %ln8D7 = load i64, i64* %R1_Var
  store i64 %ln8D7, i64* %R1_Var
  %ln8D8 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8D9 = bitcast i64* %ln8D8 to i64*
  %ln8Da = load i64, i64* %ln8D9, !tbaa !4
  %ln8Db = inttoptr i64 %ln8Da to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dc = load i64*, i64** %Sp_Var
  %ln8Dd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Db( i64* %Base_Arg, i64* %ln8Dc, i64* %Hp_Arg, i64 %ln8Dd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Bn_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Bn_info$def to i8*)
define internal ghccc void @c8Bn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8Bn:
  %ls7ZU = alloca i64, i32 1
  %ls7ZW = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8De = add i64 %R1_Arg, 7
  %ln8Df = inttoptr i64 %ln8De to i64*
  %ln8Dg = load i64, i64* %ln8Df, !tbaa !3
  store i64 %ln8Dg, i64* %ls7ZU
  %ln8Dh = load i64, i64* %ls7ZU
  %ln8Di = add i64 %ln8Dh, 8
  %ln8Dj = inttoptr i64 %ln8Di to i64*
  %ln8Dk = load i64, i64* %ln8Dj, !tbaa !5
  %ln8Dl = lshr i64 %ln8Dk, 3
  store i64 %ln8Dl, i64* %ls7ZW
  %ln8Dm = load i64, i64* %ls7ZW
  switch i64 %ln8Dm, label %u8Cd [i64 1, label %u8Ce]
u8Cd:
  %ln8Do = load i64, i64* %ls7ZW
  %ln8Dn = load i64*, i64** %Sp_Var
  %ln8Dp = getelementptr inbounds i64, i64* %ln8Dn, i32 -1
  store i64 %ln8Do, i64* %ln8Dp, !tbaa !1
  %ln8Dr = load i64, i64* %ls7ZU
  %ln8Dq = load i64*, i64** %Sp_Var
  %ln8Ds = getelementptr inbounds i64, i64* %ln8Dq, i32 0
  store i64 %ln8Dr, i64* %ln8Ds, !tbaa !1
  %ln8Dt = load i64*, i64** %Sp_Var
  %ln8Du = getelementptr inbounds i64, i64* %ln8Dt, i32 -1
  %ln8Dv = ptrtoint i64* %ln8Du to i64
  %ln8Dw = inttoptr i64 %ln8Dv to i64*
  store i64* %ln8Dw, i64** %Sp_Var
  %ln8Dx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BD_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Dy = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Dx( i64* %Base_Arg, i64* %ln8Dy, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ce:
  %ln8DA = load i64, i64* %ls7ZW
  %ln8Dz = load i64*, i64** %Sp_Var
  %ln8DB = getelementptr inbounds i64, i64* %ln8Dz, i32 -1
  store i64 %ln8DA, i64* %ln8DB, !tbaa !1
  %ln8DD = load i64, i64* %ls7ZU
  %ln8DC = load i64*, i64** %Sp_Var
  %ln8DE = getelementptr inbounds i64, i64* %ln8DC, i32 0
  store i64 %ln8DD, i64* %ln8DE, !tbaa !1
  %ln8DF = load i64*, i64** %Sp_Var
  %ln8DG = getelementptr inbounds i64, i64* %ln8DF, i32 -1
  %ln8DH = ptrtoint i64* %ln8DG to i64
  %ln8DI = inttoptr i64 %ln8DH to i64*
  store i64* %ln8DI, i64** %Sp_Var
  %ln8DJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BO_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8DK = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8DJ( i64* %Base_Arg, i64* %ln8DK, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8BO_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BO_entry$def to i8*)
define internal ghccc void @c8BO_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8BO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls7ZU = alloca i64, i32 1
  %ls7ZY = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7ZW = alloca i64, i32 1
  %ln8DL = load i64*, i64** %Hp_Var
  %ln8DM = getelementptr inbounds i64, i64* %ln8DL, i32 2
  %ln8DN = ptrtoint i64* %ln8DM to i64
  %ln8DO = inttoptr i64 %ln8DN to i64*
  store i64* %ln8DO, i64** %Hp_Var
  %ln8DP = load i64*, i64** %Hp_Var
  %ln8DQ = ptrtoint i64* %ln8DP to i64
  %ln8DR = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8DS = bitcast i64* %ln8DR to i64*
  %ln8DT = load i64, i64* %ln8DS, !tbaa !4
  %ln8DU = icmp ugt i64 %ln8DQ, %ln8DT
  br i1 %ln8DU, label %c8BS, label %c8BR
c8BR:
  %ln8DV = load i64*, i64** %Sp_Var
  %ln8DW = getelementptr inbounds i64, i64* %ln8DV, i32 1
  %ln8DX = bitcast i64* %ln8DW to i64*
  %ln8DY = load i64, i64* %ln8DX, !tbaa !1
  store i64 %ln8DY, i64* %ls7ZU
  %ln8DZ = load i64, i64* %ls7ZU
  %ln8E0 = add i64 %ln8DZ, 16
  %ln8E1 = inttoptr i64 %ln8E0 to i64*
  %ln8E2 = load i64, i64* %ln8E1, !tbaa !5
  store i64 %ln8E2, i64* %ls7ZY
  %ln8E3 = load i64, i64* %ls7ZY
  %ln8E4 = icmp sge i64 %ln8E3, 0
  %ln8E5 = zext i1 %ln8E4 to i64
  %ln8E6 = and i64 %ln8E5, 1
  switch i64 %ln8E6, label %c8C9 [i64 0, label %c8C9
i64 1, label %c8Cc]
c8C9:
  %ln8E8 = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_Jpzh_con_info to i64
  %ln8E7 = load i64*, i64** %Hp_Var
  %ln8E9 = getelementptr inbounds i64, i64* %ln8E7, i32 -1
  store i64 %ln8E8, i64* %ln8E9, !tbaa !2
  %ln8Eb = load i64, i64* %ls7ZU
  %ln8Ea = load i64*, i64** %Hp_Var
  %ln8Ec = getelementptr inbounds i64, i64* %ln8Ea, i32 0
  store i64 %ln8Eb, i64* %ln8Ec, !tbaa !2
  %ln8Ee = load i64*, i64** %Hp_Var
  %ln8Ef = ptrtoint i64* %ln8Ee to i64
  %ln8Eg = add i64 %ln8Ef, -6
  store i64 %ln8Eg, i64* %R1_Var
  %ln8Eh = load i64*, i64** %Sp_Var
  %ln8Ei = getelementptr inbounds i64, i64* %ln8Eh, i32 2
  %ln8Ej = ptrtoint i64* %ln8Ei to i64
  %ln8Ek = inttoptr i64 %ln8Ej to i64*
  store i64* %ln8Ek, i64** %Sp_Var
  %ln8El = load i64*, i64** %Sp_Var
  %ln8Em = getelementptr inbounds i64, i64* %ln8El, i32 0
  %ln8En = bitcast i64* %ln8Em to i64*
  %ln8Eo = load i64, i64* %ln8En, !tbaa !1
  %ln8Ep = inttoptr i64 %ln8Eo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Eq = load i64*, i64** %Sp_Var
  %ln8Er = load i64*, i64** %Hp_Var
  %ln8Es = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ep( i64* %Base_Arg, i64* %ln8Eq, i64* %ln8Er, i64 %ln8Es, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Cc:
  %ln8Eu = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_Szh_con_info to i64
  %ln8Et = load i64*, i64** %Hp_Var
  %ln8Ev = getelementptr inbounds i64, i64* %ln8Et, i32 -1
  store i64 %ln8Eu, i64* %ln8Ev, !tbaa !2
  %ln8Ex = load i64, i64* %ls7ZY
  %ln8Ew = load i64*, i64** %Hp_Var
  %ln8Ey = getelementptr inbounds i64, i64* %ln8Ew, i32 0
  store i64 %ln8Ex, i64* %ln8Ey, !tbaa !2
  %ln8EA = load i64*, i64** %Hp_Var
  %ln8EB = ptrtoint i64* %ln8EA to i64
  %ln8EC = add i64 %ln8EB, -7
  store i64 %ln8EC, i64* %R1_Var
  %ln8ED = load i64*, i64** %Sp_Var
  %ln8EE = getelementptr inbounds i64, i64* %ln8ED, i32 2
  %ln8EF = ptrtoint i64* %ln8EE to i64
  %ln8EG = inttoptr i64 %ln8EF to i64*
  store i64* %ln8EG, i64** %Sp_Var
  %ln8EH = load i64*, i64** %Sp_Var
  %ln8EI = getelementptr inbounds i64, i64* %ln8EH, i32 0
  %ln8EJ = bitcast i64* %ln8EI to i64*
  %ln8EK = load i64, i64* %ln8EJ, !tbaa !1
  %ln8EL = inttoptr i64 %ln8EK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8EM = load i64*, i64** %Sp_Var
  %ln8EN = load i64*, i64** %Hp_Var
  %ln8EO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8EL( i64* %Base_Arg, i64* %ln8EM, i64* %ln8EN, i64 %ln8EO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8BS:
  %ln8EP = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8EP, !tbaa !4
  %ln8EQ = load i64*, i64** %Sp_Var
  %ln8ER = getelementptr inbounds i64, i64* %ln8EQ, i32 0
  %ln8ES = bitcast i64* %ln8ER to i64*
  %ln8ET = load i64, i64* %ln8ES, !tbaa !1
  store i64 %ln8ET, i64* %ls7ZW
  %ln8EV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BM_info$def to i64
  %ln8EU = load i64*, i64** %Sp_Var
  %ln8EW = getelementptr inbounds i64, i64* %ln8EU, i32 0
  store i64 %ln8EV, i64* %ln8EW, !tbaa !1
  %ln8EX = load i64, i64* %ls7ZW
  store i64 %ln8EX, i64* %R1_Var
  %ln8EY = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8EZ = load i64*, i64** %Sp_Var
  %ln8F0 = load i64*, i64** %Hp_Var
  %ln8F1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8EY( i64* %Base_Arg, i64* %ln8EZ, i64* %ln8F0, i64 %ln8F1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8BM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BM_info$def to i8*)
define internal ghccc void @c8BM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 32}>
{
c8BM:
  %ln8F2 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8F2, !tbaa !1
  %ln8F3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BO_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8F3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8BD_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BD_entry$def to i8*)
define internal ghccc void @c8BD_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c8BD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls7ZW = alloca i64, i32 1
  %ln8F4 = load i64*, i64** %Hp_Var
  %ln8F5 = getelementptr inbounds i64, i64* %ln8F4, i32 2
  %ln8F6 = ptrtoint i64* %ln8F5 to i64
  %ln8F7 = inttoptr i64 %ln8F6 to i64*
  store i64* %ln8F7, i64** %Hp_Var
  %ln8F8 = load i64*, i64** %Hp_Var
  %ln8F9 = ptrtoint i64* %ln8F8 to i64
  %ln8Fa = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Fb = bitcast i64* %ln8Fa to i64*
  %ln8Fc = load i64, i64* %ln8Fb, !tbaa !4
  %ln8Fd = icmp ugt i64 %ln8F9, %ln8Fc
  br i1 %ln8Fd, label %c8BK, label %c8BJ
c8BJ:
  %ln8Ff = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_Jpzh_con_info to i64
  %ln8Fe = load i64*, i64** %Hp_Var
  %ln8Fg = getelementptr inbounds i64, i64* %ln8Fe, i32 -1
  store i64 %ln8Ff, i64* %ln8Fg, !tbaa !2
  %ln8Fi = load i64*, i64** %Sp_Var
  %ln8Fj = getelementptr inbounds i64, i64* %ln8Fi, i32 1
  %ln8Fk = bitcast i64* %ln8Fj to i64*
  %ln8Fl = load i64, i64* %ln8Fk, !tbaa !1
  %ln8Fh = load i64*, i64** %Hp_Var
  %ln8Fm = getelementptr inbounds i64, i64* %ln8Fh, i32 0
  store i64 %ln8Fl, i64* %ln8Fm, !tbaa !2
  %ln8Fo = load i64*, i64** %Hp_Var
  %ln8Fp = ptrtoint i64* %ln8Fo to i64
  %ln8Fq = add i64 %ln8Fp, -6
  store i64 %ln8Fq, i64* %R1_Var
  %ln8Fr = load i64*, i64** %Sp_Var
  %ln8Fs = getelementptr inbounds i64, i64* %ln8Fr, i32 2
  %ln8Ft = ptrtoint i64* %ln8Fs to i64
  %ln8Fu = inttoptr i64 %ln8Ft to i64*
  store i64* %ln8Fu, i64** %Sp_Var
  %ln8Fv = load i64*, i64** %Sp_Var
  %ln8Fw = getelementptr inbounds i64, i64* %ln8Fv, i32 0
  %ln8Fx = bitcast i64* %ln8Fw to i64*
  %ln8Fy = load i64, i64* %ln8Fx, !tbaa !1
  %ln8Fz = inttoptr i64 %ln8Fy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8FA = load i64*, i64** %Sp_Var
  %ln8FB = load i64*, i64** %Hp_Var
  %ln8FC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Fz( i64* %Base_Arg, i64* %ln8FA, i64* %ln8FB, i64 %ln8FC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8BK:
  %ln8FD = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8FD, !tbaa !4
  %ln8FE = load i64*, i64** %Sp_Var
  %ln8FF = getelementptr inbounds i64, i64* %ln8FE, i32 0
  %ln8FG = bitcast i64* %ln8FF to i64*
  %ln8FH = load i64, i64* %ln8FG, !tbaa !1
  store i64 %ln8FH, i64* %ls7ZW
  %ln8FJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BC_info$def to i64
  %ln8FI = load i64*, i64** %Sp_Var
  %ln8FK = getelementptr inbounds i64, i64* %ln8FI, i32 0
  store i64 %ln8FJ, i64* %ln8FK, !tbaa !1
  %ln8FL = load i64, i64* %ls7ZW
  store i64 %ln8FL, i64* %R1_Var
  %ln8FM = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8FN = load i64*, i64** %Sp_Var
  %ln8FO = load i64*, i64** %Hp_Var
  %ln8FP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8FM( i64* %Base_Arg, i64* %ln8FN, i64* %ln8FO, i64 %ln8FP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8BC_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BC_info$def to i8*)
define internal ghccc void @c8BC_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 32}>
{
c8BC:
  %ln8FQ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %ln8FQ, !tbaa !1
  %ln8FR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8BD_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8FR( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwbuf2i_closure_struct = type <{i64, i64}>
@Word_zdwbuf2i_closure$def = internal global %Word_zdwbuf2i_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbuf2i_info$def to i64), i64 0}>
@Word_zdwbuf2i_closure = alias i8* bitcast (%Word_zdwbuf2i_closure_struct* @Word_zdwbuf2i_closure$def to i8*)
@s80q_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s80q_info$def to i8*)
define internal ghccc void @s80q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 17}>
{
c8GU:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8H9 = load i64*, i64** %Sp_Var
  %ln8Ha = getelementptr inbounds i64, i64* %ln8H9, i32 -2
  %ln8Hb = ptrtoint i64* %ln8Ha to i64
  %ln8Hc = icmp ult i64 %ln8Hb, %SpLim_Arg
  br i1 %ln8Hc, label %c8GV, label %c8GW
c8GW:
  %ln8He = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Hd = load i64*, i64** %Sp_Var
  %ln8Hf = getelementptr inbounds i64, i64* %ln8Hd, i32 -2
  store i64 %ln8He, i64* %ln8Hf, !tbaa !1
  %ln8Hh = load i64, i64* %R1_Var
  %ln8Hg = load i64*, i64** %Sp_Var
  %ln8Hi = getelementptr inbounds i64, i64* %ln8Hg, i32 -1
  store i64 %ln8Hh, i64* %ln8Hi, !tbaa !1
  %ln8Hl = load i64, i64* %R1_Var
  %ln8Hm = add i64 %ln8Hl, 16
  %ln8Hn = inttoptr i64 %ln8Hm to i64*
  %ln8Ho = load i64, i64* %ln8Hn, !tbaa !3
  store i64 %ln8Ho, i64* %R2_Var
  %ln8Hp = load i64*, i64** %Sp_Var
  %ln8Hq = getelementptr inbounds i64, i64* %ln8Hp, i32 -2
  %ln8Hr = ptrtoint i64* %ln8Hq to i64
  %ln8Hs = inttoptr i64 %ln8Hr to i64*
  store i64* %ln8Hs, i64** %Sp_Var
  %ln8Ht = bitcast i8* @integerzmgmp_GHCziIntegerziType_zdwbigNatToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Hu = load i64*, i64** %Sp_Var
  %ln8Hv = load i64, i64* %R1_Var
  %ln8Hw = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ht( i64* %Base_Arg, i64* %ln8Hu, i64* %Hp_Arg, i64 %ln8Hv, i64 %ln8Hw, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8GV:
  %ln8Hx = load i64, i64* %R1_Var
  store i64 %ln8Hx, i64* %R1_Var
  %ln8Hy = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Hz = bitcast i64* %ln8Hy to i64*
  %ln8HA = load i64, i64* %ln8Hz, !tbaa !4
  %ln8HB = inttoptr i64 %ln8HA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8HC = load i64*, i64** %Sp_Var
  %ln8HD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8HB( i64* %Base_Arg, i64* %ln8HC, i64* %Hp_Arg, i64 %ln8HD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwbuf2i_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbuf2i_info$def to i8*)
define ghccc void @Word_zdwbuf2i_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbuf2i_info$def to i64)),i64 88), i64 17179869200, i64 0, i64 12884901903}>
{
c8H0:
  %ls807 = alloca i64, i32 1
  %lc8Gt = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls80b = alloca i64, i32 1
  %ls80e = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8HE = load i64*, i64** %Sp_Var
  %ln8HF = getelementptr inbounds i64, i64* %ln8HE, i32 -3
  %ln8HG = ptrtoint i64* %ln8HF to i64
  %ln8HH = icmp ult i64 %ln8HG, %SpLim_Arg
  br i1 %ln8HH, label %c8H1, label %c8H2
c8H2:
  %ln8HI = load i64, i64* %R3_Var
  switch i64 %ln8HI, label %c8GY [i64 0, label %c8GZ]
c8GY:
  %ln8HJ = load i64, i64* %R4_Var
  %ln8HK = load i64, i64* %R2_Var
  %ln8HL = add i64 %ln8HJ, %ln8HK
  store i64 %ln8HL, i64* %ls807
  %ln8HM = load i64, i64* %R3_Var
  store i64 %ln8HM, i64* %lc8Gt
  %ln8HN = load i64, i64* %ls807
  %ln8HO = inttoptr i64 %ln8HN to i8*
  %ln8HP = load i64, i64* %lc8Gt
  %ln8HQ = bitcast i8* @integer_gmp_rscan_nzbyte to i64 (i8*, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8HR = call ccc i64 (i8*, i64, i64) %ln8HQ( i8* %ln8HO, i64 0, i64 %ln8HP ) nounwind
  store i64 %ln8HR, i64* %ls80b
  %ln8HS = load i64, i64* %ls80b
  switch i64 %ln8HS, label %c8H4 [i64 0, label %c8GZ]
c8H4:
  %ln8HU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8GI_info$def to i64
  %ln8HT = load i64*, i64** %Sp_Var
  %ln8HV = getelementptr inbounds i64, i64* %ln8HT, i32 -3
  store i64 %ln8HU, i64* %ln8HV, !tbaa !1
  %ln8HW = load i64, i64* %ls80b
  %ln8HX = add i64 %ln8HW, 7
  store i64 %ln8HX, i64* %ls80e
  %ln8HY = load i64, i64* %ls80e
  %ln8HZ = load i64, i64* %ls80e
  %ln8I0 = ashr i64 %ln8HZ, 63
  %ln8I1 = and i64 %ln8I0, 7
  %ln8I2 = add i64 %ln8HY, %ln8I1
  %ln8I3 = ashr i64 %ln8I2, 3
  %ln8I4 = shl i64 %ln8I3, 3
  store i64 %ln8I4, i64* %R1_Var
  %ln8I6 = load i64, i64* %ls807
  %ln8I5 = load i64*, i64** %Sp_Var
  %ln8I7 = getelementptr inbounds i64, i64* %ln8I5, i32 -2
  store i64 %ln8I6, i64* %ln8I7, !tbaa !1
  %ln8I9 = load i64, i64* %ls80b
  %ln8I8 = load i64*, i64** %Sp_Var
  %ln8Ia = getelementptr inbounds i64, i64* %ln8I8, i32 -1
  store i64 %ln8I9, i64* %ln8Ia, !tbaa !1
  %ln8Ib = load i64*, i64** %Sp_Var
  %ln8Ic = getelementptr inbounds i64, i64* %ln8Ib, i32 -3
  %ln8Id = ptrtoint i64* %ln8Ic to i64
  %ln8Ie = inttoptr i64 %ln8Id to i64*
  store i64* %ln8Ie, i64** %Sp_Var
  %ln8If = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ig = load i64*, i64** %Sp_Var
  %ln8Ih = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8If( i64* %Base_Arg, i64* %ln8Ig, i64* %Hp_Arg, i64 %ln8Ih, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8GZ:
  %ln8Ii = ptrtoint %Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64
  store i64 %ln8Ii, i64* %R1_Var
  %ln8Ij = load i64*, i64** %Sp_Var
  %ln8Ik = getelementptr inbounds i64, i64* %ln8Ij, i32 0
  %ln8Il = bitcast i64* %ln8Ik to i64*
  %ln8Im = load i64, i64* %ln8Il, !tbaa !1
  %ln8In = inttoptr i64 %ln8Im to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Io = load i64*, i64** %Sp_Var
  %ln8Ip = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8In( i64* %Base_Arg, i64* %ln8Io, i64* %Hp_Arg, i64 %ln8Ip, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8H1:
  %ln8Iq = load i64, i64* %R4_Var
  store i64 %ln8Iq, i64* %R4_Var
  %ln8Ir = load i64, i64* %R3_Var
  store i64 %ln8Ir, i64* %R3_Var
  %ln8Is = load i64, i64* %R2_Var
  store i64 %ln8Is, i64* %R2_Var
  %ln8It = ptrtoint %Word_zdwbuf2i_closure_struct* @Word_zdwbuf2i_closure$def to i64
  store i64 %ln8It, i64* %R1_Var
  %ln8Iu = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Iv = bitcast i64* %ln8Iu to i64*
  %ln8Iw = load i64, i64* %ln8Iv, !tbaa !4
  %ln8Ix = inttoptr i64 %ln8Iw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Iy = load i64*, i64** %Sp_Var
  %ln8Iz = load i64, i64* %R1_Var
  %ln8IA = load i64, i64* %R2_Var
  %ln8IB = load i64, i64* %R3_Var
  %ln8IC = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ix( i64* %Base_Arg, i64* %ln8Iy, i64* %Hp_Arg, i64 %ln8Iz, i64 %ln8IA, i64 %ln8IB, i64 %ln8IC, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8GI_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8GI_info$def to i8*)
define internal ghccc void @c8GI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 194, i64 32}>
{
c8GI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8ID = load i64*, i64** %Hp_Var
  %ln8IE = getelementptr inbounds i64, i64* %ln8ID, i32 3
  %ln8IF = ptrtoint i64* %ln8IE to i64
  %ln8IG = inttoptr i64 %ln8IF to i64*
  store i64* %ln8IG, i64** %Hp_Var
  %ln8IH = load i64*, i64** %Hp_Var
  %ln8II = ptrtoint i64* %ln8IH to i64
  %ln8IJ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8IK = bitcast i64* %ln8IJ to i64*
  %ln8IL = load i64, i64* %ln8IK, !tbaa !4
  %ln8IM = icmp ugt i64 %ln8II, %ln8IL
  br i1 %ln8IM, label %c8H7, label %c8H6
c8H6:
  %ln8IO = load i64, i64* %R1_Var
  %ln8IP = add i64 %ln8IO, 16
  %ln8IQ = inttoptr i64 %ln8IP to i8*
  %ln8IR = load i64*, i64** %Sp_Var
  %ln8IS = getelementptr inbounds i64, i64* %ln8IR, i32 1
  %ln8IT = bitcast i64* %ln8IS to i64*
  %ln8IU = load i64, i64* %ln8IT, !tbaa !1
  %ln8IV = inttoptr i64 %ln8IU to i8*
  %ln8IW = load i64*, i64** %Sp_Var
  %ln8IX = getelementptr inbounds i64, i64* %ln8IW, i32 2
  %ln8IY = bitcast i64* %ln8IX to i64*
  %ln8IZ = load i64, i64* %ln8IY, !tbaa !1
  %ln8J0 = bitcast i8* @integer_gmp_mpn_import to void (i8*, i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i8*, i64, i64, i64) %ln8J0( i8* %ln8IQ, i8* %ln8IV, i64 0, i64 %ln8IZ, i64 0 ) nounwind
  %ln8J2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s80q_info$def to i64
  %ln8J1 = load i64*, i64** %Hp_Var
  %ln8J3 = getelementptr inbounds i64, i64* %ln8J1, i32 -2
  store i64 %ln8J2, i64* %ln8J3, !tbaa !2
  %ln8J5 = load i64, i64* %R1_Var
  %ln8J4 = load i64*, i64** %Hp_Var
  %ln8J6 = getelementptr inbounds i64, i64* %ln8J4, i32 0
  store i64 %ln8J5, i64* %ln8J6, !tbaa !2
  %ln8J7 = load i64*, i64** %Hp_Var
  %ln8J8 = getelementptr inbounds i64, i64* %ln8J7, i32 -2
  %ln8J9 = ptrtoint i64* %ln8J8 to i64
  store i64 %ln8J9, i64* %R1_Var
  %ln8Ja = load i64*, i64** %Sp_Var
  %ln8Jb = getelementptr inbounds i64, i64* %ln8Ja, i32 3
  %ln8Jc = ptrtoint i64* %ln8Jb to i64
  %ln8Jd = inttoptr i64 %ln8Jc to i64*
  store i64* %ln8Jd, i64** %Sp_Var
  %ln8Je = load i64*, i64** %Sp_Var
  %ln8Jf = getelementptr inbounds i64, i64* %ln8Je, i32 0
  %ln8Jg = bitcast i64* %ln8Jf to i64*
  %ln8Jh = load i64, i64* %ln8Jg, !tbaa !1
  %ln8Ji = inttoptr i64 %ln8Jh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jj = load i64*, i64** %Sp_Var
  %ln8Jk = load i64*, i64** %Hp_Var
  %ln8Jl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ji( i64* %Base_Arg, i64* %ln8Jj, i64* %ln8Jk, i64 %ln8Jl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8H7:
  %ln8Jm = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln8Jm, !tbaa !4
  %ln8Jn = load i64, i64* %R1_Var
  store i64 %ln8Jn, i64* %R1_Var
  %ln8Jo = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Jp = load i64*, i64** %Sp_Var
  %ln8Jq = load i64*, i64** %Hp_Var
  %ln8Jr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Jo( i64* %Base_Arg, i64* %ln8Jp, i64* %ln8Jq, i64 %ln8Jr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_buf2i1_closure_struct = type <{i64, i64}>
@Word_buf2i1_closure$def = internal global %Word_buf2i1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i1_info$def to i64), i64 0}>
@Word_buf2i1_closure = alias i8* bitcast (%Word_buf2i1_closure_struct* @Word_buf2i1_closure$def to i8*)
@Word_buf2i1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i1_info$def to i8*)
define ghccc void @Word_buf2i1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i1_info$def to i64)),i64 88), i64 17179869207, i64 0, i64 21474836495}>
{
c8JJ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8K4 = load i64*, i64** %Sp_Var
  %ln8K5 = getelementptr inbounds i64, i64* %ln8K4, i32 -3
  %ln8K6 = ptrtoint i64* %ln8K5 to i64
  %ln8K7 = icmp ult i64 %ln8K6, %SpLim_Arg
  br i1 %ln8K7, label %c8JS, label %c8JT
c8JT:
  %ln8K9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JG_info$def to i64
  %ln8K8 = load i64*, i64** %Sp_Var
  %ln8Ka = getelementptr inbounds i64, i64* %ln8K8, i32 -3
  store i64 %ln8K9, i64* %ln8Ka, !tbaa !1
  %ln8Kb = load i64, i64* %R2_Var
  store i64 %ln8Kb, i64* %R1_Var
  %ln8Kd = load i64, i64* %R3_Var
  %ln8Kc = load i64*, i64** %Sp_Var
  %ln8Ke = getelementptr inbounds i64, i64* %ln8Kc, i32 -2
  store i64 %ln8Kd, i64* %ln8Ke, !tbaa !1
  %ln8Kg = load i64, i64* %R4_Var
  %ln8Kf = load i64*, i64** %Sp_Var
  %ln8Kh = getelementptr inbounds i64, i64* %ln8Kf, i32 -1
  store i64 %ln8Kg, i64* %ln8Kh, !tbaa !1
  %ln8Ki = load i64*, i64** %Sp_Var
  %ln8Kj = getelementptr inbounds i64, i64* %ln8Ki, i32 -3
  %ln8Kk = ptrtoint i64* %ln8Kj to i64
  %ln8Kl = inttoptr i64 %ln8Kk to i64*
  store i64* %ln8Kl, i64** %Sp_Var
  %ln8Km = load i64, i64* %R1_Var
  %ln8Kn = and i64 %ln8Km, 7
  %ln8Ko = icmp ne i64 %ln8Kn, 0
  br i1 %ln8Ko, label %u8K2, label %c8JH
c8JH:
  %ln8Kq = load i64, i64* %R1_Var
  %ln8Kr = inttoptr i64 %ln8Kq to i64*
  %ln8Ks = load i64, i64* %ln8Kr, !tbaa !3
  %ln8Kt = inttoptr i64 %ln8Ks to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ku = load i64*, i64** %Sp_Var
  %ln8Kv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Kt( i64* %Base_Arg, i64* %ln8Ku, i64* %Hp_Arg, i64 %ln8Kv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8K2:
  %ln8Kw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Kx = load i64*, i64** %Sp_Var
  %ln8Ky = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Kw( i64* %Base_Arg, i64* %ln8Kx, i64* %Hp_Arg, i64 %ln8Ky, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8JS:
  %ln8Kz = load i64, i64* %R4_Var
  store i64 %ln8Kz, i64* %R4_Var
  %ln8KA = load i64, i64* %R3_Var
  store i64 %ln8KA, i64* %R3_Var
  %ln8KB = load i64, i64* %R2_Var
  store i64 %ln8KB, i64* %R2_Var
  %ln8KC = ptrtoint %Word_buf2i1_closure_struct* @Word_buf2i1_closure$def to i64
  store i64 %ln8KC, i64* %R1_Var
  %ln8KD = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8KE = bitcast i64* %ln8KD to i64*
  %ln8KF = load i64, i64* %ln8KE, !tbaa !4
  %ln8KG = inttoptr i64 %ln8KF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8KH = load i64*, i64** %Sp_Var
  %ln8KI = load i64, i64* %R1_Var
  %ln8KJ = load i64, i64* %R2_Var
  %ln8KK = load i64, i64* %R3_Var
  %ln8KL = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8KG( i64* %Base_Arg, i64* %ln8KH, i64* %Hp_Arg, i64 %ln8KI, i64 %ln8KJ, i64 %ln8KK, i64 %ln8KL, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8JG_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JG_info$def to i8*)
define internal ghccc void @c8JG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JG_info$def to i64)),i64 88), i64 2, i64 4294967328}>
{
c8JG:
  %ls80w = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8KM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JM_info$def to i64
  %ln8KN = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8KM, i64* %ln8KN, !tbaa !1
  %ln8KQ = load i64, i64* %R1_Var
  %ln8KR = add i64 %ln8KQ, 7
  %ln8KS = inttoptr i64 %ln8KR to i64*
  %ln8KT = load i64, i64* %ln8KS, !tbaa !3
  store i64 %ln8KT, i64* %ls80w
  %ln8KU = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %ln8KV = bitcast i64* %ln8KU to i64*
  %ln8KW = load i64, i64* %ln8KV, !tbaa !1
  store i64 %ln8KW, i64* %R1_Var
  %ln8KX = load i64, i64* %ls80w
  %ln8KY = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %ln8KX, i64* %ln8KY, !tbaa !1
  %ln8KZ = load i64, i64* %R1_Var
  %ln8L0 = and i64 %ln8KZ, 7
  %ln8L1 = icmp ne i64 %ln8L0, 0
  br i1 %ln8L1, label %u8K1, label %c8JN
c8JN:
  %ln8L3 = load i64, i64* %R1_Var
  %ln8L4 = inttoptr i64 %ln8L3 to i64*
  %ln8L5 = load i64, i64* %ln8L4, !tbaa !3
  %ln8L6 = inttoptr i64 %ln8L5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8L7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8L6( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8L7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8K1:
  %ln8L8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8L9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8L8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8L9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8JM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JM_info$def to i8*)
define internal ghccc void @c8JM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JM_info$def to i64)),i64 88), i64 66, i64 4294967328}>
{
c8JM:
  %ls80y = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8La = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JR_info$def to i64
  %ln8Lb = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln8La, i64* %ln8Lb, !tbaa !1
  %ln8Le = load i64, i64* %R1_Var
  %ln8Lf = add i64 %ln8Le, 7
  %ln8Lg = inttoptr i64 %ln8Lf to i64*
  %ln8Lh = load i64, i64* %ln8Lg, !tbaa !3
  store i64 %ln8Lh, i64* %ls80y
  %ln8Li = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %ln8Lj = bitcast i64* %ln8Li to i64*
  %ln8Lk = load i64, i64* %ln8Lj, !tbaa !1
  store i64 %ln8Lk, i64* %R1_Var
  %ln8Ll = load i64, i64* %ls80y
  %ln8Lm = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %ln8Ll, i64* %ln8Lm, !tbaa !1
  %ln8Ln = load i64, i64* %R1_Var
  %ln8Lo = and i64 %ln8Ln, 7
  %ln8Lp = icmp ne i64 %ln8Lo, 0
  br i1 %ln8Lp, label %u8K3, label %c8JW
c8JW:
  %ln8Lr = load i64, i64* %R1_Var
  %ln8Ls = inttoptr i64 %ln8Lr to i64*
  %ln8Lt = load i64, i64* %ln8Ls, !tbaa !3
  %ln8Lu = inttoptr i64 %ln8Lt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Lv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Lu( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Lv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8K3:
  %ln8Lw = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JR_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Lx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Lw( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln8Lx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8JR_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JR_info$def to i8*)
define internal ghccc void @c8JR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8JR_info$def to i64)),i64 88), i64 194, i64 4294967328}>
{
c8JR:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Ly = add i64 %R1_Arg, 7
  %ln8Lz = inttoptr i64 %ln8Ly to i64*
  %ln8LA = load i64, i64* %ln8Lz, !tbaa !3
  store i64 %ln8LA, i64* %R4_Var
  %ln8LB = load i64*, i64** %Sp_Var
  %ln8LC = getelementptr inbounds i64, i64* %ln8LB, i32 2
  %ln8LD = bitcast i64* %ln8LC to i64*
  %ln8LE = load i64, i64* %ln8LD, !tbaa !1
  store i64 %ln8LE, i64* %R3_Var
  %ln8LF = load i64*, i64** %Sp_Var
  %ln8LG = getelementptr inbounds i64, i64* %ln8LF, i32 1
  %ln8LH = bitcast i64* %ln8LG to i64*
  %ln8LI = load i64, i64* %ln8LH, !tbaa !1
  store i64 %ln8LI, i64* %R2_Var
  %ln8LJ = load i64*, i64** %Sp_Var
  %ln8LK = getelementptr inbounds i64, i64* %ln8LJ, i32 3
  %ln8LL = ptrtoint i64* %ln8LK to i64
  %ln8LM = inttoptr i64 %ln8LL to i64*
  store i64* %ln8LM, i64** %Sp_Var
  %ln8LN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbuf2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8LO = load i64*, i64** %Sp_Var
  %ln8LP = load i64, i64* %R2_Var
  %ln8LQ = load i64, i64* %R3_Var
  %ln8LR = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8LN( i64* %Base_Arg, i64* %ln8LO, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8LP, i64 %ln8LQ, i64 %ln8LR, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_buf2i_closure_struct = type <{i64, i64}>
@Word_buf2i_closure$def = internal global %Word_buf2i_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i_info$def to i64), i64 0}>
@Word_buf2i_closure = alias i8* bitcast (%Word_buf2i_closure_struct* @Word_buf2i_closure$def to i8*)
@Word_buf2i_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i_info$def to i8*)
define ghccc void @Word_buf2i_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i_info$def to i64)),i64 104), i64 17179869207, i64 0, i64 4294967311}>
{
c8LX:
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8M0 = load i64, i64* %R4_Var
  store i64 %ln8M0, i64* %R4_Var
  %ln8M1 = load i64, i64* %R3_Var
  store i64 %ln8M1, i64* %R3_Var
  %ln8M2 = load i64, i64* %R2_Var
  store i64 %ln8M2, i64* %R2_Var
  %ln8M3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_buf2i1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8M4 = load i64, i64* %R2_Var
  %ln8M5 = load i64, i64* %R3_Var
  %ln8M6 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8M3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8M4, i64 %ln8M5, i64 %ln8M6, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%c8M8_str_struct = type <{[5 x i8]}>
%Word_zdtrModule2_closure_struct = type <{i64, i64}>
@c8M8_str$def = internal constant %c8M8_str_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>
@c8M8_str = internal alias i8* bitcast (%c8M8_str_struct* @c8M8_str$def to i8*)
@Word_zdtrModule2_closure$def = internal global %Word_zdtrModule2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_static_info to i64), i64 ptrtoint (i8* @c8M8_str to i64)}>
@Word_zdtrModule2_closure = alias i8* bitcast (%Word_zdtrModule2_closure_struct* @Word_zdtrModule2_closure$def to i8*)
%c8Ma_str_struct = type <{[5 x i8]}>
%Word_zdtrModule1_closure_struct = type <{i64, i64}>
@c8Ma_str$def = internal constant %c8Ma_str_struct<{[5 x i8] [i8 87, i8 111, i8 114, i8 100, i8 0]}>
@c8Ma_str = internal alias i8* bitcast (%c8Ma_str_struct* @c8Ma_str$def to i8*)
@Word_zdtrModule1_closure$def = internal global %Word_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_static_info to i64), i64 ptrtoint (i8* @c8Ma_str to i64)}>
@Word_zdtrModule1_closure = alias i8* bitcast (%Word_zdtrModule1_closure_struct* @Word_zdtrModule1_closure$def to i8*)
%Word_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@Word_zdtrModule_closure$def = internal global %Word_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_static_info to i64), i64 add (i64 ptrtoint (%Word_zdtrModule2_closure_struct* @Word_zdtrModule2_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Word_zdtrModule1_closure_struct* @Word_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@Word_zdtrModule_closure = alias i8* bitcast (%Word_zdtrModule_closure_struct* @Word_zdtrModule_closure$def to i8*)
%c8Md_str_struct = type <{[5 x i8]}>
%Word_zdtczqWBS1_closure_struct = type <{i64, i64}>
@c8Md_str$def = internal constant %c8Md_str_struct<{[5 x i8] [i8 39, i8 87, i8 66, i8 83, i8 0]}>
@c8Md_str = internal alias i8* bitcast (%c8Md_str_struct* @c8Md_str$def to i8*)
@Word_zdtczqWBS1_closure$def = internal global %Word_zdtczqWBS1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_static_info to i64), i64 ptrtoint (i8* @c8Md_str to i64)}>
@Word_zdtczqWBS1_closure = alias i8* bitcast (%Word_zdtczqWBS1_closure_struct* @Word_zdtczqWBS1_closure$def to i8*)
%Word_zdtczqWBS_closure_struct = type <{i64, i64, i64, i64, i64, i64}>
@Word_zdtczqWBS_closure$def = internal global %Word_zdtczqWBS_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_static_info to i64), i64 add (i64 ptrtoint (%Word_zdtrModule_closure_struct* @Word_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Word_zdtczqWBS1_closure_struct* @Word_zdtczqWBS1_closure$def to i64),i64 1), i64 -8946390496119507469, i64 -2127995069379938716, i64 3}>
@Word_zdtczqWBS_closure = alias i8* bitcast (%Word_zdtczqWBS_closure_struct* @Word_zdtczqWBS_closure$def to i8*)
%c8Mg_str_struct = type <{[5 x i8]}>
%Word_zdtczqW2_closure_struct = type <{i64, i64}>
@c8Mg_str$def = internal constant %c8Mg_str_struct<{[5 x i8] [i8 39, i8 87, i8 54, i8 52, i8 0]}>
@c8Mg_str = internal alias i8* bitcast (%c8Mg_str_struct* @c8Mg_str$def to i8*)
@Word_zdtczqW2_closure$def = internal global %Word_zdtczqW2_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_static_info to i64), i64 ptrtoint (i8* @c8Mg_str to i64)}>
@Word_zdtczqW2_closure = alias i8* bitcast (%Word_zdtczqW2_closure_struct* @Word_zdtczqW2_closure$def to i8*)
%Word_zdtczqW64_closure_struct = type <{i64, i64, i64, i64, i64, i64}>
@Word_zdtczqW64_closure$def = internal global %Word_zdtczqW64_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_static_info to i64), i64 add (i64 ptrtoint (%Word_zdtrModule_closure_struct* @Word_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Word_zdtczqW2_closure_struct* @Word_zdtczqW2_closure$def to i64),i64 1), i64 -207333598737891231, i64 7842991888429129974, i64 3}>
@Word_zdtczqW64_closure = alias i8* bitcast (%Word_zdtczqW64_closure_struct* @Word_zdtczqW64_closure$def to i8*)
%c8Mj_str_struct = type <{[3 x i8]}>
%Word_zdtczqW1_closure_struct = type <{i64, i64}>
@c8Mj_str$def = internal constant %c8Mj_str_struct<{[3 x i8] [i8 39, i8 87, i8 0]}>
@c8Mj_str = internal alias i8* bitcast (%c8Mj_str_struct* @c8Mj_str$def to i8*)
@Word_zdtczqW1_closure$def = internal global %Word_zdtczqW1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_static_info to i64), i64 ptrtoint (i8* @c8Mj_str to i64)}>
@Word_zdtczqW1_closure = alias i8* bitcast (%Word_zdtczqW1_closure_struct* @Word_zdtczqW1_closure$def to i8*)
%Word_zdtczqW_closure_struct = type <{i64, i64, i64, i64, i64, i64}>
@Word_zdtczqW_closure$def = internal global %Word_zdtczqW_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_static_info to i64), i64 add (i64 ptrtoint (%Word_zdtrModule_closure_struct* @Word_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Word_zdtczqW1_closure_struct* @Word_zdtczqW1_closure$def to i64),i64 1), i64 -2604212032444660247, i64 -1560770159244284137, i64 3}>
@Word_zdtczqW_closure = alias i8* bitcast (%Word_zdtczqW_closure_struct* @Word_zdtczqW_closure$def to i8*)
%c8Mm_str_struct = type <{[9 x i8]}>
%Word_zdtcCoqzuword1_closure_struct = type <{i64, i64}>
@c8Mm_str$def = internal constant %c8Mm_str_struct<{[9 x i8] [i8 67, i8 111, i8 113, i8 95, i8 119, i8 111, i8 114, i8 100, i8 0]}>
@c8Mm_str = internal alias i8* bitcast (%c8Mm_str_struct* @c8Mm_str$def to i8*)
@Word_zdtcCoqzuword1_closure$def = internal global %Word_zdtcCoqzuword1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_static_info to i64), i64 ptrtoint (i8* @c8Mm_str to i64)}>
@Word_zdtcCoqzuword1_closure = alias i8* bitcast (%Word_zdtcCoqzuword1_closure_struct* @Word_zdtcCoqzuword1_closure$def to i8*)
%Word_zdtcCoqzuword_closure_struct = type <{i64, i64, i64, i64, i64, i64}>
@Word_zdtcCoqzuword_closure$def = internal global %Word_zdtcCoqzuword_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TyCon_static_info to i64), i64 add (i64 ptrtoint (%Word_zdtrModule_closure_struct* @Word_zdtrModule_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%Word_zdtcCoqzuword1_closure_struct* @Word_zdtcCoqzuword1_closure$def to i64),i64 1), i64 897153574602569074, i64 8439625370478336735, i64 3}>
@Word_zdtcCoqzuword_closure = alias i8* bitcast (%Word_zdtcCoqzuword_closure_struct* @Word_zdtcCoqzuword_closure$def to i8*)
%Word_wone2_closure_struct = type <{i64, i64, i64}>
@Word_wone2_closure$def = internal global %Word_wone2_closure_struct<{i64 ptrtoint (i8* @Word_W_static_info to i64), i64 add (i64 ptrtoint (%Word_zdszc1_closure_struct* @Word_zdszc1_closure$def to i64),i64 1), i64 3}>
@Word_wone2_closure = alias i8* bitcast (%Word_wone2_closure_struct* @Word_wone2_closure$def to i8*)
%Word_wone1_closure_struct = type <{i64, i64}>
@Word_wone1_closure$def = internal global %Word_wone1_closure_struct<{i64 ptrtoint (i8* @Word_W64_static_info to i64), i64 1}>
@Word_wone1_closure = alias i8* bitcast (%Word_wone1_closure_struct* @Word_wone1_closure$def to i8*)
%Word_wrap1_closure_struct = type <{i64, i64}>
@Word_wrap1_closure$def = internal global %Word_wrap1_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 64}>
@Word_wrap1_closure = alias i8* bitcast (%Word_wrap1_closure_struct* @Word_wrap1_closure$def to i8*)
%Word_wone_closure_struct = type <{i64}>
@Word_wone_closure$def = internal global %Word_wone_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wone_info$def to i64)}>
@Word_wone_closure = alias i8* bitcast (%Word_wone_closure_struct* @Word_wone_closure$def to i8*)
@Word_wone_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wone_info$def to i8*)
define ghccc void @Word_wone_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
c8MF:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8MP = load i64*, i64** %Sp_Var
  %ln8MQ = getelementptr inbounds i64, i64* %ln8MP, i32 -1
  %ln8MR = ptrtoint i64* %ln8MQ to i64
  %ln8MS = icmp ult i64 %ln8MR, %SpLim_Arg
  br i1 %ln8MS, label %c8MG, label %c8MH
c8MH:
  %ln8MU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8MD_info$def to i64
  %ln8MT = load i64*, i64** %Sp_Var
  %ln8MV = getelementptr inbounds i64, i64* %ln8MT, i32 -1
  store i64 %ln8MU, i64* %ln8MV, !tbaa !1
  %ln8MW = ptrtoint %Word_wrap1_closure_struct* @Word_wrap1_closure$def to i64
  %ln8MX = add i64 %ln8MW, 1
  store i64 %ln8MX, i64* %R3_Var
  %ln8MY = load i64, i64* %R2_Var
  store i64 %ln8MY, i64* %R2_Var
  %ln8MZ = load i64*, i64** %Sp_Var
  %ln8N0 = getelementptr inbounds i64, i64* %ln8MZ, i32 -1
  %ln8N1 = ptrtoint i64* %ln8N0 to i64
  %ln8N2 = inttoptr i64 %ln8N1 to i64*
  store i64* %ln8N2, i64** %Sp_Var
  %ln8N3 = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8N4 = load i64*, i64** %Sp_Var
  %ln8N5 = load i64, i64* %R1_Var
  %ln8N6 = load i64, i64* %R2_Var
  %ln8N7 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8N3( i64* %Base_Arg, i64* %ln8N4, i64* %Hp_Arg, i64 %ln8N5, i64 %ln8N6, i64 %ln8N7, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8MG:
  %ln8N8 = load i64, i64* %R2_Var
  store i64 %ln8N8, i64* %R2_Var
  %ln8N9 = ptrtoint %Word_wone_closure_struct* @Word_wone_closure$def to i64
  store i64 %ln8N9, i64* %R1_Var
  %ln8Na = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Nb = bitcast i64* %ln8Na to i64*
  %ln8Nc = load i64, i64* %ln8Nb, !tbaa !4
  %ln8Nd = inttoptr i64 %ln8Nc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ne = load i64*, i64** %Sp_Var
  %ln8Nf = load i64, i64* %R1_Var
  %ln8Ng = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Nd( i64* %Base_Arg, i64* %ln8Ne, i64* %Hp_Arg, i64 %ln8Nf, i64 %ln8Ng, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8MD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8MD_info$def to i8*)
define internal ghccc void @c8MD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8MD:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Nh = load i64, i64* %R1_Var
  switch i64 %ln8Nh, label %c8MN [i64 0, label %c8MN
i64 1, label %c8MO]
c8MN:
  %ln8Ni = ptrtoint %Word_wone2_closure_struct* @Word_wone2_closure$def to i64
  %ln8Nj = add i64 %ln8Ni, 1
  store i64 %ln8Nj, i64* %R1_Var
  %ln8Nk = load i64*, i64** %Sp_Var
  %ln8Nl = getelementptr inbounds i64, i64* %ln8Nk, i32 1
  %ln8Nm = ptrtoint i64* %ln8Nl to i64
  %ln8Nn = inttoptr i64 %ln8Nm to i64*
  store i64* %ln8Nn, i64** %Sp_Var
  %ln8No = load i64*, i64** %Sp_Var
  %ln8Np = getelementptr inbounds i64, i64* %ln8No, i32 0
  %ln8Nq = bitcast i64* %ln8Np to i64*
  %ln8Nr = load i64, i64* %ln8Nq, !tbaa !1
  %ln8Ns = inttoptr i64 %ln8Nr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Nt = load i64*, i64** %Sp_Var
  %ln8Nu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ns( i64* %Base_Arg, i64* %ln8Nt, i64* %Hp_Arg, i64 %ln8Nu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8MO:
  %ln8Nv = ptrtoint %Word_wone1_closure_struct* @Word_wone1_closure$def to i64
  %ln8Nw = add i64 %ln8Nv, 2
  store i64 %ln8Nw, i64* %R1_Var
  %ln8Nx = load i64*, i64** %Sp_Var
  %ln8Ny = getelementptr inbounds i64, i64* %ln8Nx, i32 1
  %ln8Nz = ptrtoint i64* %ln8Ny to i64
  %ln8NA = inttoptr i64 %ln8Nz to i64*
  store i64* %ln8NA, i64** %Sp_Var
  %ln8NB = load i64*, i64** %Sp_Var
  %ln8NC = getelementptr inbounds i64, i64* %ln8NB, i32 0
  %ln8ND = bitcast i64* %ln8NC to i64*
  %ln8NE = load i64, i64* %ln8ND, !tbaa !1
  %ln8NF = inttoptr i64 %ln8NE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8NG = load i64*, i64** %Sp_Var
  %ln8NH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8NF( i64* %Base_Arg, i64* %ln8NG, i64* %Hp_Arg, i64 %ln8NH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_bitzudec1_closure_struct = type <{i64, i64}>
@Word_bitzudec1_closure$def = internal global %Word_bitzudec1_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 0}>
@Word_bitzudec1_closure = alias i8* bitcast (%Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i8*)
%Word_natToWord1_closure_struct = type <{i64, i64, i64}>
@Word_natToWord1_closure$def = internal global %Word_natToWord1_closure_struct<{i64 ptrtoint (i8* @Word_W_static_info to i64), i64 add (i64 ptrtoint (%Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64),i64 1), i64 3}>
@Word_natToWord1_closure = alias i8* bitcast (%Word_natToWord1_closure_struct* @Word_natToWord1_closure$def to i8*)
%Word_wzzero1_closure_struct = type <{i64, i64}>
@Word_wzzero1_closure$def = internal global %Word_wzzero1_closure_struct<{i64 ptrtoint (i8* @Word_W64_static_info to i64), i64 0}>
@Word_wzzero1_closure = alias i8* bitcast (%Word_wzzero1_closure_struct* @Word_wzzero1_closure$def to i8*)
%Word_wzzero_closure_struct = type <{i64}>
@Word_wzzero_closure$def = internal global %Word_wzzero_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wzzero_info$def to i64)}>
@Word_wzzero_closure = alias i8* bitcast (%Word_wzzero_closure_struct* @Word_wzzero_closure$def to i8*)
@Word_wzzero_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wzzero_info$def to i8*)
define ghccc void @Word_wzzero_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
c8NZ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8O9 = load i64*, i64** %Sp_Var
  %ln8Oa = getelementptr inbounds i64, i64* %ln8O9, i32 -1
  %ln8Ob = ptrtoint i64* %ln8Oa to i64
  %ln8Oc = icmp ult i64 %ln8Ob, %SpLim_Arg
  br i1 %ln8Oc, label %c8O0, label %c8O1
c8O1:
  %ln8Oe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8NX_info$def to i64
  %ln8Od = load i64*, i64** %Sp_Var
  %ln8Of = getelementptr inbounds i64, i64* %ln8Od, i32 -1
  store i64 %ln8Oe, i64* %ln8Of, !tbaa !1
  %ln8Og = ptrtoint %Word_wrap1_closure_struct* @Word_wrap1_closure$def to i64
  %ln8Oh = add i64 %ln8Og, 1
  store i64 %ln8Oh, i64* %R3_Var
  %ln8Oi = load i64, i64* %R2_Var
  store i64 %ln8Oi, i64* %R2_Var
  %ln8Oj = load i64*, i64** %Sp_Var
  %ln8Ok = getelementptr inbounds i64, i64* %ln8Oj, i32 -1
  %ln8Ol = ptrtoint i64* %ln8Ok to i64
  %ln8Om = inttoptr i64 %ln8Ol to i64*
  store i64* %ln8Om, i64** %Sp_Var
  %ln8On = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oo = load i64*, i64** %Sp_Var
  %ln8Op = load i64, i64* %R1_Var
  %ln8Oq = load i64, i64* %R2_Var
  %ln8Or = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8On( i64* %Base_Arg, i64* %ln8Oo, i64* %Hp_Arg, i64 %ln8Op, i64 %ln8Oq, i64 %ln8Or, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8O0:
  %ln8Os = load i64, i64* %R2_Var
  store i64 %ln8Os, i64* %R2_Var
  %ln8Ot = ptrtoint %Word_wzzero_closure_struct* @Word_wzzero_closure$def to i64
  store i64 %ln8Ot, i64* %R1_Var
  %ln8Ou = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Ov = bitcast i64* %ln8Ou to i64*
  %ln8Ow = load i64, i64* %ln8Ov, !tbaa !4
  %ln8Ox = inttoptr i64 %ln8Ow to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Oy = load i64*, i64** %Sp_Var
  %ln8Oz = load i64, i64* %R1_Var
  %ln8OA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ox( i64* %Base_Arg, i64* %ln8Oy, i64* %Hp_Arg, i64 %ln8Oz, i64 %ln8OA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8NX_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8NX_info$def to i8*)
define internal ghccc void @c8NX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8NX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8OB = load i64, i64* %R1_Var
  switch i64 %ln8OB, label %c8O7 [i64 0, label %c8O7
i64 1, label %c8O8]
c8O7:
  %ln8OC = ptrtoint %Word_natToWord1_closure_struct* @Word_natToWord1_closure$def to i64
  %ln8OD = add i64 %ln8OC, 1
  store i64 %ln8OD, i64* %R1_Var
  %ln8OE = load i64*, i64** %Sp_Var
  %ln8OF = getelementptr inbounds i64, i64* %ln8OE, i32 1
  %ln8OG = ptrtoint i64* %ln8OF to i64
  %ln8OH = inttoptr i64 %ln8OG to i64*
  store i64* %ln8OH, i64** %Sp_Var
  %ln8OI = load i64*, i64** %Sp_Var
  %ln8OJ = getelementptr inbounds i64, i64* %ln8OI, i32 0
  %ln8OK = bitcast i64* %ln8OJ to i64*
  %ln8OL = load i64, i64* %ln8OK, !tbaa !1
  %ln8OM = inttoptr i64 %ln8OL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ON = load i64*, i64** %Sp_Var
  %ln8OO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OM( i64* %Base_Arg, i64* %ln8ON, i64* %Hp_Arg, i64 %ln8OO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8O8:
  %ln8OP = ptrtoint %Word_wzzero1_closure_struct* @Word_wzzero1_closure$def to i64
  %ln8OQ = add i64 %ln8OP, 2
  store i64 %ln8OQ, i64* %R1_Var
  %ln8OR = load i64*, i64** %Sp_Var
  %ln8OS = getelementptr inbounds i64, i64* %ln8OR, i32 1
  %ln8OT = ptrtoint i64* %ln8OS to i64
  %ln8OU = inttoptr i64 %ln8OT to i64*
  store i64* %ln8OU, i64** %Sp_Var
  %ln8OV = load i64*, i64** %Sp_Var
  %ln8OW = getelementptr inbounds i64, i64* %ln8OV, i32 0
  %ln8OX = bitcast i64* %ln8OW to i64*
  %ln8OY = load i64, i64* %ln8OX, !tbaa !1
  %ln8OZ = inttoptr i64 %ln8OY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8P0 = load i64*, i64** %Sp_Var
  %ln8P1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8OZ( i64* %Base_Arg, i64* %ln8P0, i64* %Hp_Arg, i64 %ln8P1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_bitzudec_closure_struct = type <{i64}>
@Word_bitzudec_closure$def = internal global %Word_bitzudec_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bitzudec_info$def to i64)}>
@Word_bitzudec_closure = alias i8* bitcast (%Word_bitzudec_closure_struct* @Word_bitzudec_closure$def to i8*)
@Word_bitzudec_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bitzudec_info$def to i8*)
define ghccc void @Word_bitzudec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
c8Pr:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8PN = load i64*, i64** %Sp_Var
  %ln8PO = getelementptr inbounds i64, i64* %ln8PN, i32 -1
  %ln8PP = ptrtoint i64* %ln8PO to i64
  %ln8PQ = icmp ult i64 %ln8PP, %SpLim_Arg
  br i1 %ln8PQ, label %c8Ps, label %c8Pt
c8Pt:
  %ln8PS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Pj_info$def to i64
  %ln8PR = load i64*, i64** %Sp_Var
  %ln8PT = getelementptr inbounds i64, i64* %ln8PR, i32 -1
  store i64 %ln8PS, i64* %ln8PT, !tbaa !1
  %ln8PU = load i64, i64* %R2_Var
  store i64 %ln8PU, i64* %R1_Var
  %ln8PV = load i64*, i64** %Sp_Var
  %ln8PW = getelementptr inbounds i64, i64* %ln8PV, i32 -1
  %ln8PX = ptrtoint i64* %ln8PW to i64
  %ln8PY = inttoptr i64 %ln8PX to i64*
  store i64* %ln8PY, i64** %Sp_Var
  %ln8PZ = load i64, i64* %R1_Var
  %ln8Q0 = and i64 %ln8PZ, 7
  %ln8Q1 = icmp ne i64 %ln8Q0, 0
  br i1 %ln8Q1, label %u8PM, label %c8Pk
c8Pk:
  %ln8Q3 = load i64, i64* %R1_Var
  %ln8Q4 = inttoptr i64 %ln8Q3 to i64*
  %ln8Q5 = load i64, i64* %ln8Q4, !tbaa !3
  %ln8Q6 = inttoptr i64 %ln8Q5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Q7 = load i64*, i64** %Sp_Var
  %ln8Q8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Q6( i64* %Base_Arg, i64* %ln8Q7, i64* %Hp_Arg, i64 %ln8Q8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8PM:
  %ln8Q9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Pj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qa = load i64*, i64** %Sp_Var
  %ln8Qb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Q9( i64* %Base_Arg, i64* %ln8Qa, i64* %Hp_Arg, i64 %ln8Qb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Ps:
  %ln8Qc = load i64, i64* %R2_Var
  store i64 %ln8Qc, i64* %R2_Var
  %ln8Qd = ptrtoint %Word_bitzudec_closure_struct* @Word_bitzudec_closure$def to i64
  store i64 %ln8Qd, i64* %R1_Var
  %ln8Qe = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Qf = bitcast i64* %ln8Qe to i64*
  %ln8Qg = load i64, i64* %ln8Qf, !tbaa !4
  %ln8Qh = inttoptr i64 %ln8Qg to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qi = load i64*, i64** %Sp_Var
  %ln8Qj = load i64, i64* %R1_Var
  %ln8Qk = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qh( i64* %Base_Arg, i64* %ln8Qi, i64* %Hp_Arg, i64 %ln8Qj, i64 %ln8Qk, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Pj_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Pj_info$def to i8*)
define internal ghccc void @c8Pj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8Pj:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Ql = load i64, i64* %R1_Var
  %ln8Qm = and i64 %ln8Ql, 7
  switch i64 %ln8Qm, label %c8Pn [i64 1, label %c8Pn
i64 2, label %c8Po
i64 3, label %c8Pp]
c8Pn:
  %ln8Qo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Pw_info$def to i64
  %ln8Qn = load i64*, i64** %Sp_Var
  %ln8Qp = getelementptr inbounds i64, i64* %ln8Qn, i32 0
  store i64 %ln8Qo, i64* %ln8Qp, !tbaa !1
  %ln8Qq = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %ln8Qr = add i64 %ln8Qq, 1
  store i64 %ln8Qr, i64* %R3_Var
  %ln8Qu = load i64, i64* %R1_Var
  %ln8Qv = add i64 %ln8Qu, 7
  %ln8Qw = inttoptr i64 %ln8Qv to i64*
  %ln8Qx = load i64, i64* %ln8Qw, !tbaa !3
  store i64 %ln8Qx, i64* %R2_Var
  %ln8Qy = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Qz = load i64*, i64** %Sp_Var
  %ln8QA = load i64, i64* %R1_Var
  %ln8QB = load i64, i64* %R2_Var
  %ln8QC = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Qy( i64* %Base_Arg, i64* %ln8Qz, i64* %Hp_Arg, i64 %ln8QA, i64 %ln8QB, i64 %ln8QC, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Po:
  %ln8QF = load i64, i64* %R1_Var
  %ln8QG = add i64 %ln8QF, 6
  %ln8QH = inttoptr i64 %ln8QG to i64*
  %ln8QI = load i64, i64* %ln8QH, !tbaa !3
  switch i64 %ln8QI, label %c8PH [i64 0, label %c8PI]
c8PH:
  %ln8QJ = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %ln8QK = add i64 %ln8QJ, 1
  store i64 %ln8QK, i64* %R1_Var
  %ln8QL = load i64*, i64** %Sp_Var
  %ln8QM = getelementptr inbounds i64, i64* %ln8QL, i32 1
  %ln8QN = ptrtoint i64* %ln8QM to i64
  %ln8QO = inttoptr i64 %ln8QN to i64*
  store i64* %ln8QO, i64** %Sp_Var
  %ln8QP = load i64*, i64** %Sp_Var
  %ln8QQ = getelementptr inbounds i64, i64* %ln8QP, i32 0
  %ln8QR = bitcast i64* %ln8QQ to i64*
  %ln8QS = load i64, i64* %ln8QR, !tbaa !1
  %ln8QT = inttoptr i64 %ln8QS to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8QU = load i64*, i64** %Sp_Var
  %ln8QV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8QT( i64* %Base_Arg, i64* %ln8QU, i64* %Hp_Arg, i64 %ln8QV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8PI:
  %ln8QW = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %ln8QX = add i64 %ln8QW, 2
  store i64 %ln8QX, i64* %R1_Var
  %ln8QY = load i64*, i64** %Sp_Var
  %ln8QZ = getelementptr inbounds i64, i64* %ln8QY, i32 1
  %ln8R0 = ptrtoint i64* %ln8QZ to i64
  %ln8R1 = inttoptr i64 %ln8R0 to i64*
  store i64* %ln8R1, i64** %Sp_Var
  %ln8R2 = load i64*, i64** %Sp_Var
  %ln8R3 = getelementptr inbounds i64, i64* %ln8R2, i32 0
  %ln8R4 = bitcast i64* %ln8R3 to i64*
  %ln8R5 = load i64, i64* %ln8R4, !tbaa !1
  %ln8R6 = inttoptr i64 %ln8R5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8R7 = load i64*, i64** %Sp_Var
  %ln8R8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8R6( i64* %Base_Arg, i64* %ln8R7, i64* %Hp_Arg, i64 %ln8R8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Pp:
  %ln8R9 = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %ln8Ra = add i64 %ln8R9, 1
  store i64 %ln8Ra, i64* %R1_Var
  %ln8Rb = load i64*, i64** %Sp_Var
  %ln8Rc = getelementptr inbounds i64, i64* %ln8Rb, i32 1
  %ln8Rd = ptrtoint i64* %ln8Rc to i64
  %ln8Re = inttoptr i64 %ln8Rd to i64*
  store i64* %ln8Re, i64** %Sp_Var
  %ln8Rf = load i64*, i64** %Sp_Var
  %ln8Rg = getelementptr inbounds i64, i64* %ln8Rf, i32 0
  %ln8Rh = bitcast i64* %ln8Rg to i64*
  %ln8Ri = load i64, i64* %ln8Rh, !tbaa !1
  %ln8Rj = inttoptr i64 %ln8Ri to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Rk = load i64*, i64** %Sp_Var
  %ln8Rl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Rj( i64* %Base_Arg, i64* %ln8Rk, i64* %Hp_Arg, i64 %ln8Rl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Pw_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Pw_info$def to i8*)
define internal ghccc void @c8Pw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c8Pw:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln8Rm = load i64, i64* %R1_Var
  %ln8Rn = shl i64 %ln8Rm, 3
  %ln8Ro = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %ln8Rp = add i64 %ln8Rn, %ln8Ro
  %ln8Rq = inttoptr i64 %ln8Rp to i64*
  %ln8Rr = load i64, i64* %ln8Rq, !tbaa !5
  store i64 %ln8Rr, i64* %R1_Var
  %ln8Rs = load i64*, i64** %Sp_Var
  %ln8Rt = getelementptr inbounds i64, i64* %ln8Rs, i32 1
  %ln8Ru = ptrtoint i64* %ln8Rt to i64
  %ln8Rv = inttoptr i64 %ln8Ru to i64*
  store i64* %ln8Rv, i64** %Sp_Var
  %ln8Rw = load i64*, i64** %Sp_Var
  %ln8Rx = getelementptr inbounds i64, i64* %ln8Rw, i32 0
  %ln8Ry = bitcast i64* %ln8Rx to i64*
  %ln8Rz = load i64, i64* %ln8Ry, !tbaa !1
  %ln8RA = inttoptr i64 %ln8Rz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8RB = load i64*, i64** %Sp_Var
  %ln8RC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8RA( i64* %Base_Arg, i64* %ln8RB, i64* %Hp_Arg, i64 %ln8RC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wnot1_closure_struct = type <{i64, i64, i64, i64}>
%c8RK_str_struct = type <{[45 x i8]}>
@Word_wnot1_closure$def = internal global %Word_wnot1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wnot1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wnot1_closure = alias i8* bitcast (%Word_wnot1_closure_struct* @Word_wnot1_closure$def to i8*)
@c8RK_str$def = internal constant %c8RK_str_struct<{[45 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 49, i8 55, i8 54, i8 44, i8 49, i8 41, i8 45, i8 40, i8 49, i8 55, i8 55, i8 44, i8 51, i8 53, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 110, i8 111, i8 116, i8 0]}>
@c8RK_str = internal alias i8* bitcast (%c8RK_str_struct* @c8RK_str$def to i8*)
@Word_wnot1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wnot1_info$def to i8*)
define ghccc void @Word_wnot1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wnot1_info$def to i64)),i64 112), i64 0, i64 4294967318}>
{
c8RL:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8RH = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8RO = load i64*, i64** %Sp_Var
  %ln8RP = getelementptr inbounds i64, i64* %ln8RO, i32 -2
  %ln8RQ = ptrtoint i64* %ln8RP to i64
  %ln8RR = icmp ult i64 %ln8RQ, %SpLim_Arg
  br i1 %ln8RR, label %c8RM, label %c8RN
c8RN:
  %ln8RS = ptrtoint i64* %Base_Arg to i64
  %ln8RT = inttoptr i64 %ln8RS to i8*
  %ln8RU = load i64, i64* %R1_Var
  %ln8RV = inttoptr i64 %ln8RU to i8*
  %ln8RW = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8RX = call ccc i8* (i8*, i8*) %ln8RW( i8* %ln8RT, i8* %ln8RV ) nounwind
  %ln8RY = ptrtoint i8* %ln8RX to i64
  store i64 %ln8RY, i64* %lc8RH
  %ln8RZ = load i64, i64* %lc8RH
  %ln8S0 = icmp eq i64 %ln8RZ, 0
  br i1 %ln8S0, label %c8RJ, label %c8RI
c8RI:
  %ln8S2 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8S1 = load i64*, i64** %Sp_Var
  %ln8S3 = getelementptr inbounds i64, i64* %ln8S1, i32 -2
  store i64 %ln8S2, i64* %ln8S3, !tbaa !1
  %ln8S5 = load i64, i64* %lc8RH
  %ln8S4 = load i64*, i64** %Sp_Var
  %ln8S6 = getelementptr inbounds i64, i64* %ln8S4, i32 -1
  store i64 %ln8S5, i64* %ln8S6, !tbaa !1
  %ln8S7 = ptrtoint %c8RK_str_struct* @c8RK_str$def to i64
  store i64 %ln8S7, i64* %R2_Var
  %ln8S8 = load i64*, i64** %Sp_Var
  %ln8S9 = getelementptr inbounds i64, i64* %ln8S8, i32 -2
  %ln8Sa = ptrtoint i64* %ln8S9 to i64
  %ln8Sb = inttoptr i64 %ln8Sa to i64*
  store i64* %ln8Sb, i64** %Sp_Var
  %ln8Sc = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Sd = load i64*, i64** %Sp_Var
  %ln8Se = load i64, i64* %R1_Var
  %ln8Sf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Sc( i64* %Base_Arg, i64* %ln8Sd, i64* %Hp_Arg, i64 %ln8Se, i64 %ln8Sf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8RJ:
  %ln8Sh = load i64, i64* %R1_Var
  %ln8Si = inttoptr i64 %ln8Sh to i64*
  %ln8Sj = load i64, i64* %ln8Si, !tbaa !3
  %ln8Sk = inttoptr i64 %ln8Sj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Sl = load i64*, i64** %Sp_Var
  %ln8Sm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Sk( i64* %Base_Arg, i64* %ln8Sl, i64* %Hp_Arg, i64 %ln8Sm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8RM:
  %ln8Sn = load i64, i64* %R1_Var
  store i64 %ln8Sn, i64* %R1_Var
  %ln8So = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8Sp = bitcast i64* %ln8So to i64*
  %ln8Sq = load i64, i64* %ln8Sp, !tbaa !4
  %ln8Sr = inttoptr i64 %ln8Sq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ss = load i64*, i64** %Sp_Var
  %ln8St = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Sr( i64* %Base_Arg, i64* %ln8Ss, i64* %Hp_Arg, i64 %ln8St, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wnot_closure_struct = type <{i64, i64}>
@Word_wnot_closure$def = internal global %Word_wnot_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wnot_info$def to i64), i64 0}>
@Word_wnot_closure = alias i8* bitcast (%Word_wnot_closure_struct* @Word_wnot_closure$def to i8*)
@s80S_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s80S_info$def to i8*)
define internal ghccc void @s80S_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s80S_info$def to i64)),i64 120), i64 1, i64 4294967313}>
{
c8SQ:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Ti = load i64*, i64** %Sp_Var
  %ln8Tj = getelementptr inbounds i64, i64* %ln8Ti, i32 -2
  %ln8Tk = ptrtoint i64* %ln8Tj to i64
  %ln8Tl = icmp ult i64 %ln8Tk, %SpLim_Arg
  br i1 %ln8Tl, label %c8SR, label %c8SS
c8SS:
  %ln8Tn = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Tm = load i64*, i64** %Sp_Var
  %ln8To = getelementptr inbounds i64, i64* %ln8Tm, i32 -2
  store i64 %ln8Tn, i64* %ln8To, !tbaa !1
  %ln8Tq = load i64, i64* %R1_Var
  %ln8Tp = load i64*, i64** %Sp_Var
  %ln8Tr = getelementptr inbounds i64, i64* %ln8Tp, i32 -1
  store i64 %ln8Tq, i64* %ln8Tr, !tbaa !1
  %ln8Tu = load i64, i64* %R1_Var
  %ln8Tv = add i64 %ln8Tu, 16
  %ln8Tw = inttoptr i64 %ln8Tv to i64*
  %ln8Tx = load i64, i64* %ln8Tw, !tbaa !3
  store i64 %ln8Tx, i64* %R2_Var
  %ln8Ty = load i64*, i64** %Sp_Var
  %ln8Tz = getelementptr inbounds i64, i64* %ln8Ty, i32 -2
  %ln8TA = ptrtoint i64* %ln8Tz to i64
  %ln8TB = inttoptr i64 %ln8TA to i64*
  store i64* %ln8TB, i64** %Sp_Var
  %ln8TC = bitcast i8* @integerzmgmp_GHCziIntegerziType_complementInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TD = load i64*, i64** %Sp_Var
  %ln8TE = load i64, i64* %R1_Var
  %ln8TF = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TC( i64* %Base_Arg, i64* %ln8TD, i64* %Hp_Arg, i64 %ln8TE, i64 %ln8TF, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8SR:
  %ln8TG = load i64, i64* %R1_Var
  store i64 %ln8TG, i64* %R1_Var
  %ln8TH = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8TI = bitcast i64* %ln8TH to i64*
  %ln8TJ = load i64, i64* %ln8TI, !tbaa !4
  %ln8TK = inttoptr i64 %ln8TJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8TL = load i64*, i64** %Sp_Var
  %ln8TM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8TK( i64* %Base_Arg, i64* %ln8TL, i64* %Hp_Arg, i64 %ln8TM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wnot_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wnot_info$def to i8*)
define ghccc void @Word_wnot_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wnot_info$def to i64)),i64 120), i64 8589934607, i64 0, i64 30064771087}>
{
c8SY:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8TN = load i64*, i64** %Sp_Var
  %ln8TO = getelementptr inbounds i64, i64* %ln8TN, i32 -1
  %ln8TP = ptrtoint i64* %ln8TO to i64
  %ln8TQ = icmp ult i64 %ln8TP, %SpLim_Arg
  br i1 %ln8TQ, label %c8SZ, label %c8T0
c8T0:
  %ln8TS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SH_info$def to i64
  %ln8TR = load i64*, i64** %Sp_Var
  %ln8TT = getelementptr inbounds i64, i64* %ln8TR, i32 -1
  store i64 %ln8TS, i64* %ln8TT, !tbaa !1
  %ln8TU = load i64, i64* %R3_Var
  store i64 %ln8TU, i64* %R1_Var
  %ln8TV = load i64*, i64** %Sp_Var
  %ln8TW = getelementptr inbounds i64, i64* %ln8TV, i32 -1
  %ln8TX = ptrtoint i64* %ln8TW to i64
  %ln8TY = inttoptr i64 %ln8TX to i64*
  store i64* %ln8TY, i64** %Sp_Var
  %ln8TZ = load i64, i64* %R1_Var
  %ln8U0 = and i64 %ln8TZ, 7
  %ln8U1 = icmp ne i64 %ln8U0, 0
  br i1 %ln8U1, label %u8Th, label %c8SI
c8SI:
  %ln8U3 = load i64, i64* %R1_Var
  %ln8U4 = inttoptr i64 %ln8U3 to i64*
  %ln8U5 = load i64, i64* %ln8U4, !tbaa !3
  %ln8U6 = inttoptr i64 %ln8U5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8U7 = load i64*, i64** %Sp_Var
  %ln8U8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8U6( i64* %Base_Arg, i64* %ln8U7, i64* %Hp_Arg, i64 %ln8U8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Th:
  %ln8U9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Ua = load i64*, i64** %Sp_Var
  %ln8Ub = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8U9( i64* %Base_Arg, i64* %ln8Ua, i64* %Hp_Arg, i64 %ln8Ub, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8SZ:
  %ln8Uc = load i64, i64* %R3_Var
  store i64 %ln8Uc, i64* %R3_Var
  %ln8Ud = load i64, i64* %R2_Var
  store i64 %ln8Ud, i64* %R2_Var
  %ln8Ue = ptrtoint %Word_wnot_closure_struct* @Word_wnot_closure$def to i64
  store i64 %ln8Ue, i64* %R1_Var
  %ln8Uf = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln8Ug = bitcast i64* %ln8Uf to i64*
  %ln8Uh = load i64, i64* %ln8Ug, !tbaa !4
  %ln8Ui = inttoptr i64 %ln8Uh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Uj = load i64*, i64** %Sp_Var
  %ln8Uk = load i64, i64* %R1_Var
  %ln8Ul = load i64, i64* %R2_Var
  %ln8Um = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Ui( i64* %Base_Arg, i64* %ln8Uj, i64* %Hp_Arg, i64 %ln8Uk, i64 %ln8Ul, i64 %ln8Um, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8SH_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SH_info$def to i8*)
define internal ghccc void @c8SH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8SH_info$def to i64)),i64 120), i64 0, i64 12884901920}>
{
c8SH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls80R = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls80U = alloca i64, i32 1
  %ln8Un = load i64, i64* %R1_Var
  %ln8Uo = and i64 %ln8Un, 7
  switch i64 %ln8Uo, label %c8SU [i64 1, label %c8SU
i64 2, label %c8SV
i64 3, label %c8SW]
c8SU:
  %ln8Up = load i64*, i64** %Hp_Var
  %ln8Uq = getelementptr inbounds i64, i64* %ln8Up, i32 5
  %ln8Ur = ptrtoint i64* %ln8Uq to i64
  %ln8Us = inttoptr i64 %ln8Ur to i64*
  store i64* %ln8Us, i64** %Hp_Var
  %ln8Ut = load i64*, i64** %Hp_Var
  %ln8Uu = ptrtoint i64* %ln8Ut to i64
  %ln8Uv = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Uw = bitcast i64* %ln8Uv to i64*
  %ln8Ux = load i64, i64* %ln8Uw, !tbaa !4
  %ln8Uy = icmp ugt i64 %ln8Uu, %ln8Ux
  br i1 %ln8Uy, label %c8T4, label %c8T3
c8T3:
  %ln8UB = load i64, i64* %R1_Var
  %ln8UC = add i64 %ln8UB, 7
  %ln8UD = inttoptr i64 %ln8UC to i64*
  %ln8UE = load i64, i64* %ln8UD, !tbaa !3
  store i64 %ln8UE, i64* %ls80R
  %ln8UG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s80S_info$def to i64
  %ln8UF = load i64*, i64** %Hp_Var
  %ln8UH = getelementptr inbounds i64, i64* %ln8UF, i32 -4
  store i64 %ln8UG, i64* %ln8UH, !tbaa !2
  %ln8UJ = load i64, i64* %ls80R
  %ln8UI = load i64*, i64** %Hp_Var
  %ln8UK = getelementptr inbounds i64, i64* %ln8UI, i32 -2
  store i64 %ln8UJ, i64* %ln8UK, !tbaa !2
  %ln8UM = ptrtoint i8* @Word_W_con_info to i64
  %ln8UL = load i64*, i64** %Hp_Var
  %ln8UN = getelementptr inbounds i64, i64* %ln8UL, i32 -1
  store i64 %ln8UM, i64* %ln8UN, !tbaa !2
  %ln8UP = load i64*, i64** %Hp_Var
  %ln8UQ = getelementptr inbounds i64, i64* %ln8UP, i32 -4
  %ln8UR = ptrtoint i64* %ln8UQ to i64
  %ln8UO = load i64*, i64** %Hp_Var
  %ln8US = getelementptr inbounds i64, i64* %ln8UO, i32 0
  store i64 %ln8UR, i64* %ln8US, !tbaa !2
  %ln8UU = load i64*, i64** %Hp_Var
  %ln8UV = ptrtoint i64* %ln8UU to i64
  %ln8UW = add i64 %ln8UV, -7
  store i64 %ln8UW, i64* %R1_Var
  %ln8UX = load i64*, i64** %Sp_Var
  %ln8UY = getelementptr inbounds i64, i64* %ln8UX, i32 1
  %ln8UZ = ptrtoint i64* %ln8UY to i64
  %ln8V0 = inttoptr i64 %ln8UZ to i64*
  store i64* %ln8V0, i64** %Sp_Var
  %ln8V1 = load i64*, i64** %Sp_Var
  %ln8V2 = getelementptr inbounds i64, i64* %ln8V1, i32 0
  %ln8V3 = bitcast i64* %ln8V2 to i64*
  %ln8V4 = load i64, i64* %ln8V3, !tbaa !1
  %ln8V5 = inttoptr i64 %ln8V4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8V6 = load i64*, i64** %Sp_Var
  %ln8V7 = load i64*, i64** %Hp_Var
  %ln8V8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8V5( i64* %Base_Arg, i64* %ln8V6, i64* %ln8V7, i64 %ln8V8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8T4:
  %ln8V9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %ln8V9, !tbaa !4
  %ln8Va = load i64, i64* %R1_Var
  store i64 %ln8Va, i64* %R1_Var
  %ln8Vb = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Vc = load i64*, i64** %Sp_Var
  %ln8Vd = load i64*, i64** %Hp_Var
  %ln8Ve = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Vb( i64* %Base_Arg, i64* %ln8Vc, i64* %ln8Vd, i64 %ln8Ve, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8SV:
  %ln8Vf = load i64*, i64** %Hp_Var
  %ln8Vg = getelementptr inbounds i64, i64* %ln8Vf, i32 2
  %ln8Vh = ptrtoint i64* %ln8Vg to i64
  %ln8Vi = inttoptr i64 %ln8Vh to i64*
  store i64* %ln8Vi, i64** %Hp_Var
  %ln8Vj = load i64*, i64** %Hp_Var
  %ln8Vk = ptrtoint i64* %ln8Vj to i64
  %ln8Vl = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln8Vm = bitcast i64* %ln8Vl to i64*
  %ln8Vn = load i64, i64* %ln8Vm, !tbaa !4
  %ln8Vo = icmp ugt i64 %ln8Vk, %ln8Vn
  br i1 %ln8Vo, label %c8Td, label %c8Tc
c8Tc:
  %ln8Vr = load i64, i64* %R1_Var
  %ln8Vs = add i64 %ln8Vr, 6
  %ln8Vt = inttoptr i64 %ln8Vs to i64*
  %ln8Vu = load i64, i64* %ln8Vt, !tbaa !3
  %ln8Vv = xor i64 %ln8Vu, -1
  store i64 %ln8Vv, i64* %ls80U
  %ln8Vx = ptrtoint i8* @Word_W64_con_info to i64
  %ln8Vw = load i64*, i64** %Hp_Var
  %ln8Vy = getelementptr inbounds i64, i64* %ln8Vw, i32 -1
  store i64 %ln8Vx, i64* %ln8Vy, !tbaa !2
  %ln8VA = load i64, i64* %ls80U
  %ln8Vz = load i64*, i64** %Hp_Var
  %ln8VB = getelementptr inbounds i64, i64* %ln8Vz, i32 0
  store i64 %ln8VA, i64* %ln8VB, !tbaa !2
  %ln8VD = load i64*, i64** %Hp_Var
  %ln8VE = ptrtoint i64* %ln8VD to i64
  %ln8VF = add i64 %ln8VE, -6
  store i64 %ln8VF, i64* %R1_Var
  %ln8VG = load i64*, i64** %Sp_Var
  %ln8VH = getelementptr inbounds i64, i64* %ln8VG, i32 1
  %ln8VI = ptrtoint i64* %ln8VH to i64
  %ln8VJ = inttoptr i64 %ln8VI to i64*
  store i64* %ln8VJ, i64** %Sp_Var
  %ln8VK = load i64*, i64** %Sp_Var
  %ln8VL = getelementptr inbounds i64, i64* %ln8VK, i32 0
  %ln8VM = bitcast i64* %ln8VL to i64*
  %ln8VN = load i64, i64* %ln8VM, !tbaa !1
  %ln8VO = inttoptr i64 %ln8VN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8VP = load i64*, i64** %Sp_Var
  %ln8VQ = load i64*, i64** %Hp_Var
  %ln8VR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8VO( i64* %Base_Arg, i64* %ln8VP, i64* %ln8VQ, i64 %ln8VR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Td:
  %ln8VS = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln8VS, !tbaa !4
  %ln8VT = load i64, i64* %R1_Var
  store i64 %ln8VT, i64* %R1_Var
  %ln8VU = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8VV = load i64*, i64** %Sp_Var
  %ln8VW = load i64*, i64** %Hp_Var
  %ln8VX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8VU( i64* %Base_Arg, i64* %ln8VV, i64* %ln8VW, i64 %ln8VX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8SW:
  %ln8VY = ptrtoint %Word_wnot1_closure_struct* @Word_wnot1_closure$def to i64
  store i64 %ln8VY, i64* %R1_Var
  %ln8VZ = load i64*, i64** %Sp_Var
  %ln8W0 = getelementptr inbounds i64, i64* %ln8VZ, i32 1
  %ln8W1 = ptrtoint i64* %ln8W0 to i64
  %ln8W2 = inttoptr i64 %ln8W1 to i64*
  store i64* %ln8W2, i64** %Sp_Var
  %ln8W4 = load i64, i64* %R1_Var
  %ln8W5 = inttoptr i64 %ln8W4 to i64*
  %ln8W6 = load i64, i64* %ln8W5, !tbaa !3
  %ln8W7 = inttoptr i64 %ln8W6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8W8 = load i64*, i64** %Sp_Var
  %ln8W9 = load i64*, i64** %Hp_Var
  %ln8Wa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8W7( i64* %Base_Arg, i64* %ln8W8, i64* %ln8W9, i64 %ln8Wa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YK_closure_struct = type <{i64, i64}>
%c8Wg_str_struct = type <{[42 x i8]}>
@r7YK_closure$def = internal global %r7YK_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YK_info$def to i64), i64 0}>
@r7YK_closure = internal alias i8* bitcast (%r7YK_closure_struct* @r7YK_closure$def to i8*)
@c8Wg_str$def = internal constant %c8Wg_str_struct<{[42 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 57, i8 54, i8 44, i8 49, i8 41, i8 45, i8 40, i8 57, i8 57, i8 44, i8 52, i8 57, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 111, i8 114, i8 0]}>
@c8Wg_str = internal alias i8* bitcast (%c8Wg_str_struct* @c8Wg_str$def to i8*)
@r7YK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YK_info$def to i8*)
define internal ghccc void @r7YK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YK_info$def to i64)),i64 112), i64 4294967299, i64 0, i64 4294967311}>
{
c8Wh:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln8Wk = ptrtoint %c8Wg_str_struct* @c8Wg_str$def to i64
  store i64 %ln8Wk, i64* %R2_Var
  %ln8Wl = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8Wm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8Wl( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln8Wm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wor1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wor1_closure$def = internal global %Word_wor1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wor1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wor1_closure = alias i8* bitcast (%Word_wor1_closure_struct* @Word_wor1_closure$def to i8*)
@Word_wor1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wor1_info$def to i8*)
define ghccc void @Word_wor1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wor1_info$def to i64)),i64 144), i64 0, i64 4294967318}>
{
c8Wu:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc8Wr = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Wx = load i64*, i64** %Sp_Var
  %ln8Wy = getelementptr inbounds i64, i64* %ln8Wx, i32 -2
  %ln8Wz = ptrtoint i64* %ln8Wy to i64
  %ln8WA = icmp ult i64 %ln8Wz, %SpLim_Arg
  br i1 %ln8WA, label %c8Wv, label %c8Ww
c8Ww:
  %ln8WB = ptrtoint i64* %Base_Arg to i64
  %ln8WC = inttoptr i64 %ln8WB to i8*
  %ln8WD = load i64, i64* %R1_Var
  %ln8WE = inttoptr i64 %ln8WD to i8*
  %ln8WF = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln8WG = call ccc i8* (i8*, i8*) %ln8WF( i8* %ln8WC, i8* %ln8WE ) nounwind
  %ln8WH = ptrtoint i8* %ln8WG to i64
  store i64 %ln8WH, i64* %lc8Wr
  %ln8WI = load i64, i64* %lc8Wr
  %ln8WJ = icmp eq i64 %ln8WI, 0
  br i1 %ln8WJ, label %c8Wt, label %c8Ws
c8Ws:
  %ln8WL = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln8WK = load i64*, i64** %Sp_Var
  %ln8WM = getelementptr inbounds i64, i64* %ln8WK, i32 -2
  store i64 %ln8WL, i64* %ln8WM, !tbaa !1
  %ln8WO = load i64, i64* %lc8Wr
  %ln8WN = load i64*, i64** %Sp_Var
  %ln8WP = getelementptr inbounds i64, i64* %ln8WN, i32 -1
  store i64 %ln8WO, i64* %ln8WP, !tbaa !1
  %ln8WQ = load i64*, i64** %Sp_Var
  %ln8WR = getelementptr inbounds i64, i64* %ln8WQ, i32 -2
  %ln8WS = ptrtoint i64* %ln8WR to i64
  %ln8WT = inttoptr i64 %ln8WS to i64*
  store i64* %ln8WT, i64** %Sp_Var
  %ln8WU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8WV = load i64*, i64** %Sp_Var
  %ln8WW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8WU( i64* %Base_Arg, i64* %ln8WV, i64* %Hp_Arg, i64 %ln8WW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Wt:
  %ln8WY = load i64, i64* %R1_Var
  %ln8WZ = inttoptr i64 %ln8WY to i64*
  %ln8X0 = load i64, i64* %ln8WZ, !tbaa !3
  %ln8X1 = inttoptr i64 %ln8X0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8X2 = load i64*, i64** %Sp_Var
  %ln8X3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8X1( i64* %Base_Arg, i64* %ln8X2, i64* %Hp_Arg, i64 %ln8X3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Wv:
  %ln8X4 = load i64, i64* %R1_Var
  store i64 %ln8X4, i64* %R1_Var
  %ln8X5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8X6 = bitcast i64* %ln8X5 to i64*
  %ln8X7 = load i64, i64* %ln8X6, !tbaa !4
  %ln8X8 = inttoptr i64 %ln8X7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8X9 = load i64*, i64** %Sp_Var
  %ln8Xa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8X8( i64* %Base_Arg, i64* %ln8X9, i64* %Hp_Arg, i64 %ln8Xa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwor_closure_struct = type <{i64, i64}>
@Word_zdwwor_closure$def = internal global %Word_zdwwor_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwor_info$def to i64), i64 0}>
@Word_zdwwor_closure = alias i8* bitcast (%Word_zdwwor_closure_struct* @Word_zdwwor_closure$def to i8*)
@s813_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s813_info$def to i8*)
define internal ghccc void @s813_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s813_info$def to i64)),i64 152), i64 2, i64 4294967315}>
{
c8XY:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln8Zh = load i64*, i64** %Sp_Var
  %ln8Zi = getelementptr inbounds i64, i64* %ln8Zh, i32 -2
  %ln8Zj = ptrtoint i64* %ln8Zi to i64
  %ln8Zk = icmp ult i64 %ln8Zj, %SpLim_Arg
  br i1 %ln8Zk, label %c8XZ, label %c8Y0
c8Y0:
  %ln8Zm = ptrtoint i8* @stg_upd_frame_info to i64
  %ln8Zl = load i64*, i64** %Sp_Var
  %ln8Zn = getelementptr inbounds i64, i64* %ln8Zl, i32 -2
  store i64 %ln8Zm, i64* %ln8Zn, !tbaa !1
  %ln8Zp = load i64, i64* %R1_Var
  %ln8Zo = load i64*, i64** %Sp_Var
  %ln8Zq = getelementptr inbounds i64, i64* %ln8Zo, i32 -1
  store i64 %ln8Zp, i64* %ln8Zq, !tbaa !1
  %ln8Zt = load i64, i64* %R1_Var
  %ln8Zu = add i64 %ln8Zt, 24
  %ln8Zv = inttoptr i64 %ln8Zu to i64*
  %ln8Zw = load i64, i64* %ln8Zv, !tbaa !3
  store i64 %ln8Zw, i64* %R3_Var
  %ln8Zz = load i64, i64* %R1_Var
  %ln8ZA = add i64 %ln8Zz, 16
  %ln8ZB = inttoptr i64 %ln8ZA to i64*
  %ln8ZC = load i64, i64* %ln8ZB, !tbaa !3
  store i64 %ln8ZC, i64* %R2_Var
  %ln8ZD = load i64*, i64** %Sp_Var
  %ln8ZE = getelementptr inbounds i64, i64* %ln8ZD, i32 -2
  %ln8ZF = ptrtoint i64* %ln8ZE to i64
  %ln8ZG = inttoptr i64 %ln8ZF to i64*
  store i64* %ln8ZG, i64** %Sp_Var
  %ln8ZH = bitcast i8* @integerzmgmp_GHCziIntegerziType_orInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ZI = load i64*, i64** %Sp_Var
  %ln8ZJ = load i64, i64* %R1_Var
  %ln8ZK = load i64, i64* %R2_Var
  %ln8ZL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ZH( i64* %Base_Arg, i64* %ln8ZI, i64* %Hp_Arg, i64 %ln8ZJ, i64 %ln8ZK, i64 %ln8ZL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8XZ:
  %ln8ZM = load i64, i64* %R1_Var
  store i64 %ln8ZM, i64* %R1_Var
  %ln8ZN = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln8ZO = bitcast i64* %ln8ZN to i64*
  %ln8ZP = load i64, i64* %ln8ZO, !tbaa !4
  %ln8ZQ = inttoptr i64 %ln8ZP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln8ZR = load i64*, i64** %Sp_Var
  %ln8ZS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln8ZQ( i64* %Base_Arg, i64* %ln8ZR, i64* %Hp_Arg, i64 %ln8ZS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwwor_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwor_info$def to i8*)
define ghccc void @Word_zdwwor_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwor_info$def to i64)),i64 152), i64 8589934607, i64 0, i64 30064771087}>
{
c8Y6:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln8ZT = load i64*, i64** %Sp_Var
  %ln8ZU = getelementptr inbounds i64, i64* %ln8ZT, i32 -2
  %ln8ZV = ptrtoint i64* %ln8ZU to i64
  %ln8ZW = icmp ult i64 %ln8ZV, %SpLim_Arg
  br i1 %ln8ZW, label %c8Y7, label %c8Y8
c8Y8:
  %ln8ZY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XK_info$def to i64
  %ln8ZX = load i64*, i64** %Sp_Var
  %ln8ZZ = getelementptr inbounds i64, i64* %ln8ZX, i32 -2
  store i64 %ln8ZY, i64* %ln8ZZ, !tbaa !1
  %ln900 = load i64, i64* %R2_Var
  store i64 %ln900, i64* %R1_Var
  %ln902 = load i64, i64* %R3_Var
  %ln901 = load i64*, i64** %Sp_Var
  %ln903 = getelementptr inbounds i64, i64* %ln901, i32 -1
  store i64 %ln902, i64* %ln903, !tbaa !1
  %ln904 = load i64*, i64** %Sp_Var
  %ln905 = getelementptr inbounds i64, i64* %ln904, i32 -2
  %ln906 = ptrtoint i64* %ln905 to i64
  %ln907 = inttoptr i64 %ln906 to i64*
  store i64* %ln907, i64** %Sp_Var
  %ln908 = load i64, i64* %R1_Var
  %ln909 = and i64 %ln908, 7
  %ln90a = icmp ne i64 %ln909, 0
  br i1 %ln90a, label %u8Zg, label %c8XL
c8XL:
  %ln90c = load i64, i64* %R1_Var
  %ln90d = inttoptr i64 %ln90c to i64*
  %ln90e = load i64, i64* %ln90d, !tbaa !3
  %ln90f = inttoptr i64 %ln90e to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90g = load i64*, i64** %Sp_Var
  %ln90h = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90f( i64* %Base_Arg, i64* %ln90g, i64* %Hp_Arg, i64 %ln90h, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Zg:
  %ln90i = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90j = load i64*, i64** %Sp_Var
  %ln90k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90i( i64* %Base_Arg, i64* %ln90j, i64* %Hp_Arg, i64 %ln90k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Y7:
  %ln90l = load i64, i64* %R3_Var
  store i64 %ln90l, i64* %R3_Var
  %ln90m = load i64, i64* %R2_Var
  store i64 %ln90m, i64* %R2_Var
  %ln90n = ptrtoint %Word_zdwwor_closure_struct* @Word_zdwwor_closure$def to i64
  store i64 %ln90n, i64* %R1_Var
  %ln90o = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln90p = bitcast i64* %ln90o to i64*
  %ln90q = load i64, i64* %ln90p, !tbaa !4
  %ln90r = inttoptr i64 %ln90q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90s = load i64*, i64** %Sp_Var
  %ln90t = load i64, i64* %R1_Var
  %ln90u = load i64, i64* %R2_Var
  %ln90v = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90r( i64* %Base_Arg, i64* %ln90s, i64* %Hp_Arg, i64 %ln90t, i64 %ln90u, i64 %ln90v, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8XK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XK_info$def to i8*)
define internal ghccc void @c8XK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XK_info$def to i64)),i64 152), i64 1, i64 21474836512}>
{
c8XK:
  %ls80Y = alloca i64, i32 1
  %ls810 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls818 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln90w = load i64*, i64** %Sp_Var
  %ln90x = getelementptr inbounds i64, i64* %ln90w, i32 1
  %ln90y = bitcast i64* %ln90x to i64*
  %ln90z = load i64, i64* %ln90y, !tbaa !1
  store i64 %ln90z, i64* %ls80Y
  %ln90A = load i64, i64* %R1_Var
  %ln90B = and i64 %ln90A, 7
  switch i64 %ln90B, label %c8Y2 [i64 1, label %c8Y2
i64 2, label %c8Y3
i64 3, label %c8Y4]
c8Y2:
  %ln90D = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XP_info$def to i64
  %ln90C = load i64*, i64** %Sp_Var
  %ln90E = getelementptr inbounds i64, i64* %ln90C, i32 0
  store i64 %ln90D, i64* %ln90E, !tbaa !1
  %ln90H = load i64, i64* %R1_Var
  %ln90I = add i64 %ln90H, 7
  %ln90J = inttoptr i64 %ln90I to i64*
  %ln90K = load i64, i64* %ln90J, !tbaa !3
  store i64 %ln90K, i64* %ls810
  %ln90L = load i64, i64* %ls80Y
  store i64 %ln90L, i64* %R1_Var
  %ln90N = load i64, i64* %ls810
  %ln90M = load i64*, i64** %Sp_Var
  %ln90O = getelementptr inbounds i64, i64* %ln90M, i32 1
  store i64 %ln90N, i64* %ln90O, !tbaa !1
  %ln90P = load i64, i64* %R1_Var
  %ln90Q = and i64 %ln90P, 7
  %ln90R = icmp ne i64 %ln90Q, 0
  br i1 %ln90R, label %u8Ze, label %c8XQ
c8XQ:
  %ln90T = load i64, i64* %R1_Var
  %ln90U = inttoptr i64 %ln90T to i64*
  %ln90V = load i64, i64* %ln90U, !tbaa !3
  %ln90W = inttoptr i64 %ln90V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln90X = load i64*, i64** %Sp_Var
  %ln90Y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90W( i64* %Base_Arg, i64* %ln90X, i64* %Hp_Arg, i64 %ln90Y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Ze:
  %ln90Z = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XP_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln910 = load i64*, i64** %Sp_Var
  %ln911 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln90Z( i64* %Base_Arg, i64* %ln910, i64* %Hp_Arg, i64 %ln911, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Y3:
  %ln913 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YB_info$def to i64
  %ln912 = load i64*, i64** %Sp_Var
  %ln914 = getelementptr inbounds i64, i64* %ln912, i32 0
  store i64 %ln913, i64* %ln914, !tbaa !1
  %ln917 = load i64, i64* %R1_Var
  %ln918 = add i64 %ln917, 6
  %ln919 = inttoptr i64 %ln918 to i64*
  %ln91a = load i64, i64* %ln919, !tbaa !3
  store i64 %ln91a, i64* %ls818
  %ln91b = load i64, i64* %ls80Y
  store i64 %ln91b, i64* %R1_Var
  %ln91d = load i64, i64* %ls818
  %ln91c = load i64*, i64** %Sp_Var
  %ln91e = getelementptr inbounds i64, i64* %ln91c, i32 1
  store i64 %ln91d, i64* %ln91e, !tbaa !1
  %ln91f = load i64, i64* %R1_Var
  %ln91g = and i64 %ln91f, 7
  %ln91h = icmp ne i64 %ln91g, 0
  br i1 %ln91h, label %u8Zf, label %c8YD
c8YD:
  %ln91j = load i64, i64* %R1_Var
  %ln91k = inttoptr i64 %ln91j to i64*
  %ln91l = load i64, i64* %ln91k, !tbaa !3
  %ln91m = inttoptr i64 %ln91l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91n = load i64*, i64** %Sp_Var
  %ln91o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91m( i64* %Base_Arg, i64* %ln91n, i64* %Hp_Arg, i64 %ln91o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u8Zf:
  %ln91p = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91q = load i64*, i64** %Sp_Var
  %ln91r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91p( i64* %Base_Arg, i64* %ln91q, i64* %Hp_Arg, i64 %ln91r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Y4:
  %ln91s = ptrtoint %Word_wor1_closure_struct* @Word_wor1_closure$def to i64
  store i64 %ln91s, i64* %R1_Var
  %ln91t = load i64*, i64** %Sp_Var
  %ln91u = getelementptr inbounds i64, i64* %ln91t, i32 2
  %ln91v = ptrtoint i64* %ln91u to i64
  %ln91w = inttoptr i64 %ln91v to i64*
  store i64* %ln91w, i64** %Sp_Var
  %ln91y = load i64, i64* %R1_Var
  %ln91z = inttoptr i64 %ln91y to i64*
  %ln91A = load i64, i64* %ln91z, !tbaa !3
  %ln91B = inttoptr i64 %ln91A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91C = load i64*, i64** %Sp_Var
  %ln91D = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91B( i64* %Base_Arg, i64* %ln91C, i64* %Hp_Arg, i64 %ln91D, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8YB_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YB_info$def to i8*)
define internal ghccc void @c8YB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YB_info$def to i64)),i64 168), i64 65, i64 4294967328}>
{
c8YB:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls81e = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln91E = load i64, i64* %R1_Var
  %ln91F = and i64 %ln91E, 7
  switch i64 %ln91F, label %c8YR [i64 1, label %c8YR
i64 2, label %c8Z1
i64 3, label %c8Z8]
c8YR:
  %ln91H = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YH_info$def to i64
  %ln91G = load i64*, i64** %Sp_Var
  %ln91I = getelementptr inbounds i64, i64* %ln91G, i32 0
  store i64 %ln91H, i64* %ln91I, !tbaa !1
  %ln91L = load i64, i64* %R1_Var
  %ln91M = add i64 %ln91L, 7
  %ln91N = inttoptr i64 %ln91M to i64*
  %ln91O = load i64, i64* %ln91N, !tbaa !3
  store i64 %ln91O, i64* %R2_Var
  %ln91P = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln91Q = load i64*, i64** %Sp_Var
  %ln91R = load i64*, i64** %Hp_Var
  %ln91S = load i64, i64* %R1_Var
  %ln91T = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln91P( i64* %Base_Arg, i64* %ln91Q, i64* %ln91R, i64 %ln91S, i64 %ln91T, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Z1:
  %ln91U = load i64*, i64** %Hp_Var
  %ln91V = getelementptr inbounds i64, i64* %ln91U, i32 2
  %ln91W = ptrtoint i64* %ln91V to i64
  %ln91X = inttoptr i64 %ln91W to i64*
  store i64* %ln91X, i64** %Hp_Var
  %ln91Y = load i64*, i64** %Hp_Var
  %ln91Z = ptrtoint i64* %ln91Y to i64
  %ln920 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln921 = bitcast i64* %ln920 to i64*
  %ln922 = load i64, i64* %ln921, !tbaa !4
  %ln923 = icmp ugt i64 %ln91Z, %ln922
  br i1 %ln923, label %c8Z4, label %c8Z3
c8Z3:
  %ln924 = load i64*, i64** %Sp_Var
  %ln925 = getelementptr inbounds i64, i64* %ln924, i32 1
  %ln926 = bitcast i64* %ln925 to i64*
  %ln927 = load i64, i64* %ln926, !tbaa !1
  %ln92a = load i64, i64* %R1_Var
  %ln92b = add i64 %ln92a, 6
  %ln92c = inttoptr i64 %ln92b to i64*
  %ln92d = load i64, i64* %ln92c, !tbaa !3
  %ln92e = or i64 %ln927, %ln92d
  store i64 %ln92e, i64* %ls81e
  %ln92g = ptrtoint i8* @Word_W64_con_info to i64
  %ln92f = load i64*, i64** %Hp_Var
  %ln92h = getelementptr inbounds i64, i64* %ln92f, i32 -1
  store i64 %ln92g, i64* %ln92h, !tbaa !2
  %ln92j = load i64, i64* %ls81e
  %ln92i = load i64*, i64** %Hp_Var
  %ln92k = getelementptr inbounds i64, i64* %ln92i, i32 0
  store i64 %ln92j, i64* %ln92k, !tbaa !2
  %ln92m = load i64*, i64** %Hp_Var
  %ln92n = ptrtoint i64* %ln92m to i64
  %ln92o = add i64 %ln92n, -6
  store i64 %ln92o, i64* %R1_Var
  %ln92p = load i64*, i64** %Sp_Var
  %ln92q = getelementptr inbounds i64, i64* %ln92p, i32 2
  %ln92r = ptrtoint i64* %ln92q to i64
  %ln92s = inttoptr i64 %ln92r to i64*
  store i64* %ln92s, i64** %Sp_Var
  %ln92t = load i64*, i64** %Sp_Var
  %ln92u = getelementptr inbounds i64, i64* %ln92t, i32 0
  %ln92v = bitcast i64* %ln92u to i64*
  %ln92w = load i64, i64* %ln92v, !tbaa !1
  %ln92x = inttoptr i64 %ln92w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92y = load i64*, i64** %Sp_Var
  %ln92z = load i64*, i64** %Hp_Var
  %ln92A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92x( i64* %Base_Arg, i64* %ln92y, i64* %ln92z, i64 %ln92A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Z4:
  %ln92B = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln92B, !tbaa !4
  %ln92C = load i64, i64* %R1_Var
  store i64 %ln92C, i64* %R1_Var
  %ln92D = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92E = load i64*, i64** %Sp_Var
  %ln92F = load i64*, i64** %Hp_Var
  %ln92G = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92D( i64* %Base_Arg, i64* %ln92E, i64* %ln92F, i64 %ln92G, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Z8:
  %ln92H = ptrtoint %Word_wor1_closure_struct* @Word_wor1_closure$def to i64
  store i64 %ln92H, i64* %R1_Var
  %ln92I = load i64*, i64** %Sp_Var
  %ln92J = getelementptr inbounds i64, i64* %ln92I, i32 2
  %ln92K = ptrtoint i64* %ln92J to i64
  %ln92L = inttoptr i64 %ln92K to i64*
  store i64* %ln92L, i64** %Sp_Var
  %ln92N = load i64, i64* %R1_Var
  %ln92O = inttoptr i64 %ln92N to i64*
  %ln92P = load i64, i64* %ln92O, !tbaa !3
  %ln92Q = inttoptr i64 %ln92P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln92R = load i64*, i64** %Sp_Var
  %ln92S = load i64*, i64** %Hp_Var
  %ln92T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln92Q( i64* %Base_Arg, i64* %ln92R, i64* %ln92S, i64 %ln92T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8YH_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8YH_info$def to i8*)
define internal ghccc void @c8YH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
c8YH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln92U = load i64*, i64** %Hp_Var
  %ln92V = getelementptr inbounds i64, i64* %ln92U, i32 2
  %ln92W = ptrtoint i64* %ln92V to i64
  %ln92X = inttoptr i64 %ln92W to i64*
  store i64* %ln92X, i64** %Hp_Var
  %ln92Y = load i64*, i64** %Hp_Var
  %ln92Z = ptrtoint i64* %ln92Y to i64
  %ln930 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln931 = bitcast i64* %ln930 to i64*
  %ln932 = load i64, i64* %ln931, !tbaa !4
  %ln933 = icmp ugt i64 %ln92Z, %ln932
  br i1 %ln933, label %c8YU, label %c8YT
c8YT:
  %ln935 = ptrtoint i8* @Word_W64_con_info to i64
  %ln934 = load i64*, i64** %Hp_Var
  %ln936 = getelementptr inbounds i64, i64* %ln934, i32 -1
  store i64 %ln935, i64* %ln936, !tbaa !2
  %ln938 = load i64*, i64** %Sp_Var
  %ln939 = getelementptr inbounds i64, i64* %ln938, i32 1
  %ln93a = bitcast i64* %ln939 to i64*
  %ln93b = load i64, i64* %ln93a, !tbaa !1
  %ln93c = load i64, i64* %R1_Var
  %ln93d = or i64 %ln93b, %ln93c
  %ln937 = load i64*, i64** %Hp_Var
  %ln93e = getelementptr inbounds i64, i64* %ln937, i32 0
  store i64 %ln93d, i64* %ln93e, !tbaa !2
  %ln93g = load i64*, i64** %Hp_Var
  %ln93h = ptrtoint i64* %ln93g to i64
  %ln93i = add i64 %ln93h, -6
  store i64 %ln93i, i64* %R1_Var
  %ln93j = load i64*, i64** %Sp_Var
  %ln93k = getelementptr inbounds i64, i64* %ln93j, i32 2
  %ln93l = ptrtoint i64* %ln93k to i64
  %ln93m = inttoptr i64 %ln93l to i64*
  store i64* %ln93m, i64** %Sp_Var
  %ln93n = load i64*, i64** %Sp_Var
  %ln93o = getelementptr inbounds i64, i64* %ln93n, i32 0
  %ln93p = bitcast i64* %ln93o to i64*
  %ln93q = load i64, i64* %ln93p, !tbaa !1
  %ln93r = inttoptr i64 %ln93q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93s = load i64*, i64** %Sp_Var
  %ln93t = load i64*, i64** %Hp_Var
  %ln93u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93r( i64* %Base_Arg, i64* %ln93s, i64* %ln93t, i64 %ln93u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8YU:
  %ln93v = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln93v, !tbaa !4
  %ln93w = load i64, i64* %R1_Var
  store i64 %ln93w, i64* %R1_Var
  %ln93x = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln93y = load i64*, i64** %Sp_Var
  %ln93z = load i64*, i64** %Hp_Var
  %ln93A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln93x( i64* %Base_Arg, i64* %ln93y, i64* %ln93z, i64 %ln93A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8XP_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XP_info$def to i8*)
define internal ghccc void @c8XP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8XP_info$def to i64)),i64 152), i64 1, i64 21474836512}>
{
c8XP:
  %ls810 = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls812 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln93B = load i64*, i64** %Sp_Var
  %ln93C = getelementptr inbounds i64, i64* %ln93B, i32 1
  %ln93D = bitcast i64* %ln93C to i64*
  %ln93E = load i64, i64* %ln93D, !tbaa !1
  store i64 %ln93E, i64* %ls810
  %ln93F = load i64, i64* %R1_Var
  %ln93G = and i64 %ln93F, 7
  switch i64 %ln93G, label %c8Yc [i64 1, label %c8Yc
i64 2, label %c8Yr
i64 3, label %c8Yy]
c8Yc:
  %ln93H = load i64*, i64** %Hp_Var
  %ln93I = getelementptr inbounds i64, i64* %ln93H, i32 6
  %ln93J = ptrtoint i64* %ln93I to i64
  %ln93K = inttoptr i64 %ln93J to i64*
  store i64* %ln93K, i64** %Hp_Var
  %ln93L = load i64*, i64** %Hp_Var
  %ln93M = ptrtoint i64* %ln93L to i64
  %ln93N = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln93O = bitcast i64* %ln93N to i64*
  %ln93P = load i64, i64* %ln93O, !tbaa !4
  %ln93Q = icmp ugt i64 %ln93M, %ln93P
  br i1 %ln93Q, label %c8Yf, label %c8Ye
c8Ye:
  %ln93T = load i64, i64* %R1_Var
  %ln93U = add i64 %ln93T, 7
  %ln93V = inttoptr i64 %ln93U to i64*
  %ln93W = load i64, i64* %ln93V, !tbaa !3
  store i64 %ln93W, i64* %ls812
  %ln93Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s813_info$def to i64
  %ln93X = load i64*, i64** %Hp_Var
  %ln93Z = getelementptr inbounds i64, i64* %ln93X, i32 -5
  store i64 %ln93Y, i64* %ln93Z, !tbaa !2
  %ln941 = load i64, i64* %ls810
  %ln940 = load i64*, i64** %Hp_Var
  %ln942 = getelementptr inbounds i64, i64* %ln940, i32 -3
  store i64 %ln941, i64* %ln942, !tbaa !2
  %ln944 = load i64, i64* %ls812
  %ln943 = load i64*, i64** %Hp_Var
  %ln945 = getelementptr inbounds i64, i64* %ln943, i32 -2
  store i64 %ln944, i64* %ln945, !tbaa !2
  %ln947 = ptrtoint i8* @Word_W_con_info to i64
  %ln946 = load i64*, i64** %Hp_Var
  %ln948 = getelementptr inbounds i64, i64* %ln946, i32 -1
  store i64 %ln947, i64* %ln948, !tbaa !2
  %ln94a = load i64*, i64** %Hp_Var
  %ln94b = getelementptr inbounds i64, i64* %ln94a, i32 -5
  %ln94c = ptrtoint i64* %ln94b to i64
  %ln949 = load i64*, i64** %Hp_Var
  %ln94d = getelementptr inbounds i64, i64* %ln949, i32 0
  store i64 %ln94c, i64* %ln94d, !tbaa !2
  %ln94f = load i64*, i64** %Hp_Var
  %ln94g = ptrtoint i64* %ln94f to i64
  %ln94h = add i64 %ln94g, -7
  store i64 %ln94h, i64* %R1_Var
  %ln94i = load i64*, i64** %Sp_Var
  %ln94j = getelementptr inbounds i64, i64* %ln94i, i32 2
  %ln94k = ptrtoint i64* %ln94j to i64
  %ln94l = inttoptr i64 %ln94k to i64*
  store i64* %ln94l, i64** %Sp_Var
  %ln94m = load i64*, i64** %Sp_Var
  %ln94n = getelementptr inbounds i64, i64* %ln94m, i32 0
  %ln94o = bitcast i64* %ln94n to i64*
  %ln94p = load i64, i64* %ln94o, !tbaa !1
  %ln94q = inttoptr i64 %ln94p to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94r = load i64*, i64** %Sp_Var
  %ln94s = load i64*, i64** %Hp_Var
  %ln94t = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94q( i64* %Base_Arg, i64* %ln94r, i64* %ln94s, i64 %ln94t, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Yf:
  %ln94u = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln94u, !tbaa !4
  %ln94v = load i64, i64* %R1_Var
  store i64 %ln94v, i64* %R1_Var
  %ln94w = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94x = load i64*, i64** %Sp_Var
  %ln94y = load i64*, i64** %Hp_Var
  %ln94z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94w( i64* %Base_Arg, i64* %ln94x, i64* %ln94y, i64 %ln94z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Yr:
  %ln94B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yi_info$def to i64
  %ln94A = load i64*, i64** %Sp_Var
  %ln94C = getelementptr inbounds i64, i64* %ln94A, i32 0
  store i64 %ln94B, i64* %ln94C, !tbaa !1
  %ln94D = load i64, i64* %ls810
  store i64 %ln94D, i64* %R2_Var
  %ln94H = load i64, i64* %R1_Var
  %ln94I = add i64 %ln94H, 6
  %ln94J = inttoptr i64 %ln94I to i64*
  %ln94K = load i64, i64* %ln94J, !tbaa !3
  %ln94E = load i64*, i64** %Sp_Var
  %ln94L = getelementptr inbounds i64, i64* %ln94E, i32 1
  store i64 %ln94K, i64* %ln94L, !tbaa !1
  %ln94M = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln94N = load i64*, i64** %Sp_Var
  %ln94O = load i64*, i64** %Hp_Var
  %ln94P = load i64, i64* %R1_Var
  %ln94Q = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln94M( i64* %Base_Arg, i64* %ln94N, i64* %ln94O, i64 %ln94P, i64 %ln94Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Yy:
  %ln94R = ptrtoint %Word_wor1_closure_struct* @Word_wor1_closure$def to i64
  store i64 %ln94R, i64* %R1_Var
  %ln94S = load i64*, i64** %Sp_Var
  %ln94T = getelementptr inbounds i64, i64* %ln94S, i32 2
  %ln94U = ptrtoint i64* %ln94T to i64
  %ln94V = inttoptr i64 %ln94U to i64*
  store i64* %ln94V, i64** %Sp_Var
  %ln94X = load i64, i64* %R1_Var
  %ln94Y = inttoptr i64 %ln94X to i64*
  %ln94Z = load i64, i64* %ln94Y, !tbaa !3
  %ln950 = inttoptr i64 %ln94Z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln951 = load i64*, i64** %Sp_Var
  %ln952 = load i64*, i64** %Hp_Var
  %ln953 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln950( i64* %Base_Arg, i64* %ln951, i64* %ln952, i64 %ln953, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c8Yi_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c8Yi_info$def to i8*)
define internal ghccc void @c8Yi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
c8Yi:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln954 = load i64*, i64** %Hp_Var
  %ln955 = getelementptr inbounds i64, i64* %ln954, i32 2
  %ln956 = ptrtoint i64* %ln955 to i64
  %ln957 = inttoptr i64 %ln956 to i64*
  store i64* %ln957, i64** %Hp_Var
  %ln958 = load i64*, i64** %Hp_Var
  %ln959 = ptrtoint i64* %ln958 to i64
  %ln95a = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln95b = bitcast i64* %ln95a to i64*
  %ln95c = load i64, i64* %ln95b, !tbaa !4
  %ln95d = icmp ugt i64 %ln959, %ln95c
  br i1 %ln95d, label %c8Yu, label %c8Yt
c8Yt:
  %ln95f = ptrtoint i8* @Word_W64_con_info to i64
  %ln95e = load i64*, i64** %Hp_Var
  %ln95g = getelementptr inbounds i64, i64* %ln95e, i32 -1
  store i64 %ln95f, i64* %ln95g, !tbaa !2
  %ln95i = load i64, i64* %R1_Var
  %ln95j = load i64*, i64** %Sp_Var
  %ln95k = getelementptr inbounds i64, i64* %ln95j, i32 1
  %ln95l = bitcast i64* %ln95k to i64*
  %ln95m = load i64, i64* %ln95l, !tbaa !1
  %ln95n = or i64 %ln95i, %ln95m
  %ln95h = load i64*, i64** %Hp_Var
  %ln95o = getelementptr inbounds i64, i64* %ln95h, i32 0
  store i64 %ln95n, i64* %ln95o, !tbaa !2
  %ln95q = load i64*, i64** %Hp_Var
  %ln95r = ptrtoint i64* %ln95q to i64
  %ln95s = add i64 %ln95r, -6
  store i64 %ln95s, i64* %R1_Var
  %ln95t = load i64*, i64** %Sp_Var
  %ln95u = getelementptr inbounds i64, i64* %ln95t, i32 2
  %ln95v = ptrtoint i64* %ln95u to i64
  %ln95w = inttoptr i64 %ln95v to i64*
  store i64* %ln95w, i64** %Sp_Var
  %ln95x = load i64*, i64** %Sp_Var
  %ln95y = getelementptr inbounds i64, i64* %ln95x, i32 0
  %ln95z = bitcast i64* %ln95y to i64*
  %ln95A = load i64, i64* %ln95z, !tbaa !1
  %ln95B = inttoptr i64 %ln95A to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95C = load i64*, i64** %Sp_Var
  %ln95D = load i64*, i64** %Hp_Var
  %ln95E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95B( i64* %Base_Arg, i64* %ln95C, i64* %ln95D, i64 %ln95E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c8Yu:
  %ln95F = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln95F, !tbaa !4
  %ln95G = load i64, i64* %R1_Var
  store i64 %ln95G, i64* %R1_Var
  %ln95H = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95I = load i64*, i64** %Sp_Var
  %ln95J = load i64*, i64** %Hp_Var
  %ln95K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95H( i64* %Base_Arg, i64* %ln95I, i64* %ln95J, i64 %ln95K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wor_closure_struct = type <{i64, i64}>
@Word_wor_closure$def = internal global %Word_wor_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wor_info$def to i64), i64 0}>
@Word_wor_closure = alias i8* bitcast (%Word_wor_closure_struct* @Word_wor_closure$def to i8*)
@Word_wor_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wor_info$def to i8*)
define ghccc void @Word_wor_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wor_info$def to i64)),i64 160), i64 12884901911, i64 0, i64 4294967311}>
{
c95Q:
  %ls81i = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln95T = load i64, i64* %R3_Var
  store i64 %ln95T, i64* %ls81i
  store i64 %R4_Arg, i64* %R3_Var
  %ln95U = load i64, i64* %ls81i
  store i64 %ln95U, i64* %R2_Var
  %ln95V = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwor_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln95W = load i64, i64* %R2_Var
  %ln95X = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln95V( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln95W, i64 %ln95X, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YL_closure_struct = type <{i64, i64}>
%c963_str_struct = type <{[46 x i8]}>
@r7YL_closure$def = internal global %r7YL_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YL_info$def to i64), i64 0}>
@r7YL_closure = internal alias i8* bitcast (%r7YL_closure_struct* @r7YL_closure$def to i8*)
@c963_str$def = internal constant %c963_str_struct<{[46 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 52, i8 52, i8 44, i8 49, i8 41, i8 45, i8 40, i8 52, i8 55, i8 44, i8 51, i8 51, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 108, i8 116, i8 95, i8 100, i8 101, i8 99, i8 0]}>
@c963_str = internal alias i8* bitcast (%c963_str_struct* @c963_str$def to i8*)
@r7YL_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YL_info$def to i8*)
define internal ghccc void @r7YL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YL_info$def to i64)),i64 112), i64 4294967299, i64 0, i64 4294967311}>
{
c964:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln967 = ptrtoint %c963_str_struct* @c963_str$def to i64
  store i64 %ln967, i64* %R2_Var
  %ln968 = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln969 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln968( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln969, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wltzudec1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wltzudec1_closure$def = internal global %Word_wltzudec1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wltzudec1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wltzudec1_closure = alias i8* bitcast (%Word_wltzudec1_closure_struct* @Word_wltzudec1_closure$def to i8*)
@Word_wltzudec1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wltzudec1_info$def to i8*)
define ghccc void @Word_wltzudec1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wltzudec1_info$def to i64)),i64 176), i64 0, i64 4294967318}>
{
c96h:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc96e = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln96k = load i64*, i64** %Sp_Var
  %ln96l = getelementptr inbounds i64, i64* %ln96k, i32 -2
  %ln96m = ptrtoint i64* %ln96l to i64
  %ln96n = icmp ult i64 %ln96m, %SpLim_Arg
  br i1 %ln96n, label %c96i, label %c96j
c96j:
  %ln96o = ptrtoint i64* %Base_Arg to i64
  %ln96p = inttoptr i64 %ln96o to i8*
  %ln96q = load i64, i64* %R1_Var
  %ln96r = inttoptr i64 %ln96q to i8*
  %ln96s = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln96t = call ccc i8* (i8*, i8*) %ln96s( i8* %ln96p, i8* %ln96r ) nounwind
  %ln96u = ptrtoint i8* %ln96t to i64
  store i64 %ln96u, i64* %lc96e
  %ln96v = load i64, i64* %lc96e
  %ln96w = icmp eq i64 %ln96v, 0
  br i1 %ln96w, label %c96g, label %c96f
c96f:
  %ln96y = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln96x = load i64*, i64** %Sp_Var
  %ln96z = getelementptr inbounds i64, i64* %ln96x, i32 -2
  store i64 %ln96y, i64* %ln96z, !tbaa !1
  %ln96B = load i64, i64* %lc96e
  %ln96A = load i64*, i64** %Sp_Var
  %ln96C = getelementptr inbounds i64, i64* %ln96A, i32 -1
  store i64 %ln96B, i64* %ln96C, !tbaa !1
  %ln96D = load i64*, i64** %Sp_Var
  %ln96E = getelementptr inbounds i64, i64* %ln96D, i32 -2
  %ln96F = ptrtoint i64* %ln96E to i64
  %ln96G = inttoptr i64 %ln96F to i64*
  store i64* %ln96G, i64** %Sp_Var
  %ln96H = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96I = load i64*, i64** %Sp_Var
  %ln96J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96H( i64* %Base_Arg, i64* %ln96I, i64* %Hp_Arg, i64 %ln96J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96g:
  %ln96L = load i64, i64* %R1_Var
  %ln96M = inttoptr i64 %ln96L to i64*
  %ln96N = load i64, i64* %ln96M, !tbaa !3
  %ln96O = inttoptr i64 %ln96N to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96P = load i64*, i64** %Sp_Var
  %ln96Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96O( i64* %Base_Arg, i64* %ln96P, i64* %Hp_Arg, i64 %ln96Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c96i:
  %ln96R = load i64, i64* %R1_Var
  store i64 %ln96R, i64* %R1_Var
  %ln96S = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln96T = bitcast i64* %ln96S to i64*
  %ln96U = load i64, i64* %ln96T, !tbaa !4
  %ln96V = inttoptr i64 %ln96U to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln96W = load i64*, i64** %Sp_Var
  %ln96X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln96V( i64* %Base_Arg, i64* %ln96W, i64* %Hp_Arg, i64 %ln96X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwltzudec_closure_struct = type <{i64, i64}>
@Word_zdwwltzudec_closure$def = internal global %Word_zdwwltzudec_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwltzudec_info$def to i64), i64 0}>
@Word_zdwwltzudec_closure = alias i8* bitcast (%Word_zdwwltzudec_closure_struct* @Word_zdwwltzudec_closure$def to i8*)
@Word_zdwwltzudec_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwltzudec_info$def to i8*)
define ghccc void @Word_zdwwltzudec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwltzudec_info$def to i64)),i64 184), i64 8589934607, i64 0, i64 12884901903}>
{
c97F:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln98F = load i64*, i64** %Sp_Var
  %ln98G = getelementptr inbounds i64, i64* %ln98F, i32 -2
  %ln98H = ptrtoint i64* %ln98G to i64
  %ln98I = icmp ult i64 %ln98H, %SpLim_Arg
  br i1 %ln98I, label %c97G, label %c97H
c97H:
  %ln98K = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97x_info$def to i64
  %ln98J = load i64*, i64** %Sp_Var
  %ln98L = getelementptr inbounds i64, i64* %ln98J, i32 -2
  store i64 %ln98K, i64* %ln98L, !tbaa !1
  %ln98M = load i64, i64* %R2_Var
  store i64 %ln98M, i64* %R1_Var
  %ln98O = load i64, i64* %R3_Var
  %ln98N = load i64*, i64** %Sp_Var
  %ln98P = getelementptr inbounds i64, i64* %ln98N, i32 -1
  store i64 %ln98O, i64* %ln98P, !tbaa !1
  %ln98Q = load i64*, i64** %Sp_Var
  %ln98R = getelementptr inbounds i64, i64* %ln98Q, i32 -2
  %ln98S = ptrtoint i64* %ln98R to i64
  %ln98T = inttoptr i64 %ln98S to i64*
  store i64* %ln98T, i64** %Sp_Var
  %ln98U = load i64, i64* %R1_Var
  %ln98V = and i64 %ln98U, 7
  %ln98W = icmp ne i64 %ln98V, 0
  br i1 %ln98W, label %u98E, label %c97y
c97y:
  %ln98Y = load i64, i64* %R1_Var
  %ln98Z = inttoptr i64 %ln98Y to i64*
  %ln990 = load i64, i64* %ln98Z, !tbaa !3
  %ln991 = inttoptr i64 %ln990 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln992 = load i64*, i64** %Sp_Var
  %ln993 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln991( i64* %Base_Arg, i64* %ln992, i64* %Hp_Arg, i64 %ln993, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u98E:
  %ln994 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97x_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln995 = load i64*, i64** %Sp_Var
  %ln996 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln994( i64* %Base_Arg, i64* %ln995, i64* %Hp_Arg, i64 %ln996, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c97G:
  %ln997 = load i64, i64* %R3_Var
  store i64 %ln997, i64* %R3_Var
  %ln998 = load i64, i64* %R2_Var
  store i64 %ln998, i64* %R2_Var
  %ln999 = ptrtoint %Word_zdwwltzudec_closure_struct* @Word_zdwwltzudec_closure$def to i64
  store i64 %ln999, i64* %R1_Var
  %ln99a = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln99b = bitcast i64* %ln99a to i64*
  %ln99c = load i64, i64* %ln99b, !tbaa !4
  %ln99d = inttoptr i64 %ln99c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99e = load i64*, i64** %Sp_Var
  %ln99f = load i64, i64* %R1_Var
  %ln99g = load i64, i64* %R2_Var
  %ln99h = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99d( i64* %Base_Arg, i64* %ln99e, i64* %Hp_Arg, i64 %ln99f, i64 %ln99g, i64 %ln99h, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c97x_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97x_info$def to i8*)
define internal ghccc void @c97x_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97x_info$def to i64)),i64 192), i64 1, i64 4294967328}>
{
c97x:
  %ls81m = alloca i64, i32 1
  %ls81o = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls81v = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln99i = load i64*, i64** %Sp_Var
  %ln99j = getelementptr inbounds i64, i64* %ln99i, i32 1
  %ln99k = bitcast i64* %ln99j to i64*
  %ln99l = load i64, i64* %ln99k, !tbaa !1
  store i64 %ln99l, i64* %ls81m
  %ln99m = load i64, i64* %R1_Var
  %ln99n = and i64 %ln99m, 7
  switch i64 %ln99n, label %c97B [i64 1, label %c97B
i64 2, label %c97C
i64 3, label %c97D]
c97B:
  %ln99p = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97K_info$def to i64
  %ln99o = load i64*, i64** %Sp_Var
  %ln99q = getelementptr inbounds i64, i64* %ln99o, i32 0
  store i64 %ln99p, i64* %ln99q, !tbaa !1
  %ln99t = load i64, i64* %R1_Var
  %ln99u = add i64 %ln99t, 7
  %ln99v = inttoptr i64 %ln99u to i64*
  %ln99w = load i64, i64* %ln99v, !tbaa !3
  store i64 %ln99w, i64* %ls81o
  %ln99x = load i64, i64* %ls81m
  store i64 %ln99x, i64* %R1_Var
  %ln99z = load i64, i64* %ls81o
  %ln99y = load i64*, i64** %Sp_Var
  %ln99A = getelementptr inbounds i64, i64* %ln99y, i32 1
  store i64 %ln99z, i64* %ln99A, !tbaa !1
  %ln99B = load i64, i64* %R1_Var
  %ln99C = and i64 %ln99B, 7
  %ln99D = icmp ne i64 %ln99C, 0
  br i1 %ln99D, label %u98C, label %c97M
c97M:
  %ln99F = load i64, i64* %R1_Var
  %ln99G = inttoptr i64 %ln99F to i64*
  %ln99H = load i64, i64* %ln99G, !tbaa !3
  %ln99I = inttoptr i64 %ln99H to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99J = load i64*, i64** %Sp_Var
  %ln99K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99I( i64* %Base_Arg, i64* %ln99J, i64* %Hp_Arg, i64 %ln99K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u98C:
  %ln99L = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97K_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln99M = load i64*, i64** %Sp_Var
  %ln99N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln99L( i64* %Base_Arg, i64* %ln99M, i64* %Hp_Arg, i64 %ln99N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c97C:
  %ln99P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c988_info$def to i64
  %ln99O = load i64*, i64** %Sp_Var
  %ln99Q = getelementptr inbounds i64, i64* %ln99O, i32 0
  store i64 %ln99P, i64* %ln99Q, !tbaa !1
  %ln99T = load i64, i64* %R1_Var
  %ln99U = add i64 %ln99T, 6
  %ln99V = inttoptr i64 %ln99U to i64*
  %ln99W = load i64, i64* %ln99V, !tbaa !3
  store i64 %ln99W, i64* %ls81v
  %ln99X = load i64, i64* %ls81m
  store i64 %ln99X, i64* %R1_Var
  %ln99Z = load i64, i64* %ls81v
  %ln99Y = load i64*, i64** %Sp_Var
  %ln9a0 = getelementptr inbounds i64, i64* %ln99Y, i32 1
  store i64 %ln99Z, i64* %ln9a0, !tbaa !1
  %ln9a1 = load i64, i64* %R1_Var
  %ln9a2 = and i64 %ln9a1, 7
  %ln9a3 = icmp ne i64 %ln9a2, 0
  br i1 %ln9a3, label %u98D, label %c98a
c98a:
  %ln9a5 = load i64, i64* %R1_Var
  %ln9a6 = inttoptr i64 %ln9a5 to i64*
  %ln9a7 = load i64, i64* %ln9a6, !tbaa !3
  %ln9a8 = inttoptr i64 %ln9a7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9a9 = load i64*, i64** %Sp_Var
  %ln9aa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9a8( i64* %Base_Arg, i64* %ln9a9, i64* %Hp_Arg, i64 %ln9aa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u98D:
  %ln9ab = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c988_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ac = load i64*, i64** %Sp_Var
  %ln9ad = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ab( i64* %Base_Arg, i64* %ln9ac, i64* %Hp_Arg, i64 %ln9ad, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c97D:
  %ln9ae = ptrtoint %Word_wltzudec1_closure_struct* @Word_wltzudec1_closure$def to i64
  store i64 %ln9ae, i64* %R1_Var
  %ln9af = load i64*, i64** %Sp_Var
  %ln9ag = getelementptr inbounds i64, i64* %ln9af, i32 2
  %ln9ah = ptrtoint i64* %ln9ag to i64
  %ln9ai = inttoptr i64 %ln9ah to i64*
  store i64* %ln9ai, i64** %Sp_Var
  %ln9ak = load i64, i64* %R1_Var
  %ln9al = inttoptr i64 %ln9ak to i64*
  %ln9am = load i64, i64* %ln9al, !tbaa !3
  %ln9an = inttoptr i64 %ln9am to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ao = load i64*, i64** %Sp_Var
  %ln9ap = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9an( i64* %Base_Arg, i64* %ln9ao, i64* %Hp_Arg, i64 %ln9ap, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c988_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c988_info$def to i8*)
define internal ghccc void @c988_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c988_info$def to i64)),i64 192), i64 65, i64 4294967328}>
{
c988:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9aq = load i64, i64* %R1_Var
  %ln9ar = and i64 %ln9aq, 7
  switch i64 %ln9ar, label %c98h [i64 1, label %c98h
i64 2, label %c98p
i64 3, label %c98t]
c98h:
  %ln9at = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c98e_info$def to i64
  %ln9as = load i64*, i64** %Sp_Var
  %ln9au = getelementptr inbounds i64, i64* %ln9as, i32 0
  store i64 %ln9at, i64* %ln9au, !tbaa !1
  %ln9ax = load i64, i64* %R1_Var
  %ln9ay = add i64 %ln9ax, 7
  %ln9az = inttoptr i64 %ln9ay to i64*
  %ln9aA = load i64, i64* %ln9az, !tbaa !3
  store i64 %ln9aA, i64* %R2_Var
  %ln9aB = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9aC = load i64*, i64** %Sp_Var
  %ln9aD = load i64, i64* %R1_Var
  %ln9aE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9aB( i64* %Base_Arg, i64* %ln9aC, i64* %Hp_Arg, i64 %ln9aD, i64 %ln9aE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c98p:
  %ln9aF = load i64*, i64** %Sp_Var
  %ln9aG = getelementptr inbounds i64, i64* %ln9aF, i32 1
  %ln9aH = bitcast i64* %ln9aG to i64*
  %ln9aI = load i64, i64* %ln9aH, !tbaa !1
  %ln9aL = load i64, i64* %R1_Var
  %ln9aM = add i64 %ln9aL, 6
  %ln9aN = inttoptr i64 %ln9aM to i64*
  %ln9aO = load i64, i64* %ln9aN, !tbaa !3
  %ln9aP = icmp ult i64 %ln9aI, %ln9aO
  %ln9aQ = zext i1 %ln9aP to i64
  %ln9aR = shl i64 %ln9aQ, 3
  %ln9aS = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %ln9aT = add i64 %ln9aR, %ln9aS
  %ln9aU = inttoptr i64 %ln9aT to i64*
  %ln9aV = load i64, i64* %ln9aU, !tbaa !5
  store i64 %ln9aV, i64* %R1_Var
  %ln9aW = load i64*, i64** %Sp_Var
  %ln9aX = getelementptr inbounds i64, i64* %ln9aW, i32 2
  %ln9aY = ptrtoint i64* %ln9aX to i64
  %ln9aZ = inttoptr i64 %ln9aY to i64*
  store i64* %ln9aZ, i64** %Sp_Var
  %ln9b0 = load i64*, i64** %Sp_Var
  %ln9b1 = getelementptr inbounds i64, i64* %ln9b0, i32 0
  %ln9b2 = bitcast i64* %ln9b1 to i64*
  %ln9b3 = load i64, i64* %ln9b2, !tbaa !1
  %ln9b4 = inttoptr i64 %ln9b3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9b5 = load i64*, i64** %Sp_Var
  %ln9b6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9b4( i64* %Base_Arg, i64* %ln9b5, i64* %Hp_Arg, i64 %ln9b6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c98t:
  %ln9b7 = ptrtoint %Word_wltzudec1_closure_struct* @Word_wltzudec1_closure$def to i64
  store i64 %ln9b7, i64* %R1_Var
  %ln9b8 = load i64*, i64** %Sp_Var
  %ln9b9 = getelementptr inbounds i64, i64* %ln9b8, i32 2
  %ln9ba = ptrtoint i64* %ln9b9 to i64
  %ln9bb = inttoptr i64 %ln9ba to i64*
  store i64* %ln9bb, i64** %Sp_Var
  %ln9bd = load i64, i64* %R1_Var
  %ln9be = inttoptr i64 %ln9bd to i64*
  %ln9bf = load i64, i64* %ln9be, !tbaa !3
  %ln9bg = inttoptr i64 %ln9bf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bh = load i64*, i64** %Sp_Var
  %ln9bi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bg( i64* %Base_Arg, i64* %ln9bh, i64* %Hp_Arg, i64 %ln9bi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c98e_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c98e_info$def to i8*)
define internal ghccc void @c98e_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
c98e:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9bj = load i64*, i64** %Sp_Var
  %ln9bk = getelementptr inbounds i64, i64* %ln9bj, i32 1
  %ln9bl = bitcast i64* %ln9bk to i64*
  %ln9bm = load i64, i64* %ln9bl, !tbaa !1
  %ln9bn = load i64, i64* %R1_Var
  %ln9bo = icmp ult i64 %ln9bm, %ln9bn
  %ln9bp = zext i1 %ln9bo to i64
  %ln9bq = shl i64 %ln9bp, 3
  %ln9br = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %ln9bs = add i64 %ln9bq, %ln9br
  %ln9bt = inttoptr i64 %ln9bs to i64*
  %ln9bu = load i64, i64* %ln9bt, !tbaa !5
  store i64 %ln9bu, i64* %R1_Var
  %ln9bv = load i64*, i64** %Sp_Var
  %ln9bw = getelementptr inbounds i64, i64* %ln9bv, i32 2
  %ln9bx = ptrtoint i64* %ln9bw to i64
  %ln9by = inttoptr i64 %ln9bx to i64*
  store i64* %ln9by, i64** %Sp_Var
  %ln9bz = load i64*, i64** %Sp_Var
  %ln9bA = getelementptr inbounds i64, i64* %ln9bz, i32 0
  %ln9bB = bitcast i64* %ln9bA to i64*
  %ln9bC = load i64, i64* %ln9bB, !tbaa !1
  %ln9bD = inttoptr i64 %ln9bC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bE = load i64*, i64** %Sp_Var
  %ln9bF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bD( i64* %Base_Arg, i64* %ln9bE, i64* %Hp_Arg, i64 %ln9bF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c97K_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97K_info$def to i8*)
define internal ghccc void @c97K_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97K_info$def to i64)),i64 192), i64 1, i64 4294967328}>
{
c97K:
  %ls81o = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9bG = load i64*, i64** %Sp_Var
  %ln9bH = getelementptr inbounds i64, i64* %ln9bG, i32 1
  %ln9bI = bitcast i64* %ln9bH to i64*
  %ln9bJ = load i64, i64* %ln9bI, !tbaa !1
  store i64 %ln9bJ, i64* %ls81o
  %ln9bK = load i64, i64* %R1_Var
  %ln9bL = and i64 %ln9bK, 7
  switch i64 %ln9bL, label %c97S [i64 1, label %c97S
i64 2, label %c97X
i64 3, label %c985]
c97S:
  %ln9bO = load i64, i64* %R1_Var
  %ln9bP = add i64 %ln9bO, 7
  %ln9bQ = inttoptr i64 %ln9bP to i64*
  %ln9bR = load i64, i64* %ln9bQ, !tbaa !3
  store i64 %ln9bR, i64* %R3_Var
  %ln9bS = load i64, i64* %ls81o
  store i64 %ln9bS, i64* %R2_Var
  %ln9bT = load i64*, i64** %Sp_Var
  %ln9bU = getelementptr inbounds i64, i64* %ln9bT, i32 2
  %ln9bV = ptrtoint i64* %ln9bU to i64
  %ln9bW = inttoptr i64 %ln9bV to i64*
  store i64* %ln9bW, i64** %Sp_Var
  %ln9bX = bitcast i8* @integerzmgmp_GHCziIntegerziType_ltInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9bY = load i64*, i64** %Sp_Var
  %ln9bZ = load i64, i64* %R1_Var
  %ln9c0 = load i64, i64* %R2_Var
  %ln9c1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9bX( i64* %Base_Arg, i64* %ln9bY, i64* %Hp_Arg, i64 %ln9bZ, i64 %ln9c0, i64 %ln9c1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c97X:
  %ln9c3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97V_info$def to i64
  %ln9c2 = load i64*, i64** %Sp_Var
  %ln9c4 = getelementptr inbounds i64, i64* %ln9c2, i32 0
  store i64 %ln9c3, i64* %ln9c4, !tbaa !1
  %ln9c5 = load i64, i64* %ls81o
  store i64 %ln9c5, i64* %R2_Var
  %ln9c9 = load i64, i64* %R1_Var
  %ln9ca = add i64 %ln9c9, 6
  %ln9cb = inttoptr i64 %ln9ca to i64*
  %ln9cc = load i64, i64* %ln9cb, !tbaa !3
  %ln9c6 = load i64*, i64** %Sp_Var
  %ln9cd = getelementptr inbounds i64, i64* %ln9c6, i32 1
  store i64 %ln9cc, i64* %ln9cd, !tbaa !1
  %ln9ce = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cf = load i64*, i64** %Sp_Var
  %ln9cg = load i64, i64* %R1_Var
  %ln9ch = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ce( i64* %Base_Arg, i64* %ln9cf, i64* %Hp_Arg, i64 %ln9cg, i64 %ln9ch, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c985:
  %ln9ci = ptrtoint %Word_wltzudec1_closure_struct* @Word_wltzudec1_closure$def to i64
  store i64 %ln9ci, i64* %R1_Var
  %ln9cj = load i64*, i64** %Sp_Var
  %ln9ck = getelementptr inbounds i64, i64* %ln9cj, i32 2
  %ln9cl = ptrtoint i64* %ln9ck to i64
  %ln9cm = inttoptr i64 %ln9cl to i64*
  store i64* %ln9cm, i64** %Sp_Var
  %ln9co = load i64, i64* %R1_Var
  %ln9cp = inttoptr i64 %ln9co to i64*
  %ln9cq = load i64, i64* %ln9cp, !tbaa !3
  %ln9cr = inttoptr i64 %ln9cq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cs = load i64*, i64** %Sp_Var
  %ln9ct = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cr( i64* %Base_Arg, i64* %ln9cs, i64* %Hp_Arg, i64 %ln9ct, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c97V_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c97V_info$def to i8*)
define internal ghccc void @c97V_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
c97V:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9cu = load i64, i64* %R1_Var
  %ln9cv = load i64*, i64** %Sp_Var
  %ln9cw = getelementptr inbounds i64, i64* %ln9cv, i32 1
  %ln9cx = bitcast i64* %ln9cw to i64*
  %ln9cy = load i64, i64* %ln9cx, !tbaa !1
  %ln9cz = icmp ult i64 %ln9cu, %ln9cy
  %ln9cA = zext i1 %ln9cz to i64
  %ln9cB = shl i64 %ln9cA, 3
  %ln9cC = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %ln9cD = add i64 %ln9cB, %ln9cC
  %ln9cE = inttoptr i64 %ln9cD to i64*
  %ln9cF = load i64, i64* %ln9cE, !tbaa !5
  store i64 %ln9cF, i64* %R1_Var
  %ln9cG = load i64*, i64** %Sp_Var
  %ln9cH = getelementptr inbounds i64, i64* %ln9cG, i32 2
  %ln9cI = ptrtoint i64* %ln9cH to i64
  %ln9cJ = inttoptr i64 %ln9cI to i64*
  store i64* %ln9cJ, i64** %Sp_Var
  %ln9cK = load i64*, i64** %Sp_Var
  %ln9cL = getelementptr inbounds i64, i64* %ln9cK, i32 0
  %ln9cM = bitcast i64* %ln9cL to i64*
  %ln9cN = load i64, i64* %ln9cM, !tbaa !1
  %ln9cO = inttoptr i64 %ln9cN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9cP = load i64*, i64** %Sp_Var
  %ln9cQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9cO( i64* %Base_Arg, i64* %ln9cP, i64* %Hp_Arg, i64 %ln9cQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wltzudec_closure_struct = type <{i64, i64}>
@Word_wltzudec_closure$def = internal global %Word_wltzudec_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wltzudec_info$def to i64), i64 0}>
@Word_wltzudec_closure = alias i8* bitcast (%Word_wltzudec_closure_struct* @Word_wltzudec_closure$def to i8*)
@Word_wltzudec_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wltzudec_info$def to i8*)
define ghccc void @Word_wltzudec_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wltzudec_info$def to i64)),i64 184), i64 12884901911, i64 0, i64 4294967311}>
{
c9cW:
  %ls81F = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9cZ = load i64, i64* %R3_Var
  store i64 %ln9cZ, i64* %ls81F
  store i64 %R4_Arg, i64* %R3_Var
  %ln9d0 = load i64, i64* %ls81F
  store i64 %ln9d0, i64* %R2_Var
  %ln9d1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwltzudec_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9d2 = load i64, i64* %R2_Var
  %ln9d3 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9d1( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9d2, i64 %ln9d3, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_pow1_closure_struct = type <{i64, i64}>
@Word_pow1_closure$def = internal global %Word_pow1_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 2}>
@Word_pow1_closure = alias i8* bitcast (%Word_pow1_closure_struct* @Word_pow1_closure$def to i8*)
%Word_pow2_closure_struct = type <{i64, i64}>
@Word_pow2_closure$def = internal global %Word_pow2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_pow2_info$def to i64), i64 0}>
@Word_pow2_closure = alias i8* bitcast (%Word_pow2_closure_struct* @Word_pow2_closure$def to i8*)
@Word_pow2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_pow2_info$def to i8*)
define ghccc void @Word_pow2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_pow2_info$def to i64)),i64 200), i64 4294967301, i64 0, i64 4294967311}>
{
c9da:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9dd = load i64, i64* %R2_Var
  store i64 %ln9dd, i64* %R3_Var
  %ln9de = ptrtoint %Word_pow1_closure_struct* @Word_pow1_closure$def to i64
  %ln9df = add i64 %ln9de, 1
  store i64 %ln9df, i64* %R2_Var
  %ln9dg = bitcast i8* @base_GHCziReal_zczuzdszc_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dh = load i64, i64* %R2_Var
  %ln9di = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9dh, i64 %ln9di, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wordToNat1_closure_struct = type <{i64, i64, i64, i64}>
%c9dq_str_struct = type <{[50 x i8]}>
@Word_wordToNat1_closure$def = internal global %Word_wordToNat1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wordToNat1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wordToNat1_closure = alias i8* bitcast (%Word_wordToNat1_closure_struct* @Word_wordToNat1_closure$def to i8*)
@c9dq_str$def = internal constant %c9dq_str_struct<{[50 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 49, i8 48, i8 54, i8 44, i8 49, i8 41, i8 45, i8 40, i8 49, i8 48, i8 55, i8 44, i8 51, i8 54, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 111, i8 114, i8 100, i8 84, i8 111, i8 78, i8 97, i8 116, i8 0]}>
@c9dq_str = internal alias i8* bitcast (%c9dq_str_struct* @c9dq_str$def to i8*)
@Word_wordToNat1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wordToNat1_info$def to i8*)
define ghccc void @Word_wordToNat1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wordToNat1_info$def to i64)),i64 112), i64 0, i64 4294967318}>
{
c9dr:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9dn = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9du = load i64*, i64** %Sp_Var
  %ln9dv = getelementptr inbounds i64, i64* %ln9du, i32 -2
  %ln9dw = ptrtoint i64* %ln9dv to i64
  %ln9dx = icmp ult i64 %ln9dw, %SpLim_Arg
  br i1 %ln9dx, label %c9ds, label %c9dt
c9dt:
  %ln9dy = ptrtoint i64* %Base_Arg to i64
  %ln9dz = inttoptr i64 %ln9dy to i8*
  %ln9dA = load i64, i64* %R1_Var
  %ln9dB = inttoptr i64 %ln9dA to i8*
  %ln9dC = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9dD = call ccc i8* (i8*, i8*) %ln9dC( i8* %ln9dz, i8* %ln9dB ) nounwind
  %ln9dE = ptrtoint i8* %ln9dD to i64
  store i64 %ln9dE, i64* %lc9dn
  %ln9dF = load i64, i64* %lc9dn
  %ln9dG = icmp eq i64 %ln9dF, 0
  br i1 %ln9dG, label %c9dp, label %c9do
c9do:
  %ln9dI = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9dH = load i64*, i64** %Sp_Var
  %ln9dJ = getelementptr inbounds i64, i64* %ln9dH, i32 -2
  store i64 %ln9dI, i64* %ln9dJ, !tbaa !1
  %ln9dL = load i64, i64* %lc9dn
  %ln9dK = load i64*, i64** %Sp_Var
  %ln9dM = getelementptr inbounds i64, i64* %ln9dK, i32 -1
  store i64 %ln9dL, i64* %ln9dM, !tbaa !1
  %ln9dN = ptrtoint %c9dq_str_struct* @c9dq_str$def to i64
  store i64 %ln9dN, i64* %R2_Var
  %ln9dO = load i64*, i64** %Sp_Var
  %ln9dP = getelementptr inbounds i64, i64* %ln9dO, i32 -2
  %ln9dQ = ptrtoint i64* %ln9dP to i64
  %ln9dR = inttoptr i64 %ln9dQ to i64*
  store i64* %ln9dR, i64** %Sp_Var
  %ln9dS = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9dT = load i64*, i64** %Sp_Var
  %ln9dU = load i64, i64* %R1_Var
  %ln9dV = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9dS( i64* %Base_Arg, i64* %ln9dT, i64* %Hp_Arg, i64 %ln9dU, i64 %ln9dV, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9dp:
  %ln9dX = load i64, i64* %R1_Var
  %ln9dY = inttoptr i64 %ln9dX to i64*
  %ln9dZ = load i64, i64* %ln9dY, !tbaa !3
  %ln9e0 = inttoptr i64 %ln9dZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9e1 = load i64*, i64** %Sp_Var
  %ln9e2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9e0( i64* %Base_Arg, i64* %ln9e1, i64* %Hp_Arg, i64 %ln9e2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ds:
  %ln9e3 = load i64, i64* %R1_Var
  store i64 %ln9e3, i64* %R1_Var
  %ln9e4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9e5 = bitcast i64* %ln9e4 to i64*
  %ln9e6 = load i64, i64* %ln9e5, !tbaa !4
  %ln9e7 = inttoptr i64 %ln9e6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9e8 = load i64*, i64** %Sp_Var
  %ln9e9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9e7( i64* %Base_Arg, i64* %ln9e8, i64* %Hp_Arg, i64 %ln9e9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wordToNat_closure_struct = type <{i64, i64}>
@Word_wordToNat_closure$def = internal global %Word_wordToNat_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wordToNat_info$def to i64), i64 0}>
@Word_wordToNat_closure = alias i8* bitcast (%Word_wordToNat_closure_struct* @Word_wordToNat_closure$def to i8*)
@Word_wordToNat_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wordToNat_info$def to i8*)
define ghccc void @Word_wordToNat_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wordToNat_info$def to i64)),i64 32), i64 8589934607, i64 0, i64 54043199823413263}>
{
c9es:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9eF = load i64*, i64** %Sp_Var
  %ln9eG = getelementptr inbounds i64, i64* %ln9eF, i32 -1
  %ln9eH = ptrtoint i64* %ln9eG to i64
  %ln9eI = icmp ult i64 %ln9eH, %SpLim_Arg
  br i1 %ln9eI, label %c9et, label %c9eu
c9eu:
  %ln9eK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ek_info$def to i64
  %ln9eJ = load i64*, i64** %Sp_Var
  %ln9eL = getelementptr inbounds i64, i64* %ln9eJ, i32 -1
  store i64 %ln9eK, i64* %ln9eL, !tbaa !1
  %ln9eM = load i64, i64* %R3_Var
  store i64 %ln9eM, i64* %R1_Var
  %ln9eN = load i64*, i64** %Sp_Var
  %ln9eO = getelementptr inbounds i64, i64* %ln9eN, i32 -1
  %ln9eP = ptrtoint i64* %ln9eO to i64
  %ln9eQ = inttoptr i64 %ln9eP to i64*
  store i64* %ln9eQ, i64** %Sp_Var
  %ln9eR = load i64, i64* %R1_Var
  %ln9eS = and i64 %ln9eR, 7
  %ln9eT = icmp ne i64 %ln9eS, 0
  br i1 %ln9eT, label %u9eE, label %c9el
c9el:
  %ln9eV = load i64, i64* %R1_Var
  %ln9eW = inttoptr i64 %ln9eV to i64*
  %ln9eX = load i64, i64* %ln9eW, !tbaa !3
  %ln9eY = inttoptr i64 %ln9eX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9eZ = load i64*, i64** %Sp_Var
  %ln9f0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9eY( i64* %Base_Arg, i64* %ln9eZ, i64* %Hp_Arg, i64 %ln9f0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9eE:
  %ln9f1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ek_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9f2 = load i64*, i64** %Sp_Var
  %ln9f3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9f1( i64* %Base_Arg, i64* %ln9f2, i64* %Hp_Arg, i64 %ln9f3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9et:
  %ln9f4 = load i64, i64* %R3_Var
  store i64 %ln9f4, i64* %R3_Var
  %ln9f5 = load i64, i64* %R2_Var
  store i64 %ln9f5, i64* %R2_Var
  %ln9f6 = ptrtoint %Word_wordToNat_closure_struct* @Word_wordToNat_closure$def to i64
  store i64 %ln9f6, i64* %R1_Var
  %ln9f7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9f8 = bitcast i64* %ln9f7 to i64*
  %ln9f9 = load i64, i64* %ln9f8, !tbaa !4
  %ln9fa = inttoptr i64 %ln9f9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fb = load i64*, i64** %Sp_Var
  %ln9fc = load i64, i64* %R1_Var
  %ln9fd = load i64, i64* %R2_Var
  %ln9fe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fa( i64* %Base_Arg, i64* %ln9fb, i64* %Hp_Arg, i64 %ln9fc, i64 %ln9fd, i64 %ln9fe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9ek_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ek_info$def to i8*)
define internal ghccc void @c9ek_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9ek_info$def to i64)),i64 32), i64 0, i64 18014402804449312}>
{
c9ek:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9ff = load i64, i64* %R1_Var
  %ln9fg = and i64 %ln9ff, 7
  switch i64 %ln9fg, label %c9eo [i64 1, label %c9eo
i64 2, label %c9ep
i64 3, label %c9eq]
c9eo:
  %ln9fj = load i64, i64* %R1_Var
  %ln9fk = add i64 %ln9fj, 7
  %ln9fl = inttoptr i64 %ln9fk to i64*
  %ln9fm = load i64, i64* %ln9fl, !tbaa !3
  %ln9fn = and i64 %ln9fm, -8
  store i64 %ln9fn, i64* %R1_Var
  %ln9fo = load i64*, i64** %Sp_Var
  %ln9fp = getelementptr inbounds i64, i64* %ln9fo, i32 1
  %ln9fq = ptrtoint i64* %ln9fp to i64
  %ln9fr = inttoptr i64 %ln9fq to i64*
  store i64* %ln9fr, i64** %Sp_Var
  %ln9ft = load i64, i64* %R1_Var
  %ln9fu = inttoptr i64 %ln9ft to i64*
  %ln9fv = load i64, i64* %ln9fu, !tbaa !3
  %ln9fw = inttoptr i64 %ln9fv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fx = load i64*, i64** %Sp_Var
  %ln9fy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fw( i64* %Base_Arg, i64* %ln9fx, i64* %Hp_Arg, i64 %ln9fy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ep:
  %ln9fB = load i64, i64* %R1_Var
  %ln9fC = add i64 %ln9fB, 6
  %ln9fD = inttoptr i64 %ln9fC to i64*
  %ln9fE = load i64, i64* %ln9fD, !tbaa !3
  store i64 %ln9fE, i64* %R2_Var
  %ln9fF = load i64*, i64** %Sp_Var
  %ln9fG = getelementptr inbounds i64, i64* %ln9fF, i32 1
  %ln9fH = ptrtoint i64* %ln9fG to i64
  %ln9fI = inttoptr i64 %ln9fH to i64*
  store i64* %ln9fI, i64** %Sp_Var
  %ln9fJ = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fK = load i64*, i64** %Sp_Var
  %ln9fL = load i64, i64* %R1_Var
  %ln9fM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fJ( i64* %Base_Arg, i64* %ln9fK, i64* %Hp_Arg, i64 %ln9fL, i64 %ln9fM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9eq:
  %ln9fN = ptrtoint %Word_wordToNat1_closure_struct* @Word_wordToNat1_closure$def to i64
  store i64 %ln9fN, i64* %R1_Var
  %ln9fO = load i64*, i64** %Sp_Var
  %ln9fP = getelementptr inbounds i64, i64* %ln9fO, i32 1
  %ln9fQ = ptrtoint i64* %ln9fP to i64
  %ln9fR = inttoptr i64 %ln9fQ to i64*
  store i64* %ln9fR, i64** %Sp_Var
  %ln9fT = load i64, i64* %R1_Var
  %ln9fU = inttoptr i64 %ln9fT to i64*
  %ln9fV = load i64, i64* %ln9fU, !tbaa !3
  %ln9fW = inttoptr i64 %ln9fV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9fX = load i64*, i64** %Sp_Var
  %ln9fY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9fW( i64* %Base_Arg, i64* %ln9fX, i64* %Hp_Arg, i64 %ln9fY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YM_closure_struct = type <{i64, i64}>
%c9g4_str_struct = type <{[43 x i8]}>
@r7YM_closure$def = internal global %r7YM_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YM_info$def to i64), i64 0}>
@r7YM_closure = internal alias i8* bitcast (%r7YM_closure_struct* @r7YM_closure$def to i8*)
@c9g4_str$def = internal constant %c9g4_str_struct<{[43 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 55, i8 57, i8 44, i8 49, i8 41, i8 45, i8 40, i8 56, i8 50, i8 44, i8 52, i8 48, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 109, i8 111, i8 100, i8 0]}>
@c9g4_str = internal alias i8* bitcast (%c9g4_str_struct* @c9g4_str$def to i8*)
@r7YM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YM_info$def to i8*)
define internal ghccc void @r7YM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YM_info$def to i64)),i64 112), i64 4294967299, i64 0, i64 4294967311}>
{
c9g5:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9g8 = ptrtoint %c9g4_str_struct* @c9g4_str$def to i64
  store i64 %ln9g8, i64* %R2_Var
  %ln9g9 = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9ga = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9g9( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9ga, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wmod1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wmod1_closure$def = internal global %Word_wmod1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmod1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wmod1_closure = alias i8* bitcast (%Word_wmod1_closure_struct* @Word_wmod1_closure$def to i8*)
@Word_wmod1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmod1_info$def to i8*)
define ghccc void @Word_wmod1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmod1_info$def to i64)),i64 224), i64 0, i64 4294967318}>
{
c9gi:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9gf = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9gl = load i64*, i64** %Sp_Var
  %ln9gm = getelementptr inbounds i64, i64* %ln9gl, i32 -2
  %ln9gn = ptrtoint i64* %ln9gm to i64
  %ln9go = icmp ult i64 %ln9gn, %SpLim_Arg
  br i1 %ln9go, label %c9gj, label %c9gk
c9gk:
  %ln9gp = ptrtoint i64* %Base_Arg to i64
  %ln9gq = inttoptr i64 %ln9gp to i8*
  %ln9gr = load i64, i64* %R1_Var
  %ln9gs = inttoptr i64 %ln9gr to i8*
  %ln9gt = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9gu = call ccc i8* (i8*, i8*) %ln9gt( i8* %ln9gq, i8* %ln9gs ) nounwind
  %ln9gv = ptrtoint i8* %ln9gu to i64
  store i64 %ln9gv, i64* %lc9gf
  %ln9gw = load i64, i64* %lc9gf
  %ln9gx = icmp eq i64 %ln9gw, 0
  br i1 %ln9gx, label %c9gh, label %c9gg
c9gg:
  %ln9gz = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9gy = load i64*, i64** %Sp_Var
  %ln9gA = getelementptr inbounds i64, i64* %ln9gy, i32 -2
  store i64 %ln9gz, i64* %ln9gA, !tbaa !1
  %ln9gC = load i64, i64* %lc9gf
  %ln9gB = load i64*, i64** %Sp_Var
  %ln9gD = getelementptr inbounds i64, i64* %ln9gB, i32 -1
  store i64 %ln9gC, i64* %ln9gD, !tbaa !1
  %ln9gE = load i64*, i64** %Sp_Var
  %ln9gF = getelementptr inbounds i64, i64* %ln9gE, i32 -2
  %ln9gG = ptrtoint i64* %ln9gF to i64
  %ln9gH = inttoptr i64 %ln9gG to i64*
  store i64* %ln9gH, i64** %Sp_Var
  %ln9gI = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gJ = load i64*, i64** %Sp_Var
  %ln9gK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gI( i64* %Base_Arg, i64* %ln9gJ, i64* %Hp_Arg, i64 %ln9gK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gh:
  %ln9gM = load i64, i64* %R1_Var
  %ln9gN = inttoptr i64 %ln9gM to i64*
  %ln9gO = load i64, i64* %ln9gN, !tbaa !3
  %ln9gP = inttoptr i64 %ln9gO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gQ = load i64*, i64** %Sp_Var
  %ln9gR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gP( i64* %Base_Arg, i64* %ln9gQ, i64* %Hp_Arg, i64 %ln9gR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9gj:
  %ln9gS = load i64, i64* %R1_Var
  store i64 %ln9gS, i64* %R1_Var
  %ln9gT = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9gU = bitcast i64* %ln9gT to i64*
  %ln9gV = load i64, i64* %ln9gU, !tbaa !4
  %ln9gW = inttoptr i64 %ln9gV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9gX = load i64*, i64** %Sp_Var
  %ln9gY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9gW( i64* %Base_Arg, i64* %ln9gX, i64* %Hp_Arg, i64 %ln9gY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwmod_closure_struct = type <{i64, i64}>
@Word_zdwwmod_closure$def = internal global %Word_zdwwmod_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwmod_info$def to i64), i64 0}>
@Word_zdwwmod_closure = alias i8* bitcast (%Word_zdwwmod_closure_struct* @Word_zdwwmod_closure$def to i8*)
@s81V_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s81V_info$def to i8*)
define internal ghccc void @s81V_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s81V_info$def to i64)),i64 232), i64 2, i64 4294967315}>
{
c9hV:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9jy = load i64*, i64** %Sp_Var
  %ln9jz = getelementptr inbounds i64, i64* %ln9jy, i32 -2
  %ln9jA = ptrtoint i64* %ln9jz to i64
  %ln9jB = icmp ult i64 %ln9jA, %SpLim_Arg
  br i1 %ln9jB, label %c9hW, label %c9hX
c9hX:
  %ln9jD = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9jC = load i64*, i64** %Sp_Var
  %ln9jE = getelementptr inbounds i64, i64* %ln9jC, i32 -2
  store i64 %ln9jD, i64* %ln9jE, !tbaa !1
  %ln9jG = load i64, i64* %R1_Var
  %ln9jF = load i64*, i64** %Sp_Var
  %ln9jH = getelementptr inbounds i64, i64* %ln9jF, i32 -1
  store i64 %ln9jG, i64* %ln9jH, !tbaa !1
  %ln9jK = load i64, i64* %R1_Var
  %ln9jL = add i64 %ln9jK, 24
  %ln9jM = inttoptr i64 %ln9jL to i64*
  %ln9jN = load i64, i64* %ln9jM, !tbaa !3
  store i64 %ln9jN, i64* %R3_Var
  %ln9jQ = load i64, i64* %R1_Var
  %ln9jR = add i64 %ln9jQ, 16
  %ln9jS = inttoptr i64 %ln9jR to i64*
  %ln9jT = load i64, i64* %ln9jS, !tbaa !3
  store i64 %ln9jT, i64* %R2_Var
  %ln9jU = load i64*, i64** %Sp_Var
  %ln9jV = getelementptr inbounds i64, i64* %ln9jU, i32 -2
  %ln9jW = ptrtoint i64* %ln9jV to i64
  %ln9jX = inttoptr i64 %ln9jW to i64*
  store i64* %ln9jX, i64** %Sp_Var
  %ln9jY = bitcast i8* @base_GHCziReal_zdfIntegralIntegerzuzdcrem_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9jZ = load i64*, i64** %Sp_Var
  %ln9k0 = load i64, i64* %R1_Var
  %ln9k1 = load i64, i64* %R2_Var
  %ln9k2 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9jY( i64* %Base_Arg, i64* %ln9jZ, i64* %Hp_Arg, i64 %ln9k0, i64 %ln9k1, i64 %ln9k2, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9hW:
  %ln9k3 = load i64, i64* %R1_Var
  store i64 %ln9k3, i64* %R1_Var
  %ln9k4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9k5 = bitcast i64* %ln9k4 to i64*
  %ln9k6 = load i64, i64* %ln9k5, !tbaa !4
  %ln9k7 = inttoptr i64 %ln9k6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9k8 = load i64*, i64** %Sp_Var
  %ln9k9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9k7( i64* %Base_Arg, i64* %ln9k8, i64* %Hp_Arg, i64 %ln9k9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwwmod_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwmod_info$def to i8*)
define ghccc void @Word_zdwwmod_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwmod_info$def to i64)),i64 232), i64 8589934607, i64 0, i64 64424509455}>
{
c9i3:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9ka = load i64*, i64** %Sp_Var
  %ln9kb = getelementptr inbounds i64, i64* %ln9ka, i32 -2
  %ln9kc = ptrtoint i64* %ln9kb to i64
  %ln9kd = icmp ult i64 %ln9kc, %SpLim_Arg
  br i1 %ln9kd, label %c9i4, label %c9i5
c9i5:
  %ln9kf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to i64
  %ln9ke = load i64*, i64** %Sp_Var
  %ln9kg = getelementptr inbounds i64, i64* %ln9ke, i32 -2
  store i64 %ln9kf, i64* %ln9kg, !tbaa !1
  %ln9kh = load i64, i64* %R2_Var
  store i64 %ln9kh, i64* %R1_Var
  %ln9kj = load i64, i64* %R3_Var
  %ln9ki = load i64*, i64** %Sp_Var
  %ln9kk = getelementptr inbounds i64, i64* %ln9ki, i32 -1
  store i64 %ln9kj, i64* %ln9kk, !tbaa !1
  %ln9kl = load i64*, i64** %Sp_Var
  %ln9km = getelementptr inbounds i64, i64* %ln9kl, i32 -2
  %ln9kn = ptrtoint i64* %ln9km to i64
  %ln9ko = inttoptr i64 %ln9kn to i64*
  store i64* %ln9ko, i64** %Sp_Var
  %ln9kp = load i64, i64* %R1_Var
  %ln9kq = and i64 %ln9kp, 7
  %ln9kr = icmp ne i64 %ln9kq, 0
  br i1 %ln9kr, label %u9jv, label %c9hI
c9hI:
  %ln9kt = load i64, i64* %R1_Var
  %ln9ku = inttoptr i64 %ln9kt to i64*
  %ln9kv = load i64, i64* %ln9ku, !tbaa !3
  %ln9kw = inttoptr i64 %ln9kv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kx = load i64*, i64** %Sp_Var
  %ln9ky = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kw( i64* %Base_Arg, i64* %ln9kx, i64* %Hp_Arg, i64 %ln9ky, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jv:
  %ln9kz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kA = load i64*, i64** %Sp_Var
  %ln9kB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kz( i64* %Base_Arg, i64* %ln9kA, i64* %Hp_Arg, i64 %ln9kB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9i4:
  %ln9kC = load i64, i64* %R3_Var
  store i64 %ln9kC, i64* %R3_Var
  %ln9kD = load i64, i64* %R2_Var
  store i64 %ln9kD, i64* %R2_Var
  %ln9kE = ptrtoint %Word_zdwwmod_closure_struct* @Word_zdwwmod_closure$def to i64
  store i64 %ln9kE, i64* %R1_Var
  %ln9kF = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9kG = bitcast i64* %ln9kF to i64*
  %ln9kH = load i64, i64* %ln9kG, !tbaa !4
  %ln9kI = inttoptr i64 %ln9kH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9kJ = load i64*, i64** %Sp_Var
  %ln9kK = load i64, i64* %R1_Var
  %ln9kL = load i64, i64* %R2_Var
  %ln9kM = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9kI( i64* %Base_Arg, i64* %ln9kJ, i64* %Hp_Arg, i64 %ln9kK, i64 %ln9kL, i64 %ln9kM, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9hH_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to i8*)
define internal ghccc void @c9hH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hH_info$def to i64)),i64 232), i64 1, i64 47244640288}>
{
c9hH:
  %ls81Q = alloca i64, i32 1
  %ls81S = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls822 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9kN = load i64*, i64** %Sp_Var
  %ln9kO = getelementptr inbounds i64, i64* %ln9kN, i32 1
  %ln9kP = bitcast i64* %ln9kO to i64*
  %ln9kQ = load i64, i64* %ln9kP, !tbaa !1
  store i64 %ln9kQ, i64* %ls81Q
  %ln9kR = load i64, i64* %R1_Var
  %ln9kS = and i64 %ln9kR, 7
  switch i64 %ln9kS, label %c9hZ [i64 1, label %c9hZ
i64 2, label %c9i0
i64 3, label %c9i1]
c9hZ:
  %ln9kU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hM_info$def to i64
  %ln9kT = load i64*, i64** %Sp_Var
  %ln9kV = getelementptr inbounds i64, i64* %ln9kT, i32 0
  store i64 %ln9kU, i64* %ln9kV, !tbaa !1
  %ln9kY = load i64, i64* %R1_Var
  %ln9kZ = add i64 %ln9kY, 7
  %ln9l0 = inttoptr i64 %ln9kZ to i64*
  %ln9l1 = load i64, i64* %ln9l0, !tbaa !3
  store i64 %ln9l1, i64* %ls81S
  %ln9l2 = load i64, i64* %ls81Q
  store i64 %ln9l2, i64* %R1_Var
  %ln9l4 = load i64, i64* %ls81S
  %ln9l3 = load i64*, i64** %Sp_Var
  %ln9l5 = getelementptr inbounds i64, i64* %ln9l3, i32 1
  store i64 %ln9l4, i64* %ln9l5, !tbaa !1
  %ln9l6 = load i64, i64* %R1_Var
  %ln9l7 = and i64 %ln9l6, 7
  %ln9l8 = icmp ne i64 %ln9l7, 0
  br i1 %ln9l8, label %u9jt, label %c9hN
c9hN:
  %ln9la = load i64, i64* %R1_Var
  %ln9lb = inttoptr i64 %ln9la to i64*
  %ln9lc = load i64, i64* %ln9lb, !tbaa !3
  %ln9ld = inttoptr i64 %ln9lc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9le = load i64*, i64** %Sp_Var
  %ln9lf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ld( i64* %Base_Arg, i64* %ln9le, i64* %Hp_Arg, i64 %ln9lf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jt:
  %ln9lg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lh = load i64*, i64** %Sp_Var
  %ln9li = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lg( i64* %Base_Arg, i64* %ln9lh, i64* %Hp_Arg, i64 %ln9li, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9i0:
  %ln9lk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iD_info$def to i64
  %ln9lj = load i64*, i64** %Sp_Var
  %ln9ll = getelementptr inbounds i64, i64* %ln9lj, i32 0
  store i64 %ln9lk, i64* %ln9ll, !tbaa !1
  %ln9lo = load i64, i64* %R1_Var
  %ln9lp = add i64 %ln9lo, 6
  %ln9lq = inttoptr i64 %ln9lp to i64*
  %ln9lr = load i64, i64* %ln9lq, !tbaa !3
  store i64 %ln9lr, i64* %ls822
  %ln9ls = load i64, i64* %ls81Q
  store i64 %ln9ls, i64* %R1_Var
  %ln9lu = load i64, i64* %ls822
  %ln9lt = load i64*, i64** %Sp_Var
  %ln9lv = getelementptr inbounds i64, i64* %ln9lt, i32 1
  store i64 %ln9lu, i64* %ln9lv, !tbaa !1
  %ln9lw = load i64, i64* %R1_Var
  %ln9lx = and i64 %ln9lw, 7
  %ln9ly = icmp ne i64 %ln9lx, 0
  br i1 %ln9ly, label %u9ju, label %c9iF
c9iF:
  %ln9lA = load i64, i64* %R1_Var
  %ln9lB = inttoptr i64 %ln9lA to i64*
  %ln9lC = load i64, i64* %ln9lB, !tbaa !3
  %ln9lD = inttoptr i64 %ln9lC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lE = load i64*, i64** %Sp_Var
  %ln9lF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lD( i64* %Base_Arg, i64* %ln9lE, i64* %Hp_Arg, i64 %ln9lF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9ju:
  %ln9lG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lH = load i64*, i64** %Sp_Var
  %ln9lI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lG( i64* %Base_Arg, i64* %ln9lH, i64* %Hp_Arg, i64 %ln9lI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9i1:
  %ln9lJ = ptrtoint %Word_wmod1_closure_struct* @Word_wmod1_closure$def to i64
  store i64 %ln9lJ, i64* %R1_Var
  %ln9lK = load i64*, i64** %Sp_Var
  %ln9lL = getelementptr inbounds i64, i64* %ln9lK, i32 2
  %ln9lM = ptrtoint i64* %ln9lL to i64
  %ln9lN = inttoptr i64 %ln9lM to i64*
  store i64* %ln9lN, i64** %Sp_Var
  %ln9lP = load i64, i64* %R1_Var
  %ln9lQ = inttoptr i64 %ln9lP to i64*
  %ln9lR = load i64, i64* %ln9lQ, !tbaa !3
  %ln9lS = inttoptr i64 %ln9lR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9lT = load i64*, i64** %Sp_Var
  %ln9lU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9lS( i64* %Base_Arg, i64* %ln9lT, i64* %Hp_Arg, i64 %ln9lU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9iD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iD_info$def to i8*)
define internal ghccc void @c9iD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iD_info$def to i64)),i64 240), i64 65, i64 21474836512}>
{
c9iD:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls829 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9lV = load i64, i64* %R1_Var
  %ln9lW = and i64 %ln9lV, 7
  switch i64 %ln9lW, label %c9iM [i64 1, label %c9iM
i64 2, label %c9j3
i64 3, label %c9jl]
c9iM:
  %ln9lY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to i64
  %ln9lX = load i64*, i64** %Sp_Var
  %ln9lZ = getelementptr inbounds i64, i64* %ln9lX, i32 0
  store i64 %ln9lY, i64* %ln9lZ, !tbaa !1
  %ln9m2 = load i64, i64* %R1_Var
  %ln9m3 = add i64 %ln9m2, 7
  %ln9m4 = inttoptr i64 %ln9m3 to i64*
  %ln9m5 = load i64, i64* %ln9m4, !tbaa !3
  store i64 %ln9m5, i64* %R2_Var
  %ln9m6 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9m7 = load i64*, i64** %Sp_Var
  %ln9m8 = load i64*, i64** %Hp_Var
  %ln9m9 = load i64, i64* %R1_Var
  %ln9ma = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9m6( i64* %Base_Arg, i64* %ln9m7, i64* %ln9m8, i64 %ln9m9, i64 %ln9ma, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9j3:
  %ln9mb = load i64*, i64** %Hp_Var
  %ln9mc = getelementptr inbounds i64, i64* %ln9mb, i32 2
  %ln9md = ptrtoint i64* %ln9mc to i64
  %ln9me = inttoptr i64 %ln9md to i64*
  store i64* %ln9me, i64** %Hp_Var
  %ln9mf = load i64*, i64** %Hp_Var
  %ln9mg = ptrtoint i64* %ln9mf to i64
  %ln9mh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9mi = bitcast i64* %ln9mh to i64*
  %ln9mj = load i64, i64* %ln9mi, !tbaa !4
  %ln9mk = icmp ugt i64 %ln9mg, %ln9mj
  br i1 %ln9mk, label %c9j8, label %c9j7
c9j7:
  %ln9mn = load i64, i64* %R1_Var
  %ln9mo = add i64 %ln9mn, 6
  %ln9mp = inttoptr i64 %ln9mo to i64*
  %ln9mq = load i64, i64* %ln9mp, !tbaa !3
  store i64 %ln9mq, i64* %ls829
  %ln9mr = load i64, i64* %ls829
  switch i64 %ln9mr, label %c9jg [i64 0, label %u9jr]
c9jg:
  %ln9mt = ptrtoint i8* @Word_W64_con_info to i64
  %ln9ms = load i64*, i64** %Hp_Var
  %ln9mu = getelementptr inbounds i64, i64* %ln9ms, i32 -1
  store i64 %ln9mt, i64* %ln9mu, !tbaa !2
  %ln9mw = load i64*, i64** %Sp_Var
  %ln9mx = getelementptr inbounds i64, i64* %ln9mw, i32 1
  %ln9my = bitcast i64* %ln9mx to i64*
  %ln9mz = load i64, i64* %ln9my, !tbaa !1
  %ln9mA = load i64, i64* %ls829
  %ln9mB = urem i64 %ln9mz, %ln9mA
  %ln9mv = load i64*, i64** %Hp_Var
  %ln9mC = getelementptr inbounds i64, i64* %ln9mv, i32 0
  store i64 %ln9mB, i64* %ln9mC, !tbaa !2
  %ln9mE = load i64*, i64** %Hp_Var
  %ln9mF = ptrtoint i64* %ln9mE to i64
  %ln9mG = add i64 %ln9mF, -6
  store i64 %ln9mG, i64* %R1_Var
  %ln9mH = load i64*, i64** %Sp_Var
  %ln9mI = getelementptr inbounds i64, i64* %ln9mH, i32 2
  %ln9mJ = ptrtoint i64* %ln9mI to i64
  %ln9mK = inttoptr i64 %ln9mJ to i64*
  store i64* %ln9mK, i64** %Sp_Var
  %ln9mL = load i64*, i64** %Sp_Var
  %ln9mM = getelementptr inbounds i64, i64* %ln9mL, i32 0
  %ln9mN = bitcast i64* %ln9mM to i64*
  %ln9mO = load i64, i64* %ln9mN, !tbaa !1
  %ln9mP = inttoptr i64 %ln9mO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mQ = load i64*, i64** %Sp_Var
  %ln9mR = load i64*, i64** %Hp_Var
  %ln9mS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mP( i64* %Base_Arg, i64* %ln9mQ, i64* %ln9mR, i64 %ln9mS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9jr:
  %ln9mT = load i64*, i64** %Sp_Var
  %ln9mU = getelementptr inbounds i64, i64* %ln9mT, i32 2
  %ln9mV = ptrtoint i64* %ln9mU to i64
  %ln9mW = inttoptr i64 %ln9mV to i64*
  store i64* %ln9mW, i64** %Sp_Var
  %ln9mX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jh_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9mY = load i64*, i64** %Sp_Var
  %ln9mZ = load i64*, i64** %Hp_Var
  %ln9n0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9mX( i64* %Base_Arg, i64* %ln9mY, i64* %ln9mZ, i64 %ln9n0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9j8:
  %ln9n1 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9n1, !tbaa !4
  %ln9n2 = load i64, i64* %R1_Var
  store i64 %ln9n2, i64* %R1_Var
  %ln9n3 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9n4 = load i64*, i64** %Sp_Var
  %ln9n5 = load i64*, i64** %Hp_Var
  %ln9n6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9n3( i64* %Base_Arg, i64* %ln9n4, i64* %ln9n5, i64 %ln9n6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9jl:
  %ln9n7 = ptrtoint %Word_wmod1_closure_struct* @Word_wmod1_closure$def to i64
  store i64 %ln9n7, i64* %R1_Var
  %ln9n8 = load i64*, i64** %Sp_Var
  %ln9n9 = getelementptr inbounds i64, i64* %ln9n8, i32 2
  %ln9na = ptrtoint i64* %ln9n9 to i64
  %ln9nb = inttoptr i64 %ln9na to i64*
  store i64* %ln9nb, i64** %Sp_Var
  %ln9nd = load i64, i64* %R1_Var
  %ln9ne = inttoptr i64 %ln9nd to i64*
  %ln9nf = load i64, i64* %ln9ne, !tbaa !3
  %ln9ng = inttoptr i64 %ln9nf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nh = load i64*, i64** %Sp_Var
  %ln9ni = load i64*, i64** %Hp_Var
  %ln9nj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ng( i64* %Base_Arg, i64* %ln9nh, i64* %ln9ni, i64 %ln9nj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9iJ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to i8*)
define internal ghccc void @c9iJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9iJ_info$def to i64)),i64 240), i64 65, i64 4294967328}>
{
c9iJ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9nk = load i64, i64* %R1_Var
  switch i64 %ln9nk, label %c9iV [i64 0, label %c9j2]
c9iV:
  %ln9nl = load i64*, i64** %Hp_Var
  %ln9nm = getelementptr inbounds i64, i64* %ln9nl, i32 2
  %ln9nn = ptrtoint i64* %ln9nm to i64
  %ln9no = inttoptr i64 %ln9nn to i64*
  store i64* %ln9no, i64** %Hp_Var
  %ln9np = load i64*, i64** %Hp_Var
  %ln9nq = ptrtoint i64* %ln9np to i64
  %ln9nr = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9ns = bitcast i64* %ln9nr to i64*
  %ln9nt = load i64, i64* %ln9ns, !tbaa !4
  %ln9nu = icmp ugt i64 %ln9nq, %ln9nt
  br i1 %ln9nu, label %c9iY, label %c9iX
c9iX:
  %ln9nw = ptrtoint i8* @Word_W64_con_info to i64
  %ln9nv = load i64*, i64** %Hp_Var
  %ln9nx = getelementptr inbounds i64, i64* %ln9nv, i32 -1
  store i64 %ln9nw, i64* %ln9nx, !tbaa !2
  %ln9nz = load i64*, i64** %Sp_Var
  %ln9nA = getelementptr inbounds i64, i64* %ln9nz, i32 1
  %ln9nB = bitcast i64* %ln9nA to i64*
  %ln9nC = load i64, i64* %ln9nB, !tbaa !1
  %ln9nD = load i64, i64* %R1_Var
  %ln9nE = urem i64 %ln9nC, %ln9nD
  %ln9ny = load i64*, i64** %Hp_Var
  %ln9nF = getelementptr inbounds i64, i64* %ln9ny, i32 0
  store i64 %ln9nE, i64* %ln9nF, !tbaa !2
  %ln9nH = load i64*, i64** %Hp_Var
  %ln9nI = ptrtoint i64* %ln9nH to i64
  %ln9nJ = add i64 %ln9nI, -6
  store i64 %ln9nJ, i64* %R1_Var
  %ln9nK = load i64*, i64** %Sp_Var
  %ln9nL = getelementptr inbounds i64, i64* %ln9nK, i32 2
  %ln9nM = ptrtoint i64* %ln9nL to i64
  %ln9nN = inttoptr i64 %ln9nM to i64*
  store i64* %ln9nN, i64** %Sp_Var
  %ln9nO = load i64*, i64** %Sp_Var
  %ln9nP = getelementptr inbounds i64, i64* %ln9nO, i32 0
  %ln9nQ = bitcast i64* %ln9nP to i64*
  %ln9nR = load i64, i64* %ln9nQ, !tbaa !1
  %ln9nS = inttoptr i64 %ln9nR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nT = load i64*, i64** %Sp_Var
  %ln9nU = load i64*, i64** %Hp_Var
  %ln9nV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nS( i64* %Base_Arg, i64* %ln9nT, i64* %ln9nU, i64 %ln9nV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9iY:
  %ln9nW = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9nW, !tbaa !4
  %ln9nX = load i64, i64* %R1_Var
  store i64 %ln9nX, i64* %R1_Var
  %ln9nY = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9nZ = load i64*, i64** %Sp_Var
  %ln9o0 = load i64*, i64** %Hp_Var
  %ln9o1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9nY( i64* %Base_Arg, i64* %ln9nZ, i64* %ln9o0, i64 %ln9o1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9j2:
  %ln9o2 = ptrtoint i8* @base_GHCziReal_divZZeroError_closure to i64
  store i64 %ln9o2, i64* %R1_Var
  %ln9o3 = load i64*, i64** %Sp_Var
  %ln9o4 = getelementptr inbounds i64, i64* %ln9o3, i32 2
  %ln9o5 = ptrtoint i64* %ln9o4 to i64
  %ln9o6 = inttoptr i64 %ln9o5 to i64*
  store i64* %ln9o6, i64** %Sp_Var
  %ln9o7 = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9o8 = load i64*, i64** %Sp_Var
  %ln9o9 = load i64*, i64** %Hp_Var
  %ln9oa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9o7( i64* %Base_Arg, i64* %ln9o8, i64* %ln9o9, i64 %ln9oa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9hM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hM_info$def to i8*)
define internal ghccc void @c9hM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9hM_info$def to i64)),i64 232), i64 1, i64 47244640288}>
{
c9hM:
  %ls81S = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls81U = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9ob = load i64*, i64** %Sp_Var
  %ln9oc = getelementptr inbounds i64, i64* %ln9ob, i32 1
  %ln9od = bitcast i64* %ln9oc to i64*
  %ln9oe = load i64, i64* %ln9od, !tbaa !1
  store i64 %ln9oe, i64* %ls81S
  %ln9of = load i64, i64* %R1_Var
  %ln9og = and i64 %ln9of, 7
  switch i64 %ln9og, label %c9i9 [i64 1, label %c9i9
i64 2, label %c9ih
i64 3, label %c9iA]
c9i9:
  %ln9oh = load i64*, i64** %Hp_Var
  %ln9oi = getelementptr inbounds i64, i64* %ln9oh, i32 6
  %ln9oj = ptrtoint i64* %ln9oi to i64
  %ln9ok = inttoptr i64 %ln9oj to i64*
  store i64* %ln9ok, i64** %Hp_Var
  %ln9ol = load i64*, i64** %Hp_Var
  %ln9om = ptrtoint i64* %ln9ol to i64
  %ln9on = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9oo = bitcast i64* %ln9on to i64*
  %ln9op = load i64, i64* %ln9oo, !tbaa !4
  %ln9oq = icmp ugt i64 %ln9om, %ln9op
  br i1 %ln9oq, label %c9ic, label %c9ib
c9ib:
  %ln9ot = load i64, i64* %R1_Var
  %ln9ou = add i64 %ln9ot, 7
  %ln9ov = inttoptr i64 %ln9ou to i64*
  %ln9ow = load i64, i64* %ln9ov, !tbaa !3
  store i64 %ln9ow, i64* %ls81U
  %ln9oy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s81V_info$def to i64
  %ln9ox = load i64*, i64** %Hp_Var
  %ln9oz = getelementptr inbounds i64, i64* %ln9ox, i32 -5
  store i64 %ln9oy, i64* %ln9oz, !tbaa !2
  %ln9oB = load i64, i64* %ls81S
  %ln9oA = load i64*, i64** %Hp_Var
  %ln9oC = getelementptr inbounds i64, i64* %ln9oA, i32 -3
  store i64 %ln9oB, i64* %ln9oC, !tbaa !2
  %ln9oE = load i64, i64* %ls81U
  %ln9oD = load i64*, i64** %Hp_Var
  %ln9oF = getelementptr inbounds i64, i64* %ln9oD, i32 -2
  store i64 %ln9oE, i64* %ln9oF, !tbaa !2
  %ln9oH = ptrtoint i8* @Word_W_con_info to i64
  %ln9oG = load i64*, i64** %Hp_Var
  %ln9oI = getelementptr inbounds i64, i64* %ln9oG, i32 -1
  store i64 %ln9oH, i64* %ln9oI, !tbaa !2
  %ln9oK = load i64*, i64** %Hp_Var
  %ln9oL = getelementptr inbounds i64, i64* %ln9oK, i32 -5
  %ln9oM = ptrtoint i64* %ln9oL to i64
  %ln9oJ = load i64*, i64** %Hp_Var
  %ln9oN = getelementptr inbounds i64, i64* %ln9oJ, i32 0
  store i64 %ln9oM, i64* %ln9oN, !tbaa !2
  %ln9oP = load i64*, i64** %Hp_Var
  %ln9oQ = ptrtoint i64* %ln9oP to i64
  %ln9oR = add i64 %ln9oQ, -7
  store i64 %ln9oR, i64* %R1_Var
  %ln9oS = load i64*, i64** %Sp_Var
  %ln9oT = getelementptr inbounds i64, i64* %ln9oS, i32 2
  %ln9oU = ptrtoint i64* %ln9oT to i64
  %ln9oV = inttoptr i64 %ln9oU to i64*
  store i64* %ln9oV, i64** %Sp_Var
  %ln9oW = load i64*, i64** %Sp_Var
  %ln9oX = getelementptr inbounds i64, i64* %ln9oW, i32 0
  %ln9oY = bitcast i64* %ln9oX to i64*
  %ln9oZ = load i64, i64* %ln9oY, !tbaa !1
  %ln9p0 = inttoptr i64 %ln9oZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9p1 = load i64*, i64** %Sp_Var
  %ln9p2 = load i64*, i64** %Hp_Var
  %ln9p3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9p0( i64* %Base_Arg, i64* %ln9p1, i64* %ln9p2, i64 %ln9p3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ic:
  %ln9p4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln9p4, !tbaa !4
  %ln9p5 = load i64, i64* %R1_Var
  store i64 %ln9p5, i64* %R1_Var
  %ln9p6 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9p7 = load i64*, i64** %Sp_Var
  %ln9p8 = load i64*, i64** %Hp_Var
  %ln9p9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9p6( i64* %Base_Arg, i64* %ln9p7, i64* %ln9p8, i64 %ln9p9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ih:
  %ln9pb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9if_info$def to i64
  %ln9pa = load i64*, i64** %Sp_Var
  %ln9pc = getelementptr inbounds i64, i64* %ln9pa, i32 0
  store i64 %ln9pb, i64* %ln9pc, !tbaa !1
  %ln9pd = load i64, i64* %ls81S
  store i64 %ln9pd, i64* %R2_Var
  %ln9ph = load i64, i64* %R1_Var
  %ln9pi = add i64 %ln9ph, 6
  %ln9pj = inttoptr i64 %ln9pi to i64*
  %ln9pk = load i64, i64* %ln9pj, !tbaa !3
  %ln9pe = load i64*, i64** %Sp_Var
  %ln9pl = getelementptr inbounds i64, i64* %ln9pe, i32 1
  store i64 %ln9pk, i64* %ln9pl, !tbaa !1
  %ln9pm = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pn = load i64*, i64** %Sp_Var
  %ln9po = load i64*, i64** %Hp_Var
  %ln9pp = load i64, i64* %R1_Var
  %ln9pq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pm( i64* %Base_Arg, i64* %ln9pn, i64* %ln9po, i64 %ln9pp, i64 %ln9pq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9iA:
  %ln9pr = ptrtoint %Word_wmod1_closure_struct* @Word_wmod1_closure$def to i64
  store i64 %ln9pr, i64* %R1_Var
  %ln9ps = load i64*, i64** %Sp_Var
  %ln9pt = getelementptr inbounds i64, i64* %ln9ps, i32 2
  %ln9pu = ptrtoint i64* %ln9pt to i64
  %ln9pv = inttoptr i64 %ln9pu to i64*
  store i64* %ln9pv, i64** %Sp_Var
  %ln9px = load i64, i64* %R1_Var
  %ln9py = inttoptr i64 %ln9px to i64*
  %ln9pz = load i64, i64* %ln9py, !tbaa !3
  %ln9pA = inttoptr i64 %ln9pz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9pB = load i64*, i64** %Sp_Var
  %ln9pC = load i64*, i64** %Hp_Var
  %ln9pD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9pA( i64* %Base_Arg, i64* %ln9pB, i64* %ln9pC, i64 %ln9pD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9if_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9if_info$def to i8*)
define internal ghccc void @c9if_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9if_info$def to i64)),i64 240), i64 65, i64 4294967328}>
{
c9if:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls81Y = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9pE = load i64*, i64** %Hp_Var
  %ln9pF = getelementptr inbounds i64, i64* %ln9pE, i32 2
  %ln9pG = ptrtoint i64* %ln9pF to i64
  %ln9pH = inttoptr i64 %ln9pG to i64*
  store i64* %ln9pH, i64** %Hp_Var
  %ln9pI = load i64*, i64** %Hp_Var
  %ln9pJ = ptrtoint i64* %ln9pI to i64
  %ln9pK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9pL = bitcast i64* %ln9pK to i64*
  %ln9pM = load i64, i64* %ln9pL, !tbaa !4
  %ln9pN = icmp ugt i64 %ln9pJ, %ln9pM
  br i1 %ln9pN, label %c9in, label %c9im
c9im:
  %ln9pO = load i64*, i64** %Sp_Var
  %ln9pP = getelementptr inbounds i64, i64* %ln9pO, i32 1
  %ln9pQ = bitcast i64* %ln9pP to i64*
  %ln9pR = load i64, i64* %ln9pQ, !tbaa !1
  store i64 %ln9pR, i64* %ls81Y
  %ln9pS = load i64, i64* %ls81Y
  switch i64 %ln9pS, label %c9iv [i64 0, label %u9js]
c9iv:
  %ln9pU = ptrtoint i8* @Word_W64_con_info to i64
  %ln9pT = load i64*, i64** %Hp_Var
  %ln9pV = getelementptr inbounds i64, i64* %ln9pT, i32 -1
  store i64 %ln9pU, i64* %ln9pV, !tbaa !2
  %ln9pX = load i64, i64* %R1_Var
  %ln9pY = load i64, i64* %ls81Y
  %ln9pZ = urem i64 %ln9pX, %ln9pY
  %ln9pW = load i64*, i64** %Hp_Var
  %ln9q0 = getelementptr inbounds i64, i64* %ln9pW, i32 0
  store i64 %ln9pZ, i64* %ln9q0, !tbaa !2
  %ln9q2 = load i64*, i64** %Hp_Var
  %ln9q3 = ptrtoint i64* %ln9q2 to i64
  %ln9q4 = add i64 %ln9q3, -6
  store i64 %ln9q4, i64* %R1_Var
  %ln9q5 = load i64*, i64** %Sp_Var
  %ln9q6 = getelementptr inbounds i64, i64* %ln9q5, i32 2
  %ln9q7 = ptrtoint i64* %ln9q6 to i64
  %ln9q8 = inttoptr i64 %ln9q7 to i64*
  store i64* %ln9q8, i64** %Sp_Var
  %ln9q9 = load i64*, i64** %Sp_Var
  %ln9qa = getelementptr inbounds i64, i64* %ln9q9, i32 0
  %ln9qb = bitcast i64* %ln9qa to i64*
  %ln9qc = load i64, i64* %ln9qb, !tbaa !1
  %ln9qd = inttoptr i64 %ln9qc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qe = load i64*, i64** %Sp_Var
  %ln9qf = load i64*, i64** %Hp_Var
  %ln9qg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qd( i64* %Base_Arg, i64* %ln9qe, i64* %ln9qf, i64 %ln9qg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9js:
  %ln9qh = load i64*, i64** %Sp_Var
  %ln9qi = getelementptr inbounds i64, i64* %ln9qh, i32 2
  %ln9qj = ptrtoint i64* %ln9qi to i64
  %ln9qk = inttoptr i64 %ln9qj to i64*
  store i64* %ln9qk, i64** %Sp_Var
  %ln9ql = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jh_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qm = load i64*, i64** %Sp_Var
  %ln9qn = load i64*, i64** %Hp_Var
  %ln9qo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ql( i64* %Base_Arg, i64* %ln9qm, i64* %ln9qn, i64 %ln9qo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9in:
  %ln9qp = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9qp, !tbaa !4
  %ln9qq = load i64, i64* %R1_Var
  store i64 %ln9qq, i64* %R1_Var
  %ln9qr = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qs = load i64*, i64** %Sp_Var
  %ln9qt = load i64*, i64** %Hp_Var
  %ln9qu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qr( i64* %Base_Arg, i64* %ln9qs, i64* %ln9qt, i64 %ln9qu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9jh_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9jh_entry$def to i8*)
define internal ghccc void @c9jh_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9jh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9qv = load i64*, i64** %Hp_Var
  %ln9qw = getelementptr inbounds i64, i64* %ln9qv, i32 -2
  %ln9qx = ptrtoint i64* %ln9qw to i64
  %ln9qy = inttoptr i64 %ln9qx to i64*
  store i64* %ln9qy, i64** %Hp_Var
  %ln9qz = ptrtoint i8* @base_GHCziReal_divZZeroError_closure to i64
  store i64 %ln9qz, i64* %R1_Var
  %ln9qA = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qB = load i64*, i64** %Hp_Var
  %ln9qC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qA( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9qB, i64 %ln9qC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wmod_closure_struct = type <{i64, i64}>
@Word_wmod_closure$def = internal global %Word_wmod_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmod_info$def to i64), i64 0}>
@Word_wmod_closure = alias i8* bitcast (%Word_wmod_closure_struct* @Word_wmod_closure$def to i8*)
@Word_wmod_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmod_info$def to i8*)
define ghccc void @Word_wmod_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmod_info$def to i64)),i64 248), i64 12884901911, i64 0, i64 4294967311}>
{
c9qI:
  %ls82f = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9qL = load i64, i64* %R3_Var
  store i64 %ln9qL, i64* %ls82f
  store i64 %R4_Arg, i64* %R3_Var
  %ln9qM = load i64, i64* %ls82f
  store i64 %ln9qM, i64* %R2_Var
  %ln9qN = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwmod_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9qO = load i64, i64* %R2_Var
  %ln9qP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9qN( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9qO, i64 %ln9qP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YN_closure_struct = type <{i64, i64}>
%c9qV_str_struct = type <{[43 x i8]}>
@r7YN_closure$def = internal global %r7YN_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YN_info$def to i64), i64 0}>
@r7YN_closure = internal alias i8* bitcast (%r7YN_closure_struct* @r7YN_closure$def to i8*)
@c9qV_str$def = internal constant %c9qV_str_struct<{[43 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 55, i8 51, i8 44, i8 49, i8 41, i8 45, i8 40, i8 55, i8 54, i8 44, i8 52, i8 49, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 100, i8 105, i8 118, i8 0]}>
@c9qV_str = internal alias i8* bitcast (%c9qV_str_struct* @c9qV_str$def to i8*)
@r7YN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YN_info$def to i8*)
define internal ghccc void @r7YN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YN_info$def to i64)),i64 112), i64 4294967299, i64 0, i64 4294967311}>
{
c9qW:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9qZ = ptrtoint %c9qV_str_struct* @c9qV_str$def to i64
  store i64 %ln9qZ, i64* %R2_Var
  %ln9r0 = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9r1 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9r0( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9r1, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wdiv1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wdiv1_closure$def = internal global %Word_wdiv1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wdiv1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wdiv1_closure = alias i8* bitcast (%Word_wdiv1_closure_struct* @Word_wdiv1_closure$def to i8*)
@Word_wdiv1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wdiv1_info$def to i8*)
define ghccc void @Word_wdiv1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wdiv1_info$def to i64)),i64 264), i64 0, i64 4294967318}>
{
c9r9:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lc9r6 = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9rc = load i64*, i64** %Sp_Var
  %ln9rd = getelementptr inbounds i64, i64* %ln9rc, i32 -2
  %ln9re = ptrtoint i64* %ln9rd to i64
  %ln9rf = icmp ult i64 %ln9re, %SpLim_Arg
  br i1 %ln9rf, label %c9ra, label %c9rb
c9rb:
  %ln9rg = ptrtoint i64* %Base_Arg to i64
  %ln9rh = inttoptr i64 %ln9rg to i8*
  %ln9ri = load i64, i64* %R1_Var
  %ln9rj = inttoptr i64 %ln9ri to i8*
  %ln9rk = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9rl = call ccc i8* (i8*, i8*) %ln9rk( i8* %ln9rh, i8* %ln9rj ) nounwind
  %ln9rm = ptrtoint i8* %ln9rl to i64
  store i64 %ln9rm, i64* %lc9r6
  %ln9rn = load i64, i64* %lc9r6
  %ln9ro = icmp eq i64 %ln9rn, 0
  br i1 %ln9ro, label %c9r8, label %c9r7
c9r7:
  %ln9rq = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %ln9rp = load i64*, i64** %Sp_Var
  %ln9rr = getelementptr inbounds i64, i64* %ln9rp, i32 -2
  store i64 %ln9rq, i64* %ln9rr, !tbaa !1
  %ln9rt = load i64, i64* %lc9r6
  %ln9rs = load i64*, i64** %Sp_Var
  %ln9ru = getelementptr inbounds i64, i64* %ln9rs, i32 -1
  store i64 %ln9rt, i64* %ln9ru, !tbaa !1
  %ln9rv = load i64*, i64** %Sp_Var
  %ln9rw = getelementptr inbounds i64, i64* %ln9rv, i32 -2
  %ln9rx = ptrtoint i64* %ln9rw to i64
  %ln9ry = inttoptr i64 %ln9rx to i64*
  store i64* %ln9ry, i64** %Sp_Var
  %ln9rz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rA = load i64*, i64** %Sp_Var
  %ln9rB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rz( i64* %Base_Arg, i64* %ln9rA, i64* %Hp_Arg, i64 %ln9rB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9r8:
  %ln9rD = load i64, i64* %R1_Var
  %ln9rE = inttoptr i64 %ln9rD to i64*
  %ln9rF = load i64, i64* %ln9rE, !tbaa !3
  %ln9rG = inttoptr i64 %ln9rF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rH = load i64*, i64** %Sp_Var
  %ln9rI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rG( i64* %Base_Arg, i64* %ln9rH, i64* %Hp_Arg, i64 %ln9rI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9ra:
  %ln9rJ = load i64, i64* %R1_Var
  store i64 %ln9rJ, i64* %R1_Var
  %ln9rK = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9rL = bitcast i64* %ln9rK to i64*
  %ln9rM = load i64, i64* %ln9rL, !tbaa !4
  %ln9rN = inttoptr i64 %ln9rM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9rO = load i64*, i64** %Sp_Var
  %ln9rP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9rN( i64* %Base_Arg, i64* %ln9rO, i64* %Hp_Arg, i64 %ln9rP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwdiv_closure_struct = type <{i64, i64}>
@Word_zdwwdiv_closure$def = internal global %Word_zdwwdiv_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwdiv_info$def to i64), i64 0}>
@Word_zdwwdiv_closure = alias i8* bitcast (%Word_zdwwdiv_closure_struct* @Word_zdwwdiv_closure$def to i8*)
@s82o_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s82o_info$def to i8*)
define internal ghccc void @s82o_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s82o_info$def to i64)),i64 272), i64 2, i64 4294967315}>
{
c9sM:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9up = load i64*, i64** %Sp_Var
  %ln9uq = getelementptr inbounds i64, i64* %ln9up, i32 -2
  %ln9ur = ptrtoint i64* %ln9uq to i64
  %ln9us = icmp ult i64 %ln9ur, %SpLim_Arg
  br i1 %ln9us, label %c9sN, label %c9sO
c9sO:
  %ln9uu = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9ut = load i64*, i64** %Sp_Var
  %ln9uv = getelementptr inbounds i64, i64* %ln9ut, i32 -2
  store i64 %ln9uu, i64* %ln9uv, !tbaa !1
  %ln9ux = load i64, i64* %R1_Var
  %ln9uw = load i64*, i64** %Sp_Var
  %ln9uy = getelementptr inbounds i64, i64* %ln9uw, i32 -1
  store i64 %ln9ux, i64* %ln9uy, !tbaa !1
  %ln9uB = load i64, i64* %R1_Var
  %ln9uC = add i64 %ln9uB, 24
  %ln9uD = inttoptr i64 %ln9uC to i64*
  %ln9uE = load i64, i64* %ln9uD, !tbaa !3
  store i64 %ln9uE, i64* %R3_Var
  %ln9uH = load i64, i64* %R1_Var
  %ln9uI = add i64 %ln9uH, 16
  %ln9uJ = inttoptr i64 %ln9uI to i64*
  %ln9uK = load i64, i64* %ln9uJ, !tbaa !3
  store i64 %ln9uK, i64* %R2_Var
  %ln9uL = load i64*, i64** %Sp_Var
  %ln9uM = getelementptr inbounds i64, i64* %ln9uL, i32 -2
  %ln9uN = ptrtoint i64* %ln9uM to i64
  %ln9uO = inttoptr i64 %ln9uN to i64*
  store i64* %ln9uO, i64** %Sp_Var
  %ln9uP = bitcast i8* @base_GHCziReal_zdfIntegralIntegerzuzdcquot_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9uQ = load i64*, i64** %Sp_Var
  %ln9uR = load i64, i64* %R1_Var
  %ln9uS = load i64, i64* %R2_Var
  %ln9uT = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uP( i64* %Base_Arg, i64* %ln9uQ, i64* %Hp_Arg, i64 %ln9uR, i64 %ln9uS, i64 %ln9uT, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9sN:
  %ln9uU = load i64, i64* %R1_Var
  store i64 %ln9uU, i64* %R1_Var
  %ln9uV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9uW = bitcast i64* %ln9uV to i64*
  %ln9uX = load i64, i64* %ln9uW, !tbaa !4
  %ln9uY = inttoptr i64 %ln9uX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9uZ = load i64*, i64** %Sp_Var
  %ln9v0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9uY( i64* %Base_Arg, i64* %ln9uZ, i64* %Hp_Arg, i64 %ln9v0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwwdiv_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwdiv_info$def to i8*)
define ghccc void @Word_zdwwdiv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwdiv_info$def to i64)),i64 240), i64 8589934607, i64 0, i64 485331304463}>
{
c9sU:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9v1 = load i64*, i64** %Sp_Var
  %ln9v2 = getelementptr inbounds i64, i64* %ln9v1, i32 -2
  %ln9v3 = ptrtoint i64* %ln9v2 to i64
  %ln9v4 = icmp ult i64 %ln9v3, %SpLim_Arg
  br i1 %ln9v4, label %c9sV, label %c9sW
c9sW:
  %ln9v6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sy_info$def to i64
  %ln9v5 = load i64*, i64** %Sp_Var
  %ln9v7 = getelementptr inbounds i64, i64* %ln9v5, i32 -2
  store i64 %ln9v6, i64* %ln9v7, !tbaa !1
  %ln9v8 = load i64, i64* %R2_Var
  store i64 %ln9v8, i64* %R1_Var
  %ln9va = load i64, i64* %R3_Var
  %ln9v9 = load i64*, i64** %Sp_Var
  %ln9vb = getelementptr inbounds i64, i64* %ln9v9, i32 -1
  store i64 %ln9va, i64* %ln9vb, !tbaa !1
  %ln9vc = load i64*, i64** %Sp_Var
  %ln9vd = getelementptr inbounds i64, i64* %ln9vc, i32 -2
  %ln9ve = ptrtoint i64* %ln9vd to i64
  %ln9vf = inttoptr i64 %ln9ve to i64*
  store i64* %ln9vf, i64** %Sp_Var
  %ln9vg = load i64, i64* %R1_Var
  %ln9vh = and i64 %ln9vg, 7
  %ln9vi = icmp ne i64 %ln9vh, 0
  br i1 %ln9vi, label %u9um, label %c9sz
c9sz:
  %ln9vk = load i64, i64* %R1_Var
  %ln9vl = inttoptr i64 %ln9vk to i64*
  %ln9vm = load i64, i64* %ln9vl, !tbaa !3
  %ln9vn = inttoptr i64 %ln9vm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9vo = load i64*, i64** %Sp_Var
  %ln9vp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9vn( i64* %Base_Arg, i64* %ln9vo, i64* %Hp_Arg, i64 %ln9vp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9um:
  %ln9vq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sy_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9vr = load i64*, i64** %Sp_Var
  %ln9vs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9vq( i64* %Base_Arg, i64* %ln9vr, i64* %Hp_Arg, i64 %ln9vs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9sV:
  %ln9vt = load i64, i64* %R3_Var
  store i64 %ln9vt, i64* %R3_Var
  %ln9vu = load i64, i64* %R2_Var
  store i64 %ln9vu, i64* %R2_Var
  %ln9vv = ptrtoint %Word_zdwwdiv_closure_struct* @Word_zdwwdiv_closure$def to i64
  store i64 %ln9vv, i64* %R1_Var
  %ln9vw = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9vx = bitcast i64* %ln9vw to i64*
  %ln9vy = load i64, i64* %ln9vx, !tbaa !4
  %ln9vz = inttoptr i64 %ln9vy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9vA = load i64*, i64** %Sp_Var
  %ln9vB = load i64, i64* %R1_Var
  %ln9vC = load i64, i64* %R2_Var
  %ln9vD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9vz( i64* %Base_Arg, i64* %ln9vA, i64* %Hp_Arg, i64 %ln9vB, i64 %ln9vC, i64 %ln9vD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9sy_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sy_info$def to i8*)
define internal ghccc void @c9sy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sy_info$def to i64)),i64 240), i64 1, i64 347892351008}>
{
c9sy:
  %ls82j = alloca i64, i32 1
  %ls82l = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls82v = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9vE = load i64*, i64** %Sp_Var
  %ln9vF = getelementptr inbounds i64, i64* %ln9vE, i32 1
  %ln9vG = bitcast i64* %ln9vF to i64*
  %ln9vH = load i64, i64* %ln9vG, !tbaa !1
  store i64 %ln9vH, i64* %ls82j
  %ln9vI = load i64, i64* %R1_Var
  %ln9vJ = and i64 %ln9vI, 7
  switch i64 %ln9vJ, label %c9sQ [i64 1, label %c9sQ
i64 2, label %c9sR
i64 3, label %c9sS]
c9sQ:
  %ln9vL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sD_info$def to i64
  %ln9vK = load i64*, i64** %Sp_Var
  %ln9vM = getelementptr inbounds i64, i64* %ln9vK, i32 0
  store i64 %ln9vL, i64* %ln9vM, !tbaa !1
  %ln9vP = load i64, i64* %R1_Var
  %ln9vQ = add i64 %ln9vP, 7
  %ln9vR = inttoptr i64 %ln9vQ to i64*
  %ln9vS = load i64, i64* %ln9vR, !tbaa !3
  store i64 %ln9vS, i64* %ls82l
  %ln9vT = load i64, i64* %ls82j
  store i64 %ln9vT, i64* %R1_Var
  %ln9vV = load i64, i64* %ls82l
  %ln9vU = load i64*, i64** %Sp_Var
  %ln9vW = getelementptr inbounds i64, i64* %ln9vU, i32 1
  store i64 %ln9vV, i64* %ln9vW, !tbaa !1
  %ln9vX = load i64, i64* %R1_Var
  %ln9vY = and i64 %ln9vX, 7
  %ln9vZ = icmp ne i64 %ln9vY, 0
  br i1 %ln9vZ, label %u9uk, label %c9sE
c9sE:
  %ln9w1 = load i64, i64* %R1_Var
  %ln9w2 = inttoptr i64 %ln9w1 to i64*
  %ln9w3 = load i64, i64* %ln9w2, !tbaa !3
  %ln9w4 = inttoptr i64 %ln9w3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9w5 = load i64*, i64** %Sp_Var
  %ln9w6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9w4( i64* %Base_Arg, i64* %ln9w5, i64* %Hp_Arg, i64 %ln9w6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9uk:
  %ln9w7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sD_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9w8 = load i64*, i64** %Sp_Var
  %ln9w9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9w7( i64* %Base_Arg, i64* %ln9w8, i64* %Hp_Arg, i64 %ln9w9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9sR:
  %ln9wb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tu_info$def to i64
  %ln9wa = load i64*, i64** %Sp_Var
  %ln9wc = getelementptr inbounds i64, i64* %ln9wa, i32 0
  store i64 %ln9wb, i64* %ln9wc, !tbaa !1
  %ln9wf = load i64, i64* %R1_Var
  %ln9wg = add i64 %ln9wf, 6
  %ln9wh = inttoptr i64 %ln9wg to i64*
  %ln9wi = load i64, i64* %ln9wh, !tbaa !3
  store i64 %ln9wi, i64* %ls82v
  %ln9wj = load i64, i64* %ls82j
  store i64 %ln9wj, i64* %R1_Var
  %ln9wl = load i64, i64* %ls82v
  %ln9wk = load i64*, i64** %Sp_Var
  %ln9wm = getelementptr inbounds i64, i64* %ln9wk, i32 1
  store i64 %ln9wl, i64* %ln9wm, !tbaa !1
  %ln9wn = load i64, i64* %R1_Var
  %ln9wo = and i64 %ln9wn, 7
  %ln9wp = icmp ne i64 %ln9wo, 0
  br i1 %ln9wp, label %u9ul, label %c9tw
c9tw:
  %ln9wr = load i64, i64* %R1_Var
  %ln9ws = inttoptr i64 %ln9wr to i64*
  %ln9wt = load i64, i64* %ln9ws, !tbaa !3
  %ln9wu = inttoptr i64 %ln9wt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wv = load i64*, i64** %Sp_Var
  %ln9ww = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wu( i64* %Base_Arg, i64* %ln9wv, i64* %Hp_Arg, i64 %ln9ww, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9ul:
  %ln9wx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tu_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wy = load i64*, i64** %Sp_Var
  %ln9wz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wx( i64* %Base_Arg, i64* %ln9wy, i64* %Hp_Arg, i64 %ln9wz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9sS:
  %ln9wA = ptrtoint %Word_wdiv1_closure_struct* @Word_wdiv1_closure$def to i64
  store i64 %ln9wA, i64* %R1_Var
  %ln9wB = load i64*, i64** %Sp_Var
  %ln9wC = getelementptr inbounds i64, i64* %ln9wB, i32 2
  %ln9wD = ptrtoint i64* %ln9wC to i64
  %ln9wE = inttoptr i64 %ln9wD to i64*
  store i64* %ln9wE, i64** %Sp_Var
  %ln9wG = load i64, i64* %R1_Var
  %ln9wH = inttoptr i64 %ln9wG to i64*
  %ln9wI = load i64, i64* %ln9wH, !tbaa !3
  %ln9wJ = inttoptr i64 %ln9wI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wK = load i64*, i64** %Sp_Var
  %ln9wL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wJ( i64* %Base_Arg, i64* %ln9wK, i64* %Hp_Arg, i64 %ln9wL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9tu_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tu_info$def to i8*)
define internal ghccc void @c9tu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tu_info$def to i64)),i64 240), i64 65, i64 279172874272}>
{
c9tu:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls82C = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9wM = load i64, i64* %R1_Var
  %ln9wN = and i64 %ln9wM, 7
  switch i64 %ln9wN, label %c9tD [i64 1, label %c9tD
i64 2, label %c9tU
i64 3, label %c9uc]
c9tD:
  %ln9wP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tA_info$def to i64
  %ln9wO = load i64*, i64** %Sp_Var
  %ln9wQ = getelementptr inbounds i64, i64* %ln9wO, i32 0
  store i64 %ln9wP, i64* %ln9wQ, !tbaa !1
  %ln9wT = load i64, i64* %R1_Var
  %ln9wU = add i64 %ln9wT, 7
  %ln9wV = inttoptr i64 %ln9wU to i64*
  %ln9wW = load i64, i64* %ln9wV, !tbaa !3
  store i64 %ln9wW, i64* %R2_Var
  %ln9wX = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9wY = load i64*, i64** %Sp_Var
  %ln9wZ = load i64*, i64** %Hp_Var
  %ln9x0 = load i64, i64* %R1_Var
  %ln9x1 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9wX( i64* %Base_Arg, i64* %ln9wY, i64* %ln9wZ, i64 %ln9x0, i64 %ln9x1, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9tU:
  %ln9x2 = load i64*, i64** %Hp_Var
  %ln9x3 = getelementptr inbounds i64, i64* %ln9x2, i32 2
  %ln9x4 = ptrtoint i64* %ln9x3 to i64
  %ln9x5 = inttoptr i64 %ln9x4 to i64*
  store i64* %ln9x5, i64** %Hp_Var
  %ln9x6 = load i64*, i64** %Hp_Var
  %ln9x7 = ptrtoint i64* %ln9x6 to i64
  %ln9x8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9x9 = bitcast i64* %ln9x8 to i64*
  %ln9xa = load i64, i64* %ln9x9, !tbaa !4
  %ln9xb = icmp ugt i64 %ln9x7, %ln9xa
  br i1 %ln9xb, label %c9tZ, label %c9tY
c9tY:
  %ln9xe = load i64, i64* %R1_Var
  %ln9xf = add i64 %ln9xe, 6
  %ln9xg = inttoptr i64 %ln9xf to i64*
  %ln9xh = load i64, i64* %ln9xg, !tbaa !3
  store i64 %ln9xh, i64* %ls82C
  %ln9xi = load i64, i64* %ls82C
  switch i64 %ln9xi, label %c9u7 [i64 0, label %u9ui]
c9u7:
  %ln9xk = ptrtoint i8* @Word_W64_con_info to i64
  %ln9xj = load i64*, i64** %Hp_Var
  %ln9xl = getelementptr inbounds i64, i64* %ln9xj, i32 -1
  store i64 %ln9xk, i64* %ln9xl, !tbaa !2
  %ln9xn = load i64*, i64** %Sp_Var
  %ln9xo = getelementptr inbounds i64, i64* %ln9xn, i32 1
  %ln9xp = bitcast i64* %ln9xo to i64*
  %ln9xq = load i64, i64* %ln9xp, !tbaa !1
  %ln9xr = load i64, i64* %ls82C
  %ln9xs = udiv i64 %ln9xq, %ln9xr
  %ln9xm = load i64*, i64** %Hp_Var
  %ln9xt = getelementptr inbounds i64, i64* %ln9xm, i32 0
  store i64 %ln9xs, i64* %ln9xt, !tbaa !2
  %ln9xv = load i64*, i64** %Hp_Var
  %ln9xw = ptrtoint i64* %ln9xv to i64
  %ln9xx = add i64 %ln9xw, -6
  store i64 %ln9xx, i64* %R1_Var
  %ln9xy = load i64*, i64** %Sp_Var
  %ln9xz = getelementptr inbounds i64, i64* %ln9xy, i32 2
  %ln9xA = ptrtoint i64* %ln9xz to i64
  %ln9xB = inttoptr i64 %ln9xA to i64*
  store i64* %ln9xB, i64** %Sp_Var
  %ln9xC = load i64*, i64** %Sp_Var
  %ln9xD = getelementptr inbounds i64, i64* %ln9xC, i32 0
  %ln9xE = bitcast i64* %ln9xD to i64*
  %ln9xF = load i64, i64* %ln9xE, !tbaa !1
  %ln9xG = inttoptr i64 %ln9xF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9xH = load i64*, i64** %Sp_Var
  %ln9xI = load i64*, i64** %Hp_Var
  %ln9xJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9xG( i64* %Base_Arg, i64* %ln9xH, i64* %ln9xI, i64 %ln9xJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9ui:
  %ln9xK = load i64*, i64** %Sp_Var
  %ln9xL = getelementptr inbounds i64, i64* %ln9xK, i32 2
  %ln9xM = ptrtoint i64* %ln9xL to i64
  %ln9xN = inttoptr i64 %ln9xM to i64*
  store i64* %ln9xN, i64** %Sp_Var
  %ln9xO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9u8_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9xP = load i64*, i64** %Sp_Var
  %ln9xQ = load i64*, i64** %Hp_Var
  %ln9xR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9xO( i64* %Base_Arg, i64* %ln9xP, i64* %ln9xQ, i64 %ln9xR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9tZ:
  %ln9xS = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9xS, !tbaa !4
  %ln9xT = load i64, i64* %R1_Var
  store i64 %ln9xT, i64* %R1_Var
  %ln9xU = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9xV = load i64*, i64** %Sp_Var
  %ln9xW = load i64*, i64** %Hp_Var
  %ln9xX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9xU( i64* %Base_Arg, i64* %ln9xV, i64* %ln9xW, i64 %ln9xX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9uc:
  %ln9xY = ptrtoint %Word_wdiv1_closure_struct* @Word_wdiv1_closure$def to i64
  store i64 %ln9xY, i64* %R1_Var
  %ln9xZ = load i64*, i64** %Sp_Var
  %ln9y0 = getelementptr inbounds i64, i64* %ln9xZ, i32 2
  %ln9y1 = ptrtoint i64* %ln9y0 to i64
  %ln9y2 = inttoptr i64 %ln9y1 to i64*
  store i64* %ln9y2, i64** %Sp_Var
  %ln9y4 = load i64, i64* %R1_Var
  %ln9y5 = inttoptr i64 %ln9y4 to i64*
  %ln9y6 = load i64, i64* %ln9y5, !tbaa !3
  %ln9y7 = inttoptr i64 %ln9y6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9y8 = load i64*, i64** %Sp_Var
  %ln9y9 = load i64*, i64** %Hp_Var
  %ln9ya = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9y7( i64* %Base_Arg, i64* %ln9y8, i64* %ln9y9, i64 %ln9ya, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9tA_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tA_info$def to i8*)
define internal ghccc void @c9tA_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9tA_info$def to i64)),i64 240), i64 65, i64 4294967328}>
{
c9tA:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9yb = load i64, i64* %R1_Var
  switch i64 %ln9yb, label %c9tM [i64 0, label %c9tT]
c9tM:
  %ln9yc = load i64*, i64** %Hp_Var
  %ln9yd = getelementptr inbounds i64, i64* %ln9yc, i32 2
  %ln9ye = ptrtoint i64* %ln9yd to i64
  %ln9yf = inttoptr i64 %ln9ye to i64*
  store i64* %ln9yf, i64** %Hp_Var
  %ln9yg = load i64*, i64** %Hp_Var
  %ln9yh = ptrtoint i64* %ln9yg to i64
  %ln9yi = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9yj = bitcast i64* %ln9yi to i64*
  %ln9yk = load i64, i64* %ln9yj, !tbaa !4
  %ln9yl = icmp ugt i64 %ln9yh, %ln9yk
  br i1 %ln9yl, label %c9tP, label %c9tO
c9tO:
  %ln9yn = ptrtoint i8* @Word_W64_con_info to i64
  %ln9ym = load i64*, i64** %Hp_Var
  %ln9yo = getelementptr inbounds i64, i64* %ln9ym, i32 -1
  store i64 %ln9yn, i64* %ln9yo, !tbaa !2
  %ln9yq = load i64*, i64** %Sp_Var
  %ln9yr = getelementptr inbounds i64, i64* %ln9yq, i32 1
  %ln9ys = bitcast i64* %ln9yr to i64*
  %ln9yt = load i64, i64* %ln9ys, !tbaa !1
  %ln9yu = load i64, i64* %R1_Var
  %ln9yv = udiv i64 %ln9yt, %ln9yu
  %ln9yp = load i64*, i64** %Hp_Var
  %ln9yw = getelementptr inbounds i64, i64* %ln9yp, i32 0
  store i64 %ln9yv, i64* %ln9yw, !tbaa !2
  %ln9yy = load i64*, i64** %Hp_Var
  %ln9yz = ptrtoint i64* %ln9yy to i64
  %ln9yA = add i64 %ln9yz, -6
  store i64 %ln9yA, i64* %R1_Var
  %ln9yB = load i64*, i64** %Sp_Var
  %ln9yC = getelementptr inbounds i64, i64* %ln9yB, i32 2
  %ln9yD = ptrtoint i64* %ln9yC to i64
  %ln9yE = inttoptr i64 %ln9yD to i64*
  store i64* %ln9yE, i64** %Sp_Var
  %ln9yF = load i64*, i64** %Sp_Var
  %ln9yG = getelementptr inbounds i64, i64* %ln9yF, i32 0
  %ln9yH = bitcast i64* %ln9yG to i64*
  %ln9yI = load i64, i64* %ln9yH, !tbaa !1
  %ln9yJ = inttoptr i64 %ln9yI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yK = load i64*, i64** %Sp_Var
  %ln9yL = load i64*, i64** %Hp_Var
  %ln9yM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yJ( i64* %Base_Arg, i64* %ln9yK, i64* %ln9yL, i64 %ln9yM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9tP:
  %ln9yN = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9yN, !tbaa !4
  %ln9yO = load i64, i64* %R1_Var
  store i64 %ln9yO, i64* %R1_Var
  %ln9yP = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yQ = load i64*, i64** %Sp_Var
  %ln9yR = load i64*, i64** %Hp_Var
  %ln9yS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yP( i64* %Base_Arg, i64* %ln9yQ, i64* %ln9yR, i64 %ln9yS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9tT:
  %ln9yT = ptrtoint i8* @base_GHCziReal_divZZeroError_closure to i64
  store i64 %ln9yT, i64* %R1_Var
  %ln9yU = load i64*, i64** %Sp_Var
  %ln9yV = getelementptr inbounds i64, i64* %ln9yU, i32 2
  %ln9yW = ptrtoint i64* %ln9yV to i64
  %ln9yX = inttoptr i64 %ln9yW to i64*
  store i64* %ln9yX, i64** %Sp_Var
  %ln9yY = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9yZ = load i64*, i64** %Sp_Var
  %ln9z0 = load i64*, i64** %Hp_Var
  %ln9z1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9yY( i64* %Base_Arg, i64* %ln9yZ, i64* %ln9z0, i64 %ln9z1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9sD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sD_info$def to i8*)
define internal ghccc void @c9sD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9sD_info$def to i64)),i64 240), i64 1, i64 347892351008}>
{
c9sD:
  %ls82l = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls82n = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9z2 = load i64*, i64** %Sp_Var
  %ln9z3 = getelementptr inbounds i64, i64* %ln9z2, i32 1
  %ln9z4 = bitcast i64* %ln9z3 to i64*
  %ln9z5 = load i64, i64* %ln9z4, !tbaa !1
  store i64 %ln9z5, i64* %ls82l
  %ln9z6 = load i64, i64* %R1_Var
  %ln9z7 = and i64 %ln9z6, 7
  switch i64 %ln9z7, label %c9t0 [i64 1, label %c9t0
i64 2, label %c9t8
i64 3, label %c9tr]
c9t0:
  %ln9z8 = load i64*, i64** %Hp_Var
  %ln9z9 = getelementptr inbounds i64, i64* %ln9z8, i32 6
  %ln9za = ptrtoint i64* %ln9z9 to i64
  %ln9zb = inttoptr i64 %ln9za to i64*
  store i64* %ln9zb, i64** %Hp_Var
  %ln9zc = load i64*, i64** %Hp_Var
  %ln9zd = ptrtoint i64* %ln9zc to i64
  %ln9ze = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9zf = bitcast i64* %ln9ze to i64*
  %ln9zg = load i64, i64* %ln9zf, !tbaa !4
  %ln9zh = icmp ugt i64 %ln9zd, %ln9zg
  br i1 %ln9zh, label %c9t3, label %c9t2
c9t2:
  %ln9zk = load i64, i64* %R1_Var
  %ln9zl = add i64 %ln9zk, 7
  %ln9zm = inttoptr i64 %ln9zl to i64*
  %ln9zn = load i64, i64* %ln9zm, !tbaa !3
  store i64 %ln9zn, i64* %ls82n
  %ln9zp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s82o_info$def to i64
  %ln9zo = load i64*, i64** %Hp_Var
  %ln9zq = getelementptr inbounds i64, i64* %ln9zo, i32 -5
  store i64 %ln9zp, i64* %ln9zq, !tbaa !2
  %ln9zs = load i64, i64* %ls82l
  %ln9zr = load i64*, i64** %Hp_Var
  %ln9zt = getelementptr inbounds i64, i64* %ln9zr, i32 -3
  store i64 %ln9zs, i64* %ln9zt, !tbaa !2
  %ln9zv = load i64, i64* %ls82n
  %ln9zu = load i64*, i64** %Hp_Var
  %ln9zw = getelementptr inbounds i64, i64* %ln9zu, i32 -2
  store i64 %ln9zv, i64* %ln9zw, !tbaa !2
  %ln9zy = ptrtoint i8* @Word_W_con_info to i64
  %ln9zx = load i64*, i64** %Hp_Var
  %ln9zz = getelementptr inbounds i64, i64* %ln9zx, i32 -1
  store i64 %ln9zy, i64* %ln9zz, !tbaa !2
  %ln9zB = load i64*, i64** %Hp_Var
  %ln9zC = getelementptr inbounds i64, i64* %ln9zB, i32 -5
  %ln9zD = ptrtoint i64* %ln9zC to i64
  %ln9zA = load i64*, i64** %Hp_Var
  %ln9zE = getelementptr inbounds i64, i64* %ln9zA, i32 0
  store i64 %ln9zD, i64* %ln9zE, !tbaa !2
  %ln9zG = load i64*, i64** %Hp_Var
  %ln9zH = ptrtoint i64* %ln9zG to i64
  %ln9zI = add i64 %ln9zH, -7
  store i64 %ln9zI, i64* %R1_Var
  %ln9zJ = load i64*, i64** %Sp_Var
  %ln9zK = getelementptr inbounds i64, i64* %ln9zJ, i32 2
  %ln9zL = ptrtoint i64* %ln9zK to i64
  %ln9zM = inttoptr i64 %ln9zL to i64*
  store i64* %ln9zM, i64** %Sp_Var
  %ln9zN = load i64*, i64** %Sp_Var
  %ln9zO = getelementptr inbounds i64, i64* %ln9zN, i32 0
  %ln9zP = bitcast i64* %ln9zO to i64*
  %ln9zQ = load i64, i64* %ln9zP, !tbaa !1
  %ln9zR = inttoptr i64 %ln9zQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zS = load i64*, i64** %Sp_Var
  %ln9zT = load i64*, i64** %Hp_Var
  %ln9zU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zR( i64* %Base_Arg, i64* %ln9zS, i64* %ln9zT, i64 %ln9zU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9t3:
  %ln9zV = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %ln9zV, !tbaa !4
  %ln9zW = load i64, i64* %R1_Var
  store i64 %ln9zW, i64* %R1_Var
  %ln9zX = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9zY = load i64*, i64** %Sp_Var
  %ln9zZ = load i64*, i64** %Hp_Var
  %ln9A0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9zX( i64* %Base_Arg, i64* %ln9zY, i64* %ln9zZ, i64 %ln9A0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9t8:
  %ln9A2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9t6_info$def to i64
  %ln9A1 = load i64*, i64** %Sp_Var
  %ln9A3 = getelementptr inbounds i64, i64* %ln9A1, i32 0
  store i64 %ln9A2, i64* %ln9A3, !tbaa !1
  %ln9A4 = load i64, i64* %ls82l
  store i64 %ln9A4, i64* %R2_Var
  %ln9A8 = load i64, i64* %R1_Var
  %ln9A9 = add i64 %ln9A8, 6
  %ln9Aa = inttoptr i64 %ln9A9 to i64*
  %ln9Ab = load i64, i64* %ln9Aa, !tbaa !3
  %ln9A5 = load i64*, i64** %Sp_Var
  %ln9Ac = getelementptr inbounds i64, i64* %ln9A5, i32 1
  store i64 %ln9Ab, i64* %ln9Ac, !tbaa !1
  %ln9Ad = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ae = load i64*, i64** %Sp_Var
  %ln9Af = load i64*, i64** %Hp_Var
  %ln9Ag = load i64, i64* %R1_Var
  %ln9Ah = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ad( i64* %Base_Arg, i64* %ln9Ae, i64* %ln9Af, i64 %ln9Ag, i64 %ln9Ah, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9tr:
  %ln9Ai = ptrtoint %Word_wdiv1_closure_struct* @Word_wdiv1_closure$def to i64
  store i64 %ln9Ai, i64* %R1_Var
  %ln9Aj = load i64*, i64** %Sp_Var
  %ln9Ak = getelementptr inbounds i64, i64* %ln9Aj, i32 2
  %ln9Al = ptrtoint i64* %ln9Ak to i64
  %ln9Am = inttoptr i64 %ln9Al to i64*
  store i64* %ln9Am, i64** %Sp_Var
  %ln9Ao = load i64, i64* %R1_Var
  %ln9Ap = inttoptr i64 %ln9Ao to i64*
  %ln9Aq = load i64, i64* %ln9Ap, !tbaa !3
  %ln9Ar = inttoptr i64 %ln9Aq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9As = load i64*, i64** %Sp_Var
  %ln9At = load i64*, i64** %Hp_Var
  %ln9Au = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ar( i64* %Base_Arg, i64* %ln9As, i64* %ln9At, i64 %ln9Au, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9t6_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9t6_info$def to i8*)
define internal ghccc void @c9t6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9t6_info$def to i64)),i64 240), i64 65, i64 4294967328}>
{
c9t6:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls82r = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Av = load i64*, i64** %Hp_Var
  %ln9Aw = getelementptr inbounds i64, i64* %ln9Av, i32 2
  %ln9Ax = ptrtoint i64* %ln9Aw to i64
  %ln9Ay = inttoptr i64 %ln9Ax to i64*
  store i64* %ln9Ay, i64** %Hp_Var
  %ln9Az = load i64*, i64** %Hp_Var
  %ln9AA = ptrtoint i64* %ln9Az to i64
  %ln9AB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9AC = bitcast i64* %ln9AB to i64*
  %ln9AD = load i64, i64* %ln9AC, !tbaa !4
  %ln9AE = icmp ugt i64 %ln9AA, %ln9AD
  br i1 %ln9AE, label %c9te, label %c9td
c9td:
  %ln9AF = load i64*, i64** %Sp_Var
  %ln9AG = getelementptr inbounds i64, i64* %ln9AF, i32 1
  %ln9AH = bitcast i64* %ln9AG to i64*
  %ln9AI = load i64, i64* %ln9AH, !tbaa !1
  store i64 %ln9AI, i64* %ls82r
  %ln9AJ = load i64, i64* %ls82r
  switch i64 %ln9AJ, label %c9tm [i64 0, label %u9uj]
c9tm:
  %ln9AL = ptrtoint i8* @Word_W64_con_info to i64
  %ln9AK = load i64*, i64** %Hp_Var
  %ln9AM = getelementptr inbounds i64, i64* %ln9AK, i32 -1
  store i64 %ln9AL, i64* %ln9AM, !tbaa !2
  %ln9AO = load i64, i64* %R1_Var
  %ln9AP = load i64, i64* %ls82r
  %ln9AQ = udiv i64 %ln9AO, %ln9AP
  %ln9AN = load i64*, i64** %Hp_Var
  %ln9AR = getelementptr inbounds i64, i64* %ln9AN, i32 0
  store i64 %ln9AQ, i64* %ln9AR, !tbaa !2
  %ln9AT = load i64*, i64** %Hp_Var
  %ln9AU = ptrtoint i64* %ln9AT to i64
  %ln9AV = add i64 %ln9AU, -6
  store i64 %ln9AV, i64* %R1_Var
  %ln9AW = load i64*, i64** %Sp_Var
  %ln9AX = getelementptr inbounds i64, i64* %ln9AW, i32 2
  %ln9AY = ptrtoint i64* %ln9AX to i64
  %ln9AZ = inttoptr i64 %ln9AY to i64*
  store i64* %ln9AZ, i64** %Sp_Var
  %ln9B0 = load i64*, i64** %Sp_Var
  %ln9B1 = getelementptr inbounds i64, i64* %ln9B0, i32 0
  %ln9B2 = bitcast i64* %ln9B1 to i64*
  %ln9B3 = load i64, i64* %ln9B2, !tbaa !1
  %ln9B4 = inttoptr i64 %ln9B3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9B5 = load i64*, i64** %Sp_Var
  %ln9B6 = load i64*, i64** %Hp_Var
  %ln9B7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9B4( i64* %Base_Arg, i64* %ln9B5, i64* %ln9B6, i64 %ln9B7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9uj:
  %ln9B8 = load i64*, i64** %Sp_Var
  %ln9B9 = getelementptr inbounds i64, i64* %ln9B8, i32 2
  %ln9Ba = ptrtoint i64* %ln9B9 to i64
  %ln9Bb = inttoptr i64 %ln9Ba to i64*
  store i64* %ln9Bb, i64** %Sp_Var
  %ln9Bc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9u8_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bd = load i64*, i64** %Sp_Var
  %ln9Be = load i64*, i64** %Hp_Var
  %ln9Bf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Bc( i64* %Base_Arg, i64* %ln9Bd, i64* %ln9Be, i64 %ln9Bf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9te:
  %ln9Bg = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %ln9Bg, !tbaa !4
  %ln9Bh = load i64, i64* %R1_Var
  store i64 %ln9Bh, i64* %R1_Var
  %ln9Bi = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bj = load i64*, i64** %Sp_Var
  %ln9Bk = load i64*, i64** %Hp_Var
  %ln9Bl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Bi( i64* %Base_Arg, i64* %ln9Bj, i64* %ln9Bk, i64 %ln9Bl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9u8_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9u8_entry$def to i8*)
define internal ghccc void @c9u8_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9u8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Bm = load i64*, i64** %Hp_Var
  %ln9Bn = getelementptr inbounds i64, i64* %ln9Bm, i32 -2
  %ln9Bo = ptrtoint i64* %ln9Bn to i64
  %ln9Bp = inttoptr i64 %ln9Bo to i64*
  store i64* %ln9Bp, i64** %Hp_Var
  %ln9Bq = ptrtoint i8* @base_GHCziReal_divZZeroError_closure to i64
  store i64 %ln9Bq, i64* %R1_Var
  %ln9Br = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Bs = load i64*, i64** %Hp_Var
  %ln9Bt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Br( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9Bs, i64 %ln9Bt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wdiv_closure_struct = type <{i64, i64}>
@Word_wdiv_closure$def = internal global %Word_wdiv_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wdiv_info$def to i64), i64 0}>
@Word_wdiv_closure = alias i8* bitcast (%Word_wdiv_closure_struct* @Word_wdiv_closure$def to i8*)
@Word_wdiv_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wdiv_info$def to i8*)
define ghccc void @Word_wdiv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wdiv_info$def to i64)),i64 280), i64 12884901911, i64 0, i64 4294967311}>
{
c9Bz:
  %ls82I = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9BC = load i64, i64* %R3_Var
  store i64 %ln9BC, i64* %ls82I
  store i64 %R4_Arg, i64* %R3_Var
  %ln9BD = load i64, i64* %ls82I
  store i64 %ln9BD, i64* %R2_Var
  %ln9BE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwdiv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9BF = load i64, i64* %R2_Var
  %ln9BG = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9BE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9BF, i64 %ln9BG, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwbs2i_closure_struct = type <{i64, i64}>
@Word_zdwbs2i_closure$def = internal global %Word_zdwbs2i_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to i64), i64 0}>
@Word_zdwbs2i_closure = alias i8* bitcast (%Word_zdwbs2i_closure_struct* @Word_zdwbs2i_closure$def to i8*)
@Word_zdwbs2i_slow = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_slow$def to i8*)
define ghccc void @Word_zdwbs2i_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
c9Cj:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Dr = load i64*, i64** %Sp_Var
  %ln9Ds = getelementptr inbounds i64, i64* %ln9Dr, i32 3
  %ln9Dt = bitcast i64* %ln9Ds to i64*
  %ln9Du = load i64, i64* %ln9Dt, !tbaa !1
  store i64 %ln9Du, i64* %R5_Var
  %ln9Dv = load i64*, i64** %Sp_Var
  %ln9Dw = getelementptr inbounds i64, i64* %ln9Dv, i32 2
  %ln9Dx = bitcast i64* %ln9Dw to i64*
  %ln9Dy = load i64, i64* %ln9Dx, !tbaa !1
  store i64 %ln9Dy, i64* %R4_Var
  %ln9Dz = load i64*, i64** %Sp_Var
  %ln9DA = getelementptr inbounds i64, i64* %ln9Dz, i32 1
  %ln9DB = bitcast i64* %ln9DA to i64*
  %ln9DC = load i64, i64* %ln9DB, !tbaa !1
  store i64 %ln9DC, i64* %R3_Var
  %ln9DD = load i64*, i64** %Sp_Var
  %ln9DE = getelementptr inbounds i64, i64* %ln9DD, i32 0
  %ln9DF = bitcast i64* %ln9DE to i64*
  %ln9DG = load i64, i64* %ln9DF, !tbaa !1
  store i64 %ln9DG, i64* %R2_Var
  %ln9DH = load i64, i64* %R1_Var
  store i64 %ln9DH, i64* %R1_Var
  %ln9DI = load i64*, i64** %Sp_Var
  %ln9DJ = getelementptr inbounds i64, i64* %ln9DI, i32 4
  %ln9DK = ptrtoint i64* %ln9DJ to i64
  %ln9DL = inttoptr i64 %ln9DK to i64*
  store i64* %ln9DL, i64** %Sp_Var
  %ln9DM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9DN = load i64*, i64** %Sp_Var
  %ln9DO = load i64, i64* %R1_Var
  %ln9DP = load i64, i64* %R2_Var
  %ln9DQ = load i64, i64* %R3_Var
  %ln9DR = load i64, i64* %R4_Var
  %ln9DS = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9DM( i64* %Base_Arg, i64* %ln9DN, i64* %Hp_Arg, i64 %ln9DO, i64 %ln9DP, i64 %ln9DQ, i64 %ln9DR, i64 %ln9DS, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s83a_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83a_info$def to i8*)
define internal ghccc void @s83a_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 17}>
{
c9D3:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9DT = load i64*, i64** %Sp_Var
  %ln9DU = getelementptr inbounds i64, i64* %ln9DT, i32 -2
  %ln9DV = ptrtoint i64* %ln9DU to i64
  %ln9DW = icmp ult i64 %ln9DV, %SpLim_Arg
  br i1 %ln9DW, label %c9D4, label %c9D5
c9D5:
  %ln9DY = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9DX = load i64*, i64** %Sp_Var
  %ln9DZ = getelementptr inbounds i64, i64* %ln9DX, i32 -2
  store i64 %ln9DY, i64* %ln9DZ, !tbaa !1
  %ln9E1 = load i64, i64* %R1_Var
  %ln9E0 = load i64*, i64** %Sp_Var
  %ln9E2 = getelementptr inbounds i64, i64* %ln9E0, i32 -1
  store i64 %ln9E1, i64* %ln9E2, !tbaa !1
  %ln9E5 = load i64, i64* %R1_Var
  %ln9E6 = add i64 %ln9E5, 16
  %ln9E7 = inttoptr i64 %ln9E6 to i64*
  %ln9E8 = load i64, i64* %ln9E7, !tbaa !3
  store i64 %ln9E8, i64* %R2_Var
  %ln9E9 = load i64*, i64** %Sp_Var
  %ln9Ea = getelementptr inbounds i64, i64* %ln9E9, i32 -2
  %ln9Eb = ptrtoint i64* %ln9Ea to i64
  %ln9Ec = inttoptr i64 %ln9Eb to i64*
  store i64* %ln9Ec, i64** %Sp_Var
  %ln9Ed = bitcast i8* @integerzmgmp_GHCziIntegerziType_zdwbigNatToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ee = load i64*, i64** %Sp_Var
  %ln9Ef = load i64, i64* %R1_Var
  %ln9Eg = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ed( i64* %Base_Arg, i64* %ln9Ee, i64* %Hp_Arg, i64 %ln9Ef, i64 %ln9Eg, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9D4:
  %ln9Eh = load i64, i64* %R1_Var
  store i64 %ln9Eh, i64* %R1_Var
  %ln9Ei = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Ej = bitcast i64* %ln9Ei to i64*
  %ln9Ek = load i64, i64* %ln9Ej, !tbaa !4
  %ln9El = inttoptr i64 %ln9Ek to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Em = load i64*, i64** %Sp_Var
  %ln9En = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9El( i64* %Base_Arg, i64* %ln9Em, i64* %Hp_Arg, i64 %ln9En, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwbs2i_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to i8*)
define ghccc void @Word_zdwbs2i_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to i64)),i64 0), i64 836, i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to i64)),i64 96), i64 21474836480, i64 0, i64 144115192370823183}>
{
c9D9:
  %ls82L = alloca i64, i32 1
  %ls82Q = alloca i64, i32 1
  %lc9Cz = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls82U = alloca i64, i32 1
  %ls82X = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lc9Do = alloca i64, i32 1
  %ln9Eo = load i64*, i64** %Sp_Var
  %ln9Ep = getelementptr inbounds i64, i64* %ln9Eo, i32 -4
  %ln9Eq = ptrtoint i64* %ln9Ep to i64
  %ln9Er = icmp ult i64 %ln9Eq, %SpLim_Arg
  br i1 %ln9Er, label %c9Da, label %c9Db
c9Db:
  %ln9Es = load i64, i64* %R5_Var
  switch i64 %ln9Es, label %c9D7 [i64 0, label %c9D8]
c9D7:
  %ln9Et = load i64, i64* %R3_Var
  store i64 %ln9Et, i64* %ls82L
  %ln9Eu = load i64, i64* %R4_Var
  %ln9Ev = add i64 %R2_Arg, %ln9Eu
  store i64 %ln9Ev, i64* %ls82Q
  %ln9Ew = load i64, i64* %R5_Var
  store i64 %ln9Ew, i64* %lc9Cz
  %ln9Ex = load i64, i64* %ls82Q
  %ln9Ey = inttoptr i64 %ln9Ex to i8*
  %ln9Ez = load i64, i64* %lc9Cz
  %ln9EA = bitcast i8* @integer_gmp_rscan_nzbyte to i64 (i8*, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %ln9EB = call ccc i64 (i8*, i64, i64) %ln9EA( i8* %ln9Ey, i64 0, i64 %ln9Ez ) nounwind
  store i64 %ln9EB, i64* %ls82U
  %ln9EC = load i64, i64* %ls82U
  switch i64 %ln9EC, label %c9De [i64 0, label %c9Di]
c9De:
  %ln9EE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9CO_info$def to i64
  %ln9ED = load i64*, i64** %Sp_Var
  %ln9EF = getelementptr inbounds i64, i64* %ln9ED, i32 -4
  store i64 %ln9EE, i64* %ln9EF, !tbaa !1
  %ln9EG = load i64, i64* %ls82U
  %ln9EH = add i64 %ln9EG, 7
  store i64 %ln9EH, i64* %ls82X
  %ln9EI = load i64, i64* %ls82X
  %ln9EJ = load i64, i64* %ls82X
  %ln9EK = ashr i64 %ln9EJ, 63
  %ln9EL = and i64 %ln9EK, 7
  %ln9EM = add i64 %ln9EI, %ln9EL
  %ln9EN = ashr i64 %ln9EM, 3
  %ln9EO = shl i64 %ln9EN, 3
  store i64 %ln9EO, i64* %R1_Var
  %ln9EQ = load i64, i64* %ls82L
  %ln9EP = load i64*, i64** %Sp_Var
  %ln9ER = getelementptr inbounds i64, i64* %ln9EP, i32 -3
  store i64 %ln9EQ, i64* %ln9ER, !tbaa !1
  %ln9ET = load i64, i64* %ls82Q
  %ln9ES = load i64*, i64** %Sp_Var
  %ln9EU = getelementptr inbounds i64, i64* %ln9ES, i32 -2
  store i64 %ln9ET, i64* %ln9EU, !tbaa !1
  %ln9EW = load i64, i64* %ls82U
  %ln9EV = load i64*, i64** %Sp_Var
  %ln9EX = getelementptr inbounds i64, i64* %ln9EV, i32 -1
  store i64 %ln9EW, i64* %ln9EX, !tbaa !1
  %ln9EY = load i64*, i64** %Sp_Var
  %ln9EZ = getelementptr inbounds i64, i64* %ln9EY, i32 -4
  %ln9F0 = ptrtoint i64* %ln9EZ to i64
  %ln9F1 = inttoptr i64 %ln9F0 to i64*
  store i64* %ln9F1, i64** %Sp_Var
  %ln9F2 = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9F3 = load i64*, i64** %Sp_Var
  %ln9F4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9F2( i64* %Base_Arg, i64* %ln9F3, i64* %Hp_Arg, i64 %ln9F4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Di:
  %ln9F5 = ptrtoint %Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64
  store i64 %ln9F5, i64* %R1_Var
  %ln9F6 = load i64*, i64** %Sp_Var
  %ln9F7 = getelementptr inbounds i64, i64* %ln9F6, i32 0
  %ln9F8 = bitcast i64* %ln9F7 to i64*
  %ln9F9 = load i64, i64* %ln9F8, !tbaa !1
  %ln9Fa = inttoptr i64 %ln9F9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Fb = load i64*, i64** %Sp_Var
  %ln9Fc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Fa( i64* %Base_Arg, i64* %ln9Fb, i64* %Hp_Arg, i64 %ln9Fc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9D8:
  %ln9Fd = load i64, i64* %R3_Var
  store i64 %ln9Fd, i64* %lc9Do
  %ln9Fe = ptrtoint %Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64
  store i64 %ln9Fe, i64* %R1_Var
  %ln9Ff = load i64*, i64** %Sp_Var
  %ln9Fg = getelementptr inbounds i64, i64* %ln9Ff, i32 0
  %ln9Fh = bitcast i64* %ln9Fg to i64*
  %ln9Fi = load i64, i64* %ln9Fh, !tbaa !1
  %ln9Fj = inttoptr i64 %ln9Fi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Fk = load i64*, i64** %Sp_Var
  %ln9Fl = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Fj( i64* %Base_Arg, i64* %ln9Fk, i64* %Hp_Arg, i64 %ln9Fl, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Da:
  %ln9Fm = ptrtoint %Word_zdwbs2i_closure_struct* @Word_zdwbs2i_closure$def to i64
  store i64 %ln9Fm, i64* %R1_Var
  %ln9Fn = load i64*, i64** %Sp_Var
  %ln9Fo = getelementptr inbounds i64, i64* %ln9Fn, i32 -4
  store i64 %R2_Arg, i64* %ln9Fo, !tbaa !1
  %ln9Fq = load i64, i64* %R3_Var
  %ln9Fp = load i64*, i64** %Sp_Var
  %ln9Fr = getelementptr inbounds i64, i64* %ln9Fp, i32 -3
  store i64 %ln9Fq, i64* %ln9Fr, !tbaa !1
  %ln9Ft = load i64, i64* %R4_Var
  %ln9Fs = load i64*, i64** %Sp_Var
  %ln9Fu = getelementptr inbounds i64, i64* %ln9Fs, i32 -2
  store i64 %ln9Ft, i64* %ln9Fu, !tbaa !1
  %ln9Fw = load i64, i64* %R5_Var
  %ln9Fv = load i64*, i64** %Sp_Var
  %ln9Fx = getelementptr inbounds i64, i64* %ln9Fv, i32 -1
  store i64 %ln9Fw, i64* %ln9Fx, !tbaa !1
  %ln9Fy = load i64*, i64** %Sp_Var
  %ln9Fz = getelementptr inbounds i64, i64* %ln9Fy, i32 -4
  %ln9FA = ptrtoint i64* %ln9Fz to i64
  %ln9FB = inttoptr i64 %ln9FA to i64*
  store i64* %ln9FB, i64** %Sp_Var
  %ln9FC = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9FD = bitcast i64* %ln9FC to i64*
  %ln9FE = load i64, i64* %ln9FD, !tbaa !4
  %ln9FF = inttoptr i64 %ln9FE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9FG = load i64*, i64** %Sp_Var
  %ln9FH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9FF( i64* %Base_Arg, i64* %ln9FG, i64* %Hp_Arg, i64 %ln9FH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9CO_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9CO_info$def to i8*)
define internal ghccc void @c9CO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 387, i64 32}>
{
c9CO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls82L = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9FI = load i64*, i64** %Hp_Var
  %ln9FJ = getelementptr inbounds i64, i64* %ln9FI, i32 3
  %ln9FK = ptrtoint i64* %ln9FJ to i64
  %ln9FL = inttoptr i64 %ln9FK to i64*
  store i64* %ln9FL, i64** %Hp_Var
  %ln9FM = load i64*, i64** %Hp_Var
  %ln9FN = ptrtoint i64* %ln9FM to i64
  %ln9FO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9FP = bitcast i64* %ln9FO to i64*
  %ln9FQ = load i64, i64* %ln9FP, !tbaa !4
  %ln9FR = icmp ugt i64 %ln9FN, %ln9FQ
  br i1 %ln9FR, label %c9Dh, label %c9Dg
c9Dg:
  %ln9FS = load i64*, i64** %Sp_Var
  %ln9FT = getelementptr inbounds i64, i64* %ln9FS, i32 1
  %ln9FU = bitcast i64* %ln9FT to i64*
  %ln9FV = load i64, i64* %ln9FU, !tbaa !1
  store i64 %ln9FV, i64* %ls82L
  %ln9FX = load i64, i64* %R1_Var
  %ln9FY = add i64 %ln9FX, 16
  %ln9FZ = inttoptr i64 %ln9FY to i8*
  %ln9G0 = load i64*, i64** %Sp_Var
  %ln9G1 = getelementptr inbounds i64, i64* %ln9G0, i32 2
  %ln9G2 = bitcast i64* %ln9G1 to i64*
  %ln9G3 = load i64, i64* %ln9G2, !tbaa !1
  %ln9G4 = inttoptr i64 %ln9G3 to i8*
  %ln9G5 = load i64*, i64** %Sp_Var
  %ln9G6 = getelementptr inbounds i64, i64* %ln9G5, i32 3
  %ln9G7 = bitcast i64* %ln9G6 to i64*
  %ln9G8 = load i64, i64* %ln9G7, !tbaa !1
  %ln9G9 = bitcast i8* @integer_gmp_mpn_import to void (i8*, i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i8*, i64, i64, i64) %ln9G9( i8* %ln9FZ, i8* %ln9G4, i64 0, i64 %ln9G8, i64 0 ) nounwind
  %ln9Gb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83a_info$def to i64
  %ln9Ga = load i64*, i64** %Hp_Var
  %ln9Gc = getelementptr inbounds i64, i64* %ln9Ga, i32 -2
  store i64 %ln9Gb, i64* %ln9Gc, !tbaa !2
  %ln9Ge = load i64, i64* %R1_Var
  %ln9Gd = load i64*, i64** %Hp_Var
  %ln9Gf = getelementptr inbounds i64, i64* %ln9Gd, i32 0
  store i64 %ln9Ge, i64* %ln9Gf, !tbaa !2
  %ln9Gg = load i64*, i64** %Hp_Var
  %ln9Gh = getelementptr inbounds i64, i64* %ln9Gg, i32 -2
  %ln9Gi = ptrtoint i64* %ln9Gh to i64
  store i64 %ln9Gi, i64* %R1_Var
  %ln9Gj = load i64*, i64** %Sp_Var
  %ln9Gk = getelementptr inbounds i64, i64* %ln9Gj, i32 4
  %ln9Gl = ptrtoint i64* %ln9Gk to i64
  %ln9Gm = inttoptr i64 %ln9Gl to i64*
  store i64* %ln9Gm, i64** %Sp_Var
  %ln9Gn = load i64*, i64** %Sp_Var
  %ln9Go = getelementptr inbounds i64, i64* %ln9Gn, i32 0
  %ln9Gp = bitcast i64* %ln9Go to i64*
  %ln9Gq = load i64, i64* %ln9Gp, !tbaa !1
  %ln9Gr = inttoptr i64 %ln9Gq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Gs = load i64*, i64** %Sp_Var
  %ln9Gt = load i64*, i64** %Hp_Var
  %ln9Gu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Gr( i64* %Base_Arg, i64* %ln9Gs, i64* %ln9Gt, i64 %ln9Gu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Dh:
  %ln9Gv = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9Gv, !tbaa !4
  %ln9Gw = load i64, i64* %R1_Var
  store i64 %ln9Gw, i64* %R1_Var
  %ln9Gx = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Gy = load i64*, i64** %Sp_Var
  %ln9Gz = load i64*, i64** %Hp_Var
  %ln9GA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Gx( i64* %Base_Arg, i64* %ln9Gy, i64* %ln9Gz, i64 %ln9GA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_bs2i1_closure_struct = type <{i64, i64}>
@Word_bs2i1_closure$def = internal global %Word_bs2i1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i1_info$def to i64), i64 0}>
@Word_bs2i1_closure = alias i8* bitcast (%Word_bs2i1_closure_struct* @Word_bs2i1_closure$def to i8*)
@Word_bs2i1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i1_info$def to i8*)
define ghccc void @Word_bs2i1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i1_info$def to i64)),i64 296), i64 8589934597, i64 0, i64 12884901903}>
{
c9GM:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9GT = load i64*, i64** %Sp_Var
  %ln9GU = getelementptr inbounds i64, i64* %ln9GT, i32 -1
  %ln9GV = ptrtoint i64* %ln9GU to i64
  %ln9GW = icmp ult i64 %ln9GV, %SpLim_Arg
  br i1 %ln9GW, label %c9GN, label %c9GO
c9GO:
  %ln9GY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9GJ_info$def to i64
  %ln9GX = load i64*, i64** %Sp_Var
  %ln9GZ = getelementptr inbounds i64, i64* %ln9GX, i32 -1
  store i64 %ln9GY, i64* %ln9GZ, !tbaa !1
  %ln9H0 = load i64, i64* %R2_Var
  store i64 %ln9H0, i64* %R1_Var
  %ln9H1 = load i64*, i64** %Sp_Var
  %ln9H2 = getelementptr inbounds i64, i64* %ln9H1, i32 -1
  %ln9H3 = ptrtoint i64* %ln9H2 to i64
  %ln9H4 = inttoptr i64 %ln9H3 to i64*
  store i64* %ln9H4, i64** %Sp_Var
  %ln9H5 = load i64, i64* %R1_Var
  %ln9H6 = and i64 %ln9H5, 7
  %ln9H7 = icmp ne i64 %ln9H6, 0
  br i1 %ln9H7, label %u9GS, label %c9GK
c9GK:
  %ln9H9 = load i64, i64* %R1_Var
  %ln9Ha = inttoptr i64 %ln9H9 to i64*
  %ln9Hb = load i64, i64* %ln9Ha, !tbaa !3
  %ln9Hc = inttoptr i64 %ln9Hb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Hd = load i64*, i64** %Sp_Var
  %ln9He = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Hc( i64* %Base_Arg, i64* %ln9Hd, i64* %Hp_Arg, i64 %ln9He, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9GS:
  %ln9Hf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9GJ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Hg = load i64*, i64** %Sp_Var
  %ln9Hh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Hf( i64* %Base_Arg, i64* %ln9Hg, i64* %Hp_Arg, i64 %ln9Hh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9GN:
  %ln9Hi = load i64, i64* %R2_Var
  store i64 %ln9Hi, i64* %R2_Var
  %ln9Hj = ptrtoint %Word_bs2i1_closure_struct* @Word_bs2i1_closure$def to i64
  store i64 %ln9Hj, i64* %R1_Var
  %ln9Hk = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9Hl = bitcast i64* %ln9Hk to i64*
  %ln9Hm = load i64, i64* %ln9Hl, !tbaa !4
  %ln9Hn = inttoptr i64 %ln9Hm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ho = load i64*, i64** %Sp_Var
  %ln9Hp = load i64, i64* %R1_Var
  %ln9Hq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Hn( i64* %Base_Arg, i64* %ln9Ho, i64* %Hp_Arg, i64 %ln9Hp, i64 %ln9Hq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9GJ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9GJ_info$def to i8*)
define internal ghccc void @c9GJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9GJ_info$def to i64)),i64 296), i64 0, i64 4294967328}>
{
c9GJ:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Hr = add i64 %R1_Arg, 31
  %ln9Hs = inttoptr i64 %ln9Hr to i64*
  %ln9Ht = load i64, i64* %ln9Hs, !tbaa !3
  store i64 %ln9Ht, i64* %R5_Var
  %ln9Hu = add i64 %R1_Arg, 23
  %ln9Hv = inttoptr i64 %ln9Hu to i64*
  %ln9Hw = load i64, i64* %ln9Hv, !tbaa !3
  store i64 %ln9Hw, i64* %R4_Var
  %ln9Hx = add i64 %R1_Arg, 7
  %ln9Hy = inttoptr i64 %ln9Hx to i64*
  %ln9Hz = load i64, i64* %ln9Hy, !tbaa !3
  store i64 %ln9Hz, i64* %R3_Var
  %ln9HA = add i64 %R1_Arg, 15
  %ln9HB = inttoptr i64 %ln9HA to i64*
  %ln9HC = load i64, i64* %ln9HB, !tbaa !3
  store i64 %ln9HC, i64* %R2_Var
  %ln9HD = load i64*, i64** %Sp_Var
  %ln9HE = getelementptr inbounds i64, i64* %ln9HD, i32 1
  %ln9HF = ptrtoint i64* %ln9HE to i64
  %ln9HG = inttoptr i64 %ln9HF to i64*
  store i64* %ln9HG, i64** %Sp_Var
  %ln9HH = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9HI = load i64*, i64** %Sp_Var
  %ln9HJ = load i64, i64* %R2_Var
  %ln9HK = load i64, i64* %R3_Var
  %ln9HL = load i64, i64* %R4_Var
  %ln9HM = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9HH( i64* %Base_Arg, i64* %ln9HI, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9HJ, i64 %ln9HK, i64 %ln9HL, i64 %ln9HM, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_bs2i_closure_struct = type <{i64, i64}>
@Word_bs2i_closure$def = internal global %Word_bs2i_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i_info$def to i64), i64 0}>
@Word_bs2i_closure = alias i8* bitcast (%Word_bs2i_closure_struct* @Word_bs2i_closure$def to i8*)
@Word_bs2i_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i_info$def to i8*)
define ghccc void @Word_bs2i_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i_info$def to i64)),i64 304), i64 8589934597, i64 0, i64 4294967311}>
{
c9HS:
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9HV = load i64, i64* %R2_Var
  store i64 %ln9HV, i64* %R2_Var
  %ln9HW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2i1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9HX = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9HW( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9HX, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_bs2izq_closure_struct = type <{i64, i64}>
@Word_bs2izq_closure$def = internal global %Word_bs2izq_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2izq_info$def to i64), i64 0}>
@Word_bs2izq_closure = alias i8* bitcast (%Word_bs2izq_closure_struct* @Word_bs2izq_closure$def to i8*)
@Word_bs2izq_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2izq_info$def to i8*)
define ghccc void @Word_bs2izq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bs2izq_info$def to i64)),i64 296), i64 4294967301, i64 0, i64 21474836495}>
{
c9If:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Iu = load i64*, i64** %Sp_Var
  %ln9Iv = getelementptr inbounds i64, i64* %ln9Iu, i32 -2
  %ln9Iw = ptrtoint i64* %ln9Iv to i64
  %ln9Ix = icmp ult i64 %ln9Iw, %SpLim_Arg
  br i1 %ln9Ix, label %c9Io, label %c9Ip
c9Ip:
  %ln9Iz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ia_info$def to i64
  %ln9Iy = load i64*, i64** %Sp_Var
  %ln9IA = getelementptr inbounds i64, i64* %ln9Iy, i32 -2
  store i64 %ln9Iz, i64* %ln9IA, !tbaa !1
  %ln9IC = load i64, i64* %R2_Var
  %ln9IB = load i64*, i64** %Sp_Var
  %ln9ID = getelementptr inbounds i64, i64* %ln9IB, i32 -1
  store i64 %ln9IC, i64* %ln9ID, !tbaa !1
  %ln9IE = load i64*, i64** %Sp_Var
  %ln9IF = getelementptr inbounds i64, i64* %ln9IE, i32 -2
  %ln9IG = ptrtoint i64* %ln9IF to i64
  %ln9IH = inttoptr i64 %ln9IG to i64*
  store i64* %ln9IH, i64** %Sp_Var
  %ln9II = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9IJ = load i64*, i64** %Sp_Var
  %ln9IK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9II( i64* %Base_Arg, i64* %ln9IJ, i64* %Hp_Arg, i64 %ln9IK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Io:
  %ln9IL = load i64, i64* %R2_Var
  store i64 %ln9IL, i64* %R2_Var
  %ln9IM = ptrtoint %Word_bs2izq_closure_struct* @Word_bs2izq_closure$def to i64
  store i64 %ln9IM, i64* %R1_Var
  %ln9IN = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9IO = bitcast i64* %ln9IN to i64*
  %ln9IP = load i64, i64* %ln9IO, !tbaa !4
  %ln9IQ = inttoptr i64 %ln9IP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9IR = load i64*, i64** %Sp_Var
  %ln9IS = load i64, i64* %R1_Var
  %ln9IT = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9IQ( i64* %Base_Arg, i64* %ln9IR, i64* %Hp_Arg, i64 %ln9IS, i64 %ln9IT, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Ia_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ia_info$def to i8*)
define internal ghccc void @c9Ia_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ia_info$def to i64)),i64 296), i64 1, i64 4294967328}>
{
c9Ia:
  %ls83k = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9IU = load i64*, i64** %Sp_Var
  %ln9IV = getelementptr inbounds i64, i64* %ln9IU, i32 1
  %ln9IW = bitcast i64* %ln9IV to i64*
  %ln9IX = load i64, i64* %ln9IW, !tbaa !1
  store i64 %ln9IX, i64* %ls83k
  %ln9IZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ii_info$def to i64
  %ln9IY = load i64*, i64** %Sp_Var
  %ln9J0 = getelementptr inbounds i64, i64* %ln9IY, i32 1
  store i64 %ln9IZ, i64* %ln9J0, !tbaa !1
  %ln9J1 = load i64, i64* %ls83k
  store i64 %ln9J1, i64* %R1_Var
  %ln9J2 = load i64*, i64** %Sp_Var
  %ln9J3 = getelementptr inbounds i64, i64* %ln9J2, i32 1
  %ln9J4 = ptrtoint i64* %ln9J3 to i64
  %ln9J5 = inttoptr i64 %ln9J4 to i64*
  store i64* %ln9J5, i64** %Sp_Var
  %ln9J6 = load i64, i64* %R1_Var
  %ln9J7 = and i64 %ln9J6, 7
  %ln9J8 = icmp ne i64 %ln9J7, 0
  br i1 %ln9J8, label %u9It, label %c9Ij
c9Ij:
  %ln9Ja = load i64, i64* %R1_Var
  %ln9Jb = inttoptr i64 %ln9Ja to i64*
  %ln9Jc = load i64, i64* %ln9Jb, !tbaa !3
  %ln9Jd = inttoptr i64 %ln9Jc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Je = load i64*, i64** %Sp_Var
  %ln9Jf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Jd( i64* %Base_Arg, i64* %ln9Je, i64* %Hp_Arg, i64 %ln9Jf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9It:
  %ln9Jg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ii_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Jh = load i64*, i64** %Sp_Var
  %ln9Ji = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Jg( i64* %Base_Arg, i64* %ln9Jh, i64* %Hp_Arg, i64 %ln9Ji, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Ii_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ii_info$def to i8*)
define internal ghccc void @c9Ii_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Ii_info$def to i64)),i64 296), i64 0, i64 4294967328}>
{
c9Ii:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9Jj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9In_info$def to i64
  %ln9Jk = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %ln9Jj, i64* %ln9Jk, !tbaa !1
  %ln9Jl = add i64 %R1_Arg, 31
  %ln9Jm = inttoptr i64 %ln9Jl to i64*
  %ln9Jn = load i64, i64* %ln9Jm, !tbaa !3
  store i64 %ln9Jn, i64* %R5_Var
  %ln9Jo = add i64 %R1_Arg, 23
  %ln9Jp = inttoptr i64 %ln9Jo to i64*
  %ln9Jq = load i64, i64* %ln9Jp, !tbaa !3
  store i64 %ln9Jq, i64* %R4_Var
  %ln9Jr = add i64 %R1_Arg, 7
  %ln9Js = inttoptr i64 %ln9Jr to i64*
  %ln9Jt = load i64, i64* %ln9Js, !tbaa !3
  store i64 %ln9Jt, i64* %R3_Var
  %ln9Ju = add i64 %R1_Arg, 15
  %ln9Jv = inttoptr i64 %ln9Ju to i64*
  %ln9Jw = load i64, i64* %ln9Jv, !tbaa !3
  store i64 %ln9Jw, i64* %R2_Var
  %ln9Jx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Jy = load i64, i64* %R2_Var
  %ln9Jz = load i64, i64* %R3_Var
  %ln9JA = load i64, i64* %R4_Var
  %ln9JB = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Jx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Jy, i64 %ln9Jz, i64 %ln9JA, i64 %ln9JB, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9In_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9In_info$def to i8*)
define internal ghccc void @c9In_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c9In:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9JC = load i64, i64* %R1_Var
  %ln9JD = and i64 %ln9JC, -8
  store i64 %ln9JD, i64* %R1_Var
  %ln9JE = load i64*, i64** %Sp_Var
  %ln9JF = getelementptr inbounds i64, i64* %ln9JE, i32 1
  %ln9JG = ptrtoint i64* %ln9JF to i64
  %ln9JH = inttoptr i64 %ln9JG to i64*
  store i64* %ln9JH, i64** %Sp_Var
  %ln9JJ = load i64, i64* %R1_Var
  %ln9JK = inttoptr i64 %ln9JJ to i64*
  %ln9JL = load i64, i64* %ln9JK, !tbaa !3
  %ln9JM = inttoptr i64 %ln9JL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9JN = load i64*, i64** %Sp_Var
  %ln9JO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9JM( i64* %Base_Arg, i64* %ln9JN, i64* %Hp_Arg, i64 %ln9JO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_unbs_closure_struct = type <{i64, i64}>
@Word_unbs_closure$def = internal global %Word_unbs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_unbs_info$def to i64), i64 0}>
@Word_unbs_closure = alias i8* bitcast (%Word_unbs_closure_struct* @Word_unbs_closure$def to i8*)
@s83G_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83G_info$def to i8*)
define internal ghccc void @s83G_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83G_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
c9Kq:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9KO = load i64*, i64** %Sp_Var
  %ln9KP = getelementptr inbounds i64, i64* %ln9KO, i32 -7
  %ln9KQ = ptrtoint i64* %ln9KP to i64
  %ln9KR = icmp ult i64 %ln9KQ, %SpLim_Arg
  br i1 %ln9KR, label %c9Ku, label %c9Kv
c9Kv:
  %ln9KT = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9KS = load i64*, i64** %Sp_Var
  %ln9KU = getelementptr inbounds i64, i64* %ln9KS, i32 -2
  store i64 %ln9KT, i64* %ln9KU, !tbaa !1
  %ln9KW = load i64, i64* %R1_Var
  %ln9KV = load i64*, i64** %Sp_Var
  %ln9KX = getelementptr inbounds i64, i64* %ln9KV, i32 -1
  store i64 %ln9KW, i64* %ln9KX, !tbaa !1
  %ln9KZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kl_info$def to i64
  %ln9KY = load i64*, i64** %Sp_Var
  %ln9L0 = getelementptr inbounds i64, i64* %ln9KY, i32 -7
  store i64 %ln9KZ, i64* %ln9L0, !tbaa !1
  %ln9L4 = load i64, i64* %R1_Var
  %ln9L5 = add i64 %ln9L4, 24
  %ln9L6 = inttoptr i64 %ln9L5 to i64*
  %ln9L7 = load i64, i64* %ln9L6, !tbaa !3
  %ln9L1 = load i64*, i64** %Sp_Var
  %ln9L8 = getelementptr inbounds i64, i64* %ln9L1, i32 -6
  store i64 %ln9L7, i64* %ln9L8, !tbaa !1
  %ln9Lc = load i64, i64* %R1_Var
  %ln9Ld = add i64 %ln9Lc, 16
  %ln9Le = inttoptr i64 %ln9Ld to i64*
  %ln9Lf = load i64, i64* %ln9Le, !tbaa !3
  %ln9L9 = load i64*, i64** %Sp_Var
  %ln9Lg = getelementptr inbounds i64, i64* %ln9L9, i32 -5
  store i64 %ln9Lf, i64* %ln9Lg, !tbaa !1
  %ln9Lk = load i64, i64* %R1_Var
  %ln9Ll = add i64 %ln9Lk, 32
  %ln9Lm = inttoptr i64 %ln9Ll to i64*
  %ln9Ln = load i64, i64* %ln9Lm, !tbaa !3
  %ln9Lh = load i64*, i64** %Sp_Var
  %ln9Lo = getelementptr inbounds i64, i64* %ln9Lh, i32 -4
  store i64 %ln9Ln, i64* %ln9Lo, !tbaa !1
  %ln9Ls = load i64, i64* %R1_Var
  %ln9Lt = add i64 %ln9Ls, 40
  %ln9Lu = inttoptr i64 %ln9Lt to i64*
  %ln9Lv = load i64, i64* %ln9Lu, !tbaa !3
  %ln9Lp = load i64*, i64** %Sp_Var
  %ln9Lw = getelementptr inbounds i64, i64* %ln9Lp, i32 -3
  store i64 %ln9Lv, i64* %ln9Lw, !tbaa !1
  %ln9Lx = load i64*, i64** %Sp_Var
  %ln9Ly = getelementptr inbounds i64, i64* %ln9Lx, i32 -7
  %ln9Lz = ptrtoint i64* %ln9Ly to i64
  %ln9LA = inttoptr i64 %ln9Lz to i64*
  store i64* %ln9LA, i64** %Sp_Var
  %ln9LB = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9LC = load i64*, i64** %Sp_Var
  %ln9LD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9LB( i64* %Base_Arg, i64* %ln9LC, i64* %Hp_Arg, i64 %ln9LD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Ku:
  %ln9LE = load i64, i64* %R1_Var
  store i64 %ln9LE, i64* %R1_Var
  %ln9LF = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9LG = bitcast i64* %ln9LF to i64*
  %ln9LH = load i64, i64* %ln9LG, !tbaa !4
  %ln9LI = inttoptr i64 %ln9LH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9LJ = load i64*, i64** %Sp_Var
  %ln9LK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9LI( i64* %Base_Arg, i64* %ln9LJ, i64* %Hp_Arg, i64 %ln9LK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Kl_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kl_info$def to i8*)
define internal ghccc void @c9Kl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kl_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
c9Kl:
  %ls83B = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9LL = load i64*, i64** %Sp_Var
  %ln9LM = getelementptr inbounds i64, i64* %ln9LL, i32 4
  %ln9LN = bitcast i64* %ln9LM to i64*
  %ln9LO = load i64, i64* %ln9LN, !tbaa !1
  store i64 %ln9LO, i64* %ls83B
  %ln9LQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kt_info$def to i64
  %ln9LP = load i64*, i64** %Sp_Var
  %ln9LR = getelementptr inbounds i64, i64* %ln9LP, i32 4
  store i64 %ln9LQ, i64* %ln9LR, !tbaa !1
  %ln9LS = load i64, i64* %ls83B
  store i64 %ln9LS, i64* %R5_Var
  %ln9LT = load i64*, i64** %Sp_Var
  %ln9LU = getelementptr inbounds i64, i64* %ln9LT, i32 3
  %ln9LV = bitcast i64* %ln9LU to i64*
  %ln9LW = load i64, i64* %ln9LV, !tbaa !1
  store i64 %ln9LW, i64* %R4_Var
  %ln9LX = load i64*, i64** %Sp_Var
  %ln9LY = getelementptr inbounds i64, i64* %ln9LX, i32 2
  %ln9LZ = bitcast i64* %ln9LY to i64*
  %ln9M0 = load i64, i64* %ln9LZ, !tbaa !1
  store i64 %ln9M0, i64* %R3_Var
  %ln9M1 = load i64*, i64** %Sp_Var
  %ln9M2 = getelementptr inbounds i64, i64* %ln9M1, i32 1
  %ln9M3 = bitcast i64* %ln9M2 to i64*
  %ln9M4 = load i64, i64* %ln9M3, !tbaa !1
  store i64 %ln9M4, i64* %R2_Var
  %ln9M5 = load i64*, i64** %Sp_Var
  %ln9M6 = getelementptr inbounds i64, i64* %ln9M5, i32 4
  %ln9M7 = ptrtoint i64* %ln9M6 to i64
  %ln9M8 = inttoptr i64 %ln9M7 to i64*
  store i64* %ln9M8, i64** %Sp_Var
  %ln9M9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ma = load i64*, i64** %Sp_Var
  %ln9Mb = load i64, i64* %R2_Var
  %ln9Mc = load i64, i64* %R3_Var
  %ln9Md = load i64, i64* %R4_Var
  %ln9Me = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9M9( i64* %Base_Arg, i64* %ln9Ma, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Mb, i64 %ln9Mc, i64 %ln9Md, i64 %ln9Me, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Kt_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kt_info$def to i8*)
define internal ghccc void @c9Kt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c9Kt:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Mf = load i64, i64* %R1_Var
  %ln9Mg = and i64 %ln9Mf, -8
  store i64 %ln9Mg, i64* %R1_Var
  %ln9Mh = load i64*, i64** %Sp_Var
  %ln9Mi = getelementptr inbounds i64, i64* %ln9Mh, i32 1
  %ln9Mj = ptrtoint i64* %ln9Mi to i64
  %ln9Mk = inttoptr i64 %ln9Mj to i64*
  store i64* %ln9Mk, i64** %Sp_Var
  %ln9Mm = load i64, i64* %R1_Var
  %ln9Mn = inttoptr i64 %ln9Mm to i64*
  %ln9Mo = load i64, i64* %ln9Mn, !tbaa !3
  %ln9Mp = inttoptr i64 %ln9Mo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Mq = load i64*, i64** %Sp_Var
  %ln9Mr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Mp( i64* %Base_Arg, i64* %ln9Mq, i64* %Hp_Arg, i64 %ln9Mr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_unbs_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_unbs_info$def to i8*)
define ghccc void @Word_unbs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_unbs_info$def to i64)),i64 296), i64 4294967301, i64 0, i64 38654705679}>
{
c9KC:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9Ms = load i64*, i64** %Sp_Var
  %ln9Mt = getelementptr inbounds i64, i64* %ln9Ms, i32 -1
  %ln9Mu = ptrtoint i64* %ln9Mt to i64
  %ln9Mv = icmp ult i64 %ln9Mu, %SpLim_Arg
  br i1 %ln9Mv, label %c9KD, label %c9KE
c9KE:
  %ln9Mx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9K6_info$def to i64
  %ln9Mw = load i64*, i64** %Sp_Var
  %ln9My = getelementptr inbounds i64, i64* %ln9Mw, i32 -1
  store i64 %ln9Mx, i64* %ln9My, !tbaa !1
  %ln9Mz = load i64, i64* %R2_Var
  store i64 %ln9Mz, i64* %R1_Var
  %ln9MA = load i64*, i64** %Sp_Var
  %ln9MB = getelementptr inbounds i64, i64* %ln9MA, i32 -1
  %ln9MC = ptrtoint i64* %ln9MB to i64
  %ln9MD = inttoptr i64 %ln9MC to i64*
  store i64* %ln9MD, i64** %Sp_Var
  %ln9ME = load i64, i64* %R1_Var
  %ln9MF = and i64 %ln9ME, 7
  %ln9MG = icmp ne i64 %ln9MF, 0
  br i1 %ln9MG, label %u9KN, label %c9K7
c9K7:
  %ln9MI = load i64, i64* %R1_Var
  %ln9MJ = inttoptr i64 %ln9MI to i64*
  %ln9MK = load i64, i64* %ln9MJ, !tbaa !3
  %ln9ML = inttoptr i64 %ln9MK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9MM = load i64*, i64** %Sp_Var
  %ln9MN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9ML( i64* %Base_Arg, i64* %ln9MM, i64* %Hp_Arg, i64 %ln9MN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9KN:
  %ln9MO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9K6_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9MP = load i64*, i64** %Sp_Var
  %ln9MQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9MO( i64* %Base_Arg, i64* %ln9MP, i64* %Hp_Arg, i64 %ln9MQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9KD:
  %ln9MR = load i64, i64* %R2_Var
  store i64 %ln9MR, i64* %R2_Var
  %ln9MS = ptrtoint %Word_unbs_closure_struct* @Word_unbs_closure$def to i64
  store i64 %ln9MS, i64* %R1_Var
  %ln9MT = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9MU = bitcast i64* %ln9MT to i64*
  %ln9MV = load i64, i64* %ln9MU, !tbaa !4
  %ln9MW = inttoptr i64 %ln9MV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9MX = load i64*, i64** %Sp_Var
  %ln9MY = load i64, i64* %R1_Var
  %ln9MZ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9MW( i64* %Base_Arg, i64* %ln9MX, i64* %Hp_Arg, i64 %ln9MY, i64 %ln9MZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9K6_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9K6_info$def to i8*)
define internal ghccc void @c9K6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9K6_info$def to i64)),i64 296), i64 0, i64 4294967328}>
{
c9K6:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9N0 = load i64, i64* %R1_Var
  %ln9N1 = and i64 %ln9N0, 7
  switch i64 %ln9N1, label %c9Kz [i64 3, label %c9KA]
c9Kz:
  %ln9N2 = load i64, i64* %R1_Var
  %ln9N3 = and i64 %ln9N2, -8
  store i64 %ln9N3, i64* %R1_Var
  %ln9N4 = load i64*, i64** %Sp_Var
  %ln9N5 = getelementptr inbounds i64, i64* %ln9N4, i32 1
  %ln9N6 = ptrtoint i64* %ln9N5 to i64
  %ln9N7 = inttoptr i64 %ln9N6 to i64*
  store i64* %ln9N7, i64** %Sp_Var
  %ln9N9 = load i64, i64* %R1_Var
  %ln9Na = inttoptr i64 %ln9N9 to i64*
  %ln9Nb = load i64, i64* %ln9Na, !tbaa !3
  %ln9Nc = inttoptr i64 %ln9Nb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Nd = load i64*, i64** %Sp_Var
  %ln9Ne = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Nc( i64* %Base_Arg, i64* %ln9Nd, i64* %Hp_Arg, i64 %ln9Ne, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9KA:
  %ln9Ng = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kc_info$def to i64
  %ln9Nf = load i64*, i64** %Sp_Var
  %ln9Nh = getelementptr inbounds i64, i64* %ln9Nf, i32 0
  store i64 %ln9Ng, i64* %ln9Nh, !tbaa !1
  %ln9Nk = load i64, i64* %R1_Var
  %ln9Nl = add i64 %ln9Nk, 5
  %ln9Nm = inttoptr i64 %ln9Nl to i64*
  %ln9Nn = load i64, i64* %ln9Nm, !tbaa !3
  store i64 %ln9Nn, i64* %R1_Var
  %ln9No = load i64, i64* %R1_Var
  %ln9Np = and i64 %ln9No, 7
  %ln9Nq = icmp ne i64 %ln9Np, 0
  br i1 %ln9Nq, label %u9KM, label %c9Kd
c9Kd:
  %ln9Ns = load i64, i64* %R1_Var
  %ln9Nt = inttoptr i64 %ln9Ns to i64*
  %ln9Nu = load i64, i64* %ln9Nt, !tbaa !3
  %ln9Nv = inttoptr i64 %ln9Nu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Nw = load i64*, i64** %Sp_Var
  %ln9Nx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Nv( i64* %Base_Arg, i64* %ln9Nw, i64* %Hp_Arg, i64 %ln9Nx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9KM:
  %ln9Ny = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Nz = load i64*, i64** %Sp_Var
  %ln9NA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ny( i64* %Base_Arg, i64* %ln9Nz, i64* %Hp_Arg, i64 %ln9NA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Kc_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kc_info$def to i8*)
define internal ghccc void @c9Kc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Kc_info$def to i64)),i64 296), i64 0, i64 4294967328}>
{
c9Kc:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls83z = alloca i64, i32 1
  %ls83y = alloca i64, i32 1
  %ls83A = alloca i64, i32 1
  %ls83B = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9NB = load i64*, i64** %Hp_Var
  %ln9NC = getelementptr inbounds i64, i64* %ln9NB, i32 8
  %ln9ND = ptrtoint i64* %ln9NC to i64
  %ln9NE = inttoptr i64 %ln9ND to i64*
  store i64* %ln9NE, i64** %Hp_Var
  %ln9NF = load i64*, i64** %Hp_Var
  %ln9NG = ptrtoint i64* %ln9NF to i64
  %ln9NH = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9NI = bitcast i64* %ln9NH to i64*
  %ln9NJ = load i64, i64* %ln9NI, !tbaa !4
  %ln9NK = icmp ugt i64 %ln9NG, %ln9NJ
  br i1 %ln9NK, label %c9KL, label %c9KK
c9KK:
  %ln9NN = load i64, i64* %R1_Var
  %ln9NO = add i64 %ln9NN, 7
  %ln9NP = inttoptr i64 %ln9NO to i64*
  %ln9NQ = load i64, i64* %ln9NP, !tbaa !3
  store i64 %ln9NQ, i64* %ls83z
  %ln9NT = load i64, i64* %R1_Var
  %ln9NU = add i64 %ln9NT, 15
  %ln9NV = inttoptr i64 %ln9NU to i64*
  %ln9NW = load i64, i64* %ln9NV, !tbaa !3
  store i64 %ln9NW, i64* %ls83y
  %ln9NZ = load i64, i64* %R1_Var
  %ln9O0 = add i64 %ln9NZ, 23
  %ln9O1 = inttoptr i64 %ln9O0 to i64*
  %ln9O2 = load i64, i64* %ln9O1, !tbaa !3
  store i64 %ln9O2, i64* %ls83A
  %ln9O5 = load i64, i64* %R1_Var
  %ln9O6 = add i64 %ln9O5, 31
  %ln9O7 = inttoptr i64 %ln9O6 to i64*
  %ln9O8 = load i64, i64* %ln9O7, !tbaa !3
  store i64 %ln9O8, i64* %ls83B
  %ln9Oa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83G_info$def to i64
  %ln9O9 = load i64*, i64** %Hp_Var
  %ln9Ob = getelementptr inbounds i64, i64* %ln9O9, i32 -7
  store i64 %ln9Oa, i64* %ln9Ob, !tbaa !2
  %ln9Od = load i64, i64* %ls83z
  %ln9Oc = load i64*, i64** %Hp_Var
  %ln9Oe = getelementptr inbounds i64, i64* %ln9Oc, i32 -5
  store i64 %ln9Od, i64* %ln9Oe, !tbaa !2
  %ln9Og = load i64, i64* %ls83y
  %ln9Of = load i64*, i64** %Hp_Var
  %ln9Oh = getelementptr inbounds i64, i64* %ln9Of, i32 -4
  store i64 %ln9Og, i64* %ln9Oh, !tbaa !2
  %ln9Oj = load i64, i64* %ls83A
  %ln9Oi = load i64*, i64** %Hp_Var
  %ln9Ok = getelementptr inbounds i64, i64* %ln9Oi, i32 -3
  store i64 %ln9Oj, i64* %ln9Ok, !tbaa !2
  %ln9Om = load i64, i64* %ls83B
  %ln9Ol = load i64*, i64** %Hp_Var
  %ln9On = getelementptr inbounds i64, i64* %ln9Ol, i32 -2
  store i64 %ln9Om, i64* %ln9On, !tbaa !2
  %ln9Op = ptrtoint i8* @Word_W_con_info to i64
  %ln9Oo = load i64*, i64** %Hp_Var
  %ln9Oq = getelementptr inbounds i64, i64* %ln9Oo, i32 -1
  store i64 %ln9Op, i64* %ln9Oq, !tbaa !2
  %ln9Os = load i64*, i64** %Hp_Var
  %ln9Ot = getelementptr inbounds i64, i64* %ln9Os, i32 -7
  %ln9Ou = ptrtoint i64* %ln9Ot to i64
  %ln9Or = load i64*, i64** %Hp_Var
  %ln9Ov = getelementptr inbounds i64, i64* %ln9Or, i32 0
  store i64 %ln9Ou, i64* %ln9Ov, !tbaa !2
  %ln9Ox = load i64*, i64** %Hp_Var
  %ln9Oy = ptrtoint i64* %ln9Ox to i64
  %ln9Oz = add i64 %ln9Oy, -7
  store i64 %ln9Oz, i64* %R1_Var
  %ln9OA = load i64*, i64** %Sp_Var
  %ln9OB = getelementptr inbounds i64, i64* %ln9OA, i32 1
  %ln9OC = ptrtoint i64* %ln9OB to i64
  %ln9OD = inttoptr i64 %ln9OC to i64*
  store i64* %ln9OD, i64** %Sp_Var
  %ln9OE = load i64*, i64** %Sp_Var
  %ln9OF = getelementptr inbounds i64, i64* %ln9OE, i32 0
  %ln9OG = bitcast i64* %ln9OF to i64*
  %ln9OH = load i64, i64* %ln9OG, !tbaa !1
  %ln9OI = inttoptr i64 %ln9OH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9OJ = load i64*, i64** %Sp_Var
  %ln9OK = load i64*, i64** %Hp_Var
  %ln9OL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9OI( i64* %Base_Arg, i64* %ln9OJ, i64* %ln9OK, i64 %ln9OL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9KL:
  %ln9OM = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 64, i64* %ln9OM, !tbaa !4
  %ln9ON = load i64, i64* %R1_Var
  store i64 %ln9ON, i64* %R1_Var
  %ln9OO = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9OP = load i64*, i64** %Sp_Var
  %ln9OQ = load i64*, i64** %Hp_Var
  %ln9OR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9OO( i64* %Base_Arg, i64* %ln9OP, i64* %ln9OQ, i64 %ln9OR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_split2zuzdszdwsplit2_closure_struct = type <{i64, i64}>
@Word_split2zuzdszdwsplit2_closure$def = internal global %Word_split2zuzdszdwsplit2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2zuzdszdwsplit2_info$def to i64), i64 0}>
@Word_split2zuzdszdwsplit2_closure = alias i8* bitcast (%Word_split2zuzdszdwsplit2_closure_struct* @Word_split2zuzdszdwsplit2_closure$def to i8*)
@s83O_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83O_info$def to i8*)
define internal ghccc void @s83O_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83O_info$def to i64)),i64 328), i64 2, i64 12884901907}>
{
c9Pk:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9PH = load i64*, i64** %Sp_Var
  %ln9PI = getelementptr inbounds i64, i64* %ln9PH, i32 -4
  %ln9PJ = ptrtoint i64* %ln9PI to i64
  %ln9PK = icmp ult i64 %ln9PJ, %SpLim_Arg
  br i1 %ln9PK, label %c9Pl, label %c9Pm
c9Pm:
  %ln9PM = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9PL = load i64*, i64** %Sp_Var
  %ln9PN = getelementptr inbounds i64, i64* %ln9PL, i32 -2
  store i64 %ln9PM, i64* %ln9PN, !tbaa !1
  %ln9PP = load i64, i64* %R1_Var
  %ln9PO = load i64*, i64** %Sp_Var
  %ln9PQ = getelementptr inbounds i64, i64* %ln9PO, i32 -1
  store i64 %ln9PP, i64* %ln9PQ, !tbaa !1
  %ln9PS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Pi_info$def to i64
  %ln9PR = load i64*, i64** %Sp_Var
  %ln9PT = getelementptr inbounds i64, i64* %ln9PR, i32 -4
  store i64 %ln9PS, i64* %ln9PT, !tbaa !1
  %ln9PW = load i64, i64* %R1_Var
  %ln9PX = add i64 %ln9PW, 24
  %ln9PY = inttoptr i64 %ln9PX to i64*
  %ln9PZ = load i64, i64* %ln9PY, !tbaa !3
  store i64 %ln9PZ, i64* %R2_Var
  %ln9Q3 = load i64, i64* %R1_Var
  %ln9Q4 = add i64 %ln9Q3, 16
  %ln9Q5 = inttoptr i64 %ln9Q4 to i64*
  %ln9Q6 = load i64, i64* %ln9Q5, !tbaa !3
  %ln9Q0 = load i64*, i64** %Sp_Var
  %ln9Q7 = getelementptr inbounds i64, i64* %ln9Q0, i32 -3
  store i64 %ln9Q6, i64* %ln9Q7, !tbaa !1
  %ln9Q8 = load i64*, i64** %Sp_Var
  %ln9Q9 = getelementptr inbounds i64, i64* %ln9Q8, i32 -4
  %ln9Qa = ptrtoint i64* %ln9Q9 to i64
  %ln9Qb = inttoptr i64 %ln9Qa to i64*
  store i64* %ln9Qb, i64** %Sp_Var
  %ln9Qc = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Qd = load i64*, i64** %Sp_Var
  %ln9Qe = load i64, i64* %R1_Var
  %ln9Qf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Qc( i64* %Base_Arg, i64* %ln9Qd, i64* %Hp_Arg, i64 %ln9Qe, i64 %ln9Qf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Pl:
  %ln9Qg = load i64, i64* %R1_Var
  store i64 %ln9Qg, i64* %R1_Var
  %ln9Qh = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9Qi = bitcast i64* %ln9Qh to i64*
  %ln9Qj = load i64, i64* %ln9Qi, !tbaa !4
  %ln9Qk = inttoptr i64 %ln9Qj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ql = load i64*, i64** %Sp_Var
  %ln9Qm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Qk( i64* %Base_Arg, i64* %ln9Ql, i64* %Hp_Arg, i64 %ln9Qm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Pi_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Pi_info$def to i8*)
define internal ghccc void @c9Pi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Pi_info$def to i64)),i64 328), i64 1, i64 12884901920}>
{
c9Pi:
  %ls83H = alloca i64, i32 1
  %ls83K = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Qn = load i64*, i64** %Sp_Var
  %ln9Qo = getelementptr inbounds i64, i64* %ln9Qn, i32 1
  %ln9Qp = bitcast i64* %ln9Qo to i64*
  %ln9Qq = load i64, i64* %ln9Qp, !tbaa !1
  store i64 %ln9Qq, i64* %ls83H
  %ln9Qr = sub i64 0, %R1_Arg
  store i64 %ln9Qr, i64* %ls83K
  %ln9Qs = load i64, i64* %ls83K
  %ln9Qt = icmp sge i64 %ln9Qs, 0
  %ln9Qu = zext i1 %ln9Qt to i64
  switch i64 %ln9Qu, label %c9Py [i64 0, label %c9Py
i64 1, label %c9Pz]
c9Py:
  %ln9Qv = load i64, i64* %ls83K
  %ln9Qw = sub i64 0, %ln9Qv
  store i64 %ln9Qw, i64* %R3_Var
  %ln9Qx = load i64, i64* %ls83H
  store i64 %ln9Qx, i64* %R2_Var
  %ln9Qy = load i64*, i64** %Sp_Var
  %ln9Qz = getelementptr inbounds i64, i64* %ln9Qy, i32 2
  %ln9QA = ptrtoint i64* %ln9Qz to i64
  %ln9QB = inttoptr i64 %ln9QA to i64*
  store i64* %ln9QB, i64** %Sp_Var
  %ln9QC = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9QD = load i64*, i64** %Sp_Var
  %ln9QE = load i64, i64* %R2_Var
  %ln9QF = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9QC( i64* %Base_Arg, i64* %ln9QD, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9QE, i64 %ln9QF, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Pz:
  %ln9QG = load i64, i64* %ls83K
  store i64 %ln9QG, i64* %R3_Var
  %ln9QH = load i64, i64* %ls83H
  store i64 %ln9QH, i64* %R2_Var
  %ln9QI = load i64*, i64** %Sp_Var
  %ln9QJ = getelementptr inbounds i64, i64* %ln9QI, i32 2
  %ln9QK = ptrtoint i64* %ln9QJ to i64
  %ln9QL = inttoptr i64 %ln9QK to i64*
  store i64* %ln9QL, i64** %Sp_Var
  %ln9QM = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9QN = load i64*, i64** %Sp_Var
  %ln9QO = load i64, i64* %R2_Var
  %ln9QP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9QM( i64* %Base_Arg, i64* %ln9QN, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9QO, i64 %ln9QP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_split2zuzdszdwsplit2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2zuzdszdwsplit2_info$def to i8*)
define ghccc void @Word_split2zuzdszdwsplit2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2zuzdszdwsplit2_info$def to i64)),i64 328), i64 8589934607, i64 0, i64 30064771087}>
{
c9PC:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9QQ = load i64*, i64** %Hp_Var
  %ln9QR = getelementptr inbounds i64, i64* %ln9QQ, i32 4
  %ln9QS = ptrtoint i64* %ln9QR to i64
  %ln9QT = inttoptr i64 %ln9QS to i64*
  store i64* %ln9QT, i64** %Hp_Var
  %ln9QU = load i64*, i64** %Hp_Var
  %ln9QV = ptrtoint i64* %ln9QU to i64
  %ln9QW = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9QX = bitcast i64* %ln9QW to i64*
  %ln9QY = load i64, i64* %ln9QX, !tbaa !4
  %ln9QZ = icmp ugt i64 %ln9QV, %ln9QY
  br i1 %ln9QZ, label %c9PG, label %c9PF
c9PF:
  %ln9R1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83O_info$def to i64
  %ln9R0 = load i64*, i64** %Hp_Var
  %ln9R2 = getelementptr inbounds i64, i64* %ln9R0, i32 -3
  store i64 %ln9R1, i64* %ln9R2, !tbaa !2
  %ln9R4 = load i64, i64* %R2_Var
  %ln9R3 = load i64*, i64** %Hp_Var
  %ln9R5 = getelementptr inbounds i64, i64* %ln9R3, i32 -1
  store i64 %ln9R4, i64* %ln9R5, !tbaa !2
  %ln9R7 = load i64, i64* %R3_Var
  %ln9R6 = load i64*, i64** %Hp_Var
  %ln9R8 = getelementptr inbounds i64, i64* %ln9R6, i32 0
  store i64 %ln9R7, i64* %ln9R8, !tbaa !2
  %ln9R9 = load i64*, i64** %Hp_Var
  %ln9Ra = getelementptr inbounds i64, i64* %ln9R9, i32 -3
  %ln9Rb = ptrtoint i64* %ln9Ra to i64
  store i64 %ln9Rb, i64* %R1_Var
  %ln9Rc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln9Rd = bitcast i64* %ln9Rc to i64*
  %ln9Re = load i64, i64* %ln9Rd, !tbaa !1
  %ln9Rf = inttoptr i64 %ln9Re to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Rg = load i64*, i64** %Hp_Var
  %ln9Rh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Rf( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9Rg, i64 %ln9Rh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9PG:
  %ln9Ri = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9Ri, !tbaa !4
  %ln9Rj = load i64, i64* %R3_Var
  store i64 %ln9Rj, i64* %R3_Var
  %ln9Rk = load i64, i64* %R2_Var
  store i64 %ln9Rk, i64* %R2_Var
  %ln9Rl = ptrtoint %Word_split2zuzdszdwsplit2_closure_struct* @Word_split2zuzdszdwsplit2_closure$def to i64
  store i64 %ln9Rl, i64* %R1_Var
  %ln9Rm = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9Rn = bitcast i64* %ln9Rm to i64*
  %ln9Ro = load i64, i64* %ln9Rn, !tbaa !4
  %ln9Rp = inttoptr i64 %ln9Ro to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Rq = load i64*, i64** %Hp_Var
  %ln9Rr = load i64, i64* %R1_Var
  %ln9Rs = load i64, i64* %R2_Var
  %ln9Rt = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Rp( i64* %Base_Arg, i64* %Sp_Arg, i64* %ln9Rq, i64 %ln9Rr, i64 %ln9Rs, i64 %ln9Rt, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwsplit2_closure_struct = type <{i64, i64}>
@Word_zdwsplit2_closure$def = internal global %Word_zdwsplit2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwsplit2_info$def to i64), i64 0}>
@Word_zdwsplit2_closure = alias i8* bitcast (%Word_zdwsplit2_closure_struct* @Word_zdwsplit2_closure$def to i8*)
@s83Y_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83Y_info$def to i8*)
define internal ghccc void @s83Y_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83Y_info$def to i64)),i64 328), i64 2, i64 12884901907}>
{
c9Se:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Tn = load i64*, i64** %Sp_Var
  %ln9To = getelementptr inbounds i64, i64* %ln9Tn, i32 -4
  %ln9Tp = ptrtoint i64* %ln9To to i64
  %ln9Tq = icmp ult i64 %ln9Tp, %SpLim_Arg
  br i1 %ln9Tq, label %c9Sf, label %c9Sg
c9Sg:
  %ln9Ts = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9Tr = load i64*, i64** %Sp_Var
  %ln9Tt = getelementptr inbounds i64, i64* %ln9Tr, i32 -2
  store i64 %ln9Ts, i64* %ln9Tt, !tbaa !1
  %ln9Tv = load i64, i64* %R1_Var
  %ln9Tu = load i64*, i64** %Sp_Var
  %ln9Tw = getelementptr inbounds i64, i64* %ln9Tu, i32 -1
  store i64 %ln9Tv, i64* %ln9Tw, !tbaa !1
  %ln9Ty = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Sc_info$def to i64
  %ln9Tx = load i64*, i64** %Sp_Var
  %ln9Tz = getelementptr inbounds i64, i64* %ln9Tx, i32 -4
  store i64 %ln9Ty, i64* %ln9Tz, !tbaa !1
  %ln9TC = load i64, i64* %R1_Var
  %ln9TD = add i64 %ln9TC, 16
  %ln9TE = inttoptr i64 %ln9TD to i64*
  %ln9TF = load i64, i64* %ln9TE, !tbaa !3
  store i64 %ln9TF, i64* %R2_Var
  %ln9TJ = load i64, i64* %R1_Var
  %ln9TK = add i64 %ln9TJ, 24
  %ln9TL = inttoptr i64 %ln9TK to i64*
  %ln9TM = load i64, i64* %ln9TL, !tbaa !3
  %ln9TG = load i64*, i64** %Sp_Var
  %ln9TN = getelementptr inbounds i64, i64* %ln9TG, i32 -3
  store i64 %ln9TM, i64* %ln9TN, !tbaa !1
  %ln9TO = load i64*, i64** %Sp_Var
  %ln9TP = getelementptr inbounds i64, i64* %ln9TO, i32 -4
  %ln9TQ = ptrtoint i64* %ln9TP to i64
  %ln9TR = inttoptr i64 %ln9TQ to i64*
  store i64* %ln9TR, i64** %Sp_Var
  %ln9TS = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9TT = load i64*, i64** %Sp_Var
  %ln9TU = load i64, i64* %R1_Var
  %ln9TV = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9TS( i64* %Base_Arg, i64* %ln9TT, i64* %Hp_Arg, i64 %ln9TU, i64 %ln9TV, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Sf:
  %ln9TW = load i64, i64* %R1_Var
  store i64 %ln9TW, i64* %R1_Var
  %ln9TX = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9TY = bitcast i64* %ln9TX to i64*
  %ln9TZ = load i64, i64* %ln9TY, !tbaa !4
  %ln9U0 = inttoptr i64 %ln9TZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9U1 = load i64*, i64** %Sp_Var
  %ln9U2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9U0( i64* %Base_Arg, i64* %ln9U1, i64* %Hp_Arg, i64 %ln9U2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9Sc_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Sc_info$def to i8*)
define internal ghccc void @c9Sc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9Sc_info$def to i64)),i64 328), i64 1, i64 12884901920}>
{
c9Sc:
  %ls83S = alloca i64, i32 1
  %ls83U = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9U3 = load i64*, i64** %Sp_Var
  %ln9U4 = getelementptr inbounds i64, i64* %ln9U3, i32 1
  %ln9U5 = bitcast i64* %ln9U4 to i64*
  %ln9U6 = load i64, i64* %ln9U5, !tbaa !1
  store i64 %ln9U6, i64* %ls83S
  %ln9U7 = sub i64 0, %R1_Arg
  store i64 %ln9U7, i64* %ls83U
  %ln9U8 = load i64, i64* %ls83U
  %ln9U9 = icmp sge i64 %ln9U8, 0
  %ln9Ua = zext i1 %ln9U9 to i64
  switch i64 %ln9Ua, label %c9Ss [i64 0, label %c9Ss
i64 1, label %c9St]
c9Ss:
  %ln9Ub = load i64, i64* %ls83U
  %ln9Uc = sub i64 0, %ln9Ub
  store i64 %ln9Uc, i64* %R3_Var
  %ln9Ud = load i64, i64* %ls83S
  store i64 %ln9Ud, i64* %R2_Var
  %ln9Ue = load i64*, i64** %Sp_Var
  %ln9Uf = getelementptr inbounds i64, i64* %ln9Ue, i32 2
  %ln9Ug = ptrtoint i64* %ln9Uf to i64
  %ln9Uh = inttoptr i64 %ln9Ug to i64*
  store i64* %ln9Uh, i64** %Sp_Var
  %ln9Ui = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Uj = load i64*, i64** %Sp_Var
  %ln9Uk = load i64, i64* %R2_Var
  %ln9Ul = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Ui( i64* %Base_Arg, i64* %ln9Uj, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Uk, i64 %ln9Ul, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9St:
  %ln9Um = load i64, i64* %ls83U
  store i64 %ln9Um, i64* %R3_Var
  %ln9Un = load i64, i64* %ls83S
  store i64 %ln9Un, i64* %R2_Var
  %ln9Uo = load i64*, i64** %Sp_Var
  %ln9Up = getelementptr inbounds i64, i64* %ln9Uo, i32 2
  %ln9Uq = ptrtoint i64* %ln9Up to i64
  %ln9Ur = inttoptr i64 %ln9Uq to i64*
  store i64* %ln9Ur, i64** %Sp_Var
  %ln9Us = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Ut = load i64*, i64** %Sp_Var
  %ln9Uu = load i64, i64* %R2_Var
  %ln9Uv = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Us( i64* %Base_Arg, i64* %ln9Ut, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Uu, i64 %ln9Uv, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s840_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s840_info$def to i8*)
define internal ghccc void @s840_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s840_info$def to i64)),i64 352), i64 4294967296, i64 4294967314}>
{
c9SC:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Uw = load i64*, i64** %Sp_Var
  %ln9Ux = getelementptr inbounds i64, i64* %ln9Uw, i32 -2
  %ln9Uy = ptrtoint i64* %ln9Ux to i64
  %ln9Uz = icmp ult i64 %ln9Uy, %SpLim_Arg
  br i1 %ln9Uz, label %c9SD, label %c9SE
c9SE:
  %ln9UB = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9UA = load i64*, i64** %Sp_Var
  %ln9UC = getelementptr inbounds i64, i64* %ln9UA, i32 -2
  store i64 %ln9UB, i64* %ln9UC, !tbaa !1
  %ln9UE = load i64, i64* %R1_Var
  %ln9UD = load i64*, i64** %Sp_Var
  %ln9UF = getelementptr inbounds i64, i64* %ln9UD, i32 -1
  store i64 %ln9UE, i64* %ln9UF, !tbaa !1
  %ln9UI = load i64, i64* %R1_Var
  %ln9UJ = add i64 %ln9UI, 16
  %ln9UK = inttoptr i64 %ln9UJ to i64*
  %ln9UL = load i64, i64* %ln9UK, !tbaa !3
  store i64 %ln9UL, i64* %R2_Var
  %ln9UM = load i64*, i64** %Sp_Var
  %ln9UN = getelementptr inbounds i64, i64* %ln9UM, i32 -2
  %ln9UO = ptrtoint i64* %ln9UN to i64
  %ln9UP = inttoptr i64 %ln9UO to i64*
  store i64* %ln9UP, i64** %Sp_Var
  %ln9UQ = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9UR = load i64*, i64** %Sp_Var
  %ln9US = load i64, i64* %R1_Var
  %ln9UT = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9UQ( i64* %Base_Arg, i64* %ln9UR, i64* %Hp_Arg, i64 %ln9US, i64 %ln9UT, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9SD:
  %ln9UU = load i64, i64* %R1_Var
  store i64 %ln9UU, i64* %R1_Var
  %ln9UV = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9UW = bitcast i64* %ln9UV to i64*
  %ln9UX = load i64, i64* %ln9UW, !tbaa !4
  %ln9UY = inttoptr i64 %ln9UX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9UZ = load i64*, i64** %Sp_Var
  %ln9V0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9UY( i64* %Base_Arg, i64* %ln9UZ, i64* %Hp_Arg, i64 %ln9V0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s84b_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84b_info$def to i8*)
define internal ghccc void @s84b_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84b_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
c9SV:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9V1 = load i64*, i64** %Sp_Var
  %ln9V2 = getelementptr inbounds i64, i64* %ln9V1, i32 -7
  %ln9V3 = ptrtoint i64* %ln9V2 to i64
  %ln9V4 = icmp ult i64 %ln9V3, %SpLim_Arg
  br i1 %ln9V4, label %c9SZ, label %c9T0
c9T0:
  %ln9V6 = ptrtoint i8* @stg_upd_frame_info to i64
  %ln9V5 = load i64*, i64** %Sp_Var
  %ln9V7 = getelementptr inbounds i64, i64* %ln9V5, i32 -2
  store i64 %ln9V6, i64* %ln9V7, !tbaa !1
  %ln9V9 = load i64, i64* %R1_Var
  %ln9V8 = load i64*, i64** %Sp_Var
  %ln9Va = getelementptr inbounds i64, i64* %ln9V8, i32 -1
  store i64 %ln9V9, i64* %ln9Va, !tbaa !1
  %ln9Vc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SQ_info$def to i64
  %ln9Vb = load i64*, i64** %Sp_Var
  %ln9Vd = getelementptr inbounds i64, i64* %ln9Vb, i32 -7
  store i64 %ln9Vc, i64* %ln9Vd, !tbaa !1
  %ln9Vh = load i64, i64* %R1_Var
  %ln9Vi = add i64 %ln9Vh, 24
  %ln9Vj = inttoptr i64 %ln9Vi to i64*
  %ln9Vk = load i64, i64* %ln9Vj, !tbaa !3
  %ln9Ve = load i64*, i64** %Sp_Var
  %ln9Vl = getelementptr inbounds i64, i64* %ln9Ve, i32 -6
  store i64 %ln9Vk, i64* %ln9Vl, !tbaa !1
  %ln9Vp = load i64, i64* %R1_Var
  %ln9Vq = add i64 %ln9Vp, 16
  %ln9Vr = inttoptr i64 %ln9Vq to i64*
  %ln9Vs = load i64, i64* %ln9Vr, !tbaa !3
  %ln9Vm = load i64*, i64** %Sp_Var
  %ln9Vt = getelementptr inbounds i64, i64* %ln9Vm, i32 -5
  store i64 %ln9Vs, i64* %ln9Vt, !tbaa !1
  %ln9Vx = load i64, i64* %R1_Var
  %ln9Vy = add i64 %ln9Vx, 32
  %ln9Vz = inttoptr i64 %ln9Vy to i64*
  %ln9VA = load i64, i64* %ln9Vz, !tbaa !3
  %ln9Vu = load i64*, i64** %Sp_Var
  %ln9VB = getelementptr inbounds i64, i64* %ln9Vu, i32 -4
  store i64 %ln9VA, i64* %ln9VB, !tbaa !1
  %ln9VF = load i64, i64* %R1_Var
  %ln9VG = add i64 %ln9VF, 40
  %ln9VH = inttoptr i64 %ln9VG to i64*
  %ln9VI = load i64, i64* %ln9VH, !tbaa !3
  %ln9VC = load i64*, i64** %Sp_Var
  %ln9VJ = getelementptr inbounds i64, i64* %ln9VC, i32 -3
  store i64 %ln9VI, i64* %ln9VJ, !tbaa !1
  %ln9VK = load i64*, i64** %Sp_Var
  %ln9VL = getelementptr inbounds i64, i64* %ln9VK, i32 -7
  %ln9VM = ptrtoint i64* %ln9VL to i64
  %ln9VN = inttoptr i64 %ln9VM to i64*
  store i64* %ln9VN, i64** %Sp_Var
  %ln9VO = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9VP = load i64*, i64** %Sp_Var
  %ln9VQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9VO( i64* %Base_Arg, i64* %ln9VP, i64* %Hp_Arg, i64 %ln9VQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9SZ:
  %ln9VR = load i64, i64* %R1_Var
  store i64 %ln9VR, i64* %R1_Var
  %ln9VS = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %ln9VT = bitcast i64* %ln9VS to i64*
  %ln9VU = load i64, i64* %ln9VT, !tbaa !4
  %ln9VV = inttoptr i64 %ln9VU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9VW = load i64*, i64** %Sp_Var
  %ln9VX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9VV( i64* %Base_Arg, i64* %ln9VW, i64* %Hp_Arg, i64 %ln9VX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9SQ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SQ_info$def to i8*)
define internal ghccc void @c9SQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SQ_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
c9SQ:
  %ls846 = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9VY = load i64*, i64** %Sp_Var
  %ln9VZ = getelementptr inbounds i64, i64* %ln9VY, i32 4
  %ln9W0 = bitcast i64* %ln9VZ to i64*
  %ln9W1 = load i64, i64* %ln9W0, !tbaa !1
  store i64 %ln9W1, i64* %ls846
  %ln9W3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SY_info$def to i64
  %ln9W2 = load i64*, i64** %Sp_Var
  %ln9W4 = getelementptr inbounds i64, i64* %ln9W2, i32 4
  store i64 %ln9W3, i64* %ln9W4, !tbaa !1
  %ln9W5 = load i64, i64* %ls846
  store i64 %ln9W5, i64* %R5_Var
  %ln9W6 = load i64*, i64** %Sp_Var
  %ln9W7 = getelementptr inbounds i64, i64* %ln9W6, i32 3
  %ln9W8 = bitcast i64* %ln9W7 to i64*
  %ln9W9 = load i64, i64* %ln9W8, !tbaa !1
  store i64 %ln9W9, i64* %R4_Var
  %ln9Wa = load i64*, i64** %Sp_Var
  %ln9Wb = getelementptr inbounds i64, i64* %ln9Wa, i32 2
  %ln9Wc = bitcast i64* %ln9Wb to i64*
  %ln9Wd = load i64, i64* %ln9Wc, !tbaa !1
  store i64 %ln9Wd, i64* %R3_Var
  %ln9We = load i64*, i64** %Sp_Var
  %ln9Wf = getelementptr inbounds i64, i64* %ln9We, i32 1
  %ln9Wg = bitcast i64* %ln9Wf to i64*
  %ln9Wh = load i64, i64* %ln9Wg, !tbaa !1
  store i64 %ln9Wh, i64* %R2_Var
  %ln9Wi = load i64*, i64** %Sp_Var
  %ln9Wj = getelementptr inbounds i64, i64* %ln9Wi, i32 4
  %ln9Wk = ptrtoint i64* %ln9Wj to i64
  %ln9Wl = inttoptr i64 %ln9Wk to i64*
  store i64* %ln9Wl, i64** %Sp_Var
  %ln9Wm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Wn = load i64*, i64** %Sp_Var
  %ln9Wo = load i64, i64* %R2_Var
  %ln9Wp = load i64, i64* %R3_Var
  %ln9Wq = load i64, i64* %R4_Var
  %ln9Wr = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Wm( i64* %Base_Arg, i64* %ln9Wn, i64* %Hp_Arg, i64 %R1_Arg, i64 %ln9Wo, i64 %ln9Wp, i64 %ln9Wq, i64 %ln9Wr, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9SY_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SY_info$def to i8*)
define internal ghccc void @c9SY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
c9SY:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln9Ws = load i64, i64* %R1_Var
  %ln9Wt = and i64 %ln9Ws, -8
  store i64 %ln9Wt, i64* %R1_Var
  %ln9Wu = load i64*, i64** %Sp_Var
  %ln9Wv = getelementptr inbounds i64, i64* %ln9Wu, i32 1
  %ln9Ww = ptrtoint i64* %ln9Wv to i64
  %ln9Wx = inttoptr i64 %ln9Ww to i64*
  store i64* %ln9Wx, i64** %Sp_Var
  %ln9Wz = load i64, i64* %R1_Var
  %ln9WA = inttoptr i64 %ln9Wz to i64*
  %ln9WB = load i64, i64* %ln9WA, !tbaa !3
  %ln9WC = inttoptr i64 %ln9WB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9WD = load i64*, i64** %Sp_Var
  %ln9WE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9WC( i64* %Base_Arg, i64* %ln9WD, i64* %Hp_Arg, i64 %ln9WE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwsplit2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwsplit2_info$def to i8*)
define ghccc void @Word_zdwsplit2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwsplit2_info$def to i64)),i64 296), i64 8589934607, i64 0, i64 2134598746127}>
{
c9T8:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %ln9WF = load i64*, i64** %Sp_Var
  %ln9WG = getelementptr inbounds i64, i64* %ln9WF, i32 -2
  %ln9WH = ptrtoint i64* %ln9WG to i64
  %ln9WI = icmp ult i64 %ln9WH, %SpLim_Arg
  br i1 %ln9WI, label %c9T9, label %c9Ta
c9Ta:
  %ln9WK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9S3_info$def to i64
  %ln9WJ = load i64*, i64** %Sp_Var
  %ln9WL = getelementptr inbounds i64, i64* %ln9WJ, i32 -2
  store i64 %ln9WK, i64* %ln9WL, !tbaa !1
  %ln9WM = load i64, i64* %R3_Var
  store i64 %ln9WM, i64* %R1_Var
  %ln9WO = load i64, i64* %R2_Var
  %ln9WN = load i64*, i64** %Sp_Var
  %ln9WP = getelementptr inbounds i64, i64* %ln9WN, i32 -1
  store i64 %ln9WO, i64* %ln9WP, !tbaa !1
  %ln9WQ = load i64*, i64** %Sp_Var
  %ln9WR = getelementptr inbounds i64, i64* %ln9WQ, i32 -2
  %ln9WS = ptrtoint i64* %ln9WR to i64
  %ln9WT = inttoptr i64 %ln9WS to i64*
  store i64* %ln9WT, i64** %Sp_Var
  %ln9WU = load i64, i64* %R1_Var
  %ln9WV = and i64 %ln9WU, 7
  %ln9WW = icmp ne i64 %ln9WV, 0
  br i1 %ln9WW, label %u9Tm, label %c9S4
c9S4:
  %ln9WY = load i64, i64* %R1_Var
  %ln9WZ = inttoptr i64 %ln9WY to i64*
  %ln9X0 = load i64, i64* %ln9WZ, !tbaa !3
  %ln9X1 = inttoptr i64 %ln9X0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9X2 = load i64*, i64** %Sp_Var
  %ln9X3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9X1( i64* %Base_Arg, i64* %ln9X2, i64* %Hp_Arg, i64 %ln9X3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Tm:
  %ln9X4 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9S3_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9X5 = load i64*, i64** %Sp_Var
  %ln9X6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9X4( i64* %Base_Arg, i64* %ln9X5, i64* %Hp_Arg, i64 %ln9X6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9T9:
  %ln9X7 = load i64, i64* %R3_Var
  store i64 %ln9X7, i64* %R3_Var
  %ln9X8 = load i64, i64* %R2_Var
  store i64 %ln9X8, i64* %R2_Var
  %ln9X9 = ptrtoint %Word_zdwsplit2_closure_struct* @Word_zdwsplit2_closure$def to i64
  store i64 %ln9X9, i64* %R1_Var
  %ln9Xa = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln9Xb = bitcast i64* %ln9Xa to i64*
  %ln9Xc = load i64, i64* %ln9Xb, !tbaa !4
  %ln9Xd = inttoptr i64 %ln9Xc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Xe = load i64*, i64** %Sp_Var
  %ln9Xf = load i64, i64* %R1_Var
  %ln9Xg = load i64, i64* %R2_Var
  %ln9Xh = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Xd( i64* %Base_Arg, i64* %ln9Xe, i64* %Hp_Arg, i64 %ln9Xf, i64 %ln9Xg, i64 %ln9Xh, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9S3_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9S3_info$def to i8*)
define internal ghccc void @c9S3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9S3_info$def to i64)),i64 296), i64 1, i64 1035087118368}>
{
c9S3:
  %ls83P = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls83S = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls83Z = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %ln9Xi = load i64*, i64** %Sp_Var
  %ln9Xj = getelementptr inbounds i64, i64* %ln9Xi, i32 1
  %ln9Xk = bitcast i64* %ln9Xj to i64*
  %ln9Xl = load i64, i64* %ln9Xk, !tbaa !1
  store i64 %ln9Xl, i64* %ls83P
  %ln9Xm = load i64, i64* %R1_Var
  %ln9Xn = and i64 %ln9Xm, 7
  switch i64 %ln9Xn, label %c9T4 [i64 1, label %c9T4
i64 2, label %c9T5
i64 3, label %c9T6]
c9T4:
  %ln9Xo = load i64*, i64** %Hp_Var
  %ln9Xp = getelementptr inbounds i64, i64* %ln9Xo, i32 4
  %ln9Xq = ptrtoint i64* %ln9Xp to i64
  %ln9Xr = inttoptr i64 %ln9Xq to i64*
  store i64* %ln9Xr, i64** %Hp_Var
  %ln9Xs = load i64*, i64** %Hp_Var
  %ln9Xt = ptrtoint i64* %ln9Xs to i64
  %ln9Xu = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Xv = bitcast i64* %ln9Xu to i64*
  %ln9Xw = load i64, i64* %ln9Xv, !tbaa !4
  %ln9Xx = icmp ugt i64 %ln9Xt, %ln9Xw
  br i1 %ln9Xx, label %c9Td, label %c9Tc
c9Tc:
  %ln9XA = load i64, i64* %R1_Var
  %ln9XB = add i64 %ln9XA, 7
  %ln9XC = inttoptr i64 %ln9XB to i64*
  %ln9XD = load i64, i64* %ln9XC, !tbaa !3
  store i64 %ln9XD, i64* %ls83S
  %ln9XF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s83Y_info$def to i64
  %ln9XE = load i64*, i64** %Hp_Var
  %ln9XG = getelementptr inbounds i64, i64* %ln9XE, i32 -3
  store i64 %ln9XF, i64* %ln9XG, !tbaa !2
  %ln9XI = load i64, i64* %ls83P
  %ln9XH = load i64*, i64** %Hp_Var
  %ln9XJ = getelementptr inbounds i64, i64* %ln9XH, i32 -1
  store i64 %ln9XI, i64* %ln9XJ, !tbaa !2
  %ln9XL = load i64, i64* %ls83S
  %ln9XK = load i64*, i64** %Hp_Var
  %ln9XM = getelementptr inbounds i64, i64* %ln9XK, i32 0
  store i64 %ln9XL, i64* %ln9XM, !tbaa !2
  %ln9XN = load i64*, i64** %Hp_Var
  %ln9XO = getelementptr inbounds i64, i64* %ln9XN, i32 -3
  %ln9XP = ptrtoint i64* %ln9XO to i64
  store i64 %ln9XP, i64* %R1_Var
  %ln9XQ = load i64*, i64** %Sp_Var
  %ln9XR = getelementptr inbounds i64, i64* %ln9XQ, i32 2
  %ln9XS = ptrtoint i64* %ln9XR to i64
  %ln9XT = inttoptr i64 %ln9XS to i64*
  store i64* %ln9XT, i64** %Sp_Var
  %ln9XU = load i64*, i64** %Sp_Var
  %ln9XV = getelementptr inbounds i64, i64* %ln9XU, i32 0
  %ln9XW = bitcast i64* %ln9XV to i64*
  %ln9XX = load i64, i64* %ln9XW, !tbaa !1
  %ln9XY = inttoptr i64 %ln9XX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9XZ = load i64*, i64** %Sp_Var
  %ln9Y0 = load i64*, i64** %Hp_Var
  %ln9Y1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9XY( i64* %Base_Arg, i64* %ln9XZ, i64* %ln9Y0, i64 %ln9Y1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Td:
  %ln9Y2 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %ln9Y2, !tbaa !4
  %ln9Y3 = load i64, i64* %R1_Var
  store i64 %ln9Y3, i64* %R1_Var
  %ln9Y4 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Y5 = load i64*, i64** %Sp_Var
  %ln9Y6 = load i64*, i64** %Hp_Var
  %ln9Y7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Y4( i64* %Base_Arg, i64* %ln9Y5, i64* %ln9Y6, i64 %ln9Y7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9T5:
  %ln9Y8 = load i64*, i64** %Hp_Var
  %ln9Y9 = getelementptr inbounds i64, i64* %ln9Y8, i32 3
  %ln9Ya = ptrtoint i64* %ln9Y9 to i64
  %ln9Yb = inttoptr i64 %ln9Ya to i64*
  store i64* %ln9Yb, i64** %Hp_Var
  %ln9Yc = load i64*, i64** %Hp_Var
  %ln9Yd = ptrtoint i64* %ln9Yc to i64
  %ln9Ye = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Yf = bitcast i64* %ln9Ye to i64*
  %ln9Yg = load i64, i64* %ln9Yf, !tbaa !4
  %ln9Yh = icmp ugt i64 %ln9Yd, %ln9Yg
  br i1 %ln9Yh, label %c9Tg, label %c9Tf
c9Tf:
  %ln9Yk = load i64, i64* %R1_Var
  %ln9Yl = add i64 %ln9Yk, 6
  %ln9Ym = inttoptr i64 %ln9Yl to i64*
  %ln9Yn = load i64, i64* %ln9Ym, !tbaa !3
  store i64 %ln9Yn, i64* %ls83Z
  %ln9Yp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s840_info$def to i64
  %ln9Yo = load i64*, i64** %Hp_Var
  %ln9Yq = getelementptr inbounds i64, i64* %ln9Yo, i32 -2
  store i64 %ln9Yp, i64* %ln9Yq, !tbaa !2
  %ln9Ys = load i64, i64* %ls83Z
  %ln9Yr = load i64*, i64** %Hp_Var
  %ln9Yt = getelementptr inbounds i64, i64* %ln9Yr, i32 0
  store i64 %ln9Ys, i64* %ln9Yt, !tbaa !2
  %ln9Yu = load i64, i64* %ls83P
  store i64 %ln9Yu, i64* %R3_Var
  %ln9Yv = load i64*, i64** %Hp_Var
  %ln9Yw = getelementptr inbounds i64, i64* %ln9Yv, i32 -2
  %ln9Yx = ptrtoint i64* %ln9Yw to i64
  store i64 %ln9Yx, i64* %R2_Var
  %ln9Yy = load i64*, i64** %Sp_Var
  %ln9Yz = getelementptr inbounds i64, i64* %ln9Yy, i32 2
  %ln9YA = ptrtoint i64* %ln9Yz to i64
  %ln9YB = inttoptr i64 %ln9YA to i64*
  store i64* %ln9YB, i64** %Sp_Var
  %ln9YC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2zuzdszdwsplit2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9YD = load i64*, i64** %Sp_Var
  %ln9YE = load i64*, i64** %Hp_Var
  %ln9YF = load i64, i64* %R1_Var
  %ln9YG = load i64, i64* %R2_Var
  %ln9YH = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9YC( i64* %Base_Arg, i64* %ln9YD, i64* %ln9YE, i64 %ln9YF, i64 %ln9YG, i64 %ln9YH, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Tg:
  %ln9YI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %ln9YI, !tbaa !4
  %ln9YJ = load i64, i64* %R1_Var
  store i64 %ln9YJ, i64* %R1_Var
  %ln9YK = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9YL = load i64*, i64** %Sp_Var
  %ln9YM = load i64*, i64** %Hp_Var
  %ln9YN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9YK( i64* %Base_Arg, i64* %ln9YL, i64* %ln9YM, i64 %ln9YN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9T6:
  %ln9YP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SH_info$def to i64
  %ln9YO = load i64*, i64** %Sp_Var
  %ln9YQ = getelementptr inbounds i64, i64* %ln9YO, i32 0
  store i64 %ln9YP, i64* %ln9YQ, !tbaa !1
  %ln9YT = load i64, i64* %R1_Var
  %ln9YU = add i64 %ln9YT, 5
  %ln9YV = inttoptr i64 %ln9YU to i64*
  %ln9YW = load i64, i64* %ln9YV, !tbaa !3
  store i64 %ln9YW, i64* %R1_Var
  %ln9YX = load i64, i64* %R1_Var
  %ln9YY = and i64 %ln9YX, 7
  %ln9YZ = icmp ne i64 %ln9YY, 0
  br i1 %ln9YZ, label %u9Tl, label %c9SI
c9SI:
  %ln9Z1 = load i64, i64* %R1_Var
  %ln9Z2 = inttoptr i64 %ln9Z1 to i64*
  %ln9Z3 = load i64, i64* %ln9Z2, !tbaa !3
  %ln9Z4 = inttoptr i64 %ln9Z3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Z5 = load i64*, i64** %Sp_Var
  %ln9Z6 = load i64*, i64** %Hp_Var
  %ln9Z7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Z4( i64* %Base_Arg, i64* %ln9Z5, i64* %ln9Z6, i64 %ln9Z7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
u9Tl:
  %ln9Z8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SH_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln9Z9 = load i64*, i64** %Sp_Var
  %ln9Za = load i64*, i64** %Hp_Var
  %ln9Zb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln9Z8( i64* %Base_Arg, i64* %ln9Z9, i64* %ln9Za, i64 %ln9Zb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@c9SH_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SH_info$def to i8*)
define internal ghccc void @c9SH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c9SH_info$def to i64)),i64 296), i64 1, i64 279172874272}>
{
c9SH:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls844 = alloca i64, i32 1
  %ls843 = alloca i64, i32 1
  %ls845 = alloca i64, i32 1
  %ls846 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln9Zc = load i64*, i64** %Hp_Var
  %ln9Zd = getelementptr inbounds i64, i64* %ln9Zc, i32 6
  %ln9Ze = ptrtoint i64* %ln9Zd to i64
  %ln9Zf = inttoptr i64 %ln9Ze to i64*
  store i64* %ln9Zf, i64** %Hp_Var
  %ln9Zg = load i64*, i64** %Hp_Var
  %ln9Zh = ptrtoint i64* %ln9Zg to i64
  %ln9Zi = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %ln9Zj = bitcast i64* %ln9Zi to i64*
  %ln9Zk = load i64, i64* %ln9Zj, !tbaa !4
  %ln9Zl = icmp ugt i64 %ln9Zh, %ln9Zk
  br i1 %ln9Zl, label %c9Tk, label %c9Tj
c9Tj:
  %ln9Zo = load i64, i64* %R1_Var
  %ln9Zp = add i64 %ln9Zo, 7
  %ln9Zq = inttoptr i64 %ln9Zp to i64*
  %ln9Zr = load i64, i64* %ln9Zq, !tbaa !3
  store i64 %ln9Zr, i64* %ls844
  %ln9Zu = load i64, i64* %R1_Var
  %ln9Zv = add i64 %ln9Zu, 15
  %ln9Zw = inttoptr i64 %ln9Zv to i64*
  %ln9Zx = load i64, i64* %ln9Zw, !tbaa !3
  store i64 %ln9Zx, i64* %ls843
  %ln9ZA = load i64, i64* %R1_Var
  %ln9ZB = add i64 %ln9ZA, 23
  %ln9ZC = inttoptr i64 %ln9ZB to i64*
  %ln9ZD = load i64, i64* %ln9ZC, !tbaa !3
  store i64 %ln9ZD, i64* %ls845
  %ln9ZG = load i64, i64* %R1_Var
  %ln9ZH = add i64 %ln9ZG, 31
  %ln9ZI = inttoptr i64 %ln9ZH to i64*
  %ln9ZJ = load i64, i64* %ln9ZI, !tbaa !3
  store i64 %ln9ZJ, i64* %ls846
  %ln9ZL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84b_info$def to i64
  %ln9ZK = load i64*, i64** %Hp_Var
  %ln9ZM = getelementptr inbounds i64, i64* %ln9ZK, i32 -5
  store i64 %ln9ZL, i64* %ln9ZM, !tbaa !2
  %ln9ZO = load i64, i64* %ls844
  %ln9ZN = load i64*, i64** %Hp_Var
  %ln9ZP = getelementptr inbounds i64, i64* %ln9ZN, i32 -3
  store i64 %ln9ZO, i64* %ln9ZP, !tbaa !2
  %ln9ZR = load i64, i64* %ls843
  %ln9ZQ = load i64*, i64** %Hp_Var
  %ln9ZS = getelementptr inbounds i64, i64* %ln9ZQ, i32 -2
  store i64 %ln9ZR, i64* %ln9ZS, !tbaa !2
  %ln9ZU = load i64, i64* %ls845
  %ln9ZT = load i64*, i64** %Hp_Var
  %ln9ZV = getelementptr inbounds i64, i64* %ln9ZT, i32 -1
  store i64 %ln9ZU, i64* %ln9ZV, !tbaa !2
  %ln9ZX = load i64, i64* %ls846
  %ln9ZW = load i64*, i64** %Hp_Var
  %ln9ZY = getelementptr inbounds i64, i64* %ln9ZW, i32 0
  store i64 %ln9ZX, i64* %ln9ZY, !tbaa !2
  %ln9ZZ = load i64*, i64** %Sp_Var
  %lna00 = getelementptr inbounds i64, i64* %ln9ZZ, i32 1
  %lna01 = bitcast i64* %lna00 to i64*
  %lna02 = load i64, i64* %lna01, !tbaa !1
  store i64 %lna02, i64* %R3_Var
  %lna03 = load i64*, i64** %Hp_Var
  %lna04 = getelementptr inbounds i64, i64* %lna03, i32 -5
  %lna05 = ptrtoint i64* %lna04 to i64
  store i64 %lna05, i64* %R2_Var
  %lna06 = load i64*, i64** %Sp_Var
  %lna07 = getelementptr inbounds i64, i64* %lna06, i32 2
  %lna08 = ptrtoint i64* %lna07 to i64
  %lna09 = inttoptr i64 %lna08 to i64*
  store i64* %lna09, i64** %Sp_Var
  %lna0a = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2zuzdszdwsplit2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna0b = load i64*, i64** %Sp_Var
  %lna0c = load i64*, i64** %Hp_Var
  %lna0d = load i64, i64* %R1_Var
  %lna0e = load i64, i64* %R2_Var
  %lna0f = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0a( i64* %Base_Arg, i64* %lna0b, i64* %lna0c, i64 %lna0d, i64 %lna0e, i64 %lna0f, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c9Tk:
  %lna0g = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lna0g, !tbaa !4
  %lna0h = load i64, i64* %R1_Var
  store i64 %lna0h, i64* %R1_Var
  %lna0i = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna0j = load i64*, i64** %Sp_Var
  %lna0k = load i64*, i64** %Hp_Var
  %lna0l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0i( i64* %Base_Arg, i64* %lna0j, i64* %lna0k, i64 %lna0l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_split2_closure_struct = type <{i64, i64}>
@Word_split2_closure$def = internal global %Word_split2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2_info$def to i64), i64 0}>
@Word_split2_closure = alias i8* bitcast (%Word_split2_closure_struct* @Word_split2_closure$def to i8*)
@Word_split2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2_info$def to i8*)
define ghccc void @Word_split2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split2_info$def to i64)),i64 360), i64 12884901911, i64 0, i64 12884901903}>
{
ca0u:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna0A = load i64*, i64** %Sp_Var
  %lna0B = getelementptr inbounds i64, i64* %lna0A, i32 -1
  %lna0C = ptrtoint i64* %lna0B to i64
  %lna0D = icmp ult i64 %lna0C, %SpLim_Arg
  br i1 %lna0D, label %ca0v, label %ca0w
ca0w:
  %lna0F = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca0r_info$def to i64
  %lna0E = load i64*, i64** %Sp_Var
  %lna0G = getelementptr inbounds i64, i64* %lna0E, i32 -1
  store i64 %lna0F, i64* %lna0G, !tbaa !1
  %lna0H = load i64, i64* %R4_Var
  store i64 %lna0H, i64* %R3_Var
  %lna0I = load i64, i64* %R2_Var
  store i64 %lna0I, i64* %R2_Var
  %lna0J = load i64*, i64** %Sp_Var
  %lna0K = getelementptr inbounds i64, i64* %lna0J, i32 -1
  %lna0L = ptrtoint i64* %lna0K to i64
  %lna0M = inttoptr i64 %lna0L to i64*
  store i64* %lna0M, i64** %Sp_Var
  %lna0N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwsplit2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna0O = load i64*, i64** %Sp_Var
  %lna0P = load i64, i64* %R1_Var
  %lna0Q = load i64, i64* %R2_Var
  %lna0R = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0N( i64* %Base_Arg, i64* %lna0O, i64* %Hp_Arg, i64 %lna0P, i64 %lna0Q, i64 %lna0R, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0v:
  %lna0S = load i64, i64* %R4_Var
  store i64 %lna0S, i64* %R4_Var
  %lna0T = load i64, i64* %R3_Var
  store i64 %lna0T, i64* %R3_Var
  %lna0U = load i64, i64* %R2_Var
  store i64 %lna0U, i64* %R2_Var
  %lna0V = ptrtoint %Word_split2_closure_struct* @Word_split2_closure$def to i64
  store i64 %lna0V, i64* %R1_Var
  %lna0W = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lna0X = bitcast i64* %lna0W to i64*
  %lna0Y = load i64, i64* %lna0X, !tbaa !4
  %lna0Z = inttoptr i64 %lna0Y to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna10 = load i64*, i64** %Sp_Var
  %lna11 = load i64, i64* %R1_Var
  %lna12 = load i64, i64* %R2_Var
  %lna13 = load i64, i64* %R3_Var
  %lna14 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna0Z( i64* %Base_Arg, i64* %lna10, i64* %Hp_Arg, i64 %lna11, i64 %lna12, i64 %lna13, i64 %lna14, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ca0r_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca0r_info$def to i8*)
define internal ghccc void @ca0r_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
ca0r:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna15 = load i64*, i64** %Hp_Var
  %lna16 = getelementptr inbounds i64, i64* %lna15, i32 2
  %lna17 = ptrtoint i64* %lna16 to i64
  %lna18 = inttoptr i64 %lna17 to i64*
  store i64* %lna18, i64** %Hp_Var
  %lna19 = load i64*, i64** %Hp_Var
  %lna1a = ptrtoint i64* %lna19 to i64
  %lna1b = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna1c = bitcast i64* %lna1b to i64*
  %lna1d = load i64, i64* %lna1c, !tbaa !4
  %lna1e = icmp ugt i64 %lna1a, %lna1d
  br i1 %lna1e, label %ca0z, label %ca0y
ca0y:
  %lna1g = ptrtoint i8* @Word_W_con_info to i64
  %lna1f = load i64*, i64** %Hp_Var
  %lna1h = getelementptr inbounds i64, i64* %lna1f, i32 -1
  store i64 %lna1g, i64* %lna1h, !tbaa !2
  %lna1j = load i64, i64* %R1_Var
  %lna1i = load i64*, i64** %Hp_Var
  %lna1k = getelementptr inbounds i64, i64* %lna1i, i32 0
  store i64 %lna1j, i64* %lna1k, !tbaa !2
  %lna1m = load i64*, i64** %Hp_Var
  %lna1n = ptrtoint i64* %lna1m to i64
  %lna1o = add i64 %lna1n, -7
  store i64 %lna1o, i64* %R1_Var
  %lna1p = load i64*, i64** %Sp_Var
  %lna1q = getelementptr inbounds i64, i64* %lna1p, i32 1
  %lna1r = ptrtoint i64* %lna1q to i64
  %lna1s = inttoptr i64 %lna1r to i64*
  store i64* %lna1s, i64** %Sp_Var
  %lna1t = load i64*, i64** %Sp_Var
  %lna1u = getelementptr inbounds i64, i64* %lna1t, i32 0
  %lna1v = bitcast i64* %lna1u to i64*
  %lna1w = load i64, i64* %lna1v, !tbaa !1
  %lna1x = inttoptr i64 %lna1w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1y = load i64*, i64** %Sp_Var
  %lna1z = load i64*, i64** %Hp_Var
  %lna1A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1x( i64* %Base_Arg, i64* %lna1y, i64* %lna1z, i64 %lna1A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca0z:
  %lna1B = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lna1B, !tbaa !4
  %lna1C = load i64, i64* %R1_Var
  store i64 %lna1C, i64* %R1_Var
  %lna1D = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna1E = load i64*, i64** %Sp_Var
  %lna1F = load i64*, i64** %Hp_Var
  %lna1G = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna1D( i64* %Base_Arg, i64* %lna1E, i64* %lna1F, i64 %lna1G, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wandzuzdszdwwand2_closure_struct = type <{i64, i64}>
@Word_wandzuzdszdwwand2_closure$def = internal global %Word_wandzuzdszdwwand2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wandzuzdszdwwand2_info$def to i64), i64 0}>
@Word_wandzuzdszdwwand2_closure = alias i8* bitcast (%Word_wandzuzdszdwwand2_closure_struct* @Word_wandzuzdszdwwand2_closure$def to i8*)
@s84l_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84l_info$def to i8*)
define internal ghccc void @s84l_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84l_info$def to i64)),i64 376), i64 2, i64 4294967315}>
{
ca2e:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna3c = load i64*, i64** %Sp_Var
  %lna3d = getelementptr inbounds i64, i64* %lna3c, i32 -2
  %lna3e = ptrtoint i64* %lna3d to i64
  %lna3f = icmp ult i64 %lna3e, %SpLim_Arg
  br i1 %lna3f, label %ca2f, label %ca2g
ca2g:
  %lna3h = ptrtoint i8* @stg_upd_frame_info to i64
  %lna3g = load i64*, i64** %Sp_Var
  %lna3i = getelementptr inbounds i64, i64* %lna3g, i32 -2
  store i64 %lna3h, i64* %lna3i, !tbaa !1
  %lna3k = load i64, i64* %R1_Var
  %lna3j = load i64*, i64** %Sp_Var
  %lna3l = getelementptr inbounds i64, i64* %lna3j, i32 -1
  store i64 %lna3k, i64* %lna3l, !tbaa !1
  %lna3o = load i64, i64* %R1_Var
  %lna3p = add i64 %lna3o, 24
  %lna3q = inttoptr i64 %lna3p to i64*
  %lna3r = load i64, i64* %lna3q, !tbaa !3
  store i64 %lna3r, i64* %R3_Var
  %lna3u = load i64, i64* %R1_Var
  %lna3v = add i64 %lna3u, 16
  %lna3w = inttoptr i64 %lna3v to i64*
  %lna3x = load i64, i64* %lna3w, !tbaa !3
  store i64 %lna3x, i64* %R2_Var
  %lna3y = load i64*, i64** %Sp_Var
  %lna3z = getelementptr inbounds i64, i64* %lna3y, i32 -2
  %lna3A = ptrtoint i64* %lna3z to i64
  %lna3B = inttoptr i64 %lna3A to i64*
  store i64* %lna3B, i64** %Sp_Var
  %lna3C = bitcast i8* @integerzmgmp_GHCziIntegerziType_andInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3D = load i64*, i64** %Sp_Var
  %lna3E = load i64, i64* %R1_Var
  %lna3F = load i64, i64* %R2_Var
  %lna3G = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3C( i64* %Base_Arg, i64* %lna3D, i64* %Hp_Arg, i64 %lna3E, i64 %lna3F, i64 %lna3G, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca2f:
  %lna3H = load i64, i64* %R1_Var
  store i64 %lna3H, i64* %R1_Var
  %lna3I = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna3J = bitcast i64* %lna3I to i64*
  %lna3K = load i64, i64* %lna3J, !tbaa !4
  %lna3L = inttoptr i64 %lna3K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna3M = load i64*, i64** %Sp_Var
  %lna3N = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna3L( i64* %Base_Arg, i64* %lna3M, i64* %Hp_Arg, i64 %lna3N, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s84z_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84z_info$def to i8*)
define internal ghccc void @s84z_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84z_info$def to i64)),i64 296), i64 12884901890, i64 4402341478416}>
{
ca2y:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lna3O = load i64*, i64** %Sp_Var
  %lna3P = getelementptr inbounds i64, i64* %lna3O, i32 -8
  %lna3Q = ptrtoint i64* %lna3P to i64
  %lna3R = icmp ult i64 %lna3Q, %SpLim_Arg
  br i1 %lna3R, label %ca2C, label %ca2D
ca2D:
  %lna3T = ptrtoint i8* @stg_upd_frame_info to i64
  %lna3S = load i64*, i64** %Sp_Var
  %lna3U = getelementptr inbounds i64, i64* %lna3S, i32 -2
  store i64 %lna3T, i64* %lna3U, !tbaa !1
  %lna3W = load i64, i64* %R1_Var
  %lna3V = load i64*, i64** %Sp_Var
  %lna3X = getelementptr inbounds i64, i64* %lna3V, i32 -1
  store i64 %lna3W, i64* %lna3X, !tbaa !1
  %lna3Z = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2t_info$def to i64
  %lna3Y = load i64*, i64** %Sp_Var
  %lna40 = getelementptr inbounds i64, i64* %lna3Y, i32 -8
  store i64 %lna3Z, i64* %lna40, !tbaa !1
  %lna44 = load i64, i64* %R1_Var
  %lna45 = add i64 %lna44, 16
  %lna46 = inttoptr i64 %lna45 to i64*
  %lna47 = load i64, i64* %lna46, !tbaa !3
  %lna41 = load i64*, i64** %Sp_Var
  %lna48 = getelementptr inbounds i64, i64* %lna41, i32 -7
  store i64 %lna47, i64* %lna48, !tbaa !1
  %lna4c = load i64, i64* %R1_Var
  %lna4d = add i64 %lna4c, 32
  %lna4e = inttoptr i64 %lna4d to i64*
  %lna4f = load i64, i64* %lna4e, !tbaa !3
  %lna49 = load i64*, i64** %Sp_Var
  %lna4g = getelementptr inbounds i64, i64* %lna49, i32 -6
  store i64 %lna4f, i64* %lna4g, !tbaa !1
  %lna4k = load i64, i64* %R1_Var
  %lna4l = add i64 %lna4k, 24
  %lna4m = inttoptr i64 %lna4l to i64*
  %lna4n = load i64, i64* %lna4m, !tbaa !3
  %lna4h = load i64*, i64** %Sp_Var
  %lna4o = getelementptr inbounds i64, i64* %lna4h, i32 -5
  store i64 %lna4n, i64* %lna4o, !tbaa !1
  %lna4s = load i64, i64* %R1_Var
  %lna4t = add i64 %lna4s, 40
  %lna4u = inttoptr i64 %lna4t to i64*
  %lna4v = load i64, i64* %lna4u, !tbaa !3
  %lna4p = load i64*, i64** %Sp_Var
  %lna4w = getelementptr inbounds i64, i64* %lna4p, i32 -4
  store i64 %lna4v, i64* %lna4w, !tbaa !1
  %lna4A = load i64, i64* %R1_Var
  %lna4B = add i64 %lna4A, 48
  %lna4C = inttoptr i64 %lna4B to i64*
  %lna4D = load i64, i64* %lna4C, !tbaa !3
  %lna4x = load i64*, i64** %Sp_Var
  %lna4E = getelementptr inbounds i64, i64* %lna4x, i32 -3
  store i64 %lna4D, i64* %lna4E, !tbaa !1
  %lna4F = load i64*, i64** %Sp_Var
  %lna4G = getelementptr inbounds i64, i64* %lna4F, i32 -8
  %lna4H = ptrtoint i64* %lna4G to i64
  %lna4I = inttoptr i64 %lna4H to i64*
  store i64* %lna4I, i64** %Sp_Var
  %lna4J = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4K = load i64*, i64** %Sp_Var
  %lna4L = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4J( i64* %Base_Arg, i64* %lna4K, i64* %Hp_Arg, i64 %lna4L, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca2C:
  %lna4M = load i64, i64* %R1_Var
  store i64 %lna4M, i64* %R1_Var
  %lna4N = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lna4O = bitcast i64* %lna4N to i64*
  %lna4P = load i64, i64* %lna4O, !tbaa !4
  %lna4Q = inttoptr i64 %lna4P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna4R = load i64*, i64** %Sp_Var
  %lna4S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna4Q( i64* %Base_Arg, i64* %lna4R, i64* %Hp_Arg, i64 %lna4S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ca2t_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2t_info$def to i8*)
define internal ghccc void @ca2t_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2t_info$def to i64)),i64 296), i64 1669, i64 4402341478432}>
{
ca2t:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lna4T = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2B_info$def to i64
  %lna4U = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lna4T, i64* %lna4U, !tbaa !1
  %lna4V = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lna4W = bitcast i64* %lna4V to i64*
  %lna4X = load i64, i64* %lna4W, !tbaa !1
  store i64 %lna4X, i64* %R5_Var
  %lna4Y = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lna4Z = bitcast i64* %lna4Y to i64*
  %lna50 = load i64, i64* %lna4Z, !tbaa !1
  store i64 %lna50, i64* %R4_Var
  %lna51 = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lna52 = bitcast i64* %lna51 to i64*
  %lna53 = load i64, i64* %lna52, !tbaa !1
  store i64 %lna53, i64* %R3_Var
  %lna54 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lna55 = bitcast i64* %lna54 to i64*
  %lna56 = load i64, i64* %lna55, !tbaa !1
  store i64 %lna56, i64* %R2_Var
  %lna57 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna58 = load i64, i64* %R2_Var
  %lna59 = load i64, i64* %R3_Var
  %lna5a = load i64, i64* %R4_Var
  %lna5b = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna57( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna58, i64 %lna59, i64 %lna5a, i64 %lna5b, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ca2B_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2B_info$def to i8*)
define internal ghccc void @ca2B_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2B_info$def to i64)),i64 376), i64 1925, i64 4294967328}>
{
ca2B:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lna5c = load i64*, i64** %Sp_Var
  %lna5d = getelementptr inbounds i64, i64* %lna5c, i32 1
  %lna5e = bitcast i64* %lna5d to i64*
  %lna5f = load i64, i64* %lna5e, !tbaa !1
  store i64 %lna5f, i64* %R2_Var
  %lna5g = load i64*, i64** %Sp_Var
  %lna5h = getelementptr inbounds i64, i64* %lna5g, i32 6
  %lna5i = ptrtoint i64* %lna5h to i64
  %lna5j = inttoptr i64 %lna5i to i64*
  store i64* %lna5j, i64** %Sp_Var
  %lna5k = bitcast i8* @integerzmgmp_GHCziIntegerziType_andInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5l = load i64*, i64** %Sp_Var
  %lna5m = load i64, i64* %R2_Var
  %lna5n = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5k( i64* %Base_Arg, i64* %lna5l, i64* %Hp_Arg, i64 %R1_Arg, i64 %lna5m, i64 %lna5n, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wandzuzdszdwwand2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wandzuzdszdwwand2_info$def to i8*)
define ghccc void @Word_wandzuzdszdwwand2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wandzuzdszdwwand2_info$def to i64)),i64 296), i64 8589934607, i64 0, i64 13198434500623}>
{
ca2L:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lna5o = load i64*, i64** %Sp_Var
  %lna5p = getelementptr inbounds i64, i64* %lna5o, i32 -2
  %lna5q = ptrtoint i64* %lna5p to i64
  %lna5r = icmp ult i64 %lna5q, %SpLim_Arg
  br i1 %lna5r, label %ca2M, label %ca2N
ca2N:
  %lna5t = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca25_info$def to i64
  %lna5s = load i64*, i64** %Sp_Var
  %lna5u = getelementptr inbounds i64, i64* %lna5s, i32 -2
  store i64 %lna5t, i64* %lna5u, !tbaa !1
  %lna5v = load i64, i64* %R2_Var
  store i64 %lna5v, i64* %R1_Var
  %lna5x = load i64, i64* %R3_Var
  %lna5w = load i64*, i64** %Sp_Var
  %lna5y = getelementptr inbounds i64, i64* %lna5w, i32 -1
  store i64 %lna5x, i64* %lna5y, !tbaa !1
  %lna5z = load i64*, i64** %Sp_Var
  %lna5A = getelementptr inbounds i64, i64* %lna5z, i32 -2
  %lna5B = ptrtoint i64* %lna5A to i64
  %lna5C = inttoptr i64 %lna5B to i64*
  store i64* %lna5C, i64** %Sp_Var
  %lna5D = load i64, i64* %R1_Var
  %lna5E = and i64 %lna5D, 7
  %lna5F = icmp ne i64 %lna5E, 0
  br i1 %lna5F, label %ua3b, label %ca26
ca26:
  %lna5H = load i64, i64* %R1_Var
  %lna5I = inttoptr i64 %lna5H to i64*
  %lna5J = load i64, i64* %lna5I, !tbaa !3
  %lna5K = inttoptr i64 %lna5J to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5L = load i64*, i64** %Sp_Var
  %lna5M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5K( i64* %Base_Arg, i64* %lna5L, i64* %Hp_Arg, i64 %lna5M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ua3b:
  %lna5N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca25_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5O = load i64*, i64** %Sp_Var
  %lna5P = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5N( i64* %Base_Arg, i64* %lna5O, i64* %Hp_Arg, i64 %lna5P, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca2M:
  %lna5Q = load i64, i64* %R3_Var
  store i64 %lna5Q, i64* %R3_Var
  %lna5R = load i64, i64* %R2_Var
  store i64 %lna5R, i64* %R2_Var
  %lna5S = ptrtoint %Word_wandzuzdszdwwand2_closure_struct* @Word_wandzuzdszdwwand2_closure$def to i64
  store i64 %lna5S, i64* %R1_Var
  %lna5T = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lna5U = bitcast i64* %lna5T to i64*
  %lna5V = load i64, i64* %lna5U, !tbaa !4
  %lna5W = inttoptr i64 %lna5V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna5X = load i64*, i64** %Sp_Var
  %lna5Y = load i64, i64* %R1_Var
  %lna5Z = load i64, i64* %R2_Var
  %lna60 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna5W( i64* %Base_Arg, i64* %lna5X, i64* %Hp_Arg, i64 %lna5Y, i64 %lna5Z, i64 %lna60, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ca25_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca25_info$def to i8*)
define internal ghccc void @ca25_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca25_info$def to i64)),i64 296), i64 1, i64 4402341478432}>
{
ca25:
  %ls84i = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls84k = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lna61 = load i64*, i64** %Sp_Var
  %lna62 = getelementptr inbounds i64, i64* %lna61, i32 1
  %lna63 = bitcast i64* %lna62 to i64*
  %lna64 = load i64, i64* %lna63, !tbaa !1
  store i64 %lna64, i64* %ls84i
  %lna65 = load i64, i64* %R1_Var
  %lna66 = and i64 %lna65, 7
  switch i64 %lna66, label %ca2H [i64 1, label %ca2H
i64 2, label %ca2I
i64 3, label %ca2J]
ca2H:
  %lna67 = load i64*, i64** %Hp_Var
  %lna68 = getelementptr inbounds i64, i64* %lna67, i32 6
  %lna69 = ptrtoint i64* %lna68 to i64
  %lna6a = inttoptr i64 %lna69 to i64*
  store i64* %lna6a, i64** %Hp_Var
  %lna6b = load i64*, i64** %Hp_Var
  %lna6c = ptrtoint i64* %lna6b to i64
  %lna6d = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna6e = bitcast i64* %lna6d to i64*
  %lna6f = load i64, i64* %lna6e, !tbaa !4
  %lna6g = icmp ugt i64 %lna6c, %lna6f
  br i1 %lna6g, label %ca2R, label %ca2Q
ca2Q:
  %lna6j = load i64, i64* %R1_Var
  %lna6k = add i64 %lna6j, 7
  %lna6l = inttoptr i64 %lna6k to i64*
  %lna6m = load i64, i64* %lna6l, !tbaa !3
  store i64 %lna6m, i64* %ls84k
  %lna6o = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84l_info$def to i64
  %lna6n = load i64*, i64** %Hp_Var
  %lna6p = getelementptr inbounds i64, i64* %lna6n, i32 -5
  store i64 %lna6o, i64* %lna6p, !tbaa !2
  %lna6r = load i64, i64* %ls84i
  %lna6q = load i64*, i64** %Hp_Var
  %lna6s = getelementptr inbounds i64, i64* %lna6q, i32 -3
  store i64 %lna6r, i64* %lna6s, !tbaa !2
  %lna6u = load i64, i64* %ls84k
  %lna6t = load i64*, i64** %Hp_Var
  %lna6v = getelementptr inbounds i64, i64* %lna6t, i32 -2
  store i64 %lna6u, i64* %lna6v, !tbaa !2
  %lna6x = ptrtoint i8* @Word_W_con_info to i64
  %lna6w = load i64*, i64** %Hp_Var
  %lna6y = getelementptr inbounds i64, i64* %lna6w, i32 -1
  store i64 %lna6x, i64* %lna6y, !tbaa !2
  %lna6A = load i64*, i64** %Hp_Var
  %lna6B = getelementptr inbounds i64, i64* %lna6A, i32 -5
  %lna6C = ptrtoint i64* %lna6B to i64
  %lna6z = load i64*, i64** %Hp_Var
  %lna6D = getelementptr inbounds i64, i64* %lna6z, i32 0
  store i64 %lna6C, i64* %lna6D, !tbaa !2
  %lna6F = load i64*, i64** %Hp_Var
  %lna6G = ptrtoint i64* %lna6F to i64
  %lna6H = add i64 %lna6G, -7
  store i64 %lna6H, i64* %R1_Var
  %lna6I = load i64*, i64** %Sp_Var
  %lna6J = getelementptr inbounds i64, i64* %lna6I, i32 2
  %lna6K = ptrtoint i64* %lna6J to i64
  %lna6L = inttoptr i64 %lna6K to i64*
  store i64* %lna6L, i64** %Sp_Var
  %lna6M = load i64*, i64** %Sp_Var
  %lna6N = getelementptr inbounds i64, i64* %lna6M, i32 0
  %lna6O = bitcast i64* %lna6N to i64*
  %lna6P = load i64, i64* %lna6O, !tbaa !1
  %lna6Q = inttoptr i64 %lna6P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6R = load i64*, i64** %Sp_Var
  %lna6S = load i64*, i64** %Hp_Var
  %lna6T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6Q( i64* %Base_Arg, i64* %lna6R, i64* %lna6S, i64 %lna6T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca2R:
  %lna6U = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lna6U, !tbaa !4
  %lna6V = load i64, i64* %R1_Var
  store i64 %lna6V, i64* %R1_Var
  %lna6W = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna6X = load i64*, i64** %Sp_Var
  %lna6Y = load i64*, i64** %Hp_Var
  %lna6Z = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna6W( i64* %Base_Arg, i64* %lna6X, i64* %lna6Y, i64 %lna6Z, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca2I:
  %lna71 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2T_info$def to i64
  %lna70 = load i64*, i64** %Sp_Var
  %lna72 = getelementptr inbounds i64, i64* %lna70, i32 0
  store i64 %lna71, i64* %lna72, !tbaa !1
  %lna73 = load i64, i64* %ls84i
  store i64 %lna73, i64* %R2_Var
  %lna77 = load i64, i64* %R1_Var
  %lna78 = add i64 %lna77, 6
  %lna79 = inttoptr i64 %lna78 to i64*
  %lna7a = load i64, i64* %lna79, !tbaa !3
  %lna74 = load i64*, i64** %Sp_Var
  %lna7b = getelementptr inbounds i64, i64* %lna74, i32 1
  store i64 %lna7a, i64* %lna7b, !tbaa !1
  %lna7c = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna7d = load i64*, i64** %Sp_Var
  %lna7e = load i64*, i64** %Hp_Var
  %lna7f = load i64, i64* %R1_Var
  %lna7g = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna7c( i64* %Base_Arg, i64* %lna7d, i64* %lna7e, i64 %lna7f, i64 %lna7g, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca2J:
  %lna7i = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2k_info$def to i64
  %lna7h = load i64*, i64** %Sp_Var
  %lna7j = getelementptr inbounds i64, i64* %lna7h, i32 0
  store i64 %lna7i, i64* %lna7j, !tbaa !1
  %lna7m = load i64, i64* %R1_Var
  %lna7n = add i64 %lna7m, 5
  %lna7o = inttoptr i64 %lna7n to i64*
  %lna7p = load i64, i64* %lna7o, !tbaa !3
  store i64 %lna7p, i64* %R1_Var
  %lna7q = load i64, i64* %R1_Var
  %lna7r = and i64 %lna7q, 7
  %lna7s = icmp ne i64 %lna7r, 0
  br i1 %lna7s, label %ua3a, label %ca2l
ca2l:
  %lna7u = load i64, i64* %R1_Var
  %lna7v = inttoptr i64 %lna7u to i64*
  %lna7w = load i64, i64* %lna7v, !tbaa !3
  %lna7x = inttoptr i64 %lna7w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna7y = load i64*, i64** %Sp_Var
  %lna7z = load i64*, i64** %Hp_Var
  %lna7A = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna7x( i64* %Base_Arg, i64* %lna7y, i64* %lna7z, i64 %lna7A, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ua3a:
  %lna7B = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2k_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna7C = load i64*, i64** %Sp_Var
  %lna7D = load i64*, i64** %Hp_Var
  %lna7E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna7B( i64* %Base_Arg, i64* %lna7C, i64* %lna7D, i64 %lna7E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ca2k_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2k_info$def to i8*)
define internal ghccc void @ca2k_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2k_info$def to i64)),i64 296), i64 1, i64 4402341478432}>
{
ca2k:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls84s = alloca i64, i32 1
  %ls84r = alloca i64, i32 1
  %ls84t = alloca i64, i32 1
  %ls84u = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna7F = load i64*, i64** %Hp_Var
  %lna7G = getelementptr inbounds i64, i64* %lna7F, i32 9
  %lna7H = ptrtoint i64* %lna7G to i64
  %lna7I = inttoptr i64 %lna7H to i64*
  store i64* %lna7I, i64** %Hp_Var
  %lna7J = load i64*, i64** %Hp_Var
  %lna7K = ptrtoint i64* %lna7J to i64
  %lna7L = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna7M = bitcast i64* %lna7L to i64*
  %lna7N = load i64, i64* %lna7M, !tbaa !4
  %lna7O = icmp ugt i64 %lna7K, %lna7N
  br i1 %lna7O, label %ca39, label %ca38
ca38:
  %lna7R = load i64, i64* %R1_Var
  %lna7S = add i64 %lna7R, 7
  %lna7T = inttoptr i64 %lna7S to i64*
  %lna7U = load i64, i64* %lna7T, !tbaa !3
  store i64 %lna7U, i64* %ls84s
  %lna7X = load i64, i64* %R1_Var
  %lna7Y = add i64 %lna7X, 15
  %lna7Z = inttoptr i64 %lna7Y to i64*
  %lna80 = load i64, i64* %lna7Z, !tbaa !3
  store i64 %lna80, i64* %ls84r
  %lna83 = load i64, i64* %R1_Var
  %lna84 = add i64 %lna83, 23
  %lna85 = inttoptr i64 %lna84 to i64*
  %lna86 = load i64, i64* %lna85, !tbaa !3
  store i64 %lna86, i64* %ls84t
  %lna89 = load i64, i64* %R1_Var
  %lna8a = add i64 %lna89, 31
  %lna8b = inttoptr i64 %lna8a to i64*
  %lna8c = load i64, i64* %lna8b, !tbaa !3
  store i64 %lna8c, i64* %ls84u
  %lna8e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84z_info$def to i64
  %lna8d = load i64*, i64** %Hp_Var
  %lna8f = getelementptr inbounds i64, i64* %lna8d, i32 -8
  store i64 %lna8e, i64* %lna8f, !tbaa !2
  %lna8h = load i64*, i64** %Sp_Var
  %lna8i = getelementptr inbounds i64, i64* %lna8h, i32 1
  %lna8j = bitcast i64* %lna8i to i64*
  %lna8k = load i64, i64* %lna8j, !tbaa !1
  %lna8g = load i64*, i64** %Hp_Var
  %lna8l = getelementptr inbounds i64, i64* %lna8g, i32 -6
  store i64 %lna8k, i64* %lna8l, !tbaa !2
  %lna8n = load i64, i64* %ls84s
  %lna8m = load i64*, i64** %Hp_Var
  %lna8o = getelementptr inbounds i64, i64* %lna8m, i32 -5
  store i64 %lna8n, i64* %lna8o, !tbaa !2
  %lna8q = load i64, i64* %ls84r
  %lna8p = load i64*, i64** %Hp_Var
  %lna8r = getelementptr inbounds i64, i64* %lna8p, i32 -4
  store i64 %lna8q, i64* %lna8r, !tbaa !2
  %lna8t = load i64, i64* %ls84t
  %lna8s = load i64*, i64** %Hp_Var
  %lna8u = getelementptr inbounds i64, i64* %lna8s, i32 -3
  store i64 %lna8t, i64* %lna8u, !tbaa !2
  %lna8w = load i64, i64* %ls84u
  %lna8v = load i64*, i64** %Hp_Var
  %lna8x = getelementptr inbounds i64, i64* %lna8v, i32 -2
  store i64 %lna8w, i64* %lna8x, !tbaa !2
  %lna8z = ptrtoint i8* @Word_W_con_info to i64
  %lna8y = load i64*, i64** %Hp_Var
  %lna8A = getelementptr inbounds i64, i64* %lna8y, i32 -1
  store i64 %lna8z, i64* %lna8A, !tbaa !2
  %lna8C = load i64*, i64** %Hp_Var
  %lna8D = getelementptr inbounds i64, i64* %lna8C, i32 -8
  %lna8E = ptrtoint i64* %lna8D to i64
  %lna8B = load i64*, i64** %Hp_Var
  %lna8F = getelementptr inbounds i64, i64* %lna8B, i32 0
  store i64 %lna8E, i64* %lna8F, !tbaa !2
  %lna8H = load i64*, i64** %Hp_Var
  %lna8I = ptrtoint i64* %lna8H to i64
  %lna8J = add i64 %lna8I, -7
  store i64 %lna8J, i64* %R1_Var
  %lna8K = load i64*, i64** %Sp_Var
  %lna8L = getelementptr inbounds i64, i64* %lna8K, i32 2
  %lna8M = ptrtoint i64* %lna8L to i64
  %lna8N = inttoptr i64 %lna8M to i64*
  store i64* %lna8N, i64** %Sp_Var
  %lna8O = load i64*, i64** %Sp_Var
  %lna8P = getelementptr inbounds i64, i64* %lna8O, i32 0
  %lna8Q = bitcast i64* %lna8P to i64*
  %lna8R = load i64, i64* %lna8Q, !tbaa !1
  %lna8S = inttoptr i64 %lna8R to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8T = load i64*, i64** %Sp_Var
  %lna8U = load i64*, i64** %Hp_Var
  %lna8V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8S( i64* %Base_Arg, i64* %lna8T, i64* %lna8U, i64 %lna8V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca39:
  %lna8W = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %lna8W, !tbaa !4
  %lna8X = load i64, i64* %R1_Var
  store i64 %lna8X, i64* %R1_Var
  %lna8Y = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna8Z = load i64*, i64** %Sp_Var
  %lna90 = load i64*, i64** %Hp_Var
  %lna91 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna8Y( i64* %Base_Arg, i64* %lna8Z, i64* %lna90, i64 %lna91, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ca2T_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ca2T_info$def to i8*)
define internal ghccc void @ca2T_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
ca2T:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lna92 = load i64*, i64** %Hp_Var
  %lna93 = getelementptr inbounds i64, i64* %lna92, i32 2
  %lna94 = ptrtoint i64* %lna93 to i64
  %lna95 = inttoptr i64 %lna94 to i64*
  store i64* %lna95, i64** %Hp_Var
  %lna96 = load i64*, i64** %Hp_Var
  %lna97 = ptrtoint i64* %lna96 to i64
  %lna98 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lna99 = bitcast i64* %lna98 to i64*
  %lna9a = load i64, i64* %lna99, !tbaa !4
  %lna9b = icmp ugt i64 %lna97, %lna9a
  br i1 %lna9b, label %ca34, label %ca33
ca33:
  %lna9d = ptrtoint i8* @Word_W64_con_info to i64
  %lna9c = load i64*, i64** %Hp_Var
  %lna9e = getelementptr inbounds i64, i64* %lna9c, i32 -1
  store i64 %lna9d, i64* %lna9e, !tbaa !2
  %lna9g = load i64, i64* %R1_Var
  %lna9h = load i64*, i64** %Sp_Var
  %lna9i = getelementptr inbounds i64, i64* %lna9h, i32 1
  %lna9j = bitcast i64* %lna9i to i64*
  %lna9k = load i64, i64* %lna9j, !tbaa !1
  %lna9l = and i64 %lna9g, %lna9k
  %lna9f = load i64*, i64** %Hp_Var
  %lna9m = getelementptr inbounds i64, i64* %lna9f, i32 0
  store i64 %lna9l, i64* %lna9m, !tbaa !2
  %lna9o = load i64*, i64** %Hp_Var
  %lna9p = ptrtoint i64* %lna9o to i64
  %lna9q = add i64 %lna9p, -6
  store i64 %lna9q, i64* %R1_Var
  %lna9r = load i64*, i64** %Sp_Var
  %lna9s = getelementptr inbounds i64, i64* %lna9r, i32 2
  %lna9t = ptrtoint i64* %lna9s to i64
  %lna9u = inttoptr i64 %lna9t to i64*
  store i64* %lna9u, i64** %Sp_Var
  %lna9v = load i64*, i64** %Sp_Var
  %lna9w = getelementptr inbounds i64, i64* %lna9v, i32 0
  %lna9x = bitcast i64* %lna9w to i64*
  %lna9y = load i64, i64* %lna9x, !tbaa !1
  %lna9z = inttoptr i64 %lna9y to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9A = load i64*, i64** %Sp_Var
  %lna9B = load i64*, i64** %Hp_Var
  %lna9C = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9z( i64* %Base_Arg, i64* %lna9A, i64* %lna9B, i64 %lna9C, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ca34:
  %lna9D = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lna9D, !tbaa !4
  %lna9E = load i64, i64* %R1_Var
  store i64 %lna9E, i64* %R1_Var
  %lna9F = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lna9G = load i64*, i64** %Sp_Var
  %lna9H = load i64*, i64** %Hp_Var
  %lna9I = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lna9F( i64* %Base_Arg, i64* %lna9G, i64* %lna9H, i64 %lna9I, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwand_closure_struct = type <{i64, i64}>
@Word_zdwwand_closure$def = internal global %Word_zdwwand_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwand_info$def to i64), i64 0}>
@Word_zdwwand_closure = alias i8* bitcast (%Word_zdwwand_closure_struct* @Word_zdwwand_closure$def to i8*)
@s84G_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84G_info$def to i8*)
define internal ghccc void @s84G_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84G_info$def to i64)),i64 376), i64 2, i64 4294967315}>
{
cab2:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnadJ = load i64*, i64** %Sp_Var
  %lnadK = getelementptr inbounds i64, i64* %lnadJ, i32 -2
  %lnadL = ptrtoint i64* %lnadK to i64
  %lnadM = icmp ult i64 %lnadL, %SpLim_Arg
  br i1 %lnadM, label %cab3, label %cab4
cab4:
  %lnadO = ptrtoint i8* @stg_upd_frame_info to i64
  %lnadN = load i64*, i64** %Sp_Var
  %lnadP = getelementptr inbounds i64, i64* %lnadN, i32 -2
  store i64 %lnadO, i64* %lnadP, !tbaa !1
  %lnadR = load i64, i64* %R1_Var
  %lnadQ = load i64*, i64** %Sp_Var
  %lnadS = getelementptr inbounds i64, i64* %lnadQ, i32 -1
  store i64 %lnadR, i64* %lnadS, !tbaa !1
  %lnadV = load i64, i64* %R1_Var
  %lnadW = add i64 %lnadV, 24
  %lnadX = inttoptr i64 %lnadW to i64*
  %lnadY = load i64, i64* %lnadX, !tbaa !3
  store i64 %lnadY, i64* %R3_Var
  %lnae1 = load i64, i64* %R1_Var
  %lnae2 = add i64 %lnae1, 16
  %lnae3 = inttoptr i64 %lnae2 to i64*
  %lnae4 = load i64, i64* %lnae3, !tbaa !3
  store i64 %lnae4, i64* %R2_Var
  %lnae5 = load i64*, i64** %Sp_Var
  %lnae6 = getelementptr inbounds i64, i64* %lnae5, i32 -2
  %lnae7 = ptrtoint i64* %lnae6 to i64
  %lnae8 = inttoptr i64 %lnae7 to i64*
  store i64* %lnae8, i64** %Sp_Var
  %lnae9 = bitcast i8* @integerzmgmp_GHCziIntegerziType_andInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaea = load i64*, i64** %Sp_Var
  %lnaeb = load i64, i64* %R1_Var
  %lnaec = load i64, i64* %R2_Var
  %lnaed = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnae9( i64* %Base_Arg, i64* %lnaea, i64* %Hp_Arg, i64 %lnaeb, i64 %lnaec, i64 %lnaed, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cab3:
  %lnaee = load i64, i64* %R1_Var
  store i64 %lnaee, i64* %R1_Var
  %lnaef = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaeg = bitcast i64* %lnaef to i64*
  %lnaeh = load i64, i64* %lnaeg, !tbaa !4
  %lnaei = inttoptr i64 %lnaeh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaej = load i64*, i64** %Sp_Var
  %lnaek = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaei( i64* %Base_Arg, i64* %lnaej, i64* %Hp_Arg, i64 %lnaek, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s84U_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84U_info$def to i8*)
define internal ghccc void @s84U_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84U_info$def to i64)),i64 296), i64 12884901890, i64 4402341478416}>
{
cabm:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnael = load i64*, i64** %Sp_Var
  %lnaem = getelementptr inbounds i64, i64* %lnael, i32 -8
  %lnaen = ptrtoint i64* %lnaem to i64
  %lnaeo = icmp ult i64 %lnaen, %SpLim_Arg
  br i1 %lnaeo, label %cabq, label %cabr
cabr:
  %lnaeq = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaep = load i64*, i64** %Sp_Var
  %lnaer = getelementptr inbounds i64, i64* %lnaep, i32 -2
  store i64 %lnaeq, i64* %lnaer, !tbaa !1
  %lnaet = load i64, i64* %R1_Var
  %lnaes = load i64*, i64** %Sp_Var
  %lnaeu = getelementptr inbounds i64, i64* %lnaes, i32 -1
  store i64 %lnaet, i64* %lnaeu, !tbaa !1
  %lnaew = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabh_info$def to i64
  %lnaev = load i64*, i64** %Sp_Var
  %lnaex = getelementptr inbounds i64, i64* %lnaev, i32 -8
  store i64 %lnaew, i64* %lnaex, !tbaa !1
  %lnaeB = load i64, i64* %R1_Var
  %lnaeC = add i64 %lnaeB, 16
  %lnaeD = inttoptr i64 %lnaeC to i64*
  %lnaeE = load i64, i64* %lnaeD, !tbaa !3
  %lnaey = load i64*, i64** %Sp_Var
  %lnaeF = getelementptr inbounds i64, i64* %lnaey, i32 -7
  store i64 %lnaeE, i64* %lnaeF, !tbaa !1
  %lnaeJ = load i64, i64* %R1_Var
  %lnaeK = add i64 %lnaeJ, 32
  %lnaeL = inttoptr i64 %lnaeK to i64*
  %lnaeM = load i64, i64* %lnaeL, !tbaa !3
  %lnaeG = load i64*, i64** %Sp_Var
  %lnaeN = getelementptr inbounds i64, i64* %lnaeG, i32 -6
  store i64 %lnaeM, i64* %lnaeN, !tbaa !1
  %lnaeR = load i64, i64* %R1_Var
  %lnaeS = add i64 %lnaeR, 24
  %lnaeT = inttoptr i64 %lnaeS to i64*
  %lnaeU = load i64, i64* %lnaeT, !tbaa !3
  %lnaeO = load i64*, i64** %Sp_Var
  %lnaeV = getelementptr inbounds i64, i64* %lnaeO, i32 -5
  store i64 %lnaeU, i64* %lnaeV, !tbaa !1
  %lnaeZ = load i64, i64* %R1_Var
  %lnaf0 = add i64 %lnaeZ, 40
  %lnaf1 = inttoptr i64 %lnaf0 to i64*
  %lnaf2 = load i64, i64* %lnaf1, !tbaa !3
  %lnaeW = load i64*, i64** %Sp_Var
  %lnaf3 = getelementptr inbounds i64, i64* %lnaeW, i32 -4
  store i64 %lnaf2, i64* %lnaf3, !tbaa !1
  %lnaf7 = load i64, i64* %R1_Var
  %lnaf8 = add i64 %lnaf7, 48
  %lnaf9 = inttoptr i64 %lnaf8 to i64*
  %lnafa = load i64, i64* %lnaf9, !tbaa !3
  %lnaf4 = load i64*, i64** %Sp_Var
  %lnafb = getelementptr inbounds i64, i64* %lnaf4, i32 -3
  store i64 %lnafa, i64* %lnafb, !tbaa !1
  %lnafc = load i64*, i64** %Sp_Var
  %lnafd = getelementptr inbounds i64, i64* %lnafc, i32 -8
  %lnafe = ptrtoint i64* %lnafd to i64
  %lnaff = inttoptr i64 %lnafe to i64*
  store i64* %lnaff, i64** %Sp_Var
  %lnafg = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafh = load i64*, i64** %Sp_Var
  %lnafi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafg( i64* %Base_Arg, i64* %lnafh, i64* %Hp_Arg, i64 %lnafi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabq:
  %lnafj = load i64, i64* %R1_Var
  store i64 %lnafj, i64* %R1_Var
  %lnafk = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnafl = bitcast i64* %lnafk to i64*
  %lnafm = load i64, i64* %lnafl, !tbaa !4
  %lnafn = inttoptr i64 %lnafm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafo = load i64*, i64** %Sp_Var
  %lnafp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafn( i64* %Base_Arg, i64* %lnafo, i64* %Hp_Arg, i64 %lnafp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabh_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabh_info$def to i8*)
define internal ghccc void @cabh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabh_info$def to i64)),i64 296), i64 1669, i64 4402341478432}>
{
cabh:
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnafq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabp_info$def to i64
  %lnafr = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnafq, i64* %lnafr, !tbaa !1
  %lnafs = getelementptr inbounds i64, i64* %Sp_Arg, i32 5
  %lnaft = bitcast i64* %lnafs to i64*
  %lnafu = load i64, i64* %lnaft, !tbaa !1
  store i64 %lnafu, i64* %R5_Var
  %lnafv = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  %lnafw = bitcast i64* %lnafv to i64*
  %lnafx = load i64, i64* %lnafw, !tbaa !1
  store i64 %lnafx, i64* %R4_Var
  %lnafy = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnafz = bitcast i64* %lnafy to i64*
  %lnafA = load i64, i64* %lnafz, !tbaa !1
  store i64 %lnafA, i64* %R3_Var
  %lnafB = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnafC = bitcast i64* %lnafB to i64*
  %lnafD = load i64, i64* %lnafC, !tbaa !1
  store i64 %lnafD, i64* %R2_Var
  %lnafE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafF = load i64, i64* %R2_Var
  %lnafG = load i64, i64* %R3_Var
  %lnafH = load i64, i64* %R4_Var
  %lnafI = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnafF, i64 %lnafG, i64 %lnafH, i64 %lnafI, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabp_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabp_info$def to i8*)
define internal ghccc void @cabp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabp_info$def to i64)),i64 376), i64 1925, i64 4294967328}>
{
cabp:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnafJ = load i64*, i64** %Sp_Var
  %lnafK = getelementptr inbounds i64, i64* %lnafJ, i32 1
  %lnafL = bitcast i64* %lnafK to i64*
  %lnafM = load i64, i64* %lnafL, !tbaa !1
  store i64 %lnafM, i64* %R2_Var
  %lnafN = load i64*, i64** %Sp_Var
  %lnafO = getelementptr inbounds i64, i64* %lnafN, i32 6
  %lnafP = ptrtoint i64* %lnafO to i64
  %lnafQ = inttoptr i64 %lnafP to i64*
  store i64* %lnafQ, i64** %Sp_Var
  %lnafR = bitcast i8* @integerzmgmp_GHCziIntegerziType_andInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnafS = load i64*, i64** %Sp_Var
  %lnafT = load i64, i64* %R2_Var
  %lnafU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnafR( i64* %Base_Arg, i64* %lnafS, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnafT, i64 %lnafU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s85p_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s85p_info$def to i8*)
define internal ghccc void @s85p_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s85p_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
cabL:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnafV = load i64*, i64** %Sp_Var
  %lnafW = getelementptr inbounds i64, i64* %lnafV, i32 -7
  %lnafX = ptrtoint i64* %lnafW to i64
  %lnafY = icmp ult i64 %lnafX, %SpLim_Arg
  br i1 %lnafY, label %cabP, label %cabQ
cabQ:
  %lnag0 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnafZ = load i64*, i64** %Sp_Var
  %lnag1 = getelementptr inbounds i64, i64* %lnafZ, i32 -2
  store i64 %lnag0, i64* %lnag1, !tbaa !1
  %lnag3 = load i64, i64* %R1_Var
  %lnag2 = load i64*, i64** %Sp_Var
  %lnag4 = getelementptr inbounds i64, i64* %lnag2, i32 -1
  store i64 %lnag3, i64* %lnag4, !tbaa !1
  %lnag6 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabG_info$def to i64
  %lnag5 = load i64*, i64** %Sp_Var
  %lnag7 = getelementptr inbounds i64, i64* %lnag5, i32 -7
  store i64 %lnag6, i64* %lnag7, !tbaa !1
  %lnagb = load i64, i64* %R1_Var
  %lnagc = add i64 %lnagb, 24
  %lnagd = inttoptr i64 %lnagc to i64*
  %lnage = load i64, i64* %lnagd, !tbaa !3
  %lnag8 = load i64*, i64** %Sp_Var
  %lnagf = getelementptr inbounds i64, i64* %lnag8, i32 -6
  store i64 %lnage, i64* %lnagf, !tbaa !1
  %lnagj = load i64, i64* %R1_Var
  %lnagk = add i64 %lnagj, 16
  %lnagl = inttoptr i64 %lnagk to i64*
  %lnagm = load i64, i64* %lnagl, !tbaa !3
  %lnagg = load i64*, i64** %Sp_Var
  %lnagn = getelementptr inbounds i64, i64* %lnagg, i32 -5
  store i64 %lnagm, i64* %lnagn, !tbaa !1
  %lnagr = load i64, i64* %R1_Var
  %lnags = add i64 %lnagr, 32
  %lnagt = inttoptr i64 %lnags to i64*
  %lnagu = load i64, i64* %lnagt, !tbaa !3
  %lnago = load i64*, i64** %Sp_Var
  %lnagv = getelementptr inbounds i64, i64* %lnago, i32 -4
  store i64 %lnagu, i64* %lnagv, !tbaa !1
  %lnagz = load i64, i64* %R1_Var
  %lnagA = add i64 %lnagz, 40
  %lnagB = inttoptr i64 %lnagA to i64*
  %lnagC = load i64, i64* %lnagB, !tbaa !3
  %lnagw = load i64*, i64** %Sp_Var
  %lnagD = getelementptr inbounds i64, i64* %lnagw, i32 -3
  store i64 %lnagC, i64* %lnagD, !tbaa !1
  %lnagE = load i64*, i64** %Sp_Var
  %lnagF = getelementptr inbounds i64, i64* %lnagE, i32 -7
  %lnagG = ptrtoint i64* %lnagF to i64
  %lnagH = inttoptr i64 %lnagG to i64*
  store i64* %lnagH, i64** %Sp_Var
  %lnagI = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagJ = load i64*, i64** %Sp_Var
  %lnagK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagI( i64* %Base_Arg, i64* %lnagJ, i64* %Hp_Arg, i64 %lnagK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabP:
  %lnagL = load i64, i64* %R1_Var
  store i64 %lnagL, i64* %R1_Var
  %lnagM = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnagN = bitcast i64* %lnagM to i64*
  %lnagO = load i64, i64* %lnagN, !tbaa !4
  %lnagP = inttoptr i64 %lnagO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnagQ = load i64*, i64** %Sp_Var
  %lnagR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnagP( i64* %Base_Arg, i64* %lnagQ, i64* %Hp_Arg, i64 %lnagR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabG_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabG_info$def to i8*)
define internal ghccc void @cabG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabG_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
cabG:
  %ls85j = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnagS = load i64*, i64** %Sp_Var
  %lnagT = getelementptr inbounds i64, i64* %lnagS, i32 4
  %lnagU = bitcast i64* %lnagT to i64*
  %lnagV = load i64, i64* %lnagU, !tbaa !1
  store i64 %lnagV, i64* %ls85j
  %lnagX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabO_info$def to i64
  %lnagW = load i64*, i64** %Sp_Var
  %lnagY = getelementptr inbounds i64, i64* %lnagW, i32 4
  store i64 %lnagX, i64* %lnagY, !tbaa !1
  %lnagZ = load i64, i64* %ls85j
  store i64 %lnagZ, i64* %R5_Var
  %lnah0 = load i64*, i64** %Sp_Var
  %lnah1 = getelementptr inbounds i64, i64* %lnah0, i32 3
  %lnah2 = bitcast i64* %lnah1 to i64*
  %lnah3 = load i64, i64* %lnah2, !tbaa !1
  store i64 %lnah3, i64* %R4_Var
  %lnah4 = load i64*, i64** %Sp_Var
  %lnah5 = getelementptr inbounds i64, i64* %lnah4, i32 2
  %lnah6 = bitcast i64* %lnah5 to i64*
  %lnah7 = load i64, i64* %lnah6, !tbaa !1
  store i64 %lnah7, i64* %R3_Var
  %lnah8 = load i64*, i64** %Sp_Var
  %lnah9 = getelementptr inbounds i64, i64* %lnah8, i32 1
  %lnaha = bitcast i64* %lnah9 to i64*
  %lnahb = load i64, i64* %lnaha, !tbaa !1
  store i64 %lnahb, i64* %R2_Var
  %lnahc = load i64*, i64** %Sp_Var
  %lnahd = getelementptr inbounds i64, i64* %lnahc, i32 4
  %lnahe = ptrtoint i64* %lnahd to i64
  %lnahf = inttoptr i64 %lnahe to i64*
  store i64* %lnahf, i64** %Sp_Var
  %lnahg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahh = load i64*, i64** %Sp_Var
  %lnahi = load i64, i64* %R2_Var
  %lnahj = load i64, i64* %R3_Var
  %lnahk = load i64, i64* %R4_Var
  %lnahl = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahg( i64* %Base_Arg, i64* %lnahh, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnahi, i64 %lnahj, i64 %lnahk, i64 %lnahl, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabO_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabO_info$def to i8*)
define internal ghccc void @cabO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cabO:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnahm = load i64, i64* %R1_Var
  %lnahn = and i64 %lnahm, -8
  store i64 %lnahn, i64* %R1_Var
  %lnaho = load i64*, i64** %Sp_Var
  %lnahp = getelementptr inbounds i64, i64* %lnaho, i32 1
  %lnahq = ptrtoint i64* %lnahp to i64
  %lnahr = inttoptr i64 %lnahq to i64*
  store i64* %lnahr, i64** %Sp_Var
  %lnaht = load i64, i64* %R1_Var
  %lnahu = inttoptr i64 %lnaht to i64*
  %lnahv = load i64, i64* %lnahu, !tbaa !3
  %lnahw = inttoptr i64 %lnahv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahx = load i64*, i64** %Sp_Var
  %lnahy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahw( i64* %Base_Arg, i64* %lnahx, i64* %Hp_Arg, i64 %lnahy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwwand_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwand_info$def to i8*)
define ghccc void @Word_zdwwand_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwand_info$def to i64)),i64 296), i64 8589934607, i64 0, i64 30824980283407}>
{
cabY:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnahz = load i64*, i64** %Sp_Var
  %lnahA = getelementptr inbounds i64, i64* %lnahz, i32 -6
  %lnahB = ptrtoint i64* %lnahA to i64
  %lnahC = icmp ult i64 %lnahB, %SpLim_Arg
  br i1 %lnahC, label %cabZ, label %cac0
cac0:
  %lnahE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaO_info$def to i64
  %lnahD = load i64*, i64** %Sp_Var
  %lnahF = getelementptr inbounds i64, i64* %lnahD, i32 -2
  store i64 %lnahE, i64* %lnahF, !tbaa !1
  %lnahG = load i64, i64* %R2_Var
  store i64 %lnahG, i64* %R1_Var
  %lnahI = load i64, i64* %R3_Var
  %lnahH = load i64*, i64** %Sp_Var
  %lnahJ = getelementptr inbounds i64, i64* %lnahH, i32 -1
  store i64 %lnahI, i64* %lnahJ, !tbaa !1
  %lnahK = load i64*, i64** %Sp_Var
  %lnahL = getelementptr inbounds i64, i64* %lnahK, i32 -2
  %lnahM = ptrtoint i64* %lnahL to i64
  %lnahN = inttoptr i64 %lnahM to i64*
  store i64* %lnahN, i64** %Sp_Var
  %lnahO = load i64, i64* %R1_Var
  %lnahP = and i64 %lnahO, 7
  %lnahQ = icmp ne i64 %lnahP, 0
  br i1 %lnahQ, label %uadH, label %caaP
caaP:
  %lnahS = load i64, i64* %R1_Var
  %lnahT = inttoptr i64 %lnahS to i64*
  %lnahU = load i64, i64* %lnahT, !tbaa !3
  %lnahV = inttoptr i64 %lnahU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahW = load i64*, i64** %Sp_Var
  %lnahX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahV( i64* %Base_Arg, i64* %lnahW, i64* %Hp_Arg, i64 %lnahX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uadH:
  %lnahY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnahZ = load i64*, i64** %Sp_Var
  %lnai0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnahY( i64* %Base_Arg, i64* %lnahZ, i64* %Hp_Arg, i64 %lnai0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabZ:
  %lnai1 = load i64, i64* %R3_Var
  store i64 %lnai1, i64* %R3_Var
  %lnai2 = load i64, i64* %R2_Var
  store i64 %lnai2, i64* %R2_Var
  %lnai3 = ptrtoint %Word_zdwwand_closure_struct* @Word_zdwwand_closure$def to i64
  store i64 %lnai3, i64* %R1_Var
  %lnai4 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnai5 = bitcast i64* %lnai4 to i64*
  %lnai6 = load i64, i64* %lnai5, !tbaa !4
  %lnai7 = inttoptr i64 %lnai6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnai8 = load i64*, i64** %Sp_Var
  %lnai9 = load i64, i64* %R1_Var
  %lnaia = load i64, i64* %R2_Var
  %lnaib = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnai7( i64* %Base_Arg, i64* %lnai8, i64* %Hp_Arg, i64 %lnai9, i64 %lnaia, i64 %lnaib, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caaO_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaO_info$def to i8*)
define internal ghccc void @caaO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaO_info$def to i64)),i64 296), i64 1, i64 13232794239008}>
{
caaO:
  %ls84B = alloca i64, i32 1
  %ls84D = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls84V = alloca i64, i32 1
  %lnaic = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnaid = bitcast i64* %lnaic to i64*
  %lnaie = load i64, i64* %lnaid, !tbaa !1
  store i64 %lnaie, i64* %ls84B
  %lnaif = load i64, i64* %R1_Var
  %lnaig = and i64 %lnaif, 7
  switch i64 %lnaig, label %cabU [i64 1, label %cabU
i64 2, label %cabV
i64 3, label %cabW]
cabU:
  %lnaih = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaT_info$def to i64
  %lnaii = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaih, i64* %lnaii, !tbaa !1
  %lnail = load i64, i64* %R1_Var
  %lnaim = add i64 %lnail, 7
  %lnain = inttoptr i64 %lnaim to i64*
  %lnaio = load i64, i64* %lnain, !tbaa !3
  store i64 %lnaio, i64* %ls84D
  %lnaip = load i64, i64* %ls84B
  store i64 %lnaip, i64* %R1_Var
  %lnaiq = load i64, i64* %ls84D
  %lnair = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnaiq, i64* %lnair, !tbaa !1
  %lnais = load i64, i64* %R1_Var
  %lnait = and i64 %lnais, 7
  %lnaiu = icmp ne i64 %lnait, 0
  br i1 %lnaiu, label %uadD, label %caaU
caaU:
  %lnaiw = load i64, i64* %R1_Var
  %lnaix = inttoptr i64 %lnaiw to i64*
  %lnaiy = load i64, i64* %lnaix, !tbaa !3
  %lnaiz = inttoptr i64 %lnaiy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaiA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaiz( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaiA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uadD:
  %lnaiB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaiC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaiB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaiC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabV:
  %lnaiD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cact_info$def to i64
  %lnaiE = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaiD, i64* %lnaiE, !tbaa !1
  %lnaiH = load i64, i64* %R1_Var
  %lnaiI = add i64 %lnaiH, 6
  %lnaiJ = inttoptr i64 %lnaiI to i64*
  %lnaiK = load i64, i64* %lnaiJ, !tbaa !3
  store i64 %lnaiK, i64* %ls84V
  %lnaiL = load i64, i64* %ls84B
  store i64 %lnaiL, i64* %R1_Var
  %lnaiM = load i64, i64* %ls84V
  %lnaiN = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnaiM, i64* %lnaiN, !tbaa !1
  %lnaiO = load i64, i64* %R1_Var
  %lnaiP = and i64 %lnaiO, 7
  %lnaiQ = icmp ne i64 %lnaiP, 0
  br i1 %lnaiQ, label %uadE, label %cacv
cacv:
  %lnaiS = load i64, i64* %R1_Var
  %lnaiT = inttoptr i64 %lnaiS to i64*
  %lnaiU = load i64, i64* %lnaiT, !tbaa !3
  %lnaiV = inttoptr i64 %lnaiU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaiW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaiV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaiW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uadE:
  %lnaiX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cact_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaiY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaiX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaiY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cabW:
  %lnaiZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabx_info$def to i64
  %lnaj0 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaiZ, i64* %lnaj0, !tbaa !1
  %lnaj3 = load i64, i64* %R1_Var
  %lnaj4 = add i64 %lnaj3, 5
  %lnaj5 = inttoptr i64 %lnaj4 to i64*
  %lnaj6 = load i64, i64* %lnaj5, !tbaa !3
  store i64 %lnaj6, i64* %R1_Var
  %lnaj7 = load i64, i64* %R1_Var
  %lnaj8 = and i64 %lnaj7, 7
  %lnaj9 = icmp ne i64 %lnaj8, 0
  br i1 %lnaj9, label %uadF, label %caby
caby:
  %lnajb = load i64, i64* %R1_Var
  %lnajc = inttoptr i64 %lnajb to i64*
  %lnajd = load i64, i64* %lnajc, !tbaa !3
  %lnaje = inttoptr i64 %lnajd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaje( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnajf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uadF:
  %lnajg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnajh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnajg( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnajh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cabx_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabx_info$def to i8*)
define internal ghccc void @cabx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cabx_info$def to i64)),i64 296), i64 1, i64 8834747727904}>
{
cabx:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls85h = alloca i64, i32 1
  %ls85g = alloca i64, i32 1
  %ls85i = alloca i64, i32 1
  %ls85j = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaji = load i64*, i64** %Hp_Var
  %lnajj = getelementptr inbounds i64, i64* %lnaji, i32 6
  %lnajk = ptrtoint i64* %lnajj to i64
  %lnajl = inttoptr i64 %lnajk to i64*
  store i64* %lnajl, i64** %Hp_Var
  %lnajm = load i64*, i64** %Hp_Var
  %lnajn = ptrtoint i64* %lnajm to i64
  %lnajo = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnajp = bitcast i64* %lnajo to i64*
  %lnajq = load i64, i64* %lnajp, !tbaa !4
  %lnajr = icmp ugt i64 %lnajn, %lnajq
  br i1 %lnajr, label %cadw, label %cadv
cadv:
  %lnaju = load i64, i64* %R1_Var
  %lnajv = add i64 %lnaju, 7
  %lnajw = inttoptr i64 %lnajv to i64*
  %lnajx = load i64, i64* %lnajw, !tbaa !3
  store i64 %lnajx, i64* %ls85h
  %lnajA = load i64, i64* %R1_Var
  %lnajB = add i64 %lnajA, 15
  %lnajC = inttoptr i64 %lnajB to i64*
  %lnajD = load i64, i64* %lnajC, !tbaa !3
  store i64 %lnajD, i64* %ls85g
  %lnajG = load i64, i64* %R1_Var
  %lnajH = add i64 %lnajG, 23
  %lnajI = inttoptr i64 %lnajH to i64*
  %lnajJ = load i64, i64* %lnajI, !tbaa !3
  store i64 %lnajJ, i64* %ls85i
  %lnajM = load i64, i64* %R1_Var
  %lnajN = add i64 %lnajM, 31
  %lnajO = inttoptr i64 %lnajN to i64*
  %lnajP = load i64, i64* %lnajO, !tbaa !3
  store i64 %lnajP, i64* %ls85j
  %lnajR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s85p_info$def to i64
  %lnajQ = load i64*, i64** %Hp_Var
  %lnajS = getelementptr inbounds i64, i64* %lnajQ, i32 -5
  store i64 %lnajR, i64* %lnajS, !tbaa !2
  %lnajU = load i64, i64* %ls85h
  %lnajT = load i64*, i64** %Hp_Var
  %lnajV = getelementptr inbounds i64, i64* %lnajT, i32 -3
  store i64 %lnajU, i64* %lnajV, !tbaa !2
  %lnajX = load i64, i64* %ls85g
  %lnajW = load i64*, i64** %Hp_Var
  %lnajY = getelementptr inbounds i64, i64* %lnajW, i32 -2
  store i64 %lnajX, i64* %lnajY, !tbaa !2
  %lnak0 = load i64, i64* %ls85i
  %lnajZ = load i64*, i64** %Hp_Var
  %lnak1 = getelementptr inbounds i64, i64* %lnajZ, i32 -1
  store i64 %lnak0, i64* %lnak1, !tbaa !2
  %lnak3 = load i64, i64* %ls85j
  %lnak2 = load i64*, i64** %Hp_Var
  %lnak4 = getelementptr inbounds i64, i64* %lnak2, i32 0
  store i64 %lnak3, i64* %lnak4, !tbaa !2
  %lnak5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cads_info$def to i64
  %lnak6 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnak5, i64* %lnak6, !tbaa !1
  %lnak7 = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnak8 = bitcast i64* %lnak7 to i64*
  %lnak9 = load i64, i64* %lnak8, !tbaa !1
  store i64 %lnak9, i64* %R2_Var
  %lnaka = load i64*, i64** %Hp_Var
  %lnakb = getelementptr inbounds i64, i64* %lnaka, i32 -5
  %lnakc = ptrtoint i64* %lnakb to i64
  %lnakd = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnakc, i64* %lnakd, !tbaa !1
  %lnake = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_unbs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakf = load i64*, i64** %Hp_Var
  %lnakg = load i64, i64* %R1_Var
  %lnakh = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnake( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnakf, i64 %lnakg, i64 %lnakh, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadw:
  %lnaki = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnaki, !tbaa !4
  %lnakj = load i64, i64* %R1_Var
  store i64 %lnakj, i64* %R1_Var
  %lnakk = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakl = load i64*, i64** %Hp_Var
  %lnakm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakk( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnakl, i64 %lnakm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cads_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cads_info$def to i8*)
define internal ghccc void @cads_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cads_info$def to i64)),i64 384), i64 1, i64 4294967328}>
{
cads:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnakn = load i64*, i64** %Sp_Var
  %lnako = getelementptr inbounds i64, i64* %lnakn, i32 1
  %lnakp = bitcast i64* %lnako to i64*
  %lnakq = load i64, i64* %lnakp, !tbaa !1
  store i64 %lnakq, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnakr = load i64*, i64** %Sp_Var
  %lnaks = getelementptr inbounds i64, i64* %lnakr, i32 2
  %lnakt = ptrtoint i64* %lnaks to i64
  %lnaku = inttoptr i64 %lnakt to i64*
  store i64* %lnaku, i64** %Sp_Var
  %lnakv = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wandzuzdszdwwand2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakw = load i64*, i64** %Sp_Var
  %lnakx = load i64, i64* %R2_Var
  %lnaky = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakv( i64* %Base_Arg, i64* %lnakw, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnakx, i64 %lnaky, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cact_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cact_info$def to i8*)
define internal ghccc void @cact_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cact_info$def to i64)),i64 296), i64 65, i64 4294967328}>
{
cact:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls851 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnakz = load i64, i64* %R1_Var
  %lnakA = and i64 %lnakz, 7
  switch i64 %lnakA, label %cacJ [i64 1, label %cacJ
i64 2, label %cacT
i64 3, label %cadi]
cacJ:
  %lnakC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacz_info$def to i64
  %lnakB = load i64*, i64** %Sp_Var
  %lnakD = getelementptr inbounds i64, i64* %lnakB, i32 0
  store i64 %lnakC, i64* %lnakD, !tbaa !1
  %lnakG = load i64, i64* %R1_Var
  %lnakH = add i64 %lnakG, 7
  %lnakI = inttoptr i64 %lnakH to i64*
  %lnakJ = load i64, i64* %lnakI, !tbaa !3
  store i64 %lnakJ, i64* %R2_Var
  %lnakK = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnakL = load i64*, i64** %Sp_Var
  %lnakM = load i64*, i64** %Hp_Var
  %lnakN = load i64, i64* %R1_Var
  %lnakO = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnakK( i64* %Base_Arg, i64* %lnakL, i64* %lnakM, i64 %lnakN, i64 %lnakO, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacT:
  %lnakP = load i64*, i64** %Hp_Var
  %lnakQ = getelementptr inbounds i64, i64* %lnakP, i32 2
  %lnakR = ptrtoint i64* %lnakQ to i64
  %lnakS = inttoptr i64 %lnakR to i64*
  store i64* %lnakS, i64** %Hp_Var
  %lnakT = load i64*, i64** %Hp_Var
  %lnakU = ptrtoint i64* %lnakT to i64
  %lnakV = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnakW = bitcast i64* %lnakV to i64*
  %lnakX = load i64, i64* %lnakW, !tbaa !4
  %lnakY = icmp ugt i64 %lnakU, %lnakX
  br i1 %lnakY, label %cacW, label %cacV
cacV:
  %lnakZ = load i64*, i64** %Sp_Var
  %lnal0 = getelementptr inbounds i64, i64* %lnakZ, i32 1
  %lnal1 = bitcast i64* %lnal0 to i64*
  %lnal2 = load i64, i64* %lnal1, !tbaa !1
  %lnal5 = load i64, i64* %R1_Var
  %lnal6 = add i64 %lnal5, 6
  %lnal7 = inttoptr i64 %lnal6 to i64*
  %lnal8 = load i64, i64* %lnal7, !tbaa !3
  %lnal9 = and i64 %lnal2, %lnal8
  store i64 %lnal9, i64* %ls851
  %lnalb = ptrtoint i8* @Word_W64_con_info to i64
  %lnala = load i64*, i64** %Hp_Var
  %lnalc = getelementptr inbounds i64, i64* %lnala, i32 -1
  store i64 %lnalb, i64* %lnalc, !tbaa !2
  %lnale = load i64, i64* %ls851
  %lnald = load i64*, i64** %Hp_Var
  %lnalf = getelementptr inbounds i64, i64* %lnald, i32 0
  store i64 %lnale, i64* %lnalf, !tbaa !2
  %lnalh = load i64*, i64** %Hp_Var
  %lnali = ptrtoint i64* %lnalh to i64
  %lnalj = add i64 %lnali, -6
  store i64 %lnalj, i64* %R1_Var
  %lnalk = load i64*, i64** %Sp_Var
  %lnall = getelementptr inbounds i64, i64* %lnalk, i32 2
  %lnalm = ptrtoint i64* %lnall to i64
  %lnaln = inttoptr i64 %lnalm to i64*
  store i64* %lnaln, i64** %Sp_Var
  %lnalo = load i64*, i64** %Sp_Var
  %lnalp = getelementptr inbounds i64, i64* %lnalo, i32 0
  %lnalq = bitcast i64* %lnalp to i64*
  %lnalr = load i64, i64* %lnalq, !tbaa !1
  %lnals = inttoptr i64 %lnalr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnalt = load i64*, i64** %Sp_Var
  %lnalu = load i64*, i64** %Hp_Var
  %lnalv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnals( i64* %Base_Arg, i64* %lnalt, i64* %lnalu, i64 %lnalv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacW:
  %lnalw = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnalw, !tbaa !4
  %lnalx = load i64, i64* %R1_Var
  store i64 %lnalx, i64* %R1_Var
  %lnaly = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnalz = load i64*, i64** %Sp_Var
  %lnalA = load i64*, i64** %Hp_Var
  %lnalB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaly( i64* %Base_Arg, i64* %lnalz, i64* %lnalA, i64 %lnalB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadi:
  %lnalD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacZ_info$def to i64
  %lnalC = load i64*, i64** %Sp_Var
  %lnalE = getelementptr inbounds i64, i64* %lnalC, i32 0
  store i64 %lnalD, i64* %lnalE, !tbaa !1
  %lnalH = load i64, i64* %R1_Var
  %lnalI = add i64 %lnalH, 5
  %lnalJ = inttoptr i64 %lnalI to i64*
  %lnalK = load i64, i64* %lnalJ, !tbaa !3
  store i64 %lnalK, i64* %R1_Var
  %lnalL = load i64, i64* %R1_Var
  %lnalM = and i64 %lnalL, 7
  %lnalN = icmp ne i64 %lnalM, 0
  br i1 %lnalN, label %uadI, label %cad0
cad0:
  %lnalP = load i64, i64* %R1_Var
  %lnalQ = inttoptr i64 %lnalP to i64*
  %lnalR = load i64, i64* %lnalQ, !tbaa !3
  %lnalS = inttoptr i64 %lnalR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnalT = load i64*, i64** %Sp_Var
  %lnalU = load i64*, i64** %Hp_Var
  %lnalV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnalS( i64* %Base_Arg, i64* %lnalT, i64* %lnalU, i64 %lnalV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uadI:
  %lnalW = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacZ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnalX = load i64*, i64** %Sp_Var
  %lnalY = load i64*, i64** %Hp_Var
  %lnalZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnalW( i64* %Base_Arg, i64* %lnalX, i64* %lnalY, i64 %lnalZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cacZ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacZ_info$def to i8*)
define internal ghccc void @cacZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacZ_info$def to i64)),i64 296), i64 65, i64 4294967328}>
{
cacZ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnam1 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad4_info$def to i64
  %lnam0 = load i64*, i64** %Sp_Var
  %lnam2 = getelementptr inbounds i64, i64* %lnam0, i32 -4
  store i64 %lnam1, i64* %lnam2, !tbaa !1
  %lnam4 = add i64 %R1_Arg, 7
  %lnam5 = inttoptr i64 %lnam4 to i64*
  %lnam6 = load i64, i64* %lnam5, !tbaa !3
  %lnam3 = load i64*, i64** %Sp_Var
  %lnam7 = getelementptr inbounds i64, i64* %lnam3, i32 -3
  store i64 %lnam6, i64* %lnam7, !tbaa !1
  %lnam9 = add i64 %R1_Arg, 23
  %lnama = inttoptr i64 %lnam9 to i64*
  %lnamb = load i64, i64* %lnama, !tbaa !3
  %lnam8 = load i64*, i64** %Sp_Var
  %lnamc = getelementptr inbounds i64, i64* %lnam8, i32 -2
  store i64 %lnamb, i64* %lnamc, !tbaa !1
  %lname = add i64 %R1_Arg, 31
  %lnamf = inttoptr i64 %lname to i64*
  %lnamg = load i64, i64* %lnamf, !tbaa !3
  %lnamd = load i64*, i64** %Sp_Var
  %lnamh = getelementptr inbounds i64, i64* %lnamd, i32 -1
  store i64 %lnamg, i64* %lnamh, !tbaa !1
  %lnamj = add i64 %R1_Arg, 15
  %lnamk = inttoptr i64 %lnamj to i64*
  %lnaml = load i64, i64* %lnamk, !tbaa !3
  %lnami = load i64*, i64** %Sp_Var
  %lnamm = getelementptr inbounds i64, i64* %lnami, i32 0
  store i64 %lnaml, i64* %lnamm, !tbaa !1
  %lnamn = load i64*, i64** %Sp_Var
  %lnamo = getelementptr inbounds i64, i64* %lnamn, i32 -4
  %lnamp = ptrtoint i64* %lnamo to i64
  %lnamq = inttoptr i64 %lnamp to i64*
  store i64* %lnamq, i64** %Sp_Var
  %lnamr = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnams = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnamr( i64* %Base_Arg, i64* %lnams, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cad4_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad4_info$def to i8*)
define internal ghccc void @cad4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad4_info$def to i64)),i64 296), i64 1925, i64 4294967328}>
{
cad4:
  %ls854 = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnamt = load i64*, i64** %Sp_Var
  %lnamu = getelementptr inbounds i64, i64* %lnamt, i32 4
  %lnamv = bitcast i64* %lnamu to i64*
  %lnamw = load i64, i64* %lnamv, !tbaa !1
  store i64 %lnamw, i64* %ls854
  %lnamy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cadl_info$def to i64
  %lnamx = load i64*, i64** %Sp_Var
  %lnamz = getelementptr inbounds i64, i64* %lnamx, i32 4
  store i64 %lnamy, i64* %lnamz, !tbaa !1
  %lnamA = load i64*, i64** %Sp_Var
  %lnamB = getelementptr inbounds i64, i64* %lnamA, i32 3
  %lnamC = bitcast i64* %lnamB to i64*
  %lnamD = load i64, i64* %lnamC, !tbaa !1
  store i64 %lnamD, i64* %R5_Var
  %lnamE = load i64*, i64** %Sp_Var
  %lnamF = getelementptr inbounds i64, i64* %lnamE, i32 2
  %lnamG = bitcast i64* %lnamF to i64*
  %lnamH = load i64, i64* %lnamG, !tbaa !1
  store i64 %lnamH, i64* %R4_Var
  %lnamI = load i64*, i64** %Sp_Var
  %lnamJ = getelementptr inbounds i64, i64* %lnamI, i32 1
  %lnamK = bitcast i64* %lnamJ to i64*
  %lnamL = load i64, i64* %lnamK, !tbaa !1
  store i64 %lnamL, i64* %R3_Var
  %lnamM = load i64, i64* %ls854
  store i64 %lnamM, i64* %R2_Var
  %lnamN = load i64*, i64** %Sp_Var
  %lnamO = getelementptr inbounds i64, i64* %lnamN, i32 4
  %lnamP = ptrtoint i64* %lnamO to i64
  %lnamQ = inttoptr i64 %lnamP to i64*
  store i64* %lnamQ, i64** %Sp_Var
  %lnamR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnamS = load i64*, i64** %Sp_Var
  %lnamT = load i64, i64* %R2_Var
  %lnamU = load i64, i64* %R3_Var
  %lnamV = load i64, i64* %R4_Var
  %lnamW = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnamR( i64* %Base_Arg, i64* %lnamS, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnamT, i64 %lnamU, i64 %lnamV, i64 %lnamW, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cadl_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cadl_info$def to i8*)
define internal ghccc void @cadl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cadl:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnamX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad9_info$def to i64
  %lnamY = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnamX, i64* %lnamY, !tbaa !1
  store i64 %R1_Arg, i64* %R2_Var
  %lnamZ = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnan0 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnamZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnan0, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cad9_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cad9_info$def to i8*)
define internal ghccc void @cad9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cad9:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnan1 = load i64*, i64** %Hp_Var
  %lnan2 = getelementptr inbounds i64, i64* %lnan1, i32 2
  %lnan3 = ptrtoint i64* %lnan2 to i64
  %lnan4 = inttoptr i64 %lnan3 to i64*
  store i64* %lnan4, i64** %Hp_Var
  %lnan5 = load i64*, i64** %Hp_Var
  %lnan6 = ptrtoint i64* %lnan5 to i64
  %lnan7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnan8 = bitcast i64* %lnan7 to i64*
  %lnan9 = load i64, i64* %lnan8, !tbaa !4
  %lnana = icmp ugt i64 %lnan6, %lnan9
  br i1 %lnana, label %cadr, label %cadq
cadq:
  %lnanc = ptrtoint i8* @Word_W64_con_info to i64
  %lnanb = load i64*, i64** %Hp_Var
  %lnand = getelementptr inbounds i64, i64* %lnanb, i32 -1
  store i64 %lnanc, i64* %lnand, !tbaa !2
  %lnanf = load i64*, i64** %Sp_Var
  %lnang = getelementptr inbounds i64, i64* %lnanf, i32 1
  %lnanh = bitcast i64* %lnang to i64*
  %lnani = load i64, i64* %lnanh, !tbaa !1
  %lnanj = load i64, i64* %R1_Var
  %lnank = and i64 %lnani, %lnanj
  %lnane = load i64*, i64** %Hp_Var
  %lnanl = getelementptr inbounds i64, i64* %lnane, i32 0
  store i64 %lnank, i64* %lnanl, !tbaa !2
  %lnann = load i64*, i64** %Hp_Var
  %lnano = ptrtoint i64* %lnann to i64
  %lnanp = add i64 %lnano, -6
  store i64 %lnanp, i64* %R1_Var
  %lnanq = load i64*, i64** %Sp_Var
  %lnanr = getelementptr inbounds i64, i64* %lnanq, i32 2
  %lnans = ptrtoint i64* %lnanr to i64
  %lnant = inttoptr i64 %lnans to i64*
  store i64* %lnant, i64** %Sp_Var
  %lnanu = load i64*, i64** %Sp_Var
  %lnanv = getelementptr inbounds i64, i64* %lnanu, i32 0
  %lnanw = bitcast i64* %lnanv to i64*
  %lnanx = load i64, i64* %lnanw, !tbaa !1
  %lnany = inttoptr i64 %lnanx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnanz = load i64*, i64** %Sp_Var
  %lnanA = load i64*, i64** %Hp_Var
  %lnanB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnany( i64* %Base_Arg, i64* %lnanz, i64* %lnanA, i64 %lnanB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cadr:
  %lnanC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnanC, !tbaa !4
  %lnanD = load i64, i64* %R1_Var
  store i64 %lnanD, i64* %R1_Var
  %lnanE = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnanF = load i64*, i64** %Sp_Var
  %lnanG = load i64*, i64** %Hp_Var
  %lnanH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnanE( i64* %Base_Arg, i64* %lnanF, i64* %lnanG, i64 %lnanH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cacz_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cacz_info$def to i8*)
define internal ghccc void @cacz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cacz:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnanI = load i64*, i64** %Hp_Var
  %lnanJ = getelementptr inbounds i64, i64* %lnanI, i32 2
  %lnanK = ptrtoint i64* %lnanJ to i64
  %lnanL = inttoptr i64 %lnanK to i64*
  store i64* %lnanL, i64** %Hp_Var
  %lnanM = load i64*, i64** %Hp_Var
  %lnanN = ptrtoint i64* %lnanM to i64
  %lnanO = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnanP = bitcast i64* %lnanO to i64*
  %lnanQ = load i64, i64* %lnanP, !tbaa !4
  %lnanR = icmp ugt i64 %lnanN, %lnanQ
  br i1 %lnanR, label %cacM, label %cacL
cacL:
  %lnanT = ptrtoint i8* @Word_W64_con_info to i64
  %lnanS = load i64*, i64** %Hp_Var
  %lnanU = getelementptr inbounds i64, i64* %lnanS, i32 -1
  store i64 %lnanT, i64* %lnanU, !tbaa !2
  %lnanW = load i64*, i64** %Sp_Var
  %lnanX = getelementptr inbounds i64, i64* %lnanW, i32 1
  %lnanY = bitcast i64* %lnanX to i64*
  %lnanZ = load i64, i64* %lnanY, !tbaa !1
  %lnao0 = load i64, i64* %R1_Var
  %lnao1 = and i64 %lnanZ, %lnao0
  %lnanV = load i64*, i64** %Hp_Var
  %lnao2 = getelementptr inbounds i64, i64* %lnanV, i32 0
  store i64 %lnao1, i64* %lnao2, !tbaa !2
  %lnao4 = load i64*, i64** %Hp_Var
  %lnao5 = ptrtoint i64* %lnao4 to i64
  %lnao6 = add i64 %lnao5, -6
  store i64 %lnao6, i64* %R1_Var
  %lnao7 = load i64*, i64** %Sp_Var
  %lnao8 = getelementptr inbounds i64, i64* %lnao7, i32 2
  %lnao9 = ptrtoint i64* %lnao8 to i64
  %lnaoa = inttoptr i64 %lnao9 to i64*
  store i64* %lnaoa, i64** %Sp_Var
  %lnaob = load i64*, i64** %Sp_Var
  %lnaoc = getelementptr inbounds i64, i64* %lnaob, i32 0
  %lnaod = bitcast i64* %lnaoc to i64*
  %lnaoe = load i64, i64* %lnaod, !tbaa !1
  %lnaof = inttoptr i64 %lnaoe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaog = load i64*, i64** %Sp_Var
  %lnaoh = load i64*, i64** %Hp_Var
  %lnaoi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaof( i64* %Base_Arg, i64* %lnaog, i64* %lnaoh, i64 %lnaoi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacM:
  %lnaoj = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnaoj, !tbaa !4
  %lnaok = load i64, i64* %R1_Var
  store i64 %lnaok, i64* %R1_Var
  %lnaol = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaom = load i64*, i64** %Sp_Var
  %lnaon = load i64*, i64** %Hp_Var
  %lnaoo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaol( i64* %Base_Arg, i64* %lnaom, i64* %lnaon, i64 %lnaoo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caaT_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaT_info$def to i8*)
define internal ghccc void @caaT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caaT_info$def to i64)),i64 296), i64 1, i64 4402341478432}>
{
caaT:
  %ls84D = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls84F = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnaop = load i64*, i64** %Sp_Var
  %lnaoq = getelementptr inbounds i64, i64* %lnaop, i32 1
  %lnaor = bitcast i64* %lnaoq to i64*
  %lnaos = load i64, i64* %lnaor, !tbaa !1
  store i64 %lnaos, i64* %ls84D
  %lnaot = load i64, i64* %R1_Var
  %lnaou = and i64 %lnaot, 7
  switch i64 %lnaou, label %cac4 [i64 1, label %cac4
i64 2, label %caci
i64 3, label %caco]
cac4:
  %lnaov = load i64*, i64** %Hp_Var
  %lnaow = getelementptr inbounds i64, i64* %lnaov, i32 6
  %lnaox = ptrtoint i64* %lnaow to i64
  %lnaoy = inttoptr i64 %lnaox to i64*
  store i64* %lnaoy, i64** %Hp_Var
  %lnaoz = load i64*, i64** %Hp_Var
  %lnaoA = ptrtoint i64* %lnaoz to i64
  %lnaoB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaoC = bitcast i64* %lnaoB to i64*
  %lnaoD = load i64, i64* %lnaoC, !tbaa !4
  %lnaoE = icmp ugt i64 %lnaoA, %lnaoD
  br i1 %lnaoE, label %cac7, label %cac6
cac6:
  %lnaoH = load i64, i64* %R1_Var
  %lnaoI = add i64 %lnaoH, 7
  %lnaoJ = inttoptr i64 %lnaoI to i64*
  %lnaoK = load i64, i64* %lnaoJ, !tbaa !3
  store i64 %lnaoK, i64* %ls84F
  %lnaoM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84G_info$def to i64
  %lnaoL = load i64*, i64** %Hp_Var
  %lnaoN = getelementptr inbounds i64, i64* %lnaoL, i32 -5
  store i64 %lnaoM, i64* %lnaoN, !tbaa !2
  %lnaoP = load i64, i64* %ls84D
  %lnaoO = load i64*, i64** %Hp_Var
  %lnaoQ = getelementptr inbounds i64, i64* %lnaoO, i32 -3
  store i64 %lnaoP, i64* %lnaoQ, !tbaa !2
  %lnaoS = load i64, i64* %ls84F
  %lnaoR = load i64*, i64** %Hp_Var
  %lnaoT = getelementptr inbounds i64, i64* %lnaoR, i32 -2
  store i64 %lnaoS, i64* %lnaoT, !tbaa !2
  %lnaoV = ptrtoint i8* @Word_W_con_info to i64
  %lnaoU = load i64*, i64** %Hp_Var
  %lnaoW = getelementptr inbounds i64, i64* %lnaoU, i32 -1
  store i64 %lnaoV, i64* %lnaoW, !tbaa !2
  %lnaoY = load i64*, i64** %Hp_Var
  %lnaoZ = getelementptr inbounds i64, i64* %lnaoY, i32 -5
  %lnap0 = ptrtoint i64* %lnaoZ to i64
  %lnaoX = load i64*, i64** %Hp_Var
  %lnap1 = getelementptr inbounds i64, i64* %lnaoX, i32 0
  store i64 %lnap0, i64* %lnap1, !tbaa !2
  %lnap3 = load i64*, i64** %Hp_Var
  %lnap4 = ptrtoint i64* %lnap3 to i64
  %lnap5 = add i64 %lnap4, -7
  store i64 %lnap5, i64* %R1_Var
  %lnap6 = load i64*, i64** %Sp_Var
  %lnap7 = getelementptr inbounds i64, i64* %lnap6, i32 2
  %lnap8 = ptrtoint i64* %lnap7 to i64
  %lnap9 = inttoptr i64 %lnap8 to i64*
  store i64* %lnap9, i64** %Sp_Var
  %lnapa = load i64*, i64** %Sp_Var
  %lnapb = getelementptr inbounds i64, i64* %lnapa, i32 0
  %lnapc = bitcast i64* %lnapb to i64*
  %lnapd = load i64, i64* %lnapc, !tbaa !1
  %lnape = inttoptr i64 %lnapd to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapf = load i64*, i64** %Sp_Var
  %lnapg = load i64*, i64** %Hp_Var
  %lnaph = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnape( i64* %Base_Arg, i64* %lnapf, i64* %lnapg, i64 %lnaph, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cac7:
  %lnapi = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnapi, !tbaa !4
  %lnapj = load i64, i64* %R1_Var
  store i64 %lnapj, i64* %R1_Var
  %lnapk = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapl = load i64*, i64** %Sp_Var
  %lnapm = load i64*, i64** %Hp_Var
  %lnapn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapk( i64* %Base_Arg, i64* %lnapl, i64* %lnapm, i64 %lnapn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caci:
  %lnapp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cac9_info$def to i64
  %lnapo = load i64*, i64** %Sp_Var
  %lnapq = getelementptr inbounds i64, i64* %lnapo, i32 0
  store i64 %lnapp, i64* %lnapq, !tbaa !1
  %lnapr = load i64, i64* %ls84D
  store i64 %lnapr, i64* %R2_Var
  %lnapv = load i64, i64* %R1_Var
  %lnapw = add i64 %lnapv, 6
  %lnapx = inttoptr i64 %lnapw to i64*
  %lnapy = load i64, i64* %lnapx, !tbaa !3
  %lnaps = load i64*, i64** %Sp_Var
  %lnapz = getelementptr inbounds i64, i64* %lnaps, i32 1
  store i64 %lnapy, i64* %lnapz, !tbaa !1
  %lnapA = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapB = load i64*, i64** %Sp_Var
  %lnapC = load i64*, i64** %Hp_Var
  %lnapD = load i64, i64* %R1_Var
  %lnapE = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapA( i64* %Base_Arg, i64* %lnapB, i64* %lnapC, i64 %lnapD, i64 %lnapE, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caco:
  %lnapG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab8_info$def to i64
  %lnapF = load i64*, i64** %Sp_Var
  %lnapH = getelementptr inbounds i64, i64* %lnapF, i32 0
  store i64 %lnapG, i64* %lnapH, !tbaa !1
  %lnapK = load i64, i64* %R1_Var
  %lnapL = add i64 %lnapK, 5
  %lnapM = inttoptr i64 %lnapL to i64*
  %lnapN = load i64, i64* %lnapM, !tbaa !3
  store i64 %lnapN, i64* %R1_Var
  %lnapO = load i64, i64* %R1_Var
  %lnapP = and i64 %lnapO, 7
  %lnapQ = icmp ne i64 %lnapP, 0
  br i1 %lnapQ, label %uadG, label %cab9
cab9:
  %lnapS = load i64, i64* %R1_Var
  %lnapT = inttoptr i64 %lnapS to i64*
  %lnapU = load i64, i64* %lnapT, !tbaa !3
  %lnapV = inttoptr i64 %lnapU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnapW = load i64*, i64** %Sp_Var
  %lnapX = load i64*, i64** %Hp_Var
  %lnapY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapV( i64* %Base_Arg, i64* %lnapW, i64* %lnapX, i64 %lnapY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uadG:
  %lnapZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaq0 = load i64*, i64** %Sp_Var
  %lnaq1 = load i64*, i64** %Hp_Var
  %lnaq2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnapZ( i64* %Base_Arg, i64* %lnaq0, i64* %lnaq1, i64 %lnaq2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cab8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab8_info$def to i8*)
define internal ghccc void @cab8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cab8_info$def to i64)),i64 296), i64 1, i64 4402341478432}>
{
cab8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls84N = alloca i64, i32 1
  %ls84M = alloca i64, i32 1
  %ls84O = alloca i64, i32 1
  %ls84P = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaq3 = load i64*, i64** %Hp_Var
  %lnaq4 = getelementptr inbounds i64, i64* %lnaq3, i32 9
  %lnaq5 = ptrtoint i64* %lnaq4 to i64
  %lnaq6 = inttoptr i64 %lnaq5 to i64*
  store i64* %lnaq6, i64** %Hp_Var
  %lnaq7 = load i64*, i64** %Hp_Var
  %lnaq8 = ptrtoint i64* %lnaq7 to i64
  %lnaq9 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaqa = bitcast i64* %lnaq9 to i64*
  %lnaqb = load i64, i64* %lnaqa, !tbaa !4
  %lnaqc = icmp ugt i64 %lnaq8, %lnaqb
  br i1 %lnaqc, label %cacr, label %cacq
cacq:
  %lnaqf = load i64, i64* %R1_Var
  %lnaqg = add i64 %lnaqf, 7
  %lnaqh = inttoptr i64 %lnaqg to i64*
  %lnaqi = load i64, i64* %lnaqh, !tbaa !3
  store i64 %lnaqi, i64* %ls84N
  %lnaql = load i64, i64* %R1_Var
  %lnaqm = add i64 %lnaql, 15
  %lnaqn = inttoptr i64 %lnaqm to i64*
  %lnaqo = load i64, i64* %lnaqn, !tbaa !3
  store i64 %lnaqo, i64* %ls84M
  %lnaqr = load i64, i64* %R1_Var
  %lnaqs = add i64 %lnaqr, 23
  %lnaqt = inttoptr i64 %lnaqs to i64*
  %lnaqu = load i64, i64* %lnaqt, !tbaa !3
  store i64 %lnaqu, i64* %ls84O
  %lnaqx = load i64, i64* %R1_Var
  %lnaqy = add i64 %lnaqx, 31
  %lnaqz = inttoptr i64 %lnaqy to i64*
  %lnaqA = load i64, i64* %lnaqz, !tbaa !3
  store i64 %lnaqA, i64* %ls84P
  %lnaqC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s84U_info$def to i64
  %lnaqB = load i64*, i64** %Hp_Var
  %lnaqD = getelementptr inbounds i64, i64* %lnaqB, i32 -8
  store i64 %lnaqC, i64* %lnaqD, !tbaa !2
  %lnaqF = load i64*, i64** %Sp_Var
  %lnaqG = getelementptr inbounds i64, i64* %lnaqF, i32 1
  %lnaqH = bitcast i64* %lnaqG to i64*
  %lnaqI = load i64, i64* %lnaqH, !tbaa !1
  %lnaqE = load i64*, i64** %Hp_Var
  %lnaqJ = getelementptr inbounds i64, i64* %lnaqE, i32 -6
  store i64 %lnaqI, i64* %lnaqJ, !tbaa !2
  %lnaqL = load i64, i64* %ls84N
  %lnaqK = load i64*, i64** %Hp_Var
  %lnaqM = getelementptr inbounds i64, i64* %lnaqK, i32 -5
  store i64 %lnaqL, i64* %lnaqM, !tbaa !2
  %lnaqO = load i64, i64* %ls84M
  %lnaqN = load i64*, i64** %Hp_Var
  %lnaqP = getelementptr inbounds i64, i64* %lnaqN, i32 -4
  store i64 %lnaqO, i64* %lnaqP, !tbaa !2
  %lnaqR = load i64, i64* %ls84O
  %lnaqQ = load i64*, i64** %Hp_Var
  %lnaqS = getelementptr inbounds i64, i64* %lnaqQ, i32 -3
  store i64 %lnaqR, i64* %lnaqS, !tbaa !2
  %lnaqU = load i64, i64* %ls84P
  %lnaqT = load i64*, i64** %Hp_Var
  %lnaqV = getelementptr inbounds i64, i64* %lnaqT, i32 -2
  store i64 %lnaqU, i64* %lnaqV, !tbaa !2
  %lnaqX = ptrtoint i8* @Word_W_con_info to i64
  %lnaqW = load i64*, i64** %Hp_Var
  %lnaqY = getelementptr inbounds i64, i64* %lnaqW, i32 -1
  store i64 %lnaqX, i64* %lnaqY, !tbaa !2
  %lnar0 = load i64*, i64** %Hp_Var
  %lnar1 = getelementptr inbounds i64, i64* %lnar0, i32 -8
  %lnar2 = ptrtoint i64* %lnar1 to i64
  %lnaqZ = load i64*, i64** %Hp_Var
  %lnar3 = getelementptr inbounds i64, i64* %lnaqZ, i32 0
  store i64 %lnar2, i64* %lnar3, !tbaa !2
  %lnar5 = load i64*, i64** %Hp_Var
  %lnar6 = ptrtoint i64* %lnar5 to i64
  %lnar7 = add i64 %lnar6, -7
  store i64 %lnar7, i64* %R1_Var
  %lnar8 = load i64*, i64** %Sp_Var
  %lnar9 = getelementptr inbounds i64, i64* %lnar8, i32 2
  %lnara = ptrtoint i64* %lnar9 to i64
  %lnarb = inttoptr i64 %lnara to i64*
  store i64* %lnarb, i64** %Sp_Var
  %lnarc = load i64*, i64** %Sp_Var
  %lnard = getelementptr inbounds i64, i64* %lnarc, i32 0
  %lnare = bitcast i64* %lnard to i64*
  %lnarf = load i64, i64* %lnare, !tbaa !1
  %lnarg = inttoptr i64 %lnarf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarh = load i64*, i64** %Sp_Var
  %lnari = load i64*, i64** %Hp_Var
  %lnarj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnarg( i64* %Base_Arg, i64* %lnarh, i64* %lnari, i64 %lnarj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacr:
  %lnark = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 72, i64* %lnark, !tbaa !4
  %lnarl = load i64, i64* %R1_Var
  store i64 %lnarl, i64* %R1_Var
  %lnarm = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarn = load i64*, i64** %Sp_Var
  %lnaro = load i64*, i64** %Hp_Var
  %lnarp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnarm( i64* %Base_Arg, i64* %lnarn, i64* %lnaro, i64 %lnarp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cac9_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cac9_info$def to i8*)
define internal ghccc void @cac9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cac9:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnarq = load i64*, i64** %Hp_Var
  %lnarr = getelementptr inbounds i64, i64* %lnarq, i32 2
  %lnars = ptrtoint i64* %lnarr to i64
  %lnart = inttoptr i64 %lnars to i64*
  store i64* %lnart, i64** %Hp_Var
  %lnaru = load i64*, i64** %Hp_Var
  %lnarv = ptrtoint i64* %lnaru to i64
  %lnarw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnarx = bitcast i64* %lnarw to i64*
  %lnary = load i64, i64* %lnarx, !tbaa !4
  %lnarz = icmp ugt i64 %lnarv, %lnary
  br i1 %lnarz, label %cacl, label %cack
cack:
  %lnarB = ptrtoint i8* @Word_W64_con_info to i64
  %lnarA = load i64*, i64** %Hp_Var
  %lnarC = getelementptr inbounds i64, i64* %lnarA, i32 -1
  store i64 %lnarB, i64* %lnarC, !tbaa !2
  %lnarE = load i64, i64* %R1_Var
  %lnarF = load i64*, i64** %Sp_Var
  %lnarG = getelementptr inbounds i64, i64* %lnarF, i32 1
  %lnarH = bitcast i64* %lnarG to i64*
  %lnarI = load i64, i64* %lnarH, !tbaa !1
  %lnarJ = and i64 %lnarE, %lnarI
  %lnarD = load i64*, i64** %Hp_Var
  %lnarK = getelementptr inbounds i64, i64* %lnarD, i32 0
  store i64 %lnarJ, i64* %lnarK, !tbaa !2
  %lnarM = load i64*, i64** %Hp_Var
  %lnarN = ptrtoint i64* %lnarM to i64
  %lnarO = add i64 %lnarN, -6
  store i64 %lnarO, i64* %R1_Var
  %lnarP = load i64*, i64** %Sp_Var
  %lnarQ = getelementptr inbounds i64, i64* %lnarP, i32 2
  %lnarR = ptrtoint i64* %lnarQ to i64
  %lnarS = inttoptr i64 %lnarR to i64*
  store i64* %lnarS, i64** %Sp_Var
  %lnarT = load i64*, i64** %Sp_Var
  %lnarU = getelementptr inbounds i64, i64* %lnarT, i32 0
  %lnarV = bitcast i64* %lnarU to i64*
  %lnarW = load i64, i64* %lnarV, !tbaa !1
  %lnarX = inttoptr i64 %lnarW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnarY = load i64*, i64** %Sp_Var
  %lnarZ = load i64*, i64** %Hp_Var
  %lnas0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnarX( i64* %Base_Arg, i64* %lnarY, i64* %lnarZ, i64 %lnas0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cacl:
  %lnas1 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnas1, !tbaa !4
  %lnas2 = load i64, i64* %R1_Var
  store i64 %lnas2, i64* %R1_Var
  %lnas3 = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnas4 = load i64*, i64** %Sp_Var
  %lnas5 = load i64*, i64** %Hp_Var
  %lnas6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnas3( i64* %Base_Arg, i64* %lnas4, i64* %lnas5, i64 %lnas6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wand_closure_struct = type <{i64, i64}>
@Word_wand_closure$def = internal global %Word_wand_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wand_info$def to i64), i64 0}>
@Word_wand_closure = alias i8* bitcast (%Word_wand_closure_struct* @Word_wand_closure$def to i8*)
@Word_wand_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wand_info$def to i8*)
define ghccc void @Word_wand_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wand_info$def to i64)),i64 392), i64 12884901911, i64 0, i64 4294967311}>
{
casc:
  %ls85r = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnasf = load i64, i64* %R3_Var
  store i64 %lnasf, i64* %ls85r
  store i64 %R4_Arg, i64* %R3_Var
  %lnasg = load i64, i64* %ls85r
  store i64 %lnasg, i64* %R2_Var
  %lnash = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwand_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnasi = load i64, i64* %R2_Var
  %lnasj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnash( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnasi, i64 %lnasj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwweq_closure_struct = type <{i64, i64}>
@Word_zdwweq_closure$def = internal global %Word_zdwweq_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwweq_info$def to i64), i64 0}>
@Word_zdwweq_closure = alias i8* bitcast (%Word_zdwweq_closure_struct* @Word_zdwweq_closure$def to i8*)
@s86d_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86d_info$def to i8*)
define internal ghccc void @s86d_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86d_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
cauy:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnay3 = load i64*, i64** %Sp_Var
  %lnay4 = getelementptr inbounds i64, i64* %lnay3, i32 -7
  %lnay5 = ptrtoint i64* %lnay4 to i64
  %lnay6 = icmp ult i64 %lnay5, %SpLim_Arg
  br i1 %lnay6, label %cauC, label %cauD
cauD:
  %lnay8 = ptrtoint i8* @stg_upd_frame_info to i64
  %lnay7 = load i64*, i64** %Sp_Var
  %lnay9 = getelementptr inbounds i64, i64* %lnay7, i32 -2
  store i64 %lnay8, i64* %lnay9, !tbaa !1
  %lnayb = load i64, i64* %R1_Var
  %lnaya = load i64*, i64** %Sp_Var
  %lnayc = getelementptr inbounds i64, i64* %lnaya, i32 -1
  store i64 %lnayb, i64* %lnayc, !tbaa !1
  %lnaye = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caut_info$def to i64
  %lnayd = load i64*, i64** %Sp_Var
  %lnayf = getelementptr inbounds i64, i64* %lnayd, i32 -7
  store i64 %lnaye, i64* %lnayf, !tbaa !1
  %lnayj = load i64, i64* %R1_Var
  %lnayk = add i64 %lnayj, 24
  %lnayl = inttoptr i64 %lnayk to i64*
  %lnaym = load i64, i64* %lnayl, !tbaa !3
  %lnayg = load i64*, i64** %Sp_Var
  %lnayn = getelementptr inbounds i64, i64* %lnayg, i32 -6
  store i64 %lnaym, i64* %lnayn, !tbaa !1
  %lnayr = load i64, i64* %R1_Var
  %lnays = add i64 %lnayr, 16
  %lnayt = inttoptr i64 %lnays to i64*
  %lnayu = load i64, i64* %lnayt, !tbaa !3
  %lnayo = load i64*, i64** %Sp_Var
  %lnayv = getelementptr inbounds i64, i64* %lnayo, i32 -5
  store i64 %lnayu, i64* %lnayv, !tbaa !1
  %lnayz = load i64, i64* %R1_Var
  %lnayA = add i64 %lnayz, 32
  %lnayB = inttoptr i64 %lnayA to i64*
  %lnayC = load i64, i64* %lnayB, !tbaa !3
  %lnayw = load i64*, i64** %Sp_Var
  %lnayD = getelementptr inbounds i64, i64* %lnayw, i32 -4
  store i64 %lnayC, i64* %lnayD, !tbaa !1
  %lnayH = load i64, i64* %R1_Var
  %lnayI = add i64 %lnayH, 40
  %lnayJ = inttoptr i64 %lnayI to i64*
  %lnayK = load i64, i64* %lnayJ, !tbaa !3
  %lnayE = load i64*, i64** %Sp_Var
  %lnayL = getelementptr inbounds i64, i64* %lnayE, i32 -3
  store i64 %lnayK, i64* %lnayL, !tbaa !1
  %lnayM = load i64*, i64** %Sp_Var
  %lnayN = getelementptr inbounds i64, i64* %lnayM, i32 -7
  %lnayO = ptrtoint i64* %lnayN to i64
  %lnayP = inttoptr i64 %lnayO to i64*
  store i64* %lnayP, i64** %Sp_Var
  %lnayQ = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnayR = load i64*, i64** %Sp_Var
  %lnayS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnayQ( i64* %Base_Arg, i64* %lnayR, i64* %Hp_Arg, i64 %lnayS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cauC:
  %lnayT = load i64, i64* %R1_Var
  store i64 %lnayT, i64* %R1_Var
  %lnayU = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnayV = bitcast i64* %lnayU to i64*
  %lnayW = load i64, i64* %lnayV, !tbaa !4
  %lnayX = inttoptr i64 %lnayW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnayY = load i64*, i64** %Sp_Var
  %lnayZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnayX( i64* %Base_Arg, i64* %lnayY, i64* %Hp_Arg, i64 %lnayZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caut_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caut_info$def to i8*)
define internal ghccc void @caut_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caut_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
caut:
  %ls86b = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaz0 = load i64*, i64** %Sp_Var
  %lnaz1 = getelementptr inbounds i64, i64* %lnaz0, i32 4
  %lnaz2 = bitcast i64* %lnaz1 to i64*
  %lnaz3 = load i64, i64* %lnaz2, !tbaa !1
  store i64 %lnaz3, i64* %ls86b
  %lnaz5 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauB_info$def to i64
  %lnaz4 = load i64*, i64** %Sp_Var
  %lnaz6 = getelementptr inbounds i64, i64* %lnaz4, i32 4
  store i64 %lnaz5, i64* %lnaz6, !tbaa !1
  %lnaz7 = load i64, i64* %ls86b
  store i64 %lnaz7, i64* %R5_Var
  %lnaz8 = load i64*, i64** %Sp_Var
  %lnaz9 = getelementptr inbounds i64, i64* %lnaz8, i32 3
  %lnaza = bitcast i64* %lnaz9 to i64*
  %lnazb = load i64, i64* %lnaza, !tbaa !1
  store i64 %lnazb, i64* %R4_Var
  %lnazc = load i64*, i64** %Sp_Var
  %lnazd = getelementptr inbounds i64, i64* %lnazc, i32 2
  %lnaze = bitcast i64* %lnazd to i64*
  %lnazf = load i64, i64* %lnaze, !tbaa !1
  store i64 %lnazf, i64* %R3_Var
  %lnazg = load i64*, i64** %Sp_Var
  %lnazh = getelementptr inbounds i64, i64* %lnazg, i32 1
  %lnazi = bitcast i64* %lnazh to i64*
  %lnazj = load i64, i64* %lnazi, !tbaa !1
  store i64 %lnazj, i64* %R2_Var
  %lnazk = load i64*, i64** %Sp_Var
  %lnazl = getelementptr inbounds i64, i64* %lnazk, i32 4
  %lnazm = ptrtoint i64* %lnazl to i64
  %lnazn = inttoptr i64 %lnazm to i64*
  store i64* %lnazn, i64** %Sp_Var
  %lnazo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazp = load i64*, i64** %Sp_Var
  %lnazq = load i64, i64* %R2_Var
  %lnazr = load i64, i64* %R3_Var
  %lnazs = load i64, i64* %R4_Var
  %lnazt = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazo( i64* %Base_Arg, i64* %lnazp, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnazq, i64 %lnazr, i64 %lnazs, i64 %lnazt, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cauB_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauB_info$def to i8*)
define internal ghccc void @cauB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cauB:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnazu = load i64, i64* %R1_Var
  %lnazv = and i64 %lnazu, -8
  store i64 %lnazv, i64* %R1_Var
  %lnazw = load i64*, i64** %Sp_Var
  %lnazx = getelementptr inbounds i64, i64* %lnazw, i32 1
  %lnazy = ptrtoint i64* %lnazx to i64
  %lnazz = inttoptr i64 %lnazy to i64*
  store i64* %lnazz, i64** %Sp_Var
  %lnazB = load i64, i64* %R1_Var
  %lnazC = inttoptr i64 %lnazB to i64*
  %lnazD = load i64, i64* %lnazC, !tbaa !3
  %lnazE = inttoptr i64 %lnazD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnazF = load i64*, i64** %Sp_Var
  %lnazG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnazE( i64* %Base_Arg, i64* %lnazF, i64* %Hp_Arg, i64 %lnazG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwweq_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwweq_info$def to i8*)
define ghccc void @Word_zdwweq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwweq_info$def to i64)),i64 296), i64 8589934607, i64 0, i64 35188667056143}>
{
cauL:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnazH = load i64*, i64** %Sp_Var
  %lnazI = getelementptr inbounds i64, i64* %lnazH, i32 -6
  %lnazJ = ptrtoint i64* %lnazI to i64
  %lnazK = icmp ult i64 %lnazJ, %SpLim_Arg
  br i1 %lnazK, label %cauM, label %cauN
cauN:
  %lnazM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cau8_info$def to i64
  %lnazL = load i64*, i64** %Sp_Var
  %lnazN = getelementptr inbounds i64, i64* %lnazL, i32 -2
  store i64 %lnazM, i64* %lnazN, !tbaa !1
  %lnazO = load i64, i64* %R2_Var
  store i64 %lnazO, i64* %R1_Var
  %lnazQ = load i64, i64* %R3_Var
  %lnazP = load i64*, i64** %Sp_Var
  %lnazR = getelementptr inbounds i64, i64* %lnazP, i32 -1
  store i64 %lnazQ, i64* %lnazR, !tbaa !1
  %lnazS = load i64*, i64** %Sp_Var
  %lnazT = getelementptr inbounds i64, i64* %lnazS, i32 -2
  %lnazU = ptrtoint i64* %lnazT to i64
  %lnazV = inttoptr i64 %lnazU to i64*
  store i64* %lnazV, i64** %Sp_Var
  %lnazW = load i64, i64* %R1_Var
  %lnazX = and i64 %lnazW, 7
  %lnazY = icmp ne i64 %lnazX, 0
  br i1 %lnazY, label %uaxU, label %cau9
cau9:
  %lnaA0 = load i64, i64* %R1_Var
  %lnaA1 = inttoptr i64 %lnaA0 to i64*
  %lnaA2 = load i64, i64* %lnaA1, !tbaa !3
  %lnaA3 = inttoptr i64 %lnaA2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaA4 = load i64*, i64** %Sp_Var
  %lnaA5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaA3( i64* %Base_Arg, i64* %lnaA4, i64* %Hp_Arg, i64 %lnaA5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxU:
  %lnaA6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cau8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaA7 = load i64*, i64** %Sp_Var
  %lnaA8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaA6( i64* %Base_Arg, i64* %lnaA7, i64* %Hp_Arg, i64 %lnaA8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cauM:
  %lnaA9 = load i64, i64* %R3_Var
  store i64 %lnaA9, i64* %R3_Var
  %lnaAa = load i64, i64* %R2_Var
  store i64 %lnaAa, i64* %R2_Var
  %lnaAb = ptrtoint %Word_zdwweq_closure_struct* @Word_zdwweq_closure$def to i64
  store i64 %lnaAb, i64* %R1_Var
  %lnaAc = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaAd = bitcast i64* %lnaAc to i64*
  %lnaAe = load i64, i64* %lnaAd, !tbaa !4
  %lnaAf = inttoptr i64 %lnaAe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAg = load i64*, i64** %Sp_Var
  %lnaAh = load i64, i64* %R1_Var
  %lnaAi = load i64, i64* %R2_Var
  %lnaAj = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAf( i64* %Base_Arg, i64* %lnaAg, i64* %Hp_Arg, i64 %lnaAh, i64 %lnaAi, i64 %lnaAj, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cau8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cau8_info$def to i8*)
define internal ghccc void @cau8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cau8_info$def to i64)),i64 296), i64 1, i64 4294967328}>
{
cau8:
  %ls85u = alloca i64, i32 1
  %ls85w = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls85N = alloca i64, i32 1
  %lnaAk = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnaAl = bitcast i64* %lnaAk to i64*
  %lnaAm = load i64, i64* %lnaAl, !tbaa !1
  store i64 %lnaAm, i64* %ls85u
  %lnaAn = load i64, i64* %R1_Var
  %lnaAo = and i64 %lnaAn, 7
  switch i64 %lnaAo, label %cauH [i64 1, label %cauH
i64 2, label %cauI
i64 3, label %cauJ]
cauH:
  %lnaAp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauP_info$def to i64
  %lnaAq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaAp, i64* %lnaAq, !tbaa !1
  %lnaAt = load i64, i64* %R1_Var
  %lnaAu = add i64 %lnaAt, 7
  %lnaAv = inttoptr i64 %lnaAu to i64*
  %lnaAw = load i64, i64* %lnaAv, !tbaa !3
  store i64 %lnaAw, i64* %ls85w
  %lnaAx = load i64, i64* %ls85u
  store i64 %lnaAx, i64* %R1_Var
  %lnaAy = load i64, i64* %ls85w
  %lnaAz = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnaAy, i64* %lnaAz, !tbaa !1
  %lnaAA = load i64, i64* %R1_Var
  %lnaAB = and i64 %lnaAA, 7
  %lnaAC = icmp ne i64 %lnaAB, 0
  br i1 %lnaAC, label %uaxO, label %cauR
cauR:
  %lnaAE = load i64, i64* %R1_Var
  %lnaAF = inttoptr i64 %lnaAE to i64*
  %lnaAG = load i64, i64* %lnaAF, !tbaa !3
  %lnaAH = inttoptr i64 %lnaAG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAH( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaAI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxO:
  %lnaAJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauP_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaAK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaAJ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaAK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cauI:
  %lnaAL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavx_info$def to i64
  %lnaAM = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaAL, i64* %lnaAM, !tbaa !1
  %lnaAP = load i64, i64* %R1_Var
  %lnaAQ = add i64 %lnaAP, 6
  %lnaAR = inttoptr i64 %lnaAQ to i64*
  %lnaAS = load i64, i64* %lnaAR, !tbaa !3
  store i64 %lnaAS, i64* %ls85N
  %lnaAT = load i64, i64* %ls85u
  store i64 %lnaAT, i64* %R1_Var
  %lnaAU = load i64, i64* %ls85N
  %lnaAV = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnaAU, i64* %lnaAV, !tbaa !1
  %lnaAW = load i64, i64* %R1_Var
  %lnaAX = and i64 %lnaAW, 7
  %lnaAY = icmp ne i64 %lnaAX, 0
  br i1 %lnaAY, label %uaxP, label %cavz
cavz:
  %lnaB0 = load i64, i64* %R1_Var
  %lnaB1 = inttoptr i64 %lnaB0 to i64*
  %lnaB2 = load i64, i64* %lnaB1, !tbaa !3
  %lnaB3 = inttoptr i64 %lnaB2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaB4 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaB3( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaB4, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxP:
  %lnaB5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavx_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaB6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaB5( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaB6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cauJ:
  %lnaB7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauf_info$def to i64
  %lnaB8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaB7, i64* %lnaB8, !tbaa !1
  %lnaBb = load i64, i64* %R1_Var
  %lnaBc = add i64 %lnaBb, 5
  %lnaBd = inttoptr i64 %lnaBc to i64*
  %lnaBe = load i64, i64* %lnaBd, !tbaa !3
  store i64 %lnaBe, i64* %R1_Var
  %lnaBf = load i64, i64* %R1_Var
  %lnaBg = and i64 %lnaBf, 7
  %lnaBh = icmp ne i64 %lnaBg, 0
  br i1 %lnaBh, label %uaxQ, label %caug
caug:
  %lnaBj = load i64, i64* %R1_Var
  %lnaBk = inttoptr i64 %lnaBj to i64*
  %lnaBl = load i64, i64* %lnaBk, !tbaa !3
  %lnaBm = inttoptr i64 %lnaBl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaBn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaBm( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaBn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxQ:
  %lnaBo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaBp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaBo( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaBp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cauf_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauf_info$def to i8*)
define internal ghccc void @cauf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauf_info$def to i64)),i64 296), i64 1, i64 4294967328}>
{
cauf:
  %ls869 = alloca i64, i32 1
  %ls868 = alloca i64, i32 1
  %ls86a = alloca i64, i32 1
  %ls86b = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaBr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauk_info$def to i64
  %lnaBq = load i64*, i64** %Sp_Var
  %lnaBs = getelementptr inbounds i64, i64* %lnaBq, i32 -3
  store i64 %lnaBr, i64* %lnaBs, !tbaa !1
  %lnaBv = load i64, i64* %R1_Var
  %lnaBw = add i64 %lnaBv, 7
  %lnaBx = inttoptr i64 %lnaBw to i64*
  %lnaBy = load i64, i64* %lnaBx, !tbaa !3
  store i64 %lnaBy, i64* %ls869
  %lnaBB = load i64, i64* %R1_Var
  %lnaBC = add i64 %lnaBB, 15
  %lnaBD = inttoptr i64 %lnaBC to i64*
  %lnaBE = load i64, i64* %lnaBD, !tbaa !3
  store i64 %lnaBE, i64* %ls868
  %lnaBH = load i64, i64* %R1_Var
  %lnaBI = add i64 %lnaBH, 23
  %lnaBJ = inttoptr i64 %lnaBI to i64*
  %lnaBK = load i64, i64* %lnaBJ, !tbaa !3
  store i64 %lnaBK, i64* %ls86a
  %lnaBN = load i64, i64* %R1_Var
  %lnaBO = add i64 %lnaBN, 31
  %lnaBP = inttoptr i64 %lnaBO to i64*
  %lnaBQ = load i64, i64* %lnaBP, !tbaa !3
  store i64 %lnaBQ, i64* %ls86b
  %lnaBR = load i64*, i64** %Sp_Var
  %lnaBS = getelementptr inbounds i64, i64* %lnaBR, i32 1
  %lnaBT = bitcast i64* %lnaBS to i64*
  %lnaBU = load i64, i64* %lnaBT, !tbaa !1
  store i64 %lnaBU, i64* %R1_Var
  %lnaBW = load i64, i64* %ls86a
  %lnaBV = load i64*, i64** %Sp_Var
  %lnaBX = getelementptr inbounds i64, i64* %lnaBV, i32 -2
  store i64 %lnaBW, i64* %lnaBX, !tbaa !1
  %lnaBZ = load i64, i64* %ls86b
  %lnaBY = load i64*, i64** %Sp_Var
  %lnaC0 = getelementptr inbounds i64, i64* %lnaBY, i32 -1
  store i64 %lnaBZ, i64* %lnaC0, !tbaa !1
  %lnaC2 = load i64, i64* %ls869
  %lnaC1 = load i64*, i64** %Sp_Var
  %lnaC3 = getelementptr inbounds i64, i64* %lnaC1, i32 0
  store i64 %lnaC2, i64* %lnaC3, !tbaa !1
  %lnaC5 = load i64, i64* %ls868
  %lnaC4 = load i64*, i64** %Sp_Var
  %lnaC6 = getelementptr inbounds i64, i64* %lnaC4, i32 1
  store i64 %lnaC5, i64* %lnaC6, !tbaa !1
  %lnaC7 = load i64*, i64** %Sp_Var
  %lnaC8 = getelementptr inbounds i64, i64* %lnaC7, i32 -3
  %lnaC9 = ptrtoint i64* %lnaC8 to i64
  %lnaCa = inttoptr i64 %lnaC9 to i64*
  store i64* %lnaCa, i64** %Sp_Var
  %lnaCb = load i64, i64* %R1_Var
  %lnaCc = and i64 %lnaCb, 7
  %lnaCd = icmp ne i64 %lnaCc, 0
  br i1 %lnaCd, label %uaxR, label %caul
caul:
  %lnaCf = load i64, i64* %R1_Var
  %lnaCg = inttoptr i64 %lnaCf to i64*
  %lnaCh = load i64, i64* %lnaCg, !tbaa !3
  %lnaCi = inttoptr i64 %lnaCh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaCj = load i64*, i64** %Sp_Var
  %lnaCk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaCi( i64* %Base_Arg, i64* %lnaCj, i64* %Hp_Arg, i64 %lnaCk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxR:
  %lnaCl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauk_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaCm = load i64*, i64** %Sp_Var
  %lnaCn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaCl( i64* %Base_Arg, i64* %lnaCm, i64* %Hp_Arg, i64 %lnaCn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cauk_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauk_info$def to i8*)
define internal ghccc void @cauk_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauk_info$def to i64)),i64 296), i64 708, i64 4294967328}>
{
cauk:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaCo = load i64, i64* %R1_Var
  %lnaCp = and i64 %lnaCo, 7
  switch i64 %lnaCp, label %cawi [i64 3, label %cawG]
cawi:
  %lnaCq = load i64*, i64** %Hp_Var
  %lnaCr = getelementptr inbounds i64, i64* %lnaCq, i32 6
  %lnaCs = ptrtoint i64* %lnaCr to i64
  %lnaCt = inttoptr i64 %lnaCs to i64*
  store i64* %lnaCt, i64** %Hp_Var
  %lnaCu = load i64*, i64** %Hp_Var
  %lnaCv = ptrtoint i64* %lnaCu to i64
  %lnaCw = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaCx = bitcast i64* %lnaCw to i64*
  %lnaCy = load i64, i64* %lnaCx, !tbaa !4
  %lnaCz = icmp ugt i64 %lnaCv, %lnaCy
  br i1 %lnaCz, label %cawl, label %cawk
cawk:
  %lnaCB = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86d_info$def to i64
  %lnaCA = load i64*, i64** %Hp_Var
  %lnaCC = getelementptr inbounds i64, i64* %lnaCA, i32 -5
  store i64 %lnaCB, i64* %lnaCC, !tbaa !2
  %lnaCE = load i64*, i64** %Sp_Var
  %lnaCF = getelementptr inbounds i64, i64* %lnaCE, i32 3
  %lnaCG = bitcast i64* %lnaCF to i64*
  %lnaCH = load i64, i64* %lnaCG, !tbaa !1
  %lnaCD = load i64*, i64** %Hp_Var
  %lnaCI = getelementptr inbounds i64, i64* %lnaCD, i32 -3
  store i64 %lnaCH, i64* %lnaCI, !tbaa !2
  %lnaCK = load i64*, i64** %Sp_Var
  %lnaCL = getelementptr inbounds i64, i64* %lnaCK, i32 4
  %lnaCM = bitcast i64* %lnaCL to i64*
  %lnaCN = load i64, i64* %lnaCM, !tbaa !1
  %lnaCJ = load i64*, i64** %Hp_Var
  %lnaCO = getelementptr inbounds i64, i64* %lnaCJ, i32 -2
  store i64 %lnaCN, i64* %lnaCO, !tbaa !2
  %lnaCQ = load i64*, i64** %Sp_Var
  %lnaCR = getelementptr inbounds i64, i64* %lnaCQ, i32 1
  %lnaCS = bitcast i64* %lnaCR to i64*
  %lnaCT = load i64, i64* %lnaCS, !tbaa !1
  %lnaCP = load i64*, i64** %Hp_Var
  %lnaCU = getelementptr inbounds i64, i64* %lnaCP, i32 -1
  store i64 %lnaCT, i64* %lnaCU, !tbaa !2
  %lnaCW = load i64*, i64** %Sp_Var
  %lnaCX = getelementptr inbounds i64, i64* %lnaCW, i32 2
  %lnaCY = bitcast i64* %lnaCX to i64*
  %lnaCZ = load i64, i64* %lnaCY, !tbaa !1
  %lnaCV = load i64*, i64** %Hp_Var
  %lnaD0 = getelementptr inbounds i64, i64* %lnaCV, i32 0
  store i64 %lnaCZ, i64* %lnaD0, !tbaa !2
  %lnaD2 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawg_info$def to i64
  %lnaD1 = load i64*, i64** %Sp_Var
  %lnaD3 = getelementptr inbounds i64, i64* %lnaD1, i32 3
  store i64 %lnaD2, i64* %lnaD3, !tbaa !1
  %lnaD4 = load i64, i64* %R1_Var
  store i64 %lnaD4, i64* %R1_Var
  %lnaD6 = load i64*, i64** %Hp_Var
  %lnaD7 = getelementptr inbounds i64, i64* %lnaD6, i32 -5
  %lnaD8 = ptrtoint i64* %lnaD7 to i64
  %lnaD5 = load i64*, i64** %Sp_Var
  %lnaD9 = getelementptr inbounds i64, i64* %lnaD5, i32 4
  store i64 %lnaD8, i64* %lnaD9, !tbaa !1
  %lnaDa = load i64*, i64** %Sp_Var
  %lnaDb = getelementptr inbounds i64, i64* %lnaDa, i32 3
  %lnaDc = ptrtoint i64* %lnaDb to i64
  %lnaDd = inttoptr i64 %lnaDc to i64*
  store i64* %lnaDd, i64** %Sp_Var
  %lnaDe = load i64, i64* %R1_Var
  %lnaDf = and i64 %lnaDe, 7
  %lnaDg = icmp ne i64 %lnaDf, 0
  br i1 %lnaDg, label %uaxS, label %cawm
cawm:
  %lnaDi = load i64, i64* %R1_Var
  %lnaDj = inttoptr i64 %lnaDi to i64*
  %lnaDk = load i64, i64* %lnaDj, !tbaa !3
  %lnaDl = inttoptr i64 %lnaDk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDm = load i64*, i64** %Sp_Var
  %lnaDn = load i64*, i64** %Hp_Var
  %lnaDo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDl( i64* %Base_Arg, i64* %lnaDm, i64* %lnaDn, i64 %lnaDo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxS:
  %lnaDp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDq = load i64*, i64** %Sp_Var
  %lnaDr = load i64*, i64** %Hp_Var
  %lnaDs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDp( i64* %Base_Arg, i64* %lnaDq, i64* %lnaDr, i64 %lnaDs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cawl:
  %lnaDt = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnaDt, !tbaa !4
  %lnaDu = load i64, i64* %R1_Var
  store i64 %lnaDu, i64* %R1_Var
  %lnaDv = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDw = load i64*, i64** %Sp_Var
  %lnaDx = load i64*, i64** %Hp_Var
  %lnaDy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDv( i64* %Base_Arg, i64* %lnaDw, i64* %lnaDx, i64 %lnaDy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cawG:
  %lnaDA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawE_info$def to i64
  %lnaDz = load i64*, i64** %Sp_Var
  %lnaDB = getelementptr inbounds i64, i64* %lnaDz, i32 0
  store i64 %lnaDA, i64* %lnaDB, !tbaa !1
  %lnaDE = load i64, i64* %R1_Var
  %lnaDF = add i64 %lnaDE, 5
  %lnaDG = inttoptr i64 %lnaDF to i64*
  %lnaDH = load i64, i64* %lnaDG, !tbaa !3
  store i64 %lnaDH, i64* %R1_Var
  %lnaDI = load i64, i64* %R1_Var
  %lnaDJ = and i64 %lnaDI, 7
  %lnaDK = icmp ne i64 %lnaDJ, 0
  br i1 %lnaDK, label %uaxT, label %cawH
cawH:
  %lnaDM = load i64, i64* %R1_Var
  %lnaDN = inttoptr i64 %lnaDM to i64*
  %lnaDO = load i64, i64* %lnaDN, !tbaa !3
  %lnaDP = inttoptr i64 %lnaDO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDQ = load i64*, i64** %Sp_Var
  %lnaDR = load i64*, i64** %Hp_Var
  %lnaDS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDP( i64* %Base_Arg, i64* %lnaDQ, i64* %lnaDR, i64 %lnaDS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxT:
  %lnaDT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawE_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaDU = load i64*, i64** %Sp_Var
  %lnaDV = load i64*, i64** %Hp_Var
  %lnaDW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaDT( i64* %Base_Arg, i64* %lnaDU, i64* %lnaDV, i64 %lnaDW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cawE_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawE_info$def to i8*)
define internal ghccc void @cawE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 708, i64 32}>
{
cawE:
  %ls86b = alloca i64, i32 1
  %ls86s = alloca i64, i32 1
  %ls868 = alloca i64, i32 1
  %ls869 = alloca i64, i32 1
  %ls86a = alloca i64, i32 1
  %ls86q = alloca i64, i32 1
  %ls86p = alloca i64, i32 1
  %ls86r = alloca i64, i32 1
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaDX = load i64*, i64** %Sp_Var
  %lnaDY = getelementptr inbounds i64, i64* %lnaDX, i32 2
  %lnaDZ = bitcast i64* %lnaDY to i64*
  %lnaE0 = load i64, i64* %lnaDZ, !tbaa !1
  store i64 %lnaE0, i64* %ls86b
  %lnaE1 = add i64 %R1_Arg, 31
  %lnaE2 = inttoptr i64 %lnaE1 to i64*
  %lnaE3 = load i64, i64* %lnaE2, !tbaa !3
  store i64 %lnaE3, i64* %ls86s
  %lnaE4 = load i64, i64* %ls86b
  %lnaE5 = load i64, i64* %ls86s
  %lnaE6 = icmp ne i64 %lnaE4, %lnaE5
  %lnaE7 = zext i1 %lnaE6 to i64
  switch i64 %lnaE7, label %caxv [i64 0, label %caxv
i64 1, label %uaxI]
caxv:
  %lnaE8 = load i64*, i64** %Sp_Var
  %lnaE9 = getelementptr inbounds i64, i64* %lnaE8, i32 4
  %lnaEa = bitcast i64* %lnaE9 to i64*
  %lnaEb = load i64, i64* %lnaEa, !tbaa !1
  store i64 %lnaEb, i64* %ls868
  %lnaEc = load i64*, i64** %Sp_Var
  %lnaEd = getelementptr inbounds i64, i64* %lnaEc, i32 3
  %lnaEe = bitcast i64* %lnaEd to i64*
  %lnaEf = load i64, i64* %lnaEe, !tbaa !1
  store i64 %lnaEf, i64* %ls869
  %lnaEg = load i64*, i64** %Sp_Var
  %lnaEh = getelementptr inbounds i64, i64* %lnaEg, i32 1
  %lnaEi = bitcast i64* %lnaEh to i64*
  %lnaEj = load i64, i64* %lnaEi, !tbaa !1
  store i64 %lnaEj, i64* %ls86a
  %lnaEk = add i64 %R1_Arg, 7
  %lnaEl = inttoptr i64 %lnaEk to i64*
  %lnaEm = load i64, i64* %lnaEl, !tbaa !3
  store i64 %lnaEm, i64* %ls86q
  %lnaEn = add i64 %R1_Arg, 15
  %lnaEo = inttoptr i64 %lnaEn to i64*
  %lnaEp = load i64, i64* %lnaEo, !tbaa !3
  store i64 %lnaEp, i64* %ls86p
  %lnaEq = add i64 %R1_Arg, 23
  %lnaEr = inttoptr i64 %lnaEq to i64*
  %lnaEs = load i64, i64* %lnaEr, !tbaa !3
  store i64 %lnaEs, i64* %ls86r
  %lnaEt = load i64, i64* %ls868
  %lnaEu = load i64, i64* %ls86p
  %lnaEv = icmp eq i64 %lnaEt, %lnaEu
  %lnaEw = zext i1 %lnaEv to i64
  switch i64 %lnaEw, label %cawY [i64 0, label %cawY
i64 1, label %caxt]
cawY:
  %lnaEy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawW_info$def to i64
  %lnaEx = load i64*, i64** %Sp_Var
  %lnaEz = getelementptr inbounds i64, i64* %lnaEx, i32 4
  store i64 %lnaEy, i64* %lnaEz, !tbaa !1
  %lnaEA = load i64, i64* %ls86p
  store i64 %lnaEA, i64* %R6_Var
  %lnaEB = load i64, i64* %ls86b
  store i64 %lnaEB, i64* %R5_Var
  %lnaEC = load i64, i64* %ls86a
  store i64 %lnaEC, i64* %R4_Var
  %lnaED = load i64, i64* %ls869
  store i64 %lnaED, i64* %R3_Var
  %lnaEE = load i64, i64* %ls868
  store i64 %lnaEE, i64* %R2_Var
  %lnaEG = load i64, i64* %ls86q
  %lnaEF = load i64*, i64** %Sp_Var
  %lnaEH = getelementptr inbounds i64, i64* %lnaEF, i32 1
  store i64 %lnaEG, i64* %lnaEH, !tbaa !1
  %lnaEJ = load i64, i64* %ls86r
  %lnaEI = load i64*, i64** %Sp_Var
  %lnaEK = getelementptr inbounds i64, i64* %lnaEI, i32 2
  store i64 %lnaEJ, i64* %lnaEK, !tbaa !1
  %lnaEM = load i64, i64* %ls86s
  %lnaEL = load i64*, i64** %Sp_Var
  %lnaEN = getelementptr inbounds i64, i64* %lnaEL, i32 3
  store i64 %lnaEM, i64* %lnaEN, !tbaa !1
  %lnaEO = load i64*, i64** %Sp_Var
  %lnaEP = getelementptr inbounds i64, i64* %lnaEO, i32 1
  %lnaEQ = ptrtoint i64* %lnaEP to i64
  %lnaER = inttoptr i64 %lnaEQ to i64*
  store i64* %lnaER, i64** %Sp_Var
  %lnaES = bitcast i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_zdwcompareBytes_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaET = load i64*, i64** %Sp_Var
  %lnaEU = load i64, i64* %R2_Var
  %lnaEV = load i64, i64* %R3_Var
  %lnaEW = load i64, i64* %R4_Var
  %lnaEX = load i64, i64* %R5_Var
  %lnaEY = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaES( i64* %Base_Arg, i64* %lnaET, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaEU, i64 %lnaEV, i64 %lnaEW, i64 %lnaEX, i64 %lnaEY, i64 %SpLim_Arg ) nounwind
  ret void
caxt:
  %lnaEZ = load i64, i64* %ls86a
  %lnaF0 = load i64, i64* %ls86r
  %lnaF1 = icmp eq i64 %lnaEZ, %lnaF0
  %lnaF2 = zext i1 %lnaF1 to i64
  switch i64 %lnaF2, label %caxh [i64 0, label %caxh
i64 1, label %uaxJ]
caxh:
  %lnaF4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxf_info$def to i64
  %lnaF3 = load i64*, i64** %Sp_Var
  %lnaF5 = getelementptr inbounds i64, i64* %lnaF3, i32 4
  store i64 %lnaF4, i64* %lnaF5, !tbaa !1
  %lnaF6 = load i64, i64* %ls86p
  store i64 %lnaF6, i64* %R6_Var
  %lnaF7 = load i64, i64* %ls86b
  store i64 %lnaF7, i64* %R5_Var
  %lnaF8 = load i64, i64* %ls86a
  store i64 %lnaF8, i64* %R4_Var
  %lnaF9 = load i64, i64* %ls869
  store i64 %lnaF9, i64* %R3_Var
  %lnaFa = load i64, i64* %ls868
  store i64 %lnaFa, i64* %R2_Var
  %lnaFc = load i64, i64* %ls86q
  %lnaFb = load i64*, i64** %Sp_Var
  %lnaFd = getelementptr inbounds i64, i64* %lnaFb, i32 1
  store i64 %lnaFc, i64* %lnaFd, !tbaa !1
  %lnaFf = load i64, i64* %ls86r
  %lnaFe = load i64*, i64** %Sp_Var
  %lnaFg = getelementptr inbounds i64, i64* %lnaFe, i32 2
  store i64 %lnaFf, i64* %lnaFg, !tbaa !1
  %lnaFi = load i64, i64* %ls86s
  %lnaFh = load i64*, i64** %Sp_Var
  %lnaFj = getelementptr inbounds i64, i64* %lnaFh, i32 3
  store i64 %lnaFi, i64* %lnaFj, !tbaa !1
  %lnaFk = load i64*, i64** %Sp_Var
  %lnaFl = getelementptr inbounds i64, i64* %lnaFk, i32 1
  %lnaFm = ptrtoint i64* %lnaFl to i64
  %lnaFn = inttoptr i64 %lnaFm to i64*
  store i64* %lnaFn, i64** %Sp_Var
  %lnaFo = bitcast i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_zdwcompareBytes_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFp = load i64*, i64** %Sp_Var
  %lnaFq = load i64, i64* %R2_Var
  %lnaFr = load i64, i64* %R3_Var
  %lnaFs = load i64, i64* %R4_Var
  %lnaFt = load i64, i64* %R5_Var
  %lnaFu = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFo( i64* %Base_Arg, i64* %lnaFp, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaFq, i64 %lnaFr, i64 %lnaFs, i64 %lnaFt, i64 %lnaFu, i64 %SpLim_Arg ) nounwind
  ret void
uaxJ:
  %lnaFv = load i64*, i64** %Sp_Var
  %lnaFw = getelementptr inbounds i64, i64* %lnaFv, i32 5
  %lnaFx = ptrtoint i64* %lnaFw to i64
  %lnaFy = inttoptr i64 %lnaFx to i64*
  store i64* %lnaFy, i64** %Sp_Var
  %lnaFz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxs_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFA = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFz( i64* %Base_Arg, i64* %lnaFA, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxI:
  %lnaFB = load i64*, i64** %Sp_Var
  %lnaFC = getelementptr inbounds i64, i64* %lnaFB, i32 5
  %lnaFD = ptrtoint i64* %lnaFC to i64
  %lnaFE = inttoptr i64 %lnaFD to i64*
  store i64* %lnaFE, i64** %Sp_Var
  %lnaFF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxw_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFG = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFF( i64* %Base_Arg, i64* %lnaFG, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caxf_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxf_info$def to i8*)
define internal ghccc void @caxf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
caxf:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaFH = and i64 %R1_Arg, 7
  switch i64 %lnaFH, label %uaxK [i64 2, label %uaxL]
uaxK:
  %lnaFI = load i64*, i64** %Sp_Var
  %lnaFJ = getelementptr inbounds i64, i64* %lnaFI, i32 1
  %lnaFK = ptrtoint i64* %lnaFJ to i64
  %lnaFL = inttoptr i64 %lnaFK to i64*
  store i64* %lnaFL, i64** %Sp_Var
  %lnaFM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxw_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFN = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFM( i64* %Base_Arg, i64* %lnaFN, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxL:
  %lnaFO = load i64*, i64** %Sp_Var
  %lnaFP = getelementptr inbounds i64, i64* %lnaFO, i32 1
  %lnaFQ = ptrtoint i64* %lnaFP to i64
  %lnaFR = inttoptr i64 %lnaFQ to i64*
  store i64* %lnaFR, i64** %Sp_Var
  %lnaFS = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxs_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaFT = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFS( i64* %Base_Arg, i64* %lnaFT, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cawW_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawW_info$def to i8*)
define internal ghccc void @cawW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cawW:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaFU = and i64 %R1_Arg, 7
  switch i64 %lnaFU, label %uaxM [i64 2, label %uaxN]
uaxM:
  %lnaFV = load i64*, i64** %Sp_Var
  %lnaFW = getelementptr inbounds i64, i64* %lnaFV, i32 1
  %lnaFX = ptrtoint i64* %lnaFW to i64
  %lnaFY = inttoptr i64 %lnaFX to i64*
  store i64* %lnaFY, i64** %Sp_Var
  %lnaFZ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxw_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaG0 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaFZ( i64* %Base_Arg, i64* %lnaG0, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxN:
  %lnaG1 = load i64*, i64** %Sp_Var
  %lnaG2 = getelementptr inbounds i64, i64* %lnaG1, i32 1
  %lnaG3 = ptrtoint i64* %lnaG2 to i64
  %lnaG4 = inttoptr i64 %lnaG3 to i64*
  store i64* %lnaG4, i64** %Sp_Var
  %lnaG5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxs_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaG6 = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaG5( i64* %Base_Arg, i64* %lnaG6, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caxs_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxs_entry$def to i8*)
define internal ghccc void @caxs_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
caxs:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaG7 = ptrtoint i8* @ghczmprim_GHCziTypes_True_closure to i64
  %lnaG8 = add i64 %lnaG7, 2
  store i64 %lnaG8, i64* %R1_Var
  %lnaG9 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnaGa = bitcast i64* %lnaG9 to i64*
  %lnaGb = load i64, i64* %lnaGa, !tbaa !1
  %lnaGc = inttoptr i64 %lnaGb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaGd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caxw_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caxw_entry$def to i8*)
define internal ghccc void @caxw_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
caxw:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaGe = ptrtoint i8* @ghczmprim_GHCziTypes_False_closure to i64
  %lnaGf = add i64 %lnaGe, 1
  store i64 %lnaGf, i64* %R1_Var
  %lnaGg = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnaGh = bitcast i64* %lnaGg to i64*
  %lnaGi = load i64, i64* %lnaGh, !tbaa !1
  %lnaGj = inttoptr i64 %lnaGi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnaGk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cawg_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawg_info$def to i8*)
define internal ghccc void @cawg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 32}>
{
cawg:
  %lcaup = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaGl = load i64*, i64** %Sp_Var
  %lnaGm = getelementptr inbounds i64, i64* %lnaGl, i32 1
  %lnaGn = bitcast i64* %lnaGm to i64*
  %lnaGo = load i64, i64* %lnaGn, !tbaa !1
  store i64 %lnaGo, i64* %lcaup
  %lnaGp = and i64 %R1_Arg, 7
  switch i64 %lnaGp, label %caws [i64 1, label %caws
i64 2, label %cawx]
caws:
  %lnaGq = add i64 %R1_Arg, 7
  %lnaGr = inttoptr i64 %lnaGq to i64*
  %lnaGs = load i64, i64* %lnaGr, !tbaa !3
  store i64 %lnaGs, i64* %R3_Var
  %lnaGt = load i64, i64* %lcaup
  store i64 %lnaGt, i64* %R2_Var
  %lnaGu = load i64*, i64** %Sp_Var
  %lnaGv = getelementptr inbounds i64, i64* %lnaGu, i32 2
  %lnaGw = ptrtoint i64* %lnaGv to i64
  %lnaGx = inttoptr i64 %lnaGw to i64*
  store i64* %lnaGx, i64** %Sp_Var
  %lnaGy = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGz = load i64*, i64** %Sp_Var
  %lnaGA = load i64, i64* %R2_Var
  %lnaGB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGy( i64* %Base_Arg, i64* %lnaGz, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaGA, i64 %lnaGB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cawx:
  %lnaGD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawv_info$def to i64
  %lnaGC = load i64*, i64** %Sp_Var
  %lnaGE = getelementptr inbounds i64, i64* %lnaGC, i32 0
  store i64 %lnaGD, i64* %lnaGE, !tbaa !1
  %lnaGF = load i64, i64* %lcaup
  store i64 %lnaGF, i64* %R2_Var
  %lnaGH = add i64 %R1_Arg, 6
  %lnaGI = inttoptr i64 %lnaGH to i64*
  %lnaGJ = load i64, i64* %lnaGI, !tbaa !3
  %lnaGG = load i64*, i64** %Sp_Var
  %lnaGK = getelementptr inbounds i64, i64* %lnaGG, i32 1
  store i64 %lnaGJ, i64* %lnaGK, !tbaa !1
  %lnaGL = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaGM = load i64*, i64** %Sp_Var
  %lnaGN = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaGL( i64* %Base_Arg, i64* %lnaGM, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaGN, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cawv_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cawv_info$def to i8*)
define internal ghccc void @cawv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cawv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaGO = load i64, i64* %R1_Var
  %lnaGP = load i64*, i64** %Sp_Var
  %lnaGQ = getelementptr inbounds i64, i64* %lnaGP, i32 1
  %lnaGR = bitcast i64* %lnaGQ to i64*
  %lnaGS = load i64, i64* %lnaGR, !tbaa !1
  %lnaGT = icmp eq i64 %lnaGO, %lnaGS
  %lnaGU = zext i1 %lnaGT to i64
  %lnaGV = shl i64 %lnaGU, 3
  %lnaGW = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnaGX = add i64 %lnaGV, %lnaGW
  %lnaGY = inttoptr i64 %lnaGX to i64*
  %lnaGZ = load i64, i64* %lnaGY, !tbaa !5
  store i64 %lnaGZ, i64* %R1_Var
  %lnaH0 = load i64*, i64** %Sp_Var
  %lnaH1 = getelementptr inbounds i64, i64* %lnaH0, i32 2
  %lnaH2 = ptrtoint i64* %lnaH1 to i64
  %lnaH3 = inttoptr i64 %lnaH2 to i64*
  store i64* %lnaH3, i64** %Sp_Var
  %lnaH4 = load i64*, i64** %Sp_Var
  %lnaH5 = getelementptr inbounds i64, i64* %lnaH4, i32 0
  %lnaH6 = bitcast i64* %lnaH5 to i64*
  %lnaH7 = load i64, i64* %lnaH6, !tbaa !1
  %lnaH8 = inttoptr i64 %lnaH7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaH9 = load i64*, i64** %Sp_Var
  %lnaHa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaH8( i64* %Base_Arg, i64* %lnaH9, i64* %Hp_Arg, i64 %lnaHa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cavx_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavx_info$def to i8*)
define internal ghccc void @cavx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavx_info$def to i64)),i64 296), i64 65, i64 4294967328}>
{
cavx:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaHb = load i64, i64* %R1_Var
  %lnaHc = and i64 %lnaHb, 7
  switch i64 %lnaHc, label %cavG [i64 1, label %cavG
i64 2, label %cavO
i64 3, label %caw3]
cavG:
  %lnaHe = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavD_info$def to i64
  %lnaHd = load i64*, i64** %Sp_Var
  %lnaHf = getelementptr inbounds i64, i64* %lnaHd, i32 0
  store i64 %lnaHe, i64* %lnaHf, !tbaa !1
  %lnaHi = load i64, i64* %R1_Var
  %lnaHj = add i64 %lnaHi, 7
  %lnaHk = inttoptr i64 %lnaHj to i64*
  %lnaHl = load i64, i64* %lnaHk, !tbaa !3
  store i64 %lnaHl, i64* %R2_Var
  %lnaHm = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaHn = load i64*, i64** %Sp_Var
  %lnaHo = load i64, i64* %R1_Var
  %lnaHp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaHm( i64* %Base_Arg, i64* %lnaHn, i64* %Hp_Arg, i64 %lnaHo, i64 %lnaHp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cavO:
  %lnaHq = load i64*, i64** %Sp_Var
  %lnaHr = getelementptr inbounds i64, i64* %lnaHq, i32 1
  %lnaHs = bitcast i64* %lnaHr to i64*
  %lnaHt = load i64, i64* %lnaHs, !tbaa !1
  %lnaHw = load i64, i64* %R1_Var
  %lnaHx = add i64 %lnaHw, 6
  %lnaHy = inttoptr i64 %lnaHx to i64*
  %lnaHz = load i64, i64* %lnaHy, !tbaa !3
  %lnaHA = icmp eq i64 %lnaHt, %lnaHz
  %lnaHB = zext i1 %lnaHA to i64
  %lnaHC = shl i64 %lnaHB, 3
  %lnaHD = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnaHE = add i64 %lnaHC, %lnaHD
  %lnaHF = inttoptr i64 %lnaHE to i64*
  %lnaHG = load i64, i64* %lnaHF, !tbaa !5
  store i64 %lnaHG, i64* %R1_Var
  %lnaHH = load i64*, i64** %Sp_Var
  %lnaHI = getelementptr inbounds i64, i64* %lnaHH, i32 2
  %lnaHJ = ptrtoint i64* %lnaHI to i64
  %lnaHK = inttoptr i64 %lnaHJ to i64*
  store i64* %lnaHK, i64** %Sp_Var
  %lnaHL = load i64*, i64** %Sp_Var
  %lnaHM = getelementptr inbounds i64, i64* %lnaHL, i32 0
  %lnaHN = bitcast i64* %lnaHM to i64*
  %lnaHO = load i64, i64* %lnaHN, !tbaa !1
  %lnaHP = inttoptr i64 %lnaHO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaHQ = load i64*, i64** %Sp_Var
  %lnaHR = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaHP( i64* %Base_Arg, i64* %lnaHQ, i64* %Hp_Arg, i64 %lnaHR, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caw3:
  %lnaHT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavR_info$def to i64
  %lnaHS = load i64*, i64** %Sp_Var
  %lnaHU = getelementptr inbounds i64, i64* %lnaHS, i32 0
  store i64 %lnaHT, i64* %lnaHU, !tbaa !1
  %lnaHX = load i64, i64* %R1_Var
  %lnaHY = add i64 %lnaHX, 5
  %lnaHZ = inttoptr i64 %lnaHY to i64*
  %lnaI0 = load i64, i64* %lnaHZ, !tbaa !3
  store i64 %lnaI0, i64* %R1_Var
  %lnaI1 = load i64, i64* %R1_Var
  %lnaI2 = and i64 %lnaI1, 7
  %lnaI3 = icmp ne i64 %lnaI2, 0
  br i1 %lnaI3, label %uaxW, label %cavS
cavS:
  %lnaI5 = load i64, i64* %R1_Var
  %lnaI6 = inttoptr i64 %lnaI5 to i64*
  %lnaI7 = load i64, i64* %lnaI6, !tbaa !3
  %lnaI8 = inttoptr i64 %lnaI7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaI9 = load i64*, i64** %Sp_Var
  %lnaIa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaI8( i64* %Base_Arg, i64* %lnaI9, i64* %Hp_Arg, i64 %lnaIa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxW:
  %lnaIb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavR_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaIc = load i64*, i64** %Sp_Var
  %lnaId = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaIb( i64* %Base_Arg, i64* %lnaIc, i64* %Hp_Arg, i64 %lnaId, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cavR_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavR_info$def to i8*)
define internal ghccc void @cavR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavR_info$def to i64)),i64 296), i64 65, i64 4294967328}>
{
cavR:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaIf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavW_info$def to i64
  %lnaIe = load i64*, i64** %Sp_Var
  %lnaIg = getelementptr inbounds i64, i64* %lnaIe, i32 -4
  store i64 %lnaIf, i64* %lnaIg, !tbaa !1
  %lnaIi = add i64 %R1_Arg, 7
  %lnaIj = inttoptr i64 %lnaIi to i64*
  %lnaIk = load i64, i64* %lnaIj, !tbaa !3
  %lnaIh = load i64*, i64** %Sp_Var
  %lnaIl = getelementptr inbounds i64, i64* %lnaIh, i32 -3
  store i64 %lnaIk, i64* %lnaIl, !tbaa !1
  %lnaIn = add i64 %R1_Arg, 23
  %lnaIo = inttoptr i64 %lnaIn to i64*
  %lnaIp = load i64, i64* %lnaIo, !tbaa !3
  %lnaIm = load i64*, i64** %Sp_Var
  %lnaIq = getelementptr inbounds i64, i64* %lnaIm, i32 -2
  store i64 %lnaIp, i64* %lnaIq, !tbaa !1
  %lnaIs = add i64 %R1_Arg, 31
  %lnaIt = inttoptr i64 %lnaIs to i64*
  %lnaIu = load i64, i64* %lnaIt, !tbaa !3
  %lnaIr = load i64*, i64** %Sp_Var
  %lnaIv = getelementptr inbounds i64, i64* %lnaIr, i32 -1
  store i64 %lnaIu, i64* %lnaIv, !tbaa !1
  %lnaIx = add i64 %R1_Arg, 15
  %lnaIy = inttoptr i64 %lnaIx to i64*
  %lnaIz = load i64, i64* %lnaIy, !tbaa !3
  %lnaIw = load i64*, i64** %Sp_Var
  %lnaIA = getelementptr inbounds i64, i64* %lnaIw, i32 0
  store i64 %lnaIz, i64* %lnaIA, !tbaa !1
  %lnaIB = load i64*, i64** %Sp_Var
  %lnaIC = getelementptr inbounds i64, i64* %lnaIB, i32 -4
  %lnaID = ptrtoint i64* %lnaIC to i64
  %lnaIE = inttoptr i64 %lnaID to i64*
  store i64* %lnaIE, i64** %Sp_Var
  %lnaIF = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaIG = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaIF( i64* %Base_Arg, i64* %lnaIG, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cavW_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavW_info$def to i8*)
define internal ghccc void @cavW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavW_info$def to i64)),i64 296), i64 1925, i64 4294967328}>
{
cavW:
  %ls85W = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaIH = load i64*, i64** %Sp_Var
  %lnaII = getelementptr inbounds i64, i64* %lnaIH, i32 4
  %lnaIJ = bitcast i64* %lnaII to i64*
  %lnaIK = load i64, i64* %lnaIJ, !tbaa !1
  store i64 %lnaIK, i64* %ls85W
  %lnaIM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caw6_info$def to i64
  %lnaIL = load i64*, i64** %Sp_Var
  %lnaIN = getelementptr inbounds i64, i64* %lnaIL, i32 4
  store i64 %lnaIM, i64* %lnaIN, !tbaa !1
  %lnaIO = load i64*, i64** %Sp_Var
  %lnaIP = getelementptr inbounds i64, i64* %lnaIO, i32 3
  %lnaIQ = bitcast i64* %lnaIP to i64*
  %lnaIR = load i64, i64* %lnaIQ, !tbaa !1
  store i64 %lnaIR, i64* %R5_Var
  %lnaIS = load i64*, i64** %Sp_Var
  %lnaIT = getelementptr inbounds i64, i64* %lnaIS, i32 2
  %lnaIU = bitcast i64* %lnaIT to i64*
  %lnaIV = load i64, i64* %lnaIU, !tbaa !1
  store i64 %lnaIV, i64* %R4_Var
  %lnaIW = load i64*, i64** %Sp_Var
  %lnaIX = getelementptr inbounds i64, i64* %lnaIW, i32 1
  %lnaIY = bitcast i64* %lnaIX to i64*
  %lnaIZ = load i64, i64* %lnaIY, !tbaa !1
  store i64 %lnaIZ, i64* %R3_Var
  %lnaJ0 = load i64, i64* %ls85W
  store i64 %lnaJ0, i64* %R2_Var
  %lnaJ1 = load i64*, i64** %Sp_Var
  %lnaJ2 = getelementptr inbounds i64, i64* %lnaJ1, i32 4
  %lnaJ3 = ptrtoint i64* %lnaJ2 to i64
  %lnaJ4 = inttoptr i64 %lnaJ3 to i64*
  store i64* %lnaJ4, i64** %Sp_Var
  %lnaJ5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJ6 = load i64*, i64** %Sp_Var
  %lnaJ7 = load i64, i64* %R2_Var
  %lnaJ8 = load i64, i64* %R3_Var
  %lnaJ9 = load i64, i64* %R4_Var
  %lnaJa = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJ5( i64* %Base_Arg, i64* %lnaJ6, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaJ7, i64 %lnaJ8, i64 %lnaJ9, i64 %lnaJa, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caw6_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caw6_info$def to i8*)
define internal ghccc void @caw6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
caw6:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnaJb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caw1_info$def to i64
  %lnaJc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnaJb, i64* %lnaJc, !tbaa !1
  store i64 %R1_Arg, i64* %R2_Var
  %lnaJd = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJe = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaJe, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caw1_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caw1_info$def to i8*)
define internal ghccc void @caw1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
caw1:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaJf = load i64*, i64** %Sp_Var
  %lnaJg = getelementptr inbounds i64, i64* %lnaJf, i32 1
  %lnaJh = bitcast i64* %lnaJg to i64*
  %lnaJi = load i64, i64* %lnaJh, !tbaa !1
  %lnaJj = load i64, i64* %R1_Var
  %lnaJk = icmp eq i64 %lnaJi, %lnaJj
  %lnaJl = zext i1 %lnaJk to i64
  %lnaJm = shl i64 %lnaJl, 3
  %lnaJn = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnaJo = add i64 %lnaJm, %lnaJn
  %lnaJp = inttoptr i64 %lnaJo to i64*
  %lnaJq = load i64, i64* %lnaJp, !tbaa !5
  store i64 %lnaJq, i64* %R1_Var
  %lnaJr = load i64*, i64** %Sp_Var
  %lnaJs = getelementptr inbounds i64, i64* %lnaJr, i32 2
  %lnaJt = ptrtoint i64* %lnaJs to i64
  %lnaJu = inttoptr i64 %lnaJt to i64*
  store i64* %lnaJu, i64** %Sp_Var
  %lnaJv = load i64*, i64** %Sp_Var
  %lnaJw = getelementptr inbounds i64, i64* %lnaJv, i32 0
  %lnaJx = bitcast i64* %lnaJw to i64*
  %lnaJy = load i64, i64* %lnaJx, !tbaa !1
  %lnaJz = inttoptr i64 %lnaJy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJA = load i64*, i64** %Sp_Var
  %lnaJB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJz( i64* %Base_Arg, i64* %lnaJA, i64* %Hp_Arg, i64 %lnaJB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cavD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavD_info$def to i8*)
define internal ghccc void @cavD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cavD:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaJC = load i64*, i64** %Sp_Var
  %lnaJD = getelementptr inbounds i64, i64* %lnaJC, i32 1
  %lnaJE = bitcast i64* %lnaJD to i64*
  %lnaJF = load i64, i64* %lnaJE, !tbaa !1
  %lnaJG = load i64, i64* %R1_Var
  %lnaJH = icmp eq i64 %lnaJF, %lnaJG
  %lnaJI = zext i1 %lnaJH to i64
  %lnaJJ = shl i64 %lnaJI, 3
  %lnaJK = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnaJL = add i64 %lnaJJ, %lnaJK
  %lnaJM = inttoptr i64 %lnaJL to i64*
  %lnaJN = load i64, i64* %lnaJM, !tbaa !5
  store i64 %lnaJN, i64* %R1_Var
  %lnaJO = load i64*, i64** %Sp_Var
  %lnaJP = getelementptr inbounds i64, i64* %lnaJO, i32 2
  %lnaJQ = ptrtoint i64* %lnaJP to i64
  %lnaJR = inttoptr i64 %lnaJQ to i64*
  store i64* %lnaJR, i64** %Sp_Var
  %lnaJS = load i64*, i64** %Sp_Var
  %lnaJT = getelementptr inbounds i64, i64* %lnaJS, i32 0
  %lnaJU = bitcast i64* %lnaJT to i64*
  %lnaJV = load i64, i64* %lnaJU, !tbaa !1
  %lnaJW = inttoptr i64 %lnaJV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaJX = load i64*, i64** %Sp_Var
  %lnaJY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaJW( i64* %Base_Arg, i64* %lnaJX, i64* %Hp_Arg, i64 %lnaJY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cauP_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauP_info$def to i8*)
define internal ghccc void @cauP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cauP_info$def to i64)),i64 296), i64 1, i64 4294967328}>
{
cauP:
  %ls85w = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaJZ = load i64*, i64** %Sp_Var
  %lnaK0 = getelementptr inbounds i64, i64* %lnaJZ, i32 1
  %lnaK1 = bitcast i64* %lnaK0 to i64*
  %lnaK2 = load i64, i64* %lnaK1, !tbaa !1
  store i64 %lnaK2, i64* %ls85w
  %lnaK3 = load i64, i64* %R1_Var
  %lnaK4 = and i64 %lnaK3, 7
  switch i64 %lnaK4, label %cauX [i64 1, label %cauX
i64 2, label %cav2
i64 3, label %cavl]
cauX:
  %lnaK7 = load i64, i64* %R1_Var
  %lnaK8 = add i64 %lnaK7, 7
  %lnaK9 = inttoptr i64 %lnaK8 to i64*
  %lnaKa = load i64, i64* %lnaK9, !tbaa !3
  store i64 %lnaKa, i64* %R3_Var
  %lnaKb = load i64, i64* %ls85w
  store i64 %lnaKb, i64* %R2_Var
  %lnaKc = load i64*, i64** %Sp_Var
  %lnaKd = getelementptr inbounds i64, i64* %lnaKc, i32 2
  %lnaKe = ptrtoint i64* %lnaKd to i64
  %lnaKf = inttoptr i64 %lnaKe to i64*
  store i64* %lnaKf, i64** %Sp_Var
  %lnaKg = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaKh = load i64*, i64** %Sp_Var
  %lnaKi = load i64, i64* %R1_Var
  %lnaKj = load i64, i64* %R2_Var
  %lnaKk = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaKg( i64* %Base_Arg, i64* %lnaKh, i64* %Hp_Arg, i64 %lnaKi, i64 %lnaKj, i64 %lnaKk, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cav2:
  %lnaKm = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav0_info$def to i64
  %lnaKl = load i64*, i64** %Sp_Var
  %lnaKn = getelementptr inbounds i64, i64* %lnaKl, i32 0
  store i64 %lnaKm, i64* %lnaKn, !tbaa !1
  %lnaKo = load i64, i64* %ls85w
  store i64 %lnaKo, i64* %R2_Var
  %lnaKs = load i64, i64* %R1_Var
  %lnaKt = add i64 %lnaKs, 6
  %lnaKu = inttoptr i64 %lnaKt to i64*
  %lnaKv = load i64, i64* %lnaKu, !tbaa !3
  %lnaKp = load i64*, i64** %Sp_Var
  %lnaKw = getelementptr inbounds i64, i64* %lnaKp, i32 1
  store i64 %lnaKv, i64* %lnaKw, !tbaa !1
  %lnaKx = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaKy = load i64*, i64** %Sp_Var
  %lnaKz = load i64, i64* %R1_Var
  %lnaKA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaKx( i64* %Base_Arg, i64* %lnaKy, i64* %Hp_Arg, i64 %lnaKz, i64 %lnaKA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cavl:
  %lnaKC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to i64
  %lnaKB = load i64*, i64** %Sp_Var
  %lnaKD = getelementptr inbounds i64, i64* %lnaKB, i32 0
  store i64 %lnaKC, i64* %lnaKD, !tbaa !1
  %lnaKG = load i64, i64* %R1_Var
  %lnaKH = add i64 %lnaKG, 5
  %lnaKI = inttoptr i64 %lnaKH to i64*
  %lnaKJ = load i64, i64* %lnaKI, !tbaa !3
  store i64 %lnaKJ, i64* %R1_Var
  %lnaKK = load i64, i64* %R1_Var
  %lnaKL = and i64 %lnaKK, 7
  %lnaKM = icmp ne i64 %lnaKL, 0
  br i1 %lnaKM, label %uaxV, label %cava
cava:
  %lnaKO = load i64, i64* %R1_Var
  %lnaKP = inttoptr i64 %lnaKO to i64*
  %lnaKQ = load i64, i64* %lnaKP, !tbaa !3
  %lnaKR = inttoptr i64 %lnaKQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaKS = load i64*, i64** %Sp_Var
  %lnaKT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaKR( i64* %Base_Arg, i64* %lnaKS, i64* %Hp_Arg, i64 %lnaKT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaxV:
  %lnaKU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaKV = load i64*, i64** %Sp_Var
  %lnaKW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaKU( i64* %Base_Arg, i64* %lnaKV, i64* %Hp_Arg, i64 %lnaKW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cav9_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to i8*)
define internal ghccc void @cav9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav9_info$def to i64)),i64 296), i64 1, i64 4294967328}>
{
cav9:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaKY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cave_info$def to i64
  %lnaKX = load i64*, i64** %Sp_Var
  %lnaKZ = getelementptr inbounds i64, i64* %lnaKX, i32 -4
  store i64 %lnaKY, i64* %lnaKZ, !tbaa !1
  %lnaL1 = add i64 %R1_Arg, 7
  %lnaL2 = inttoptr i64 %lnaL1 to i64*
  %lnaL3 = load i64, i64* %lnaL2, !tbaa !3
  %lnaL0 = load i64*, i64** %Sp_Var
  %lnaL4 = getelementptr inbounds i64, i64* %lnaL0, i32 -3
  store i64 %lnaL3, i64* %lnaL4, !tbaa !1
  %lnaL6 = add i64 %R1_Arg, 23
  %lnaL7 = inttoptr i64 %lnaL6 to i64*
  %lnaL8 = load i64, i64* %lnaL7, !tbaa !3
  %lnaL5 = load i64*, i64** %Sp_Var
  %lnaL9 = getelementptr inbounds i64, i64* %lnaL5, i32 -2
  store i64 %lnaL8, i64* %lnaL9, !tbaa !1
  %lnaLb = add i64 %R1_Arg, 31
  %lnaLc = inttoptr i64 %lnaLb to i64*
  %lnaLd = load i64, i64* %lnaLc, !tbaa !3
  %lnaLa = load i64*, i64** %Sp_Var
  %lnaLe = getelementptr inbounds i64, i64* %lnaLa, i32 -1
  store i64 %lnaLd, i64* %lnaLe, !tbaa !1
  %lnaLg = add i64 %R1_Arg, 15
  %lnaLh = inttoptr i64 %lnaLg to i64*
  %lnaLi = load i64, i64* %lnaLh, !tbaa !3
  %lnaLf = load i64*, i64** %Sp_Var
  %lnaLj = getelementptr inbounds i64, i64* %lnaLf, i32 0
  store i64 %lnaLi, i64* %lnaLj, !tbaa !1
  %lnaLk = load i64*, i64** %Sp_Var
  %lnaLl = getelementptr inbounds i64, i64* %lnaLk, i32 -4
  %lnaLm = ptrtoint i64* %lnaLl to i64
  %lnaLn = inttoptr i64 %lnaLm to i64*
  store i64* %lnaLn, i64** %Sp_Var
  %lnaLo = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaLp = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaLo( i64* %Base_Arg, i64* %lnaLp, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cave_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cave_info$def to i8*)
define internal ghccc void @cave_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cave_info$def to i64)),i64 296), i64 901, i64 4294967328}>
{
cave:
  %ls85E = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaLq = load i64*, i64** %Sp_Var
  %lnaLr = getelementptr inbounds i64, i64* %lnaLq, i32 4
  %lnaLs = bitcast i64* %lnaLr to i64*
  %lnaLt = load i64, i64* %lnaLs, !tbaa !1
  store i64 %lnaLt, i64* %ls85E
  %lnaLv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavo_info$def to i64
  %lnaLu = load i64*, i64** %Sp_Var
  %lnaLw = getelementptr inbounds i64, i64* %lnaLu, i32 4
  store i64 %lnaLv, i64* %lnaLw, !tbaa !1
  %lnaLx = load i64*, i64** %Sp_Var
  %lnaLy = getelementptr inbounds i64, i64* %lnaLx, i32 3
  %lnaLz = bitcast i64* %lnaLy to i64*
  %lnaLA = load i64, i64* %lnaLz, !tbaa !1
  store i64 %lnaLA, i64* %R5_Var
  %lnaLB = load i64*, i64** %Sp_Var
  %lnaLC = getelementptr inbounds i64, i64* %lnaLB, i32 2
  %lnaLD = bitcast i64* %lnaLC to i64*
  %lnaLE = load i64, i64* %lnaLD, !tbaa !1
  store i64 %lnaLE, i64* %R4_Var
  %lnaLF = load i64*, i64** %Sp_Var
  %lnaLG = getelementptr inbounds i64, i64* %lnaLF, i32 1
  %lnaLH = bitcast i64* %lnaLG to i64*
  %lnaLI = load i64, i64* %lnaLH, !tbaa !1
  store i64 %lnaLI, i64* %R3_Var
  %lnaLJ = load i64, i64* %ls85E
  store i64 %lnaLJ, i64* %R2_Var
  %lnaLK = load i64*, i64** %Sp_Var
  %lnaLL = getelementptr inbounds i64, i64* %lnaLK, i32 4
  %lnaLM = ptrtoint i64* %lnaLL to i64
  %lnaLN = inttoptr i64 %lnaLM to i64*
  store i64* %lnaLN, i64** %Sp_Var
  %lnaLO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaLP = load i64*, i64** %Sp_Var
  %lnaLQ = load i64, i64* %R2_Var
  %lnaLR = load i64, i64* %R3_Var
  %lnaLS = load i64, i64* %R4_Var
  %lnaLT = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaLO( i64* %Base_Arg, i64* %lnaLP, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaLQ, i64 %lnaLR, i64 %lnaLS, i64 %lnaLT, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cavo_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavo_info$def to i8*)
define internal ghccc void @cavo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 32}>
{
cavo:
  %ls85w = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaLU = load i64*, i64** %Sp_Var
  %lnaLV = getelementptr inbounds i64, i64* %lnaLU, i32 1
  %lnaLW = bitcast i64* %lnaLV to i64*
  %lnaLX = load i64, i64* %lnaLW, !tbaa !1
  store i64 %lnaLX, i64* %ls85w
  %lnaLZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavj_info$def to i64
  %lnaLY = load i64*, i64** %Sp_Var
  %lnaM0 = getelementptr inbounds i64, i64* %lnaLY, i32 1
  store i64 %lnaLZ, i64* %lnaM0, !tbaa !1
  store i64 %R1_Arg, i64* %R3_Var
  %lnaM1 = load i64, i64* %ls85w
  store i64 %lnaM1, i64* %R2_Var
  %lnaM2 = load i64*, i64** %Sp_Var
  %lnaM3 = getelementptr inbounds i64, i64* %lnaM2, i32 1
  %lnaM4 = ptrtoint i64* %lnaM3 to i64
  %lnaM5 = inttoptr i64 %lnaM4 to i64*
  store i64* %lnaM5, i64** %Sp_Var
  %lnaM6 = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaM7 = load i64*, i64** %Sp_Var
  %lnaM8 = load i64, i64* %R2_Var
  %lnaM9 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaM6( i64* %Base_Arg, i64* %lnaM7, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaM8, i64 %lnaM9, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cavj_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cavj_info$def to i8*)
define internal ghccc void @cavj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cavj:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaMa = load i64, i64* %R1_Var
  %lnaMb = shl i64 %lnaMa, 3
  %lnaMc = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnaMd = add i64 %lnaMb, %lnaMc
  %lnaMe = inttoptr i64 %lnaMd to i64*
  %lnaMf = load i64, i64* %lnaMe, !tbaa !5
  store i64 %lnaMf, i64* %R1_Var
  %lnaMg = load i64*, i64** %Sp_Var
  %lnaMh = getelementptr inbounds i64, i64* %lnaMg, i32 1
  %lnaMi = ptrtoint i64* %lnaMh to i64
  %lnaMj = inttoptr i64 %lnaMi to i64*
  store i64* %lnaMj, i64** %Sp_Var
  %lnaMk = load i64*, i64** %Sp_Var
  %lnaMl = getelementptr inbounds i64, i64* %lnaMk, i32 0
  %lnaMm = bitcast i64* %lnaMl to i64*
  %lnaMn = load i64, i64* %lnaMm, !tbaa !1
  %lnaMo = inttoptr i64 %lnaMn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaMp = load i64*, i64** %Sp_Var
  %lnaMq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaMo( i64* %Base_Arg, i64* %lnaMp, i64* %Hp_Arg, i64 %lnaMq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cav0_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cav0_info$def to i8*)
define internal ghccc void @cav0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cav0:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaMr = load i64, i64* %R1_Var
  %lnaMs = load i64*, i64** %Sp_Var
  %lnaMt = getelementptr inbounds i64, i64* %lnaMs, i32 1
  %lnaMu = bitcast i64* %lnaMt to i64*
  %lnaMv = load i64, i64* %lnaMu, !tbaa !1
  %lnaMw = icmp eq i64 %lnaMr, %lnaMv
  %lnaMx = zext i1 %lnaMw to i64
  %lnaMy = shl i64 %lnaMx, 3
  %lnaMz = ptrtoint i8* @ghczmprim_GHCziTypes_Bool_closure_tbl to i64
  %lnaMA = add i64 %lnaMy, %lnaMz
  %lnaMB = inttoptr i64 %lnaMA to i64*
  %lnaMC = load i64, i64* %lnaMB, !tbaa !5
  store i64 %lnaMC, i64* %R1_Var
  %lnaMD = load i64*, i64** %Sp_Var
  %lnaME = getelementptr inbounds i64, i64* %lnaMD, i32 2
  %lnaMF = ptrtoint i64* %lnaME to i64
  %lnaMG = inttoptr i64 %lnaMF to i64*
  store i64* %lnaMG, i64** %Sp_Var
  %lnaMH = load i64*, i64** %Sp_Var
  %lnaMI = getelementptr inbounds i64, i64* %lnaMH, i32 0
  %lnaMJ = bitcast i64* %lnaMI to i64*
  %lnaMK = load i64, i64* %lnaMJ, !tbaa !1
  %lnaML = inttoptr i64 %lnaMK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaMM = load i64*, i64** %Sp_Var
  %lnaMN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaML( i64* %Base_Arg, i64* %lnaMM, i64* %Hp_Arg, i64 %lnaMN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_weq_closure_struct = type <{i64, i64}>
@Word_weq_closure$def = internal global %Word_weq_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_weq_info$def to i64), i64 0}>
@Word_weq_closure = alias i8* bitcast (%Word_weq_closure_struct* @Word_weq_closure$def to i8*)
@Word_weq_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_weq_info$def to i8*)
define ghccc void @Word_weq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_weq_info$def to i64)),i64 400), i64 12884901911, i64 0, i64 4294967311}>
{
caMT:
  %ls86C = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnaMW = load i64, i64* %R3_Var
  store i64 %lnaMW, i64* %ls86C
  store i64 %R4_Arg, i64* %R3_Var
  %lnaMX = load i64, i64* %ls86C
  store i64 %lnaMX, i64* %R2_Var
  %lnaMY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwweq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaMZ = load i64, i64* %R2_Var
  %lnaN0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaMY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaMZ, i64 %lnaN0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zzext_closure_struct = type <{i64, i64}>
@Word_zzext_closure$def = internal global %Word_zzext_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zzext_info$def to i64), i64 0}>
@Word_zzext_closure = alias i8* bitcast (%Word_zzext_closure_struct* @Word_zzext_closure$def to i8*)
@s86K_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86K_info$def to i8*)
define internal ghccc void @s86K_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86K_info$def to i64)),i64 352), i64 4294967296, i64 4294967314}>
{
caNt:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaOf = load i64*, i64** %Sp_Var
  %lnaOg = getelementptr inbounds i64, i64* %lnaOf, i32 -2
  %lnaOh = ptrtoint i64* %lnaOg to i64
  %lnaOi = icmp ult i64 %lnaOh, %SpLim_Arg
  br i1 %lnaOi, label %caNu, label %caNv
caNv:
  %lnaOk = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaOj = load i64*, i64** %Sp_Var
  %lnaOl = getelementptr inbounds i64, i64* %lnaOj, i32 -2
  store i64 %lnaOk, i64* %lnaOl, !tbaa !1
  %lnaOn = load i64, i64* %R1_Var
  %lnaOm = load i64*, i64** %Sp_Var
  %lnaOo = getelementptr inbounds i64, i64* %lnaOm, i32 -1
  store i64 %lnaOn, i64* %lnaOo, !tbaa !1
  %lnaOr = load i64, i64* %R1_Var
  %lnaOs = add i64 %lnaOr, 16
  %lnaOt = inttoptr i64 %lnaOs to i64*
  %lnaOu = load i64, i64* %lnaOt, !tbaa !3
  store i64 %lnaOu, i64* %R2_Var
  %lnaOv = load i64*, i64** %Sp_Var
  %lnaOw = getelementptr inbounds i64, i64* %lnaOv, i32 -2
  %lnaOx = ptrtoint i64* %lnaOw to i64
  %lnaOy = inttoptr i64 %lnaOx to i64*
  store i64* %lnaOy, i64** %Sp_Var
  %lnaOz = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaOA = load i64*, i64** %Sp_Var
  %lnaOB = load i64, i64* %R1_Var
  %lnaOC = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaOz( i64* %Base_Arg, i64* %lnaOA, i64* %Hp_Arg, i64 %lnaOB, i64 %lnaOC, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNu:
  %lnaOD = load i64, i64* %R1_Var
  store i64 %lnaOD, i64* %R1_Var
  %lnaOE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaOF = bitcast i64* %lnaOE to i64*
  %lnaOG = load i64, i64* %lnaOF, !tbaa !4
  %lnaOH = inttoptr i64 %lnaOG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaOI = load i64*, i64** %Sp_Var
  %lnaOJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaOH( i64* %Base_Arg, i64* %lnaOI, i64* %Hp_Arg, i64 %lnaOJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s86V_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86V_info$def to i8*)
define internal ghccc void @s86V_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86V_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
caNM:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaOK = load i64*, i64** %Sp_Var
  %lnaOL = getelementptr inbounds i64, i64* %lnaOK, i32 -7
  %lnaOM = ptrtoint i64* %lnaOL to i64
  %lnaON = icmp ult i64 %lnaOM, %SpLim_Arg
  br i1 %lnaON, label %caNQ, label %caNR
caNR:
  %lnaOP = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaOO = load i64*, i64** %Sp_Var
  %lnaOQ = getelementptr inbounds i64, i64* %lnaOO, i32 -2
  store i64 %lnaOP, i64* %lnaOQ, !tbaa !1
  %lnaOS = load i64, i64* %R1_Var
  %lnaOR = load i64*, i64** %Sp_Var
  %lnaOT = getelementptr inbounds i64, i64* %lnaOR, i32 -1
  store i64 %lnaOS, i64* %lnaOT, !tbaa !1
  %lnaOV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNH_info$def to i64
  %lnaOU = load i64*, i64** %Sp_Var
  %lnaOW = getelementptr inbounds i64, i64* %lnaOU, i32 -7
  store i64 %lnaOV, i64* %lnaOW, !tbaa !1
  %lnaP0 = load i64, i64* %R1_Var
  %lnaP1 = add i64 %lnaP0, 24
  %lnaP2 = inttoptr i64 %lnaP1 to i64*
  %lnaP3 = load i64, i64* %lnaP2, !tbaa !3
  %lnaOX = load i64*, i64** %Sp_Var
  %lnaP4 = getelementptr inbounds i64, i64* %lnaOX, i32 -6
  store i64 %lnaP3, i64* %lnaP4, !tbaa !1
  %lnaP8 = load i64, i64* %R1_Var
  %lnaP9 = add i64 %lnaP8, 16
  %lnaPa = inttoptr i64 %lnaP9 to i64*
  %lnaPb = load i64, i64* %lnaPa, !tbaa !3
  %lnaP5 = load i64*, i64** %Sp_Var
  %lnaPc = getelementptr inbounds i64, i64* %lnaP5, i32 -5
  store i64 %lnaPb, i64* %lnaPc, !tbaa !1
  %lnaPg = load i64, i64* %R1_Var
  %lnaPh = add i64 %lnaPg, 32
  %lnaPi = inttoptr i64 %lnaPh to i64*
  %lnaPj = load i64, i64* %lnaPi, !tbaa !3
  %lnaPd = load i64*, i64** %Sp_Var
  %lnaPk = getelementptr inbounds i64, i64* %lnaPd, i32 -4
  store i64 %lnaPj, i64* %lnaPk, !tbaa !1
  %lnaPo = load i64, i64* %R1_Var
  %lnaPp = add i64 %lnaPo, 40
  %lnaPq = inttoptr i64 %lnaPp to i64*
  %lnaPr = load i64, i64* %lnaPq, !tbaa !3
  %lnaPl = load i64*, i64** %Sp_Var
  %lnaPs = getelementptr inbounds i64, i64* %lnaPl, i32 -3
  store i64 %lnaPr, i64* %lnaPs, !tbaa !1
  %lnaPt = load i64*, i64** %Sp_Var
  %lnaPu = getelementptr inbounds i64, i64* %lnaPt, i32 -7
  %lnaPv = ptrtoint i64* %lnaPu to i64
  %lnaPw = inttoptr i64 %lnaPv to i64*
  store i64* %lnaPw, i64** %Sp_Var
  %lnaPx = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaPy = load i64*, i64** %Sp_Var
  %lnaPz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaPx( i64* %Base_Arg, i64* %lnaPy, i64* %Hp_Arg, i64 %lnaPz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNQ:
  %lnaPA = load i64, i64* %R1_Var
  store i64 %lnaPA, i64* %R1_Var
  %lnaPB = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnaPC = bitcast i64* %lnaPB to i64*
  %lnaPD = load i64, i64* %lnaPC, !tbaa !4
  %lnaPE = inttoptr i64 %lnaPD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaPF = load i64*, i64** %Sp_Var
  %lnaPG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaPE( i64* %Base_Arg, i64* %lnaPF, i64* %Hp_Arg, i64 %lnaPG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNH_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNH_info$def to i8*)
define internal ghccc void @caNH_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNH_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
caNH:
  %ls86Q = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaPH = load i64*, i64** %Sp_Var
  %lnaPI = getelementptr inbounds i64, i64* %lnaPH, i32 4
  %lnaPJ = bitcast i64* %lnaPI to i64*
  %lnaPK = load i64, i64* %lnaPJ, !tbaa !1
  store i64 %lnaPK, i64* %ls86Q
  %lnaPM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNP_info$def to i64
  %lnaPL = load i64*, i64** %Sp_Var
  %lnaPN = getelementptr inbounds i64, i64* %lnaPL, i32 4
  store i64 %lnaPM, i64* %lnaPN, !tbaa !1
  %lnaPO = load i64, i64* %ls86Q
  store i64 %lnaPO, i64* %R5_Var
  %lnaPP = load i64*, i64** %Sp_Var
  %lnaPQ = getelementptr inbounds i64, i64* %lnaPP, i32 3
  %lnaPR = bitcast i64* %lnaPQ to i64*
  %lnaPS = load i64, i64* %lnaPR, !tbaa !1
  store i64 %lnaPS, i64* %R4_Var
  %lnaPT = load i64*, i64** %Sp_Var
  %lnaPU = getelementptr inbounds i64, i64* %lnaPT, i32 2
  %lnaPV = bitcast i64* %lnaPU to i64*
  %lnaPW = load i64, i64* %lnaPV, !tbaa !1
  store i64 %lnaPW, i64* %R3_Var
  %lnaPX = load i64*, i64** %Sp_Var
  %lnaPY = getelementptr inbounds i64, i64* %lnaPX, i32 1
  %lnaPZ = bitcast i64* %lnaPY to i64*
  %lnaQ0 = load i64, i64* %lnaPZ, !tbaa !1
  store i64 %lnaQ0, i64* %R2_Var
  %lnaQ1 = load i64*, i64** %Sp_Var
  %lnaQ2 = getelementptr inbounds i64, i64* %lnaQ1, i32 4
  %lnaQ3 = ptrtoint i64* %lnaQ2 to i64
  %lnaQ4 = inttoptr i64 %lnaQ3 to i64*
  store i64* %lnaQ4, i64** %Sp_Var
  %lnaQ5 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQ6 = load i64*, i64** %Sp_Var
  %lnaQ7 = load i64, i64* %R2_Var
  %lnaQ8 = load i64, i64* %R3_Var
  %lnaQ9 = load i64, i64* %R4_Var
  %lnaQa = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQ5( i64* %Base_Arg, i64* %lnaQ6, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnaQ7, i64 %lnaQ8, i64 %lnaQ9, i64 %lnaQa, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNP_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNP_info$def to i8*)
define internal ghccc void @caNP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
caNP:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaQb = load i64, i64* %R1_Var
  %lnaQc = and i64 %lnaQb, -8
  store i64 %lnaQc, i64* %R1_Var
  %lnaQd = load i64*, i64** %Sp_Var
  %lnaQe = getelementptr inbounds i64, i64* %lnaQd, i32 1
  %lnaQf = ptrtoint i64* %lnaQe to i64
  %lnaQg = inttoptr i64 %lnaQf to i64*
  store i64* %lnaQg, i64** %Sp_Var
  %lnaQi = load i64, i64* %R1_Var
  %lnaQj = inttoptr i64 %lnaQi to i64*
  %lnaQk = load i64, i64* %lnaQj, !tbaa !3
  %lnaQl = inttoptr i64 %lnaQk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQm = load i64*, i64** %Sp_Var
  %lnaQn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQl( i64* %Base_Arg, i64* %lnaQm, i64* %Hp_Arg, i64 %lnaQn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zzext_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zzext_info$def to i8*)
define ghccc void @Word_zzext_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zzext_info$def to i64)),i64 296), i64 12884901911, i64 0, i64 70922794958863}>
{
caNZ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnaQo = load i64*, i64** %Sp_Var
  %lnaQp = getelementptr inbounds i64, i64* %lnaQo, i32 -1
  %lnaQq = ptrtoint i64* %lnaQp to i64
  %lnaQr = icmp ult i64 %lnaQq, %SpLim_Arg
  br i1 %lnaQr, label %caO0, label %caO1
caO1:
  %lnaQt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNj_info$def to i64
  %lnaQs = load i64*, i64** %Sp_Var
  %lnaQu = getelementptr inbounds i64, i64* %lnaQs, i32 -1
  store i64 %lnaQt, i64* %lnaQu, !tbaa !1
  %lnaQv = load i64, i64* %R3_Var
  store i64 %lnaQv, i64* %R1_Var
  %lnaQw = load i64*, i64** %Sp_Var
  %lnaQx = getelementptr inbounds i64, i64* %lnaQw, i32 -1
  %lnaQy = ptrtoint i64* %lnaQx to i64
  %lnaQz = inttoptr i64 %lnaQy to i64*
  store i64* %lnaQz, i64** %Sp_Var
  %lnaQA = load i64, i64* %R1_Var
  %lnaQB = and i64 %lnaQA, 7
  %lnaQC = icmp ne i64 %lnaQB, 0
  br i1 %lnaQC, label %uaOe, label %caNk
caNk:
  %lnaQE = load i64, i64* %R1_Var
  %lnaQF = inttoptr i64 %lnaQE to i64*
  %lnaQG = load i64, i64* %lnaQF, !tbaa !3
  %lnaQH = inttoptr i64 %lnaQG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQI = load i64*, i64** %Sp_Var
  %lnaQJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQH( i64* %Base_Arg, i64* %lnaQI, i64* %Hp_Arg, i64 %lnaQJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOe:
  %lnaQK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQL = load i64*, i64** %Sp_Var
  %lnaQM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQK( i64* %Base_Arg, i64* %lnaQL, i64* %Hp_Arg, i64 %lnaQM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caO0:
  %lnaQN = load i64, i64* %R4_Var
  store i64 %lnaQN, i64* %R4_Var
  %lnaQO = load i64, i64* %R3_Var
  store i64 %lnaQO, i64* %R3_Var
  %lnaQP = load i64, i64* %R2_Var
  store i64 %lnaQP, i64* %R2_Var
  %lnaQQ = ptrtoint %Word_zzext_closure_struct* @Word_zzext_closure$def to i64
  store i64 %lnaQQ, i64* %R1_Var
  %lnaQR = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnaQS = bitcast i64* %lnaQR to i64*
  %lnaQT = load i64, i64* %lnaQS, !tbaa !4
  %lnaQU = inttoptr i64 %lnaQT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaQV = load i64*, i64** %Sp_Var
  %lnaQW = load i64, i64* %R1_Var
  %lnaQX = load i64, i64* %R2_Var
  %lnaQY = load i64, i64* %R3_Var
  %lnaQZ = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaQU( i64* %Base_Arg, i64* %lnaQV, i64* %Hp_Arg, i64 %lnaQW, i64 %lnaQX, i64 %lnaQY, i64 %lnaQZ, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNj_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNj_info$def to i8*)
define internal ghccc void @caNj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNj_info$def to i64)),i64 296), i64 0, i64 554050781216}>
{
caNj:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls86J = alloca i64, i32 1
  %lnaR0 = load i64, i64* %R1_Var
  %lnaR1 = and i64 %lnaR0, 7
  switch i64 %lnaR1, label %caNV [i64 1, label %caNV
i64 2, label %caNW
i64 3, label %caNX]
caNV:
  %lnaR2 = load i64, i64* %R1_Var
  %lnaR3 = and i64 %lnaR2, -8
  store i64 %lnaR3, i64* %R1_Var
  %lnaR4 = load i64*, i64** %Sp_Var
  %lnaR5 = getelementptr inbounds i64, i64* %lnaR4, i32 1
  %lnaR6 = ptrtoint i64* %lnaR5 to i64
  %lnaR7 = inttoptr i64 %lnaR6 to i64*
  store i64* %lnaR7, i64** %Sp_Var
  %lnaR9 = load i64, i64* %R1_Var
  %lnaRa = inttoptr i64 %lnaR9 to i64*
  %lnaRb = load i64, i64* %lnaRa, !tbaa !3
  %lnaRc = inttoptr i64 %lnaRb to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRd = load i64*, i64** %Sp_Var
  %lnaRe = load i64*, i64** %Hp_Var
  %lnaRf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRc( i64* %Base_Arg, i64* %lnaRd, i64* %lnaRe, i64 %lnaRf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNW:
  %lnaRg = load i64*, i64** %Hp_Var
  %lnaRh = getelementptr inbounds i64, i64* %lnaRg, i32 5
  %lnaRi = ptrtoint i64* %lnaRh to i64
  %lnaRj = inttoptr i64 %lnaRi to i64*
  store i64* %lnaRj, i64** %Hp_Var
  %lnaRk = load i64*, i64** %Hp_Var
  %lnaRl = ptrtoint i64* %lnaRk to i64
  %lnaRm = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaRn = bitcast i64* %lnaRm to i64*
  %lnaRo = load i64, i64* %lnaRn, !tbaa !4
  %lnaRp = icmp ugt i64 %lnaRl, %lnaRo
  br i1 %lnaRp, label %caO7, label %caO6
caO6:
  %lnaRs = load i64, i64* %R1_Var
  %lnaRt = add i64 %lnaRs, 6
  %lnaRu = inttoptr i64 %lnaRt to i64*
  %lnaRv = load i64, i64* %lnaRu, !tbaa !3
  store i64 %lnaRv, i64* %ls86J
  %lnaRx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86K_info$def to i64
  %lnaRw = load i64*, i64** %Hp_Var
  %lnaRy = getelementptr inbounds i64, i64* %lnaRw, i32 -4
  store i64 %lnaRx, i64* %lnaRy, !tbaa !2
  %lnaRA = load i64, i64* %ls86J
  %lnaRz = load i64*, i64** %Hp_Var
  %lnaRB = getelementptr inbounds i64, i64* %lnaRz, i32 -2
  store i64 %lnaRA, i64* %lnaRB, !tbaa !2
  %lnaRD = ptrtoint i8* @Word_W_con_info to i64
  %lnaRC = load i64*, i64** %Hp_Var
  %lnaRE = getelementptr inbounds i64, i64* %lnaRC, i32 -1
  store i64 %lnaRD, i64* %lnaRE, !tbaa !2
  %lnaRG = load i64*, i64** %Hp_Var
  %lnaRH = getelementptr inbounds i64, i64* %lnaRG, i32 -4
  %lnaRI = ptrtoint i64* %lnaRH to i64
  %lnaRF = load i64*, i64** %Hp_Var
  %lnaRJ = getelementptr inbounds i64, i64* %lnaRF, i32 0
  store i64 %lnaRI, i64* %lnaRJ, !tbaa !2
  %lnaRL = load i64*, i64** %Hp_Var
  %lnaRM = ptrtoint i64* %lnaRL to i64
  %lnaRN = add i64 %lnaRM, -7
  store i64 %lnaRN, i64* %R1_Var
  %lnaRO = load i64*, i64** %Sp_Var
  %lnaRP = getelementptr inbounds i64, i64* %lnaRO, i32 1
  %lnaRQ = ptrtoint i64* %lnaRP to i64
  %lnaRR = inttoptr i64 %lnaRQ to i64*
  store i64* %lnaRR, i64** %Sp_Var
  %lnaRS = load i64*, i64** %Sp_Var
  %lnaRT = getelementptr inbounds i64, i64* %lnaRS, i32 0
  %lnaRU = bitcast i64* %lnaRT to i64*
  %lnaRV = load i64, i64* %lnaRU, !tbaa !1
  %lnaRW = inttoptr i64 %lnaRV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaRX = load i64*, i64** %Sp_Var
  %lnaRY = load i64*, i64** %Hp_Var
  %lnaRZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaRW( i64* %Base_Arg, i64* %lnaRX, i64* %lnaRY, i64 %lnaRZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caO7:
  %lnaS0 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnaS0, !tbaa !4
  %lnaS1 = load i64, i64* %R1_Var
  store i64 %lnaS1, i64* %R1_Var
  %lnaS2 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaS3 = load i64*, i64** %Sp_Var
  %lnaS4 = load i64*, i64** %Hp_Var
  %lnaS5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaS2( i64* %Base_Arg, i64* %lnaS3, i64* %lnaS4, i64 %lnaS5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caNX:
  %lnaS7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNy_info$def to i64
  %lnaS6 = load i64*, i64** %Sp_Var
  %lnaS8 = getelementptr inbounds i64, i64* %lnaS6, i32 0
  store i64 %lnaS7, i64* %lnaS8, !tbaa !1
  %lnaSb = load i64, i64* %R1_Var
  %lnaSc = add i64 %lnaSb, 5
  %lnaSd = inttoptr i64 %lnaSc to i64*
  %lnaSe = load i64, i64* %lnaSd, !tbaa !3
  store i64 %lnaSe, i64* %R1_Var
  %lnaSf = load i64, i64* %R1_Var
  %lnaSg = and i64 %lnaSf, 7
  %lnaSh = icmp ne i64 %lnaSg, 0
  br i1 %lnaSh, label %uaOd, label %caNz
caNz:
  %lnaSj = load i64, i64* %R1_Var
  %lnaSk = inttoptr i64 %lnaSj to i64*
  %lnaSl = load i64, i64* %lnaSk, !tbaa !3
  %lnaSm = inttoptr i64 %lnaSl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSn = load i64*, i64** %Sp_Var
  %lnaSo = load i64*, i64** %Hp_Var
  %lnaSp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSm( i64* %Base_Arg, i64* %lnaSn, i64* %lnaSo, i64 %lnaSp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaOd:
  %lnaSq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNy_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaSr = load i64*, i64** %Sp_Var
  %lnaSs = load i64*, i64** %Hp_Var
  %lnaSt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaSq( i64* %Base_Arg, i64* %lnaSr, i64* %lnaSs, i64 %lnaSt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caNy_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNy_info$def to i8*)
define internal ghccc void @caNy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caNy_info$def to i64)),i64 296), i64 0, i64 4294967328}>
{
caNy:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls86O = alloca i64, i32 1
  %ls86N = alloca i64, i32 1
  %ls86P = alloca i64, i32 1
  %ls86Q = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnaSu = load i64*, i64** %Hp_Var
  %lnaSv = getelementptr inbounds i64, i64* %lnaSu, i32 8
  %lnaSw = ptrtoint i64* %lnaSv to i64
  %lnaSx = inttoptr i64 %lnaSw to i64*
  store i64* %lnaSx, i64** %Hp_Var
  %lnaSy = load i64*, i64** %Hp_Var
  %lnaSz = ptrtoint i64* %lnaSy to i64
  %lnaSA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnaSB = bitcast i64* %lnaSA to i64*
  %lnaSC = load i64, i64* %lnaSB, !tbaa !4
  %lnaSD = icmp ugt i64 %lnaSz, %lnaSC
  br i1 %lnaSD, label %caOc, label %caOb
caOb:
  %lnaSG = load i64, i64* %R1_Var
  %lnaSH = add i64 %lnaSG, 7
  %lnaSI = inttoptr i64 %lnaSH to i64*
  %lnaSJ = load i64, i64* %lnaSI, !tbaa !3
  store i64 %lnaSJ, i64* %ls86O
  %lnaSM = load i64, i64* %R1_Var
  %lnaSN = add i64 %lnaSM, 15
  %lnaSO = inttoptr i64 %lnaSN to i64*
  %lnaSP = load i64, i64* %lnaSO, !tbaa !3
  store i64 %lnaSP, i64* %ls86N
  %lnaSS = load i64, i64* %R1_Var
  %lnaST = add i64 %lnaSS, 23
  %lnaSU = inttoptr i64 %lnaST to i64*
  %lnaSV = load i64, i64* %lnaSU, !tbaa !3
  store i64 %lnaSV, i64* %ls86P
  %lnaSY = load i64, i64* %R1_Var
  %lnaSZ = add i64 %lnaSY, 31
  %lnaT0 = inttoptr i64 %lnaSZ to i64*
  %lnaT1 = load i64, i64* %lnaT0, !tbaa !3
  store i64 %lnaT1, i64* %ls86Q
  %lnaT3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s86V_info$def to i64
  %lnaT2 = load i64*, i64** %Hp_Var
  %lnaT4 = getelementptr inbounds i64, i64* %lnaT2, i32 -7
  store i64 %lnaT3, i64* %lnaT4, !tbaa !2
  %lnaT6 = load i64, i64* %ls86O
  %lnaT5 = load i64*, i64** %Hp_Var
  %lnaT7 = getelementptr inbounds i64, i64* %lnaT5, i32 -5
  store i64 %lnaT6, i64* %lnaT7, !tbaa !2
  %lnaT9 = load i64, i64* %ls86N
  %lnaT8 = load i64*, i64** %Hp_Var
  %lnaTa = getelementptr inbounds i64, i64* %lnaT8, i32 -4
  store i64 %lnaT9, i64* %lnaTa, !tbaa !2
  %lnaTc = load i64, i64* %ls86P
  %lnaTb = load i64*, i64** %Hp_Var
  %lnaTd = getelementptr inbounds i64, i64* %lnaTb, i32 -3
  store i64 %lnaTc, i64* %lnaTd, !tbaa !2
  %lnaTf = load i64, i64* %ls86Q
  %lnaTe = load i64*, i64** %Hp_Var
  %lnaTg = getelementptr inbounds i64, i64* %lnaTe, i32 -2
  store i64 %lnaTf, i64* %lnaTg, !tbaa !2
  %lnaTi = ptrtoint i8* @Word_W_con_info to i64
  %lnaTh = load i64*, i64** %Hp_Var
  %lnaTj = getelementptr inbounds i64, i64* %lnaTh, i32 -1
  store i64 %lnaTi, i64* %lnaTj, !tbaa !2
  %lnaTl = load i64*, i64** %Hp_Var
  %lnaTm = getelementptr inbounds i64, i64* %lnaTl, i32 -7
  %lnaTn = ptrtoint i64* %lnaTm to i64
  %lnaTk = load i64*, i64** %Hp_Var
  %lnaTo = getelementptr inbounds i64, i64* %lnaTk, i32 0
  store i64 %lnaTn, i64* %lnaTo, !tbaa !2
  %lnaTq = load i64*, i64** %Hp_Var
  %lnaTr = ptrtoint i64* %lnaTq to i64
  %lnaTs = add i64 %lnaTr, -7
  store i64 %lnaTs, i64* %R1_Var
  %lnaTt = load i64*, i64** %Sp_Var
  %lnaTu = getelementptr inbounds i64, i64* %lnaTt, i32 1
  %lnaTv = ptrtoint i64* %lnaTu to i64
  %lnaTw = inttoptr i64 %lnaTv to i64*
  store i64* %lnaTw, i64** %Sp_Var
  %lnaTx = load i64*, i64** %Sp_Var
  %lnaTy = getelementptr inbounds i64, i64* %lnaTx, i32 0
  %lnaTz = bitcast i64* %lnaTy to i64*
  %lnaTA = load i64, i64* %lnaTz, !tbaa !1
  %lnaTB = inttoptr i64 %lnaTA to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTC = load i64*, i64** %Sp_Var
  %lnaTD = load i64*, i64** %Hp_Var
  %lnaTE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTB( i64* %Base_Arg, i64* %lnaTC, i64* %lnaTD, i64 %lnaTE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caOc:
  %lnaTF = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 64, i64* %lnaTF, !tbaa !4
  %lnaTG = load i64, i64* %R1_Var
  store i64 %lnaTG, i64* %R1_Var
  %lnaTH = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnaTI = load i64*, i64** %Sp_Var
  %lnaTJ = load i64*, i64** %Hp_Var
  %lnaTK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnaTH( i64* %Base_Arg, i64* %lnaTI, i64* %lnaTJ, i64 %lnaTK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_maxShift_closure_struct = type <{i64, i64}>
@Word_maxShift_closure$def = internal global %Word_maxShift_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 9223372036854775807}>
@Word_maxShift_closure = alias i8* bitcast (%Word_maxShift_closure_struct* @Word_maxShift_closure$def to i8*)
%Word_split4_closure_struct = type <{i64, i64}>
@Word_split4_closure$def = internal global %Word_split4_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 8}>
@Word_split4_closure = alias i8* bitcast (%Word_split4_closure_struct* @Word_split4_closure$def to i8*)
%Word_wlshift_closure_struct = type <{i64, i64}>
%Word_wlshiftzuzdswlshift_closure_struct = type <{i64, i64}>
@Word_wlshift_closure$def = internal global %Word_wlshift_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshift_info$def to i64), i64 0}>
@Word_wlshift_closure = alias i8* bitcast (%Word_wlshift_closure_struct* @Word_wlshift_closure$def to i8*)
@Word_wlshiftzuzdswlshift_closure$def = internal global %Word_wlshiftzuzdswlshift_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshiftzuzdswlshift_info$def to i64), i64 0}>
@Word_wlshiftzuzdswlshift_closure = alias i8* bitcast (%Word_wlshiftzuzdswlshift_closure_struct* @Word_wlshiftzuzdswlshift_closure$def to i8*)
@s877_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s877_info$def to i8*)
define internal ghccc void @s877_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s877_info$def to i64)),i64 328), i64 2, i64 12884901907}>
{
caVQ:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnaZD = load i64*, i64** %Sp_Var
  %lnaZE = getelementptr inbounds i64, i64* %lnaZD, i32 -4
  %lnaZF = ptrtoint i64* %lnaZE to i64
  %lnaZG = icmp ult i64 %lnaZF, %SpLim_Arg
  br i1 %lnaZG, label %caVR, label %caVS
caVS:
  %lnaZI = ptrtoint i8* @stg_upd_frame_info to i64
  %lnaZH = load i64*, i64** %Sp_Var
  %lnaZJ = getelementptr inbounds i64, i64* %lnaZH, i32 -2
  store i64 %lnaZI, i64* %lnaZJ, !tbaa !1
  %lnaZL = load i64, i64* %R1_Var
  %lnaZK = load i64*, i64** %Sp_Var
  %lnaZM = getelementptr inbounds i64, i64* %lnaZK, i32 -1
  store i64 %lnaZL, i64* %lnaZM, !tbaa !1
  %lnaZO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVO_info$def to i64
  %lnaZN = load i64*, i64** %Sp_Var
  %lnaZP = getelementptr inbounds i64, i64* %lnaZN, i32 -4
  store i64 %lnaZO, i64* %lnaZP, !tbaa !1
  %lnaZS = load i64, i64* %R1_Var
  %lnaZT = add i64 %lnaZS, 16
  %lnaZU = inttoptr i64 %lnaZT to i64*
  %lnaZV = load i64, i64* %lnaZU, !tbaa !3
  store i64 %lnaZV, i64* %R2_Var
  %lnaZZ = load i64, i64* %R1_Var
  %lnb00 = add i64 %lnaZZ, 24
  %lnb01 = inttoptr i64 %lnb00 to i64*
  %lnb02 = load i64, i64* %lnb01, !tbaa !3
  %lnaZW = load i64*, i64** %Sp_Var
  %lnb03 = getelementptr inbounds i64, i64* %lnaZW, i32 -3
  store i64 %lnb02, i64* %lnb03, !tbaa !1
  %lnb04 = load i64*, i64** %Sp_Var
  %lnb05 = getelementptr inbounds i64, i64* %lnb04, i32 -4
  %lnb06 = ptrtoint i64* %lnb05 to i64
  %lnb07 = inttoptr i64 %lnb06 to i64*
  store i64* %lnb07, i64** %Sp_Var
  %lnb08 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb09 = load i64*, i64** %Sp_Var
  %lnb0a = load i64, i64* %R1_Var
  %lnb0b = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb08( i64* %Base_Arg, i64* %lnb09, i64* %Hp_Arg, i64 %lnb0a, i64 %lnb0b, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caVR:
  %lnb0c = load i64, i64* %R1_Var
  store i64 %lnb0c, i64* %R1_Var
  %lnb0d = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnb0e = bitcast i64* %lnb0d to i64*
  %lnb0f = load i64, i64* %lnb0e, !tbaa !4
  %lnb0g = inttoptr i64 %lnb0f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0h = load i64*, i64** %Sp_Var
  %lnb0i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0g( i64* %Base_Arg, i64* %lnb0h, i64* %Hp_Arg, i64 %lnb0i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caVO_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVO_info$def to i8*)
define internal ghccc void @caVO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVO_info$def to i64)),i64 328), i64 1, i64 12884901920}>
{
caVO:
  %ls872 = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb0j = load i64*, i64** %Sp_Var
  %lnb0k = getelementptr inbounds i64, i64* %lnb0j, i32 1
  %lnb0l = bitcast i64* %lnb0k to i64*
  %lnb0m = load i64, i64* %lnb0l, !tbaa !1
  store i64 %lnb0m, i64* %ls872
  %lnb0n = icmp sge i64 %R1_Arg, 0
  %lnb0o = zext i1 %lnb0n to i64
  switch i64 %lnb0o, label %caW1 [i64 0, label %caW1
i64 1, label %caW2]
caW1:
  %lnb0p = sub i64 0, %R1_Arg
  store i64 %lnb0p, i64* %R3_Var
  %lnb0q = load i64, i64* %ls872
  store i64 %lnb0q, i64* %R2_Var
  %lnb0r = load i64*, i64** %Sp_Var
  %lnb0s = getelementptr inbounds i64, i64* %lnb0r, i32 2
  %lnb0t = ptrtoint i64* %lnb0s to i64
  %lnb0u = inttoptr i64 %lnb0t to i64*
  store i64* %lnb0u, i64** %Sp_Var
  %lnb0v = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0w = load i64*, i64** %Sp_Var
  %lnb0x = load i64, i64* %R2_Var
  %lnb0y = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0v( i64* %Base_Arg, i64* %lnb0w, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb0x, i64 %lnb0y, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caW2:
  store i64 %R1_Arg, i64* %R3_Var
  %lnb0z = load i64, i64* %ls872
  store i64 %lnb0z, i64* %R2_Var
  %lnb0A = load i64*, i64** %Sp_Var
  %lnb0B = getelementptr inbounds i64, i64* %lnb0A, i32 2
  %lnb0C = ptrtoint i64* %lnb0B to i64
  %lnb0D = inttoptr i64 %lnb0C to i64*
  store i64* %lnb0D, i64** %Sp_Var
  %lnb0E = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb0F = load i64*, i64** %Sp_Var
  %lnb0G = load i64, i64* %R2_Var
  %lnb0H = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb0E( i64* %Base_Arg, i64* %lnb0F, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb0G, i64 %lnb0H, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s87q_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s87q_info$def to i8*)
define internal ghccc void @s87q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s87q_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
caWw:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb0I = load i64*, i64** %Sp_Var
  %lnb0J = getelementptr inbounds i64, i64* %lnb0I, i32 -7
  %lnb0K = ptrtoint i64* %lnb0J to i64
  %lnb0L = icmp ult i64 %lnb0K, %SpLim_Arg
  br i1 %lnb0L, label %caWA, label %caWB
caWB:
  %lnb0N = ptrtoint i8* @stg_upd_frame_info to i64
  %lnb0M = load i64*, i64** %Sp_Var
  %lnb0O = getelementptr inbounds i64, i64* %lnb0M, i32 -2
  store i64 %lnb0N, i64* %lnb0O, !tbaa !1
  %lnb0Q = load i64, i64* %R1_Var
  %lnb0P = load i64*, i64** %Sp_Var
  %lnb0R = getelementptr inbounds i64, i64* %lnb0P, i32 -1
  store i64 %lnb0Q, i64* %lnb0R, !tbaa !1
  %lnb0T = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWr_info$def to i64
  %lnb0S = load i64*, i64** %Sp_Var
  %lnb0U = getelementptr inbounds i64, i64* %lnb0S, i32 -7
  store i64 %lnb0T, i64* %lnb0U, !tbaa !1
  %lnb0Y = load i64, i64* %R1_Var
  %lnb0Z = add i64 %lnb0Y, 24
  %lnb10 = inttoptr i64 %lnb0Z to i64*
  %lnb11 = load i64, i64* %lnb10, !tbaa !3
  %lnb0V = load i64*, i64** %Sp_Var
  %lnb12 = getelementptr inbounds i64, i64* %lnb0V, i32 -6
  store i64 %lnb11, i64* %lnb12, !tbaa !1
  %lnb16 = load i64, i64* %R1_Var
  %lnb17 = add i64 %lnb16, 16
  %lnb18 = inttoptr i64 %lnb17 to i64*
  %lnb19 = load i64, i64* %lnb18, !tbaa !3
  %lnb13 = load i64*, i64** %Sp_Var
  %lnb1a = getelementptr inbounds i64, i64* %lnb13, i32 -5
  store i64 %lnb19, i64* %lnb1a, !tbaa !1
  %lnb1e = load i64, i64* %R1_Var
  %lnb1f = add i64 %lnb1e, 32
  %lnb1g = inttoptr i64 %lnb1f to i64*
  %lnb1h = load i64, i64* %lnb1g, !tbaa !3
  %lnb1b = load i64*, i64** %Sp_Var
  %lnb1i = getelementptr inbounds i64, i64* %lnb1b, i32 -4
  store i64 %lnb1h, i64* %lnb1i, !tbaa !1
  %lnb1m = load i64, i64* %R1_Var
  %lnb1n = add i64 %lnb1m, 40
  %lnb1o = inttoptr i64 %lnb1n to i64*
  %lnb1p = load i64, i64* %lnb1o, !tbaa !3
  %lnb1j = load i64*, i64** %Sp_Var
  %lnb1q = getelementptr inbounds i64, i64* %lnb1j, i32 -3
  store i64 %lnb1p, i64* %lnb1q, !tbaa !1
  %lnb1r = load i64*, i64** %Sp_Var
  %lnb1s = getelementptr inbounds i64, i64* %lnb1r, i32 -7
  %lnb1t = ptrtoint i64* %lnb1s to i64
  %lnb1u = inttoptr i64 %lnb1t to i64*
  store i64* %lnb1u, i64** %Sp_Var
  %lnb1v = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1w = load i64*, i64** %Sp_Var
  %lnb1x = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1v( i64* %Base_Arg, i64* %lnb1w, i64* %Hp_Arg, i64 %lnb1x, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caWA:
  %lnb1y = load i64, i64* %R1_Var
  store i64 %lnb1y, i64* %R1_Var
  %lnb1z = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnb1A = bitcast i64* %lnb1z to i64*
  %lnb1B = load i64, i64* %lnb1A, !tbaa !4
  %lnb1C = inttoptr i64 %lnb1B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb1D = load i64*, i64** %Sp_Var
  %lnb1E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb1C( i64* %Base_Arg, i64* %lnb1D, i64* %Hp_Arg, i64 %lnb1E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caWr_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWr_info$def to i8*)
define internal ghccc void @caWr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWr_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
caWr:
  %ls87i = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb1F = load i64*, i64** %Sp_Var
  %lnb1G = getelementptr inbounds i64, i64* %lnb1F, i32 4
  %lnb1H = bitcast i64* %lnb1G to i64*
  %lnb1I = load i64, i64* %lnb1H, !tbaa !1
  store i64 %lnb1I, i64* %ls87i
  %lnb1K = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWz_info$def to i64
  %lnb1J = load i64*, i64** %Sp_Var
  %lnb1L = getelementptr inbounds i64, i64* %lnb1J, i32 4
  store i64 %lnb1K, i64* %lnb1L, !tbaa !1
  %lnb1M = load i64, i64* %ls87i
  store i64 %lnb1M, i64* %R5_Var
  %lnb1N = load i64*, i64** %Sp_Var
  %lnb1O = getelementptr inbounds i64, i64* %lnb1N, i32 3
  %lnb1P = bitcast i64* %lnb1O to i64*
  %lnb1Q = load i64, i64* %lnb1P, !tbaa !1
  store i64 %lnb1Q, i64* %R4_Var
  %lnb1R = load i64*, i64** %Sp_Var
  %lnb1S = getelementptr inbounds i64, i64* %lnb1R, i32 2
  %lnb1T = bitcast i64* %lnb1S to i64*
  %lnb1U = load i64, i64* %lnb1T, !tbaa !1
  store i64 %lnb1U, i64* %R3_Var
  %lnb1V = load i64*, i64** %Sp_Var
  %lnb1W = getelementptr inbounds i64, i64* %lnb1V, i32 1
  %lnb1X = bitcast i64* %lnb1W to i64*
  %lnb1Y = load i64, i64* %lnb1X, !tbaa !1
  store i64 %lnb1Y, i64* %R2_Var
  %lnb1Z = load i64*, i64** %Sp_Var
  %lnb20 = getelementptr inbounds i64, i64* %lnb1Z, i32 4
  %lnb21 = ptrtoint i64* %lnb20 to i64
  %lnb22 = inttoptr i64 %lnb21 to i64*
  store i64* %lnb22, i64** %Sp_Var
  %lnb23 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb24 = load i64*, i64** %Sp_Var
  %lnb25 = load i64, i64* %R2_Var
  %lnb26 = load i64, i64* %R3_Var
  %lnb27 = load i64, i64* %R4_Var
  %lnb28 = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb23( i64* %Base_Arg, i64* %lnb24, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb25, i64 %lnb26, i64 %lnb27, i64 %lnb28, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caWz_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWz_info$def to i8*)
define internal ghccc void @caWz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
caWz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb29 = load i64, i64* %R1_Var
  %lnb2a = and i64 %lnb29, -8
  store i64 %lnb2a, i64* %R1_Var
  %lnb2b = load i64*, i64** %Sp_Var
  %lnb2c = getelementptr inbounds i64, i64* %lnb2b, i32 1
  %lnb2d = ptrtoint i64* %lnb2c to i64
  %lnb2e = inttoptr i64 %lnb2d to i64*
  store i64* %lnb2e, i64** %Sp_Var
  %lnb2g = load i64, i64* %R1_Var
  %lnb2h = inttoptr i64 %lnb2g to i64*
  %lnb2i = load i64, i64* %lnb2h, !tbaa !3
  %lnb2j = inttoptr i64 %lnb2i to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2k = load i64*, i64** %Sp_Var
  %lnb2l = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2j( i64* %Base_Arg, i64* %lnb2k, i64* %Hp_Arg, i64 %lnb2l, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wlshift_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshift_info$def to i8*)
define ghccc void @Word_wlshift_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshift_info$def to i64)),i64 296), i64 12884901911, i64 0, i64 8866672219783183}>
{
caWE:
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb2m = load i64*, i64** %Sp_Var
  %lnb2n = getelementptr inbounds i64, i64* %lnb2m, i32 -8
  %lnb2o = ptrtoint i64* %lnb2n to i64
  %lnb2p = icmp uge i64 %lnb2o, %SpLim_Arg
  br i1 %lnb2p, label %uaYn, label %caWF
caWF:
  %lnb2q = load i64, i64* %R4_Var
  store i64 %lnb2q, i64* %R4_Var
  %lnb2r = load i64, i64* %R3_Var
  store i64 %lnb2r, i64* %R3_Var
  %lnb2s = load i64, i64* %R2_Var
  store i64 %lnb2s, i64* %R2_Var
  %lnb2t = ptrtoint %Word_wlshift_closure_struct* @Word_wlshift_closure$def to i64
  store i64 %lnb2t, i64* %R1_Var
  %lnb2u = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnb2v = bitcast i64* %lnb2u to i64*
  %lnb2w = load i64, i64* %lnb2v, !tbaa !4
  %lnb2x = inttoptr i64 %lnb2w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2y = load i64*, i64** %Sp_Var
  %lnb2z = load i64, i64* %R1_Var
  %lnb2A = load i64, i64* %R2_Var
  %lnb2B = load i64, i64* %R3_Var
  %lnb2C = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2x( i64* %Base_Arg, i64* %lnb2y, i64* %Hp_Arg, i64 %lnb2z, i64 %lnb2A, i64 %lnb2B, i64 %lnb2C, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaYn:
  %lnb2E = load i64, i64* %R2_Var
  %lnb2D = load i64*, i64** %Sp_Var
  %lnb2F = getelementptr inbounds i64, i64* %lnb2D, i32 -3
  store i64 %lnb2E, i64* %lnb2F, !tbaa !1
  %lnb2H = load i64, i64* %R3_Var
  %lnb2G = load i64*, i64** %Sp_Var
  %lnb2I = getelementptr inbounds i64, i64* %lnb2G, i32 -2
  store i64 %lnb2H, i64* %lnb2I, !tbaa !1
  %lnb2K = load i64, i64* %R4_Var
  %lnb2J = load i64*, i64** %Sp_Var
  %lnb2L = getelementptr inbounds i64, i64* %lnb2J, i32 -1
  store i64 %lnb2K, i64* %lnb2L, !tbaa !1
  %lnb2M = load i64*, i64** %Sp_Var
  %lnb2N = getelementptr inbounds i64, i64* %lnb2M, i32 -3
  %lnb2O = ptrtoint i64* %lnb2N to i64
  %lnb2P = inttoptr i64 %lnb2O to i64*
  store i64* %lnb2P, i64** %Sp_Var
  %lnb2Q = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVw_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb2R = load i64*, i64** %Sp_Var
  %lnb2S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb2Q( i64* %Base_Arg, i64* %lnb2R, i64* %Hp_Arg, i64 %lnb2S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caVw_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVw_entry$def to i8*)
define internal ghccc void @caVw_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
caVw:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb2U = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVz_info$def to i64
  %lnb2T = load i64*, i64** %Sp_Var
  %lnb2V = getelementptr inbounds i64, i64* %lnb2T, i32 -1
  store i64 %lnb2U, i64* %lnb2V, !tbaa !1
  %lnb2W = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnb2X = add i64 %lnb2W, 1
  store i64 %lnb2X, i64* %R3_Var
  %lnb2Y = load i64*, i64** %Sp_Var
  %lnb2Z = getelementptr inbounds i64, i64* %lnb2Y, i32 2
  %lnb30 = bitcast i64* %lnb2Z to i64*
  %lnb31 = load i64, i64* %lnb30, !tbaa !1
  store i64 %lnb31, i64* %R2_Var
  %lnb32 = load i64*, i64** %Sp_Var
  %lnb33 = getelementptr inbounds i64, i64* %lnb32, i32 -1
  %lnb34 = ptrtoint i64* %lnb33 to i64
  %lnb35 = inttoptr i64 %lnb34 to i64*
  store i64* %lnb35, i64** %Sp_Var
  %lnb36 = bitcast i8* @integerzmgmp_GHCziIntegerziType_gtIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb37 = load i64*, i64** %Sp_Var
  %lnb38 = load i64, i64* %R2_Var
  %lnb39 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb36( i64* %Base_Arg, i64* %lnb37, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb38, i64 %lnb39, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caVz_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVz_info$def to i8*)
define internal ghccc void @caVz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVz_info$def to i64)),i64 296), i64 3, i64 8866672219783200}>
{
caVz:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnb3a = load i64, i64* %R1_Var
  switch i64 %lnb3a, label %caWJ [i64 0, label %caWJ
i64 1, label %caYf]
caWJ:
  %lnb3b = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVF_info$def to i64
  %lnb3c = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb3b, i64* %lnb3c, !tbaa !1
  %lnb3d = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb3e = bitcast i64* %lnb3d to i64*
  %lnb3f = load i64, i64* %lnb3e, !tbaa !1
  store i64 %lnb3f, i64* %R1_Var
  %lnb3g = load i64, i64* %R1_Var
  %lnb3h = and i64 %lnb3g, 7
  %lnb3i = icmp ne i64 %lnb3h, 0
  br i1 %lnb3i, label %uaYr, label %caVG
caVG:
  %lnb3k = load i64, i64* %R1_Var
  %lnb3l = inttoptr i64 %lnb3k to i64*
  %lnb3m = load i64, i64* %lnb3l, !tbaa !3
  %lnb3n = inttoptr i64 %lnb3m to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3n( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb3o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaYr:
  %lnb3p = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3p( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb3q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caYf:
  %lnb3r = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYa_info$def to i64
  %lnb3s = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb3r, i64* %lnb3s, !tbaa !1
  %lnb3t = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnb3u = add i64 %lnb3t, 1
  store i64 %lnb3u, i64* %R3_Var
  %lnb3v = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  %lnb3w = bitcast i64* %lnb3v to i64*
  %lnb3x = load i64, i64* %lnb3w, !tbaa !1
  store i64 %lnb3x, i64* %R2_Var
  %lnb3y = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3z = load i64, i64* %R1_Var
  %lnb3A = load i64, i64* %R2_Var
  %lnb3B = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3y( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnb3z, i64 %lnb3A, i64 %lnb3B, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caYa_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYa_info$def to i8*)
define internal ghccc void @caYa_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYa_info$def to i64)),i64 296), i64 259, i64 8866672219783200}>
{
caYa:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnb3C = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYe_info$def to i64
  %lnb3D = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb3C, i64* %lnb3D, !tbaa !1
  %lnb3E = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnb3F = add i64 %lnb3E, 1
  store i64 %lnb3F, i64* %R4_Var
  %lnb3G = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnb3H = bitcast i64* %lnb3G to i64*
  %lnb3I = load i64, i64* %lnb3H, !tbaa !1
  store i64 %lnb3I, i64* %R3_Var
  %lnb3J = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnb3K = bitcast i64* %lnb3J to i64*
  %lnb3L = load i64, i64* %lnb3K, !tbaa !1
  store i64 %lnb3L, i64* %R2_Var
  %lnb3M = getelementptr inbounds i64, i64* %Sp_Arg, i32 3
  store i64 %R1_Arg, i64* %lnb3M, !tbaa !1
  %lnb3N = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb3O = load i64, i64* %R2_Var
  %lnb3P = load i64, i64* %R3_Var
  %lnb3Q = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb3N( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb3O, i64 %lnb3P, i64 %lnb3Q, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caYe_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYe_info$def to i8*)
define internal ghccc void @caYe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYe_info$def to i64)),i64 296), i64 131, i64 8866672219783200}>
{
caYe:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb3S = load i64*, i64** %Sp_Var
  %lnb3T = getelementptr inbounds i64, i64* %lnb3S, i32 1
  %lnb3U = bitcast i64* %lnb3T to i64*
  %lnb3V = load i64, i64* %lnb3U, !tbaa !1
  %lnb3R = load i64*, i64** %Sp_Var
  %lnb3W = getelementptr inbounds i64, i64* %lnb3R, i32 1
  store i64 %lnb3V, i64* %lnb3W, !tbaa !1
  %lnb3X = load i64*, i64** %Sp_Var
  %lnb3Y = getelementptr inbounds i64, i64* %lnb3X, i32 2
  store i64 %R1_Arg, i64* %lnb3Y, !tbaa !1
  %lnb40 = load i64*, i64** %Sp_Var
  %lnb41 = getelementptr inbounds i64, i64* %lnb40, i32 3
  %lnb42 = bitcast i64* %lnb41 to i64*
  %lnb43 = load i64, i64* %lnb42, !tbaa !1
  %lnb3Z = load i64*, i64** %Sp_Var
  %lnb44 = getelementptr inbounds i64, i64* %lnb3Z, i32 3
  store i64 %lnb43, i64* %lnb44, !tbaa !1
  %lnb45 = load i64*, i64** %Sp_Var
  %lnb46 = getelementptr inbounds i64, i64* %lnb45, i32 1
  %lnb47 = ptrtoint i64* %lnb46 to i64
  %lnb48 = inttoptr i64 %lnb47 to i64*
  store i64* %lnb48, i64** %Sp_Var
  %lnb49 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVw_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb4a = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb49( i64* %Base_Arg, i64* %lnb4a, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caVF_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVF_info$def to i8*)
define internal ghccc void @caVF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caVF_info$def to i64)),i64 296), i64 131, i64 6614872406097952}>
{
caVF:
  %ls86Y = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls872 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnb4b = load i64*, i64** %Sp_Var
  %lnb4c = getelementptr inbounds i64, i64* %lnb4b, i32 3
  %lnb4d = bitcast i64* %lnb4c to i64*
  %lnb4e = load i64, i64* %lnb4d, !tbaa !1
  store i64 %lnb4e, i64* %ls86Y
  %lnb4f = load i64, i64* %R1_Var
  %lnb4g = and i64 %lnb4f, 7
  switch i64 %lnb4g, label %caWM [i64 1, label %caWM
i64 2, label %caWT
i64 3, label %caXd]
caWM:
  %lnb4h = load i64*, i64** %Hp_Var
  %lnb4i = getelementptr inbounds i64, i64* %lnb4h, i32 6
  %lnb4j = ptrtoint i64* %lnb4i to i64
  %lnb4k = inttoptr i64 %lnb4j to i64*
  store i64* %lnb4k, i64** %Hp_Var
  %lnb4l = load i64*, i64** %Hp_Var
  %lnb4m = ptrtoint i64* %lnb4l to i64
  %lnb4n = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnb4o = bitcast i64* %lnb4n to i64*
  %lnb4p = load i64, i64* %lnb4o, !tbaa !4
  %lnb4q = icmp ugt i64 %lnb4m, %lnb4p
  br i1 %lnb4q, label %caWP, label %caWO
caWO:
  %lnb4t = load i64, i64* %R1_Var
  %lnb4u = add i64 %lnb4t, 7
  %lnb4v = inttoptr i64 %lnb4u to i64*
  %lnb4w = load i64, i64* %lnb4v, !tbaa !3
  store i64 %lnb4w, i64* %ls872
  %lnb4y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s877_info$def to i64
  %lnb4x = load i64*, i64** %Hp_Var
  %lnb4z = getelementptr inbounds i64, i64* %lnb4x, i32 -5
  store i64 %lnb4y, i64* %lnb4z, !tbaa !2
  %lnb4B = load i64, i64* %ls86Y
  %lnb4A = load i64*, i64** %Hp_Var
  %lnb4C = getelementptr inbounds i64, i64* %lnb4A, i32 -3
  store i64 %lnb4B, i64* %lnb4C, !tbaa !2
  %lnb4E = load i64, i64* %ls872
  %lnb4D = load i64*, i64** %Hp_Var
  %lnb4F = getelementptr inbounds i64, i64* %lnb4D, i32 -2
  store i64 %lnb4E, i64* %lnb4F, !tbaa !2
  %lnb4H = ptrtoint i8* @Word_W_con_info to i64
  %lnb4G = load i64*, i64** %Hp_Var
  %lnb4I = getelementptr inbounds i64, i64* %lnb4G, i32 -1
  store i64 %lnb4H, i64* %lnb4I, !tbaa !2
  %lnb4K = load i64*, i64** %Hp_Var
  %lnb4L = getelementptr inbounds i64, i64* %lnb4K, i32 -5
  %lnb4M = ptrtoint i64* %lnb4L to i64
  %lnb4J = load i64*, i64** %Hp_Var
  %lnb4N = getelementptr inbounds i64, i64* %lnb4J, i32 0
  store i64 %lnb4M, i64* %lnb4N, !tbaa !2
  %lnb4P = load i64*, i64** %Hp_Var
  %lnb4Q = ptrtoint i64* %lnb4P to i64
  %lnb4R = add i64 %lnb4Q, -7
  store i64 %lnb4R, i64* %R1_Var
  %lnb4S = load i64*, i64** %Sp_Var
  %lnb4T = getelementptr inbounds i64, i64* %lnb4S, i32 4
  %lnb4U = ptrtoint i64* %lnb4T to i64
  %lnb4V = inttoptr i64 %lnb4U to i64*
  store i64* %lnb4V, i64** %Sp_Var
  %lnb4W = load i64*, i64** %Sp_Var
  %lnb4X = getelementptr inbounds i64, i64* %lnb4W, i32 0
  %lnb4Y = bitcast i64* %lnb4X to i64*
  %lnb4Z = load i64, i64* %lnb4Y, !tbaa !1
  %lnb50 = inttoptr i64 %lnb4Z to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb51 = load i64*, i64** %Sp_Var
  %lnb52 = load i64*, i64** %Hp_Var
  %lnb53 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb50( i64* %Base_Arg, i64* %lnb51, i64* %lnb52, i64 %lnb53, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caWP:
  %lnb54 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnb54, !tbaa !4
  %lnb55 = load i64, i64* %R1_Var
  store i64 %lnb55, i64* %R1_Var
  %lnb56 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb57 = load i64*, i64** %Sp_Var
  %lnb58 = load i64*, i64** %Hp_Var
  %lnb59 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb56( i64* %Base_Arg, i64* %lnb57, i64* %lnb58, i64 %lnb59, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caWT:
  %lnb5b = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWR_info$def to i64
  %lnb5a = load i64*, i64** %Sp_Var
  %lnb5c = getelementptr inbounds i64, i64* %lnb5a, i32 2
  store i64 %lnb5b, i64* %lnb5c, !tbaa !1
  %lnb5d = load i64, i64* %ls86Y
  store i64 %lnb5d, i64* %R2_Var
  %lnb5h = load i64, i64* %R1_Var
  %lnb5i = add i64 %lnb5h, 6
  %lnb5j = inttoptr i64 %lnb5i to i64*
  %lnb5k = load i64, i64* %lnb5j, !tbaa !3
  %lnb5e = load i64*, i64** %Sp_Var
  %lnb5l = getelementptr inbounds i64, i64* %lnb5e, i32 3
  store i64 %lnb5k, i64* %lnb5l, !tbaa !1
  %lnb5m = load i64*, i64** %Sp_Var
  %lnb5n = getelementptr inbounds i64, i64* %lnb5m, i32 2
  %lnb5o = ptrtoint i64* %lnb5n to i64
  %lnb5p = inttoptr i64 %lnb5o to i64*
  store i64* %lnb5p, i64** %Sp_Var
  %lnb5q = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5r = load i64*, i64** %Sp_Var
  %lnb5s = load i64*, i64** %Hp_Var
  %lnb5t = load i64, i64* %R1_Var
  %lnb5u = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5q( i64* %Base_Arg, i64* %lnb5r, i64* %lnb5s, i64 %lnb5t, i64 %lnb5u, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caXd:
  %lnb5w = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caW8_info$def to i64
  %lnb5v = load i64*, i64** %Sp_Var
  %lnb5x = getelementptr inbounds i64, i64* %lnb5v, i32 0
  store i64 %lnb5w, i64* %lnb5x, !tbaa !1
  %lnb5A = load i64, i64* %R1_Var
  %lnb5B = add i64 %lnb5A, 5
  %lnb5C = inttoptr i64 %lnb5B to i64*
  %lnb5D = load i64, i64* %lnb5C, !tbaa !3
  store i64 %lnb5D, i64* %R1_Var
  %lnb5E = load i64, i64* %R1_Var
  %lnb5F = and i64 %lnb5E, 7
  %lnb5G = icmp ne i64 %lnb5F, 0
  br i1 %lnb5G, label %uaYs, label %caW9
caW9:
  %lnb5I = load i64, i64* %R1_Var
  %lnb5J = inttoptr i64 %lnb5I to i64*
  %lnb5K = load i64, i64* %lnb5J, !tbaa !3
  %lnb5L = inttoptr i64 %lnb5K to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5M = load i64*, i64** %Sp_Var
  %lnb5N = load i64*, i64** %Hp_Var
  %lnb5O = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5L( i64* %Base_Arg, i64* %lnb5M, i64* %lnb5N, i64 %lnb5O, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaYs:
  %lnb5P = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caW8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb5Q = load i64*, i64** %Sp_Var
  %lnb5R = load i64*, i64** %Hp_Var
  %lnb5S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb5P( i64* %Base_Arg, i64* %lnb5Q, i64* %lnb5R, i64 %lnb5S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caW8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caW8_info$def to i8*)
define internal ghccc void @caW8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caW8_info$def to i64)),i64 296), i64 131, i64 6614666247667744}>
{
caW8:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb5U = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWd_info$def to i64
  %lnb5T = load i64*, i64** %Sp_Var
  %lnb5V = getelementptr inbounds i64, i64* %lnb5T, i32 -4
  store i64 %lnb5U, i64* %lnb5V, !tbaa !1
  %lnb5W = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lnb5X = add i64 %lnb5W, 1
  store i64 %lnb5X, i64* %R3_Var
  %lnb5Y = load i64*, i64** %Sp_Var
  %lnb5Z = getelementptr inbounds i64, i64* %lnb5Y, i32 3
  %lnb60 = bitcast i64* %lnb5Z to i64*
  %lnb61 = load i64, i64* %lnb60, !tbaa !1
  store i64 %lnb61, i64* %R2_Var
  %lnb63 = add i64 %R1_Arg, 7
  %lnb64 = inttoptr i64 %lnb63 to i64*
  %lnb65 = load i64, i64* %lnb64, !tbaa !3
  %lnb62 = load i64*, i64** %Sp_Var
  %lnb66 = getelementptr inbounds i64, i64* %lnb62, i32 -3
  store i64 %lnb65, i64* %lnb66, !tbaa !1
  %lnb68 = add i64 %R1_Arg, 23
  %lnb69 = inttoptr i64 %lnb68 to i64*
  %lnb6a = load i64, i64* %lnb69, !tbaa !3
  %lnb67 = load i64*, i64** %Sp_Var
  %lnb6b = getelementptr inbounds i64, i64* %lnb67, i32 -2
  store i64 %lnb6a, i64* %lnb6b, !tbaa !1
  %lnb6d = add i64 %R1_Arg, 31
  %lnb6e = inttoptr i64 %lnb6d to i64*
  %lnb6f = load i64, i64* %lnb6e, !tbaa !3
  %lnb6c = load i64*, i64** %Sp_Var
  %lnb6g = getelementptr inbounds i64, i64* %lnb6c, i32 -1
  store i64 %lnb6f, i64* %lnb6g, !tbaa !1
  %lnb6i = add i64 %R1_Arg, 15
  %lnb6j = inttoptr i64 %lnb6i to i64*
  %lnb6k = load i64, i64* %lnb6j, !tbaa !3
  %lnb6h = load i64*, i64** %Sp_Var
  %lnb6l = getelementptr inbounds i64, i64* %lnb6h, i32 0
  store i64 %lnb6k, i64* %lnb6l, !tbaa !1
  %lnb6m = load i64*, i64** %Sp_Var
  %lnb6n = getelementptr inbounds i64, i64* %lnb6m, i32 2
  store i64 %R1_Arg, i64* %lnb6n, !tbaa !1
  %lnb6o = load i64*, i64** %Sp_Var
  %lnb6p = getelementptr inbounds i64, i64* %lnb6o, i32 -4
  %lnb6q = ptrtoint i64* %lnb6p to i64
  %lnb6r = inttoptr i64 %lnb6q to i64*
  store i64* %lnb6r, i64** %Sp_Var
  %lnb6s = bitcast i8* @integerzmgmp_GHCziIntegerziType_remInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6t = load i64*, i64** %Sp_Var
  %lnb6u = load i64, i64* %R2_Var
  %lnb6v = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6s( i64* %Base_Arg, i64* %lnb6t, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb6u, i64 %lnb6v, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caWd_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWd_info$def to i8*)
define internal ghccc void @caWd_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWd_info$def to i64)),i64 296), i64 903, i64 6051716294246432}>
{
caWd:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnb6w = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWh_info$def to i64
  %lnb6x = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb6w, i64* %lnb6x, !tbaa !1
  %lnb6y = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lnb6z = add i64 %lnb6y, 1
  store i64 %lnb6z, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnb6A = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb6B = load i64, i64* %R2_Var
  %lnb6C = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb6A( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb6B, i64 %lnb6C, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caWh_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWh_info$def to i8*)
define internal ghccc void @caWh_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWh_info$def to i64)),i64 296), i64 903, i64 6051716294246432}>
{
caWh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls86W = alloca i64, i32 1
  %ls86Y = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb6D = load i64*, i64** %Hp_Var
  %lnb6E = getelementptr inbounds i64, i64* %lnb6D, i32 6
  %lnb6F = ptrtoint i64* %lnb6E to i64
  %lnb6G = inttoptr i64 %lnb6F to i64*
  store i64* %lnb6G, i64** %Hp_Var
  %lnb6H = load i64*, i64** %Hp_Var
  %lnb6I = ptrtoint i64* %lnb6H to i64
  %lnb6J = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnb6K = bitcast i64* %lnb6J to i64*
  %lnb6L = load i64, i64* %lnb6K, !tbaa !4
  %lnb6M = icmp ugt i64 %lnb6I, %lnb6L
  br i1 %lnb6M, label %caXi, label %caXh
caXh:
  %lnb6N = load i64*, i64** %Sp_Var
  %lnb6O = getelementptr inbounds i64, i64* %lnb6N, i32 5
  %lnb6P = bitcast i64* %lnb6O to i64*
  %lnb6Q = load i64, i64* %lnb6P, !tbaa !1
  store i64 %lnb6Q, i64* %ls86W
  %lnb6R = load i64*, i64** %Sp_Var
  %lnb6S = getelementptr inbounds i64, i64* %lnb6R, i32 7
  %lnb6T = bitcast i64* %lnb6S to i64*
  %lnb6U = load i64, i64* %lnb6T, !tbaa !1
  store i64 %lnb6U, i64* %ls86Y
  %lnb6V = load i64, i64* %R1_Var
  switch i64 %lnb6V, label %caXk [i64 0, label %caXk
i64 1, label %caXL]
caXk:
  %lnb6X = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s87q_info$def to i64
  %lnb6W = load i64*, i64** %Hp_Var
  %lnb6Y = getelementptr inbounds i64, i64* %lnb6W, i32 -5
  store i64 %lnb6X, i64* %lnb6Y, !tbaa !2
  %lnb70 = load i64*, i64** %Sp_Var
  %lnb71 = getelementptr inbounds i64, i64* %lnb70, i32 1
  %lnb72 = bitcast i64* %lnb71 to i64*
  %lnb73 = load i64, i64* %lnb72, !tbaa !1
  %lnb6Z = load i64*, i64** %Hp_Var
  %lnb74 = getelementptr inbounds i64, i64* %lnb6Z, i32 -3
  store i64 %lnb73, i64* %lnb74, !tbaa !2
  %lnb76 = load i64*, i64** %Sp_Var
  %lnb77 = getelementptr inbounds i64, i64* %lnb76, i32 4
  %lnb78 = bitcast i64* %lnb77 to i64*
  %lnb79 = load i64, i64* %lnb78, !tbaa !1
  %lnb75 = load i64*, i64** %Hp_Var
  %lnb7a = getelementptr inbounds i64, i64* %lnb75, i32 -2
  store i64 %lnb79, i64* %lnb7a, !tbaa !2
  %lnb7c = load i64*, i64** %Sp_Var
  %lnb7d = getelementptr inbounds i64, i64* %lnb7c, i32 2
  %lnb7e = bitcast i64* %lnb7d to i64*
  %lnb7f = load i64, i64* %lnb7e, !tbaa !1
  %lnb7b = load i64*, i64** %Hp_Var
  %lnb7g = getelementptr inbounds i64, i64* %lnb7b, i32 -1
  store i64 %lnb7f, i64* %lnb7g, !tbaa !2
  %lnb7i = load i64*, i64** %Sp_Var
  %lnb7j = getelementptr inbounds i64, i64* %lnb7i, i32 3
  %lnb7k = bitcast i64* %lnb7j to i64*
  %lnb7l = load i64, i64* %lnb7k, !tbaa !1
  %lnb7h = load i64*, i64** %Hp_Var
  %lnb7m = getelementptr inbounds i64, i64* %lnb7h, i32 0
  store i64 %lnb7l, i64* %lnb7m, !tbaa !2
  %lnb7n = load i64, i64* %ls86W
  store i64 %lnb7n, i64* %R4_Var
  %lnb7o = load i64*, i64** %Hp_Var
  %lnb7p = getelementptr inbounds i64, i64* %lnb7o, i32 -5
  %lnb7q = ptrtoint i64* %lnb7p to i64
  store i64 %lnb7q, i64* %R3_Var
  %lnb7r = load i64, i64* %ls86Y
  store i64 %lnb7r, i64* %R2_Var
  %lnb7s = load i64*, i64** %Sp_Var
  %lnb7t = getelementptr inbounds i64, i64* %lnb7s, i32 8
  %lnb7u = ptrtoint i64* %lnb7t to i64
  %lnb7v = inttoptr i64 %lnb7u to i64*
  store i64* %lnb7v, i64** %Sp_Var
  %lnb7w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshiftzuzdswlshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7x = load i64*, i64** %Sp_Var
  %lnb7y = load i64*, i64** %Hp_Var
  %lnb7z = load i64, i64* %R1_Var
  %lnb7A = load i64, i64* %R2_Var
  %lnb7B = load i64, i64* %R3_Var
  %lnb7C = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7w( i64* %Base_Arg, i64* %lnb7x, i64* %lnb7y, i64 %lnb7z, i64 %lnb7A, i64 %lnb7B, i64 %lnb7C, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caXL:
  %lnb7D = load i64*, i64** %Hp_Var
  %lnb7E = getelementptr inbounds i64, i64* %lnb7D, i32 -6
  %lnb7F = ptrtoint i64* %lnb7E to i64
  %lnb7G = inttoptr i64 %lnb7F to i64*
  store i64* %lnb7G, i64** %Hp_Var
  %lnb7I = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXm_info$def to i64
  %lnb7H = load i64*, i64** %Sp_Var
  %lnb7J = getelementptr inbounds i64, i64* %lnb7H, i32 0
  store i64 %lnb7I, i64* %lnb7J, !tbaa !1
  %lnb7K = load i64, i64* %ls86Y
  store i64 %lnb7K, i64* %R3_Var
  %lnb7L = load i64, i64* %ls86W
  store i64 %lnb7L, i64* %R2_Var
  %lnb7M = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7N = load i64*, i64** %Sp_Var
  %lnb7O = load i64*, i64** %Hp_Var
  %lnb7P = load i64, i64* %R1_Var
  %lnb7Q = load i64, i64* %R2_Var
  %lnb7R = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7M( i64* %Base_Arg, i64* %lnb7N, i64* %lnb7O, i64 %lnb7P, i64 %lnb7Q, i64 %lnb7R, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caXi:
  %lnb7S = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnb7S, !tbaa !4
  %lnb7T = load i64, i64* %R1_Var
  store i64 %lnb7T, i64* %R1_Var
  %lnb7U = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb7V = load i64*, i64** %Sp_Var
  %lnb7W = load i64*, i64** %Hp_Var
  %lnb7X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb7U( i64* %Base_Arg, i64* %lnb7V, i64* %lnb7W, i64 %lnb7X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caXm_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXm_info$def to i8*)
define internal ghccc void @caXm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXm_info$def to i64)),i64 424), i64 6023, i64 73014444064}>
{
caXm:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnb7Y = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXq_info$def to i64
  %lnb7Z = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb7Y, i64* %lnb7Z, !tbaa !1
  %lnb80 = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lnb81 = add i64 %lnb80, 1
  store i64 %lnb81, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnb82 = bitcast i8* @integerzmgmp_GHCziIntegerziType_quotInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb83 = load i64, i64* %R2_Var
  %lnb84 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb82( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb83, i64 %lnb84, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caXq_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXq_info$def to i8*)
define internal ghccc void @caXq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXq_info$def to i64)),i64 456), i64 6023, i64 4294967328}>
{
caXq:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnb85 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXu_info$def to i64
  %lnb86 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnb85, i64* %lnb86, !tbaa !1
  store i64 %R1_Arg, i64* %R2_Var
  %lnb87 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb88 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb87( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnb88, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caXu_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXu_info$def to i8*)
define internal ghccc void @caXu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXu_info$def to i64)),i64 456), i64 6023, i64 4294967328}>
{
caXu:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnb89 = load i64*, i64** %Hp_Var
  %lnb8a = getelementptr inbounds i64, i64* %lnb89, i32 5
  %lnb8b = ptrtoint i64* %lnb8a to i64
  %lnb8c = inttoptr i64 %lnb8b to i64*
  store i64* %lnb8c, i64** %Hp_Var
  %lnb8d = load i64*, i64** %Hp_Var
  %lnb8e = ptrtoint i64* %lnb8d to i64
  %lnb8f = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnb8g = bitcast i64* %lnb8f to i64*
  %lnb8h = load i64, i64* %lnb8g, !tbaa !4
  %lnb8i = icmp ugt i64 %lnb8e, %lnb8h
  br i1 %lnb8i, label %caXQ, label %caXP
caXP:
  %lnb8j = load i64, i64* %R1_Var
  %lnb8k = icmp sle i64 %lnb8j, 0
  %lnb8l = zext i1 %lnb8k to i64
  switch i64 %lnb8l, label %caXD [i64 0, label %caXD
i64 1, label %caXE]
caXD:
  %lnb8m = load i64, i64* %R1_Var
  %lnb8n = load i64*, i64** %Sp_Var
  %lnb8o = getelementptr inbounds i64, i64* %lnb8n, i32 3
  %lnb8p = bitcast i64* %lnb8o to i64*
  %lnb8q = load i64, i64* %lnb8p, !tbaa !1
  %lnb8r = icmp sge i64 %lnb8m, %lnb8q
  %lnb8s = zext i1 %lnb8r to i64
  switch i64 %lnb8s, label %caXX [i64 0, label %caXX
i64 1, label %caY1]
caXX:
  %lnb8u = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lnb8t = load i64*, i64** %Hp_Var
  %lnb8v = getelementptr inbounds i64, i64* %lnb8t, i32 -4
  store i64 %lnb8u, i64* %lnb8v, !tbaa !2
  %lnb8x = load i64*, i64** %Sp_Var
  %lnb8y = getelementptr inbounds i64, i64* %lnb8x, i32 1
  %lnb8z = bitcast i64* %lnb8y to i64*
  %lnb8A = load i64, i64* %lnb8z, !tbaa !1
  %lnb8w = load i64*, i64** %Hp_Var
  %lnb8B = getelementptr inbounds i64, i64* %lnb8w, i32 -3
  store i64 %lnb8A, i64* %lnb8B, !tbaa !2
  %lnb8D = load i64*, i64** %Sp_Var
  %lnb8E = getelementptr inbounds i64, i64* %lnb8D, i32 4
  %lnb8F = bitcast i64* %lnb8E to i64*
  %lnb8G = load i64, i64* %lnb8F, !tbaa !1
  %lnb8C = load i64*, i64** %Hp_Var
  %lnb8H = getelementptr inbounds i64, i64* %lnb8C, i32 -2
  store i64 %lnb8G, i64* %lnb8H, !tbaa !2
  %lnb8J = load i64*, i64** %Sp_Var
  %lnb8K = getelementptr inbounds i64, i64* %lnb8J, i32 2
  %lnb8L = bitcast i64* %lnb8K to i64*
  %lnb8M = load i64, i64* %lnb8L, !tbaa !1
  %lnb8I = load i64*, i64** %Hp_Var
  %lnb8N = getelementptr inbounds i64, i64* %lnb8I, i32 -1
  store i64 %lnb8M, i64* %lnb8N, !tbaa !2
  %lnb8P = load i64, i64* %R1_Var
  %lnb8O = load i64*, i64** %Hp_Var
  %lnb8Q = getelementptr inbounds i64, i64* %lnb8O, i32 0
  store i64 %lnb8P, i64* %lnb8Q, !tbaa !2
  %lnb8T = load i64*, i64** %Hp_Var
  %lnb8U = ptrtoint i64* %lnb8T to i64
  %lnb8V = add i64 %lnb8U, -31
  %lnb8R = load i64*, i64** %Sp_Var
  %lnb8W = getelementptr inbounds i64, i64* %lnb8R, i32 7
  store i64 %lnb8V, i64* %lnb8W, !tbaa !1
  %lnb8X = load i64*, i64** %Sp_Var
  %lnb8Y = getelementptr inbounds i64, i64* %lnb8X, i32 7
  %lnb8Z = ptrtoint i64* %lnb8Y to i64
  %lnb90 = inttoptr i64 %lnb8Z to i64*
  store i64* %lnb90, i64** %Sp_Var
  %lnb91 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXI_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb92 = load i64*, i64** %Sp_Var
  %lnb93 = load i64*, i64** %Hp_Var
  %lnb94 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb91( i64* %Base_Arg, i64* %lnb92, i64* %lnb93, i64 %lnb94, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caY1:
  %lnb95 = load i64*, i64** %Hp_Var
  %lnb96 = getelementptr inbounds i64, i64* %lnb95, i32 -5
  %lnb97 = ptrtoint i64* %lnb96 to i64
  %lnb98 = inttoptr i64 %lnb97 to i64*
  store i64* %lnb98, i64** %Hp_Var
  %lnb9a = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caY4_info$def to i64
  %lnb99 = load i64*, i64** %Sp_Var
  %lnb9b = getelementptr inbounds i64, i64* %lnb99, i32 7
  store i64 %lnb9a, i64* %lnb9b, !tbaa !1
  %lnb9c = load i64*, i64** %Sp_Var
  %lnb9d = getelementptr inbounds i64, i64* %lnb9c, i32 6
  %lnb9e = bitcast i64* %lnb9d to i64*
  %lnb9f = load i64, i64* %lnb9e, !tbaa !1
  store i64 %lnb9f, i64* %R1_Var
  %lnb9g = load i64*, i64** %Sp_Var
  %lnb9h = getelementptr inbounds i64, i64* %lnb9g, i32 7
  %lnb9i = ptrtoint i64* %lnb9h to i64
  %lnb9j = inttoptr i64 %lnb9i to i64*
  store i64* %lnb9j, i64** %Sp_Var
  %lnb9k = load i64, i64* %R1_Var
  %lnb9l = and i64 %lnb9k, 7
  %lnb9m = icmp ne i64 %lnb9l, 0
  br i1 %lnb9m, label %uaYv, label %caY5
caY5:
  %lnb9o = load i64, i64* %R1_Var
  %lnb9p = inttoptr i64 %lnb9o to i64*
  %lnb9q = load i64, i64* %lnb9p, !tbaa !3
  %lnb9r = inttoptr i64 %lnb9q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9s = load i64*, i64** %Sp_Var
  %lnb9t = load i64*, i64** %Hp_Var
  %lnb9u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9r( i64* %Base_Arg, i64* %lnb9s, i64* %lnb9t, i64 %lnb9u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uaYv:
  %lnb9v = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caY4_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9w = load i64*, i64** %Sp_Var
  %lnb9x = load i64*, i64** %Hp_Var
  %lnb9y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9v( i64* %Base_Arg, i64* %lnb9w, i64* %lnb9x, i64 %lnb9y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caXE:
  %lnb9z = load i64*, i64** %Hp_Var
  %lnb9A = getelementptr inbounds i64, i64* %lnb9z, i32 -5
  %lnb9B = ptrtoint i64* %lnb9A to i64
  %lnb9C = inttoptr i64 %lnb9B to i64*
  store i64* %lnb9C, i64** %Hp_Var
  %lnb9E = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caY4_info$def to i64
  %lnb9D = load i64*, i64** %Sp_Var
  %lnb9F = getelementptr inbounds i64, i64* %lnb9D, i32 7
  store i64 %lnb9E, i64* %lnb9F, !tbaa !1
  %lnb9G = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteString_empty_closure to i64
  store i64 %lnb9G, i64* %R1_Var
  %lnb9H = load i64*, i64** %Sp_Var
  %lnb9I = getelementptr inbounds i64, i64* %lnb9H, i32 7
  %lnb9J = ptrtoint i64* %lnb9I to i64
  %lnb9K = inttoptr i64 %lnb9J to i64*
  store i64* %lnb9K, i64** %Sp_Var
  %lnb9L = load i64, i64* %R1_Var
  %lnb9M = and i64 %lnb9L, 7
  %lnb9N = icmp ne i64 %lnb9M, 0
  br i1 %lnb9N, label %uaYv, label %caY5
caXQ:
  %lnb9O = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnb9O, !tbaa !4
  %lnb9P = load i64, i64* %R1_Var
  store i64 %lnb9P, i64* %R1_Var
  %lnb9Q = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnb9R = load i64*, i64** %Sp_Var
  %lnb9S = load i64*, i64** %Hp_Var
  %lnb9T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnb9Q( i64* %Base_Arg, i64* %lnb9R, i64* %lnb9S, i64 %lnb9T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caXI_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXI_entry$def to i8*)
define internal ghccc void @caXI_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
caXI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls87y = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnb9U = load i64*, i64** %Hp_Var
  %lnb9V = getelementptr inbounds i64, i64* %lnb9U, i32 2
  %lnb9W = ptrtoint i64* %lnb9V to i64
  %lnb9X = inttoptr i64 %lnb9W to i64*
  store i64* %lnb9X, i64** %Hp_Var
  %lnb9Y = load i64*, i64** %Sp_Var
  %lnb9Z = getelementptr inbounds i64, i64* %lnb9Y, i32 0
  %lnba0 = bitcast i64* %lnb9Z to i64*
  %lnba1 = load i64, i64* %lnba0, !tbaa !1
  store i64 %lnba1, i64* %ls87y
  %lnba2 = load i64*, i64** %Hp_Var
  %lnba3 = ptrtoint i64* %lnba2 to i64
  %lnba4 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnba5 = bitcast i64* %lnba4 to i64*
  %lnba6 = load i64, i64* %lnba5, !tbaa !4
  %lnba7 = icmp ugt i64 %lnba3, %lnba6
  br i1 %lnba7, label %caY8, label %caY7
caY7:
  %lnba9 = ptrtoint i8* @Word_WBS_con_info to i64
  %lnba8 = load i64*, i64** %Hp_Var
  %lnbaa = getelementptr inbounds i64, i64* %lnba8, i32 -1
  store i64 %lnba9, i64* %lnbaa, !tbaa !2
  %lnbac = load i64, i64* %ls87y
  %lnbab = load i64*, i64** %Hp_Var
  %lnbad = getelementptr inbounds i64, i64* %lnbab, i32 0
  store i64 %lnbac, i64* %lnbad, !tbaa !2
  %lnbaf = load i64*, i64** %Hp_Var
  %lnbag = ptrtoint i64* %lnbaf to i64
  %lnbah = add i64 %lnbag, -5
  store i64 %lnbah, i64* %R1_Var
  %lnbai = load i64*, i64** %Sp_Var
  %lnbaj = getelementptr inbounds i64, i64* %lnbai, i32 1
  %lnbak = ptrtoint i64* %lnbaj to i64
  %lnbal = inttoptr i64 %lnbak to i64*
  store i64* %lnbal, i64** %Sp_Var
  %lnbam = load i64*, i64** %Sp_Var
  %lnban = getelementptr inbounds i64, i64* %lnbam, i32 0
  %lnbao = bitcast i64* %lnban to i64*
  %lnbap = load i64, i64* %lnbao, !tbaa !1
  %lnbaq = inttoptr i64 %lnbap to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbar = load i64*, i64** %Sp_Var
  %lnbas = load i64*, i64** %Hp_Var
  %lnbat = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaq( i64* %Base_Arg, i64* %lnbar, i64* %lnbas, i64 %lnbat, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caY8:
  %lnbau = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbau, !tbaa !4
  %lnbaw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caY4_info$def to i64
  %lnbav = load i64*, i64** %Sp_Var
  %lnbax = getelementptr inbounds i64, i64* %lnbav, i32 0
  store i64 %lnbaw, i64* %lnbax, !tbaa !1
  %lnbay = load i64, i64* %ls87y
  store i64 %lnbay, i64* %R1_Var
  %lnbaz = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbaA = load i64*, i64** %Sp_Var
  %lnbaB = load i64*, i64** %Hp_Var
  %lnbaC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaz( i64* %Base_Arg, i64* %lnbaA, i64* %lnbaB, i64 %lnbaC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caY4_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caY4_info$def to i8*)
define internal ghccc void @caY4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
caY4:
  %lnbaD = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnbaD, !tbaa !1
  %lnbaE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caXI_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbaE( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caWR_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caWR_info$def to i8*)
define internal ghccc void @caWR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
caWR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbaF = load i64*, i64** %Hp_Var
  %lnbaG = getelementptr inbounds i64, i64* %lnbaF, i32 2
  %lnbaH = ptrtoint i64* %lnbaG to i64
  %lnbaI = inttoptr i64 %lnbaH to i64*
  store i64* %lnbaI, i64** %Hp_Var
  %lnbaJ = load i64*, i64** %Hp_Var
  %lnbaK = ptrtoint i64* %lnbaJ to i64
  %lnbaL = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbaM = bitcast i64* %lnbaL to i64*
  %lnbaN = load i64, i64* %lnbaM, !tbaa !4
  %lnbaO = icmp ugt i64 %lnbaK, %lnbaN
  br i1 %lnbaO, label %caWZ, label %caWY
caWY:
  %lnbaP = load i64, i64* %R1_Var
  %lnbaQ = icmp sge i64 %lnbaP, 64
  %lnbaR = zext i1 %lnbaQ to i64
  switch i64 %lnbaR, label %caXa [i64 0, label %caXa
i64 1, label %caXb]
caXa:
  %lnbaT = ptrtoint i8* @Word_W64_con_info to i64
  %lnbaS = load i64*, i64** %Hp_Var
  %lnbaU = getelementptr inbounds i64, i64* %lnbaS, i32 -1
  store i64 %lnbaT, i64* %lnbaU, !tbaa !2
  %lnbaW = load i64*, i64** %Sp_Var
  %lnbaX = getelementptr inbounds i64, i64* %lnbaW, i32 1
  %lnbaY = bitcast i64* %lnbaX to i64*
  %lnbaZ = load i64, i64* %lnbaY, !tbaa !1
  %lnbb0 = load i64, i64* %R1_Var
  %lnbb1 = shl i64 %lnbaZ, %lnbb0
  %lnbaV = load i64*, i64** %Hp_Var
  %lnbb2 = getelementptr inbounds i64, i64* %lnbaV, i32 0
  store i64 %lnbb1, i64* %lnbb2, !tbaa !2
  %lnbb4 = load i64*, i64** %Hp_Var
  %lnbb5 = ptrtoint i64* %lnbb4 to i64
  %lnbb6 = add i64 %lnbb5, -6
  store i64 %lnbb6, i64* %R1_Var
  %lnbb7 = load i64*, i64** %Sp_Var
  %lnbb8 = getelementptr inbounds i64, i64* %lnbb7, i32 2
  %lnbb9 = ptrtoint i64* %lnbb8 to i64
  %lnbba = inttoptr i64 %lnbb9 to i64*
  store i64* %lnbba, i64** %Sp_Var
  %lnbbb = load i64*, i64** %Sp_Var
  %lnbbc = getelementptr inbounds i64, i64* %lnbbb, i32 0
  %lnbbd = bitcast i64* %lnbbc to i64*
  %lnbbe = load i64, i64* %lnbbd, !tbaa !1
  %lnbbf = inttoptr i64 %lnbbe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbg = load i64*, i64** %Sp_Var
  %lnbbh = load i64*, i64** %Hp_Var
  %lnbbi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbf( i64* %Base_Arg, i64* %lnbbg, i64* %lnbbh, i64 %lnbbi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caXb:
  %lnbbj = load i64*, i64** %Hp_Var
  %lnbbk = getelementptr inbounds i64, i64* %lnbbj, i32 -2
  %lnbbl = ptrtoint i64* %lnbbk to i64
  %lnbbm = inttoptr i64 %lnbbl to i64*
  store i64* %lnbbm, i64** %Hp_Var
  %lnbbn = ptrtoint %Word_wzzero1_closure_struct* @Word_wzzero1_closure$def to i64
  %lnbbo = add i64 %lnbbn, 2
  store i64 %lnbbo, i64* %R1_Var
  %lnbbp = load i64*, i64** %Sp_Var
  %lnbbq = getelementptr inbounds i64, i64* %lnbbp, i32 2
  %lnbbr = ptrtoint i64* %lnbbq to i64
  %lnbbs = inttoptr i64 %lnbbr to i64*
  store i64* %lnbbs, i64** %Sp_Var
  %lnbbt = load i64*, i64** %Sp_Var
  %lnbbu = getelementptr inbounds i64, i64* %lnbbt, i32 0
  %lnbbv = bitcast i64* %lnbbu to i64*
  %lnbbw = load i64, i64* %lnbbv, !tbaa !1
  %lnbbx = inttoptr i64 %lnbbw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbby = load i64*, i64** %Sp_Var
  %lnbbz = load i64*, i64** %Hp_Var
  %lnbbA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbx( i64* %Base_Arg, i64* %lnbby, i64* %lnbbz, i64 %lnbbA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caWZ:
  %lnbbB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbbB, !tbaa !4
  %lnbbC = load i64, i64* %R1_Var
  store i64 %lnbbC, i64* %R1_Var
  %lnbbD = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbbE = load i64*, i64** %Sp_Var
  %lnbbF = load i64*, i64** %Hp_Var
  %lnbbG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbbD( i64* %Base_Arg, i64* %lnbbE, i64* %lnbbF, i64 %lnbbG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s87O_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s87O_info$def to i8*)
define internal ghccc void @s87O_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s87O_info$def to i64)),i64 328), i64 2, i64 12884901907}>
{
caZ3:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbbH = load i64*, i64** %Sp_Var
  %lnbbI = getelementptr inbounds i64, i64* %lnbbH, i32 -4
  %lnbbJ = ptrtoint i64* %lnbbI to i64
  %lnbbK = icmp ult i64 %lnbbJ, %SpLim_Arg
  br i1 %lnbbK, label %caZ4, label %caZ5
caZ5:
  %lnbbM = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbbL = load i64*, i64** %Sp_Var
  %lnbbN = getelementptr inbounds i64, i64* %lnbbL, i32 -2
  store i64 %lnbbM, i64* %lnbbN, !tbaa !1
  %lnbbP = load i64, i64* %R1_Var
  %lnbbO = load i64*, i64** %Sp_Var
  %lnbbQ = getelementptr inbounds i64, i64* %lnbbO, i32 -1
  store i64 %lnbbP, i64* %lnbbQ, !tbaa !1
  %lnbbS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZ1_info$def to i64
  %lnbbR = load i64*, i64** %Sp_Var
  %lnbbT = getelementptr inbounds i64, i64* %lnbbR, i32 -4
  store i64 %lnbbS, i64* %lnbbT, !tbaa !1
  %lnbbW = load i64, i64* %R1_Var
  %lnbbX = add i64 %lnbbW, 16
  %lnbbY = inttoptr i64 %lnbbX to i64*
  %lnbbZ = load i64, i64* %lnbbY, !tbaa !3
  store i64 %lnbbZ, i64* %R2_Var
  %lnbc3 = load i64, i64* %R1_Var
  %lnbc4 = add i64 %lnbc3, 24
  %lnbc5 = inttoptr i64 %lnbc4 to i64*
  %lnbc6 = load i64, i64* %lnbc5, !tbaa !3
  %lnbc0 = load i64*, i64** %Sp_Var
  %lnbc7 = getelementptr inbounds i64, i64* %lnbc0, i32 -3
  store i64 %lnbc6, i64* %lnbc7, !tbaa !1
  %lnbc8 = load i64*, i64** %Sp_Var
  %lnbc9 = getelementptr inbounds i64, i64* %lnbc8, i32 -4
  %lnbca = ptrtoint i64* %lnbc9 to i64
  %lnbcb = inttoptr i64 %lnbca to i64*
  store i64* %lnbcb, i64** %Sp_Var
  %lnbcc = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbcd = load i64*, i64** %Sp_Var
  %lnbce = load i64, i64* %R1_Var
  %lnbcf = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbcc( i64* %Base_Arg, i64* %lnbcd, i64* %Hp_Arg, i64 %lnbce, i64 %lnbcf, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caZ4:
  %lnbcg = load i64, i64* %R1_Var
  store i64 %lnbcg, i64* %R1_Var
  %lnbch = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbci = bitcast i64* %lnbch to i64*
  %lnbcj = load i64, i64* %lnbci, !tbaa !4
  %lnbck = inttoptr i64 %lnbcj to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbcl = load i64*, i64** %Sp_Var
  %lnbcm = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbck( i64* %Base_Arg, i64* %lnbcl, i64* %Hp_Arg, i64 %lnbcm, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caZ1_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZ1_info$def to i8*)
define internal ghccc void @caZ1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZ1_info$def to i64)),i64 328), i64 1, i64 12884901920}>
{
caZ1:
  %ls87G = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbcn = load i64*, i64** %Sp_Var
  %lnbco = getelementptr inbounds i64, i64* %lnbcn, i32 1
  %lnbcp = bitcast i64* %lnbco to i64*
  %lnbcq = load i64, i64* %lnbcp, !tbaa !1
  store i64 %lnbcq, i64* %ls87G
  %lnbcr = icmp sge i64 %R1_Arg, 0
  %lnbcs = zext i1 %lnbcr to i64
  switch i64 %lnbcs, label %caZe [i64 0, label %caZe
i64 1, label %caZf]
caZe:
  %lnbct = sub i64 0, %R1_Arg
  store i64 %lnbct, i64* %R3_Var
  %lnbcu = load i64, i64* %ls87G
  store i64 %lnbcu, i64* %R2_Var
  %lnbcv = load i64*, i64** %Sp_Var
  %lnbcw = getelementptr inbounds i64, i64* %lnbcv, i32 2
  %lnbcx = ptrtoint i64* %lnbcw to i64
  %lnbcy = inttoptr i64 %lnbcx to i64*
  store i64* %lnbcy, i64** %Sp_Var
  %lnbcz = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbcA = load i64*, i64** %Sp_Var
  %lnbcB = load i64, i64* %R2_Var
  %lnbcC = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbcz( i64* %Base_Arg, i64* %lnbcA, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbcB, i64 %lnbcC, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caZf:
  store i64 %R1_Arg, i64* %R3_Var
  %lnbcD = load i64, i64* %ls87G
  store i64 %lnbcD, i64* %R2_Var
  %lnbcE = load i64*, i64** %Sp_Var
  %lnbcF = getelementptr inbounds i64, i64* %lnbcE, i32 2
  %lnbcG = ptrtoint i64* %lnbcF to i64
  %lnbcH = inttoptr i64 %lnbcG to i64*
  store i64* %lnbcH, i64** %Sp_Var
  %lnbcI = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbcJ = load i64*, i64** %Sp_Var
  %lnbcK = load i64, i64* %R2_Var
  %lnbcL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbcI( i64* %Base_Arg, i64* %lnbcJ, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbcK, i64 %lnbcL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wlshiftzuzdswlshift_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshiftzuzdswlshift_info$def to i8*)
define ghccc void @Word_wlshiftzuzdswlshift_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshiftzuzdswlshift_info$def to i64)),i64 328), i64 12884901911, i64 0, i64 219915210457103}>
{
caZi:
  %ls87G = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls87F = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbcM = load i64*, i64** %Sp_Var
  %lnbcN = getelementptr inbounds i64, i64* %lnbcM, i32 -4
  %lnbcO = ptrtoint i64* %lnbcN to i64
  %lnbcP = icmp ult i64 %lnbcO, %SpLim_Arg
  br i1 %lnbcP, label %caZj, label %caZk
caZk:
  %lnbcR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYR_info$def to i64
  %lnbcQ = load i64*, i64** %Sp_Var
  %lnbcS = getelementptr inbounds i64, i64* %lnbcQ, i32 -4
  store i64 %lnbcR, i64* %lnbcS, !tbaa !1
  %lnbcT = load i64, i64* %R3_Var
  store i64 %lnbcT, i64* %ls87G
  %lnbcU = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbcV = add i64 %lnbcU, 1
  store i64 %lnbcV, i64* %R3_Var
  %lnbcW = load i64, i64* %R2_Var
  store i64 %lnbcW, i64* %ls87F
  %lnbcX = load i64, i64* %R2_Var
  store i64 %lnbcX, i64* %R2_Var
  %lnbcZ = load i64, i64* %ls87F
  %lnbcY = load i64*, i64** %Sp_Var
  %lnbd0 = getelementptr inbounds i64, i64* %lnbcY, i32 -3
  store i64 %lnbcZ, i64* %lnbd0, !tbaa !1
  %lnbd2 = load i64, i64* %ls87G
  %lnbd1 = load i64*, i64** %Sp_Var
  %lnbd3 = getelementptr inbounds i64, i64* %lnbd1, i32 -2
  store i64 %lnbd2, i64* %lnbd3, !tbaa !1
  %lnbd5 = load i64, i64* %R4_Var
  %lnbd4 = load i64*, i64** %Sp_Var
  %lnbd6 = getelementptr inbounds i64, i64* %lnbd4, i32 -1
  store i64 %lnbd5, i64* %lnbd6, !tbaa !1
  %lnbd7 = load i64*, i64** %Sp_Var
  %lnbd8 = getelementptr inbounds i64, i64* %lnbd7, i32 -4
  %lnbd9 = ptrtoint i64* %lnbd8 to i64
  %lnbda = inttoptr i64 %lnbd9 to i64*
  store i64* %lnbda, i64** %Sp_Var
  %lnbdb = bitcast i8* @integerzmgmp_GHCziIntegerziType_gtIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdc = load i64*, i64** %Sp_Var
  %lnbdd = load i64, i64* %R1_Var
  %lnbde = load i64, i64* %R2_Var
  %lnbdf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdb( i64* %Base_Arg, i64* %lnbdc, i64* %Hp_Arg, i64 %lnbdd, i64 %lnbde, i64 %lnbdf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caZj:
  %lnbdg = load i64, i64* %R4_Var
  store i64 %lnbdg, i64* %R4_Var
  %lnbdh = load i64, i64* %R3_Var
  store i64 %lnbdh, i64* %R3_Var
  %lnbdi = load i64, i64* %R2_Var
  store i64 %lnbdi, i64* %R2_Var
  %lnbdj = ptrtoint %Word_wlshiftzuzdswlshift_closure_struct* @Word_wlshiftzuzdswlshift_closure$def to i64
  store i64 %lnbdj, i64* %R1_Var
  %lnbdk = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbdl = bitcast i64* %lnbdk to i64*
  %lnbdm = load i64, i64* %lnbdl, !tbaa !4
  %lnbdn = inttoptr i64 %lnbdm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbdo = load i64*, i64** %Sp_Var
  %lnbdp = load i64, i64* %R1_Var
  %lnbdq = load i64, i64* %R2_Var
  %lnbdr = load i64, i64* %R3_Var
  %lnbds = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbdn( i64* %Base_Arg, i64* %lnbdo, i64* %Hp_Arg, i64 %lnbdp, i64 %lnbdq, i64 %lnbdr, i64 %lnbds, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caYR_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYR_info$def to i8*)
define internal ghccc void @caYR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caYR_info$def to i64)),i64 328), i64 3, i64 219915210457120}>
{
caYR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls87F = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbdt = load i64*, i64** %Hp_Var
  %lnbdu = getelementptr inbounds i64, i64* %lnbdt, i32 6
  %lnbdv = ptrtoint i64* %lnbdu to i64
  %lnbdw = inttoptr i64 %lnbdv to i64*
  store i64* %lnbdw, i64** %Hp_Var
  %lnbdx = load i64*, i64** %Hp_Var
  %lnbdy = ptrtoint i64* %lnbdx to i64
  %lnbdz = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbdA = bitcast i64* %lnbdz to i64*
  %lnbdB = load i64, i64* %lnbdA, !tbaa !4
  %lnbdC = icmp ugt i64 %lnbdy, %lnbdB
  br i1 %lnbdC, label %caZn, label %caZm
caZm:
  %lnbdD = load i64*, i64** %Sp_Var
  %lnbdE = getelementptr inbounds i64, i64* %lnbdD, i32 1
  %lnbdF = bitcast i64* %lnbdE to i64*
  %lnbdG = load i64, i64* %lnbdF, !tbaa !1
  store i64 %lnbdG, i64* %ls87F
  %lnbdH = load i64, i64* %R1_Var
  switch i64 %lnbdH, label %caZq [i64 0, label %caZq
i64 1, label %caZx]
caZq:
  %lnbdJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s87O_info$def to i64
  %lnbdI = load i64*, i64** %Hp_Var
  %lnbdK = getelementptr inbounds i64, i64* %lnbdI, i32 -5
  store i64 %lnbdJ, i64* %lnbdK, !tbaa !2
  %lnbdM = load i64, i64* %ls87F
  %lnbdL = load i64*, i64** %Hp_Var
  %lnbdN = getelementptr inbounds i64, i64* %lnbdL, i32 -3
  store i64 %lnbdM, i64* %lnbdN, !tbaa !2
  %lnbdP = load i64*, i64** %Sp_Var
  %lnbdQ = getelementptr inbounds i64, i64* %lnbdP, i32 2
  %lnbdR = bitcast i64* %lnbdQ to i64*
  %lnbdS = load i64, i64* %lnbdR, !tbaa !1
  %lnbdO = load i64*, i64** %Hp_Var
  %lnbdT = getelementptr inbounds i64, i64* %lnbdO, i32 -2
  store i64 %lnbdS, i64* %lnbdT, !tbaa !2
  %lnbdV = ptrtoint i8* @Word_W_con_info to i64
  %lnbdU = load i64*, i64** %Hp_Var
  %lnbdW = getelementptr inbounds i64, i64* %lnbdU, i32 -1
  store i64 %lnbdV, i64* %lnbdW, !tbaa !2
  %lnbdY = load i64*, i64** %Hp_Var
  %lnbdZ = getelementptr inbounds i64, i64* %lnbdY, i32 -5
  %lnbe0 = ptrtoint i64* %lnbdZ to i64
  %lnbdX = load i64*, i64** %Hp_Var
  %lnbe1 = getelementptr inbounds i64, i64* %lnbdX, i32 0
  store i64 %lnbe0, i64* %lnbe1, !tbaa !2
  %lnbe3 = load i64*, i64** %Hp_Var
  %lnbe4 = ptrtoint i64* %lnbe3 to i64
  %lnbe5 = add i64 %lnbe4, -7
  store i64 %lnbe5, i64* %R1_Var
  %lnbe6 = load i64*, i64** %Sp_Var
  %lnbe7 = getelementptr inbounds i64, i64* %lnbe6, i32 4
  %lnbe8 = ptrtoint i64* %lnbe7 to i64
  %lnbe9 = inttoptr i64 %lnbe8 to i64*
  store i64* %lnbe9, i64** %Sp_Var
  %lnbea = load i64*, i64** %Sp_Var
  %lnbeb = getelementptr inbounds i64, i64* %lnbea, i32 0
  %lnbec = bitcast i64* %lnbeb to i64*
  %lnbed = load i64, i64* %lnbec, !tbaa !1
  %lnbee = inttoptr i64 %lnbed to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbef = load i64*, i64** %Sp_Var
  %lnbeg = load i64*, i64** %Hp_Var
  %lnbeh = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbee( i64* %Base_Arg, i64* %lnbef, i64* %lnbeg, i64 %lnbeh, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caZx:
  %lnbei = load i64*, i64** %Hp_Var
  %lnbej = getelementptr inbounds i64, i64* %lnbei, i32 -6
  %lnbek = ptrtoint i64* %lnbej to i64
  %lnbel = inttoptr i64 %lnbek to i64*
  store i64* %lnbel, i64** %Hp_Var
  %lnben = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZs_info$def to i64
  %lnbem = load i64*, i64** %Sp_Var
  %lnbeo = getelementptr inbounds i64, i64* %lnbem, i32 1
  store i64 %lnben, i64* %lnbeo, !tbaa !1
  %lnbep = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbeq = add i64 %lnbep, 1
  store i64 %lnbeq, i64* %R3_Var
  %lnber = load i64, i64* %ls87F
  store i64 %lnber, i64* %R2_Var
  %lnbes = load i64*, i64** %Sp_Var
  %lnbet = getelementptr inbounds i64, i64* %lnbes, i32 1
  %lnbeu = ptrtoint i64* %lnbet to i64
  %lnbev = inttoptr i64 %lnbeu to i64*
  store i64* %lnbev, i64** %Sp_Var
  %lnbew = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbex = load i64*, i64** %Sp_Var
  %lnbey = load i64*, i64** %Hp_Var
  %lnbez = load i64, i64* %R1_Var
  %lnbeA = load i64, i64* %R2_Var
  %lnbeB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbew( i64* %Base_Arg, i64* %lnbex, i64* %lnbey, i64 %lnbez, i64 %lnbeA, i64 %lnbeB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
caZn:
  %lnbeC = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnbeC, !tbaa !4
  %lnbeD = load i64, i64* %R1_Var
  store i64 %lnbeD, i64* %R1_Var
  %lnbeE = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbeF = load i64*, i64** %Sp_Var
  %lnbeG = load i64*, i64** %Hp_Var
  %lnbeH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbeE( i64* %Base_Arg, i64* %lnbeF, i64* %lnbeG, i64 %lnbeH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caZs_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZs_info$def to i8*)
define internal ghccc void @caZs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZs_info$def to i64)),i64 440), i64 2, i64 12884901920}>
{
caZs:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbeI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZw_info$def to i64
  %lnbeJ = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbeI, i64* %lnbeJ, !tbaa !1
  %lnbeK = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnbeL = bitcast i64* %lnbeK to i64*
  %lnbeM = load i64, i64* %lnbeL, !tbaa !1
  store i64 %lnbeM, i64* %R4_Var
  %lnbeN = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbeO = bitcast i64* %lnbeN to i64*
  %lnbeP = load i64, i64* %lnbeO, !tbaa !1
  store i64 %lnbeP, i64* %R3_Var
  %lnbeQ = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbeR = add i64 %lnbeQ, 1
  store i64 %lnbeR, i64* %R2_Var
  %lnbeS = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %R1_Arg, i64* %lnbeS, !tbaa !1
  %lnbeT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshiftzuzdswlshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbeU = load i64, i64* %R2_Var
  %lnbeV = load i64, i64* %R3_Var
  %lnbeW = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbeT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbeU, i64 %lnbeV, i64 %lnbeW, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@caZw_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZw_info$def to i8*)
define internal ghccc void @caZw_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @caZw_info$def to i64)),i64 448), i64 2, i64 4294967328}>
{
caZw:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbeX = load i64*, i64** %Sp_Var
  %lnbeY = getelementptr inbounds i64, i64* %lnbeX, i32 1
  %lnbeZ = bitcast i64* %lnbeY to i64*
  %lnbf0 = load i64, i64* %lnbeZ, !tbaa !1
  store i64 %lnbf0, i64* %R4_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnbf1 = load i64*, i64** %Sp_Var
  %lnbf2 = getelementptr inbounds i64, i64* %lnbf1, i32 2
  %lnbf3 = bitcast i64* %lnbf2 to i64*
  %lnbf4 = load i64, i64* %lnbf3, !tbaa !1
  store i64 %lnbf4, i64* %R2_Var
  %lnbf5 = load i64*, i64** %Sp_Var
  %lnbf6 = getelementptr inbounds i64, i64* %lnbf5, i32 3
  %lnbf7 = ptrtoint i64* %lnbf6 to i64
  %lnbf8 = inttoptr i64 %lnbf7 to i64*
  store i64* %lnbf8, i64** %Sp_Var
  %lnbf9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wlshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbfa = load i64*, i64** %Sp_Var
  %lnbfb = load i64, i64* %R2_Var
  %lnbfc = load i64, i64* %R3_Var
  %lnbfd = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbf9( i64* %Base_Arg, i64* %lnbfa, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbfb, i64 %lnbfc, i64 %lnbfd, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwrshift_closure_struct = type <{i64, i64}>
%Word_wrshiftzuzdszdwwrshift_closure_struct = type <{i64, i64}>
@Word_zdwwrshift_closure$def = internal global %Word_zdwwrshift_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwrshift_info$def to i64), i64 0}>
@Word_zdwwrshift_closure = alias i8* bitcast (%Word_zdwwrshift_closure_struct* @Word_zdwwrshift_closure$def to i8*)
@Word_wrshiftzuzdszdwwrshift_closure$def = internal global %Word_wrshiftzuzdszdwwrshift_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshiftzuzdszdwwrshift_info$def to i64), i64 0}>
@Word_wrshiftzuzdszdwwrshift_closure = alias i8* bitcast (%Word_wrshiftzuzdszdwwrshift_closure_struct* @Word_wrshiftzuzdszdwwrshift_closure$def to i8*)
@s882_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s882_info$def to i8*)
define internal ghccc void @s882_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s882_info$def to i64)),i64 328), i64 2, i64 12884901907}>
{
cbhn:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnblk = load i64*, i64** %Sp_Var
  %lnbll = getelementptr inbounds i64, i64* %lnblk, i32 -4
  %lnblm = ptrtoint i64* %lnbll to i64
  %lnbln = icmp ult i64 %lnblm, %SpLim_Arg
  br i1 %lnbln, label %cbho, label %cbhp
cbhp:
  %lnblp = ptrtoint i8* @stg_upd_frame_info to i64
  %lnblo = load i64*, i64** %Sp_Var
  %lnblq = getelementptr inbounds i64, i64* %lnblo, i32 -2
  store i64 %lnblp, i64* %lnblq, !tbaa !1
  %lnbls = load i64, i64* %R1_Var
  %lnblr = load i64*, i64** %Sp_Var
  %lnblt = getelementptr inbounds i64, i64* %lnblr, i32 -1
  store i64 %lnbls, i64* %lnblt, !tbaa !1
  %lnblv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhl_info$def to i64
  %lnblu = load i64*, i64** %Sp_Var
  %lnblw = getelementptr inbounds i64, i64* %lnblu, i32 -4
  store i64 %lnblv, i64* %lnblw, !tbaa !1
  %lnblz = load i64, i64* %R1_Var
  %lnblA = add i64 %lnblz, 16
  %lnblB = inttoptr i64 %lnblA to i64*
  %lnblC = load i64, i64* %lnblB, !tbaa !3
  store i64 %lnblC, i64* %R2_Var
  %lnblG = load i64, i64* %R1_Var
  %lnblH = add i64 %lnblG, 24
  %lnblI = inttoptr i64 %lnblH to i64*
  %lnblJ = load i64, i64* %lnblI, !tbaa !3
  %lnblD = load i64*, i64** %Sp_Var
  %lnblK = getelementptr inbounds i64, i64* %lnblD, i32 -3
  store i64 %lnblJ, i64* %lnblK, !tbaa !1
  %lnblL = load i64*, i64** %Sp_Var
  %lnblM = getelementptr inbounds i64, i64* %lnblL, i32 -4
  %lnblN = ptrtoint i64* %lnblM to i64
  %lnblO = inttoptr i64 %lnblN to i64*
  store i64* %lnblO, i64** %Sp_Var
  %lnblP = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnblQ = load i64*, i64** %Sp_Var
  %lnblR = load i64, i64* %R1_Var
  %lnblS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnblP( i64* %Base_Arg, i64* %lnblQ, i64* %Hp_Arg, i64 %lnblR, i64 %lnblS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbho:
  %lnblT = load i64, i64* %R1_Var
  store i64 %lnblT, i64* %R1_Var
  %lnblU = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnblV = bitcast i64* %lnblU to i64*
  %lnblW = load i64, i64* %lnblV, !tbaa !4
  %lnblX = inttoptr i64 %lnblW to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnblY = load i64*, i64** %Sp_Var
  %lnblZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnblX( i64* %Base_Arg, i64* %lnblY, i64* %Hp_Arg, i64 %lnblZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbhl_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhl_info$def to i8*)
define internal ghccc void @cbhl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhl_info$def to i64)),i64 328), i64 1, i64 12884901920}>
{
cbhl:
  %ls87W = alloca i64, i32 1
  %ls87Y = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbm0 = load i64*, i64** %Sp_Var
  %lnbm1 = getelementptr inbounds i64, i64* %lnbm0, i32 1
  %lnbm2 = bitcast i64* %lnbm1 to i64*
  %lnbm3 = load i64, i64* %lnbm2, !tbaa !1
  store i64 %lnbm3, i64* %ls87W
  %lnbm4 = sub i64 0, %R1_Arg
  store i64 %lnbm4, i64* %ls87Y
  %lnbm5 = load i64, i64* %ls87Y
  %lnbm6 = icmp sge i64 %lnbm5, 0
  %lnbm7 = zext i1 %lnbm6 to i64
  switch i64 %lnbm7, label %cbhB [i64 0, label %cbhB
i64 1, label %cbhC]
cbhB:
  %lnbm8 = load i64, i64* %ls87Y
  %lnbm9 = sub i64 0, %lnbm8
  store i64 %lnbm9, i64* %R3_Var
  %lnbma = load i64, i64* %ls87W
  store i64 %lnbma, i64* %R2_Var
  %lnbmb = load i64*, i64** %Sp_Var
  %lnbmc = getelementptr inbounds i64, i64* %lnbmb, i32 2
  %lnbmd = ptrtoint i64* %lnbmc to i64
  %lnbme = inttoptr i64 %lnbmd to i64*
  store i64* %lnbme, i64** %Sp_Var
  %lnbmf = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmg = load i64*, i64** %Sp_Var
  %lnbmh = load i64, i64* %R2_Var
  %lnbmi = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmf( i64* %Base_Arg, i64* %lnbmg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbmh, i64 %lnbmi, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbhC:
  %lnbmj = load i64, i64* %ls87Y
  store i64 %lnbmj, i64* %R3_Var
  %lnbmk = load i64, i64* %ls87W
  store i64 %lnbmk, i64* %R2_Var
  %lnbml = load i64*, i64** %Sp_Var
  %lnbmm = getelementptr inbounds i64, i64* %lnbml, i32 2
  %lnbmn = ptrtoint i64* %lnbmm to i64
  %lnbmo = inttoptr i64 %lnbmn to i64*
  store i64* %lnbmo, i64** %Sp_Var
  %lnbmp = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbmq = load i64*, i64** %Sp_Var
  %lnbmr = load i64, i64* %R2_Var
  %lnbms = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbmp( i64* %Base_Arg, i64* %lnbmq, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbmr, i64 %lnbms, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s88l_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88l_info$def to i8*)
define internal ghccc void @s88l_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88l_info$def to i64)),i64 296), i64 12884901889, i64 4294967312}>
{
cbi6:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbmt = load i64*, i64** %Sp_Var
  %lnbmu = getelementptr inbounds i64, i64* %lnbmt, i32 -7
  %lnbmv = ptrtoint i64* %lnbmu to i64
  %lnbmw = icmp ult i64 %lnbmv, %SpLim_Arg
  br i1 %lnbmw, label %cbia, label %cbib
cbib:
  %lnbmy = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbmx = load i64*, i64** %Sp_Var
  %lnbmz = getelementptr inbounds i64, i64* %lnbmx, i32 -2
  store i64 %lnbmy, i64* %lnbmz, !tbaa !1
  %lnbmB = load i64, i64* %R1_Var
  %lnbmA = load i64*, i64** %Sp_Var
  %lnbmC = getelementptr inbounds i64, i64* %lnbmA, i32 -1
  store i64 %lnbmB, i64* %lnbmC, !tbaa !1
  %lnbmE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbi1_info$def to i64
  %lnbmD = load i64*, i64** %Sp_Var
  %lnbmF = getelementptr inbounds i64, i64* %lnbmD, i32 -7
  store i64 %lnbmE, i64* %lnbmF, !tbaa !1
  %lnbmJ = load i64, i64* %R1_Var
  %lnbmK = add i64 %lnbmJ, 24
  %lnbmL = inttoptr i64 %lnbmK to i64*
  %lnbmM = load i64, i64* %lnbmL, !tbaa !3
  %lnbmG = load i64*, i64** %Sp_Var
  %lnbmN = getelementptr inbounds i64, i64* %lnbmG, i32 -6
  store i64 %lnbmM, i64* %lnbmN, !tbaa !1
  %lnbmR = load i64, i64* %R1_Var
  %lnbmS = add i64 %lnbmR, 16
  %lnbmT = inttoptr i64 %lnbmS to i64*
  %lnbmU = load i64, i64* %lnbmT, !tbaa !3
  %lnbmO = load i64*, i64** %Sp_Var
  %lnbmV = getelementptr inbounds i64, i64* %lnbmO, i32 -5
  store i64 %lnbmU, i64* %lnbmV, !tbaa !1
  %lnbmZ = load i64, i64* %R1_Var
  %lnbn0 = add i64 %lnbmZ, 32
  %lnbn1 = inttoptr i64 %lnbn0 to i64*
  %lnbn2 = load i64, i64* %lnbn1, !tbaa !3
  %lnbmW = load i64*, i64** %Sp_Var
  %lnbn3 = getelementptr inbounds i64, i64* %lnbmW, i32 -4
  store i64 %lnbn2, i64* %lnbn3, !tbaa !1
  %lnbn7 = load i64, i64* %R1_Var
  %lnbn8 = add i64 %lnbn7, 40
  %lnbn9 = inttoptr i64 %lnbn8 to i64*
  %lnbna = load i64, i64* %lnbn9, !tbaa !3
  %lnbn4 = load i64*, i64** %Sp_Var
  %lnbnb = getelementptr inbounds i64, i64* %lnbn4, i32 -3
  store i64 %lnbna, i64* %lnbnb, !tbaa !1
  %lnbnc = load i64*, i64** %Sp_Var
  %lnbnd = getelementptr inbounds i64, i64* %lnbnc, i32 -7
  %lnbne = ptrtoint i64* %lnbnd to i64
  %lnbnf = inttoptr i64 %lnbne to i64*
  store i64* %lnbnf, i64** %Sp_Var
  %lnbng = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnh = load i64*, i64** %Sp_Var
  %lnbni = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbng( i64* %Base_Arg, i64* %lnbnh, i64* %Hp_Arg, i64 %lnbni, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbia:
  %lnbnj = load i64, i64* %R1_Var
  store i64 %lnbnj, i64* %R1_Var
  %lnbnk = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbnl = bitcast i64* %lnbnk to i64*
  %lnbnm = load i64, i64* %lnbnl, !tbaa !4
  %lnbnn = inttoptr i64 %lnbnm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbno = load i64*, i64** %Sp_Var
  %lnbnp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnn( i64* %Base_Arg, i64* %lnbno, i64* %Hp_Arg, i64 %lnbnp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbi1_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbi1_info$def to i8*)
define internal ghccc void @cbi1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbi1_info$def to i64)),i64 296), i64 836, i64 4294967328}>
{
cbi1:
  %ls88d = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbnq = load i64*, i64** %Sp_Var
  %lnbnr = getelementptr inbounds i64, i64* %lnbnq, i32 4
  %lnbns = bitcast i64* %lnbnr to i64*
  %lnbnt = load i64, i64* %lnbns, !tbaa !1
  store i64 %lnbnt, i64* %ls88d
  %lnbnv = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbi9_info$def to i64
  %lnbnu = load i64*, i64** %Sp_Var
  %lnbnw = getelementptr inbounds i64, i64* %lnbnu, i32 4
  store i64 %lnbnv, i64* %lnbnw, !tbaa !1
  %lnbnx = load i64, i64* %ls88d
  store i64 %lnbnx, i64* %R5_Var
  %lnbny = load i64*, i64** %Sp_Var
  %lnbnz = getelementptr inbounds i64, i64* %lnbny, i32 3
  %lnbnA = bitcast i64* %lnbnz to i64*
  %lnbnB = load i64, i64* %lnbnA, !tbaa !1
  store i64 %lnbnB, i64* %R4_Var
  %lnbnC = load i64*, i64** %Sp_Var
  %lnbnD = getelementptr inbounds i64, i64* %lnbnC, i32 2
  %lnbnE = bitcast i64* %lnbnD to i64*
  %lnbnF = load i64, i64* %lnbnE, !tbaa !1
  store i64 %lnbnF, i64* %R3_Var
  %lnbnG = load i64*, i64** %Sp_Var
  %lnbnH = getelementptr inbounds i64, i64* %lnbnG, i32 1
  %lnbnI = bitcast i64* %lnbnH to i64*
  %lnbnJ = load i64, i64* %lnbnI, !tbaa !1
  store i64 %lnbnJ, i64* %R2_Var
  %lnbnK = load i64*, i64** %Sp_Var
  %lnbnL = getelementptr inbounds i64, i64* %lnbnK, i32 4
  %lnbnM = ptrtoint i64* %lnbnL to i64
  %lnbnN = inttoptr i64 %lnbnM to i64*
  store i64* %lnbnN, i64** %Sp_Var
  %lnbnO = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbnP = load i64*, i64** %Sp_Var
  %lnbnQ = load i64, i64* %R2_Var
  %lnbnR = load i64, i64* %R3_Var
  %lnbnS = load i64, i64* %R4_Var
  %lnbnT = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbnO( i64* %Base_Arg, i64* %lnbnP, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbnQ, i64 %lnbnR, i64 %lnbnS, i64 %lnbnT, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbi9_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbi9_info$def to i8*)
define internal ghccc void @cbi9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cbi9:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbnU = load i64, i64* %R1_Var
  %lnbnV = and i64 %lnbnU, -8
  store i64 %lnbnV, i64* %R1_Var
  %lnbnW = load i64*, i64** %Sp_Var
  %lnbnX = getelementptr inbounds i64, i64* %lnbnW, i32 1
  %lnbnY = ptrtoint i64* %lnbnX to i64
  %lnbnZ = inttoptr i64 %lnbnY to i64*
  store i64* %lnbnZ, i64** %Sp_Var
  %lnbo1 = load i64, i64* %R1_Var
  %lnbo2 = inttoptr i64 %lnbo1 to i64*
  %lnbo3 = load i64, i64* %lnbo2, !tbaa !3
  %lnbo4 = inttoptr i64 %lnbo3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbo5 = load i64*, i64** %Sp_Var
  %lnbo6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbo4( i64* %Base_Arg, i64* %lnbo5, i64* %Hp_Arg, i64 %lnbo6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwwrshift_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwrshift_info$def to i8*)
define ghccc void @Word_zdwwrshift_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwrshift_info$def to i64)),i64 296), i64 8589934607, i64 0, i64 32510570263478287}>
{
cbie:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbo7 = load i64*, i64** %Sp_Var
  %lnbo8 = getelementptr inbounds i64, i64* %lnbo7, i32 -7
  %lnbo9 = ptrtoint i64* %lnbo8 to i64
  %lnboa = icmp uge i64 %lnbo9, %SpLim_Arg
  br i1 %lnboa, label %ubjY, label %cbif
cbif:
  %lnbob = load i64, i64* %R3_Var
  store i64 %lnbob, i64* %R3_Var
  %lnboc = load i64, i64* %R2_Var
  store i64 %lnboc, i64* %R2_Var
  %lnbod = ptrtoint %Word_zdwwrshift_closure_struct* @Word_zdwwrshift_closure$def to i64
  store i64 %lnbod, i64* %R1_Var
  %lnboe = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbof = bitcast i64* %lnboe to i64*
  %lnbog = load i64, i64* %lnbof, !tbaa !4
  %lnboh = inttoptr i64 %lnbog to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboi = load i64*, i64** %Sp_Var
  %lnboj = load i64, i64* %R1_Var
  %lnbok = load i64, i64* %R2_Var
  %lnbol = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboh( i64* %Base_Arg, i64* %lnboi, i64* %Hp_Arg, i64 %lnboj, i64 %lnbok, i64 %lnbol, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubjY:
  %lnbon = load i64, i64* %R2_Var
  %lnbom = load i64*, i64** %Sp_Var
  %lnboo = getelementptr inbounds i64, i64* %lnbom, i32 -2
  store i64 %lnbon, i64* %lnboo, !tbaa !1
  %lnboq = load i64, i64* %R3_Var
  %lnbop = load i64*, i64** %Sp_Var
  %lnbor = getelementptr inbounds i64, i64* %lnbop, i32 -1
  store i64 %lnboq, i64* %lnbor, !tbaa !1
  %lnbos = load i64*, i64** %Sp_Var
  %lnbot = getelementptr inbounds i64, i64* %lnbos, i32 -2
  %lnbou = ptrtoint i64* %lnbot to i64
  %lnbov = inttoptr i64 %lnbou to i64*
  store i64* %lnbov, i64** %Sp_Var
  %lnbow = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh3_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbox = load i64*, i64** %Sp_Var
  %lnboy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbow( i64* %Base_Arg, i64* %lnbox, i64* %Hp_Arg, i64 %lnboy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbh3_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh3_entry$def to i8*)
define internal ghccc void @cbh3_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cbh3:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnboA = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh6_info$def to i64
  %lnboz = load i64*, i64** %Sp_Var
  %lnboB = getelementptr inbounds i64, i64* %lnboz, i32 -1
  store i64 %lnboA, i64* %lnboB, !tbaa !1
  %lnboC = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnboD = add i64 %lnboC, 1
  store i64 %lnboD, i64* %R3_Var
  %lnboE = load i64*, i64** %Sp_Var
  %lnboF = getelementptr inbounds i64, i64* %lnboE, i32 1
  %lnboG = bitcast i64* %lnboF to i64*
  %lnboH = load i64, i64* %lnboG, !tbaa !1
  store i64 %lnboH, i64* %R2_Var
  %lnboI = load i64*, i64** %Sp_Var
  %lnboJ = getelementptr inbounds i64, i64* %lnboI, i32 -1
  %lnboK = ptrtoint i64* %lnboJ to i64
  %lnboL = inttoptr i64 %lnboK to i64*
  store i64* %lnboL, i64** %Sp_Var
  %lnboM = bitcast i8* @integerzmgmp_GHCziIntegerziType_gtIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnboN = load i64*, i64** %Sp_Var
  %lnboO = load i64, i64* %R2_Var
  %lnboP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnboM( i64* %Base_Arg, i64* %lnboN, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnboO, i64 %lnboP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbh6_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh6_info$def to i8*)
define internal ghccc void @cbh6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh6_info$def to i64)),i64 296), i64 2, i64 32510570263478304}>
{
cbh6:
  %ls87R = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnboQ = load i64, i64* %R1_Var
  switch i64 %lnboQ, label %cbij [i64 0, label %cbij
i64 1, label %cbjK]
cbij:
  %lnboR = load i64*, i64** %Sp_Var
  %lnboS = getelementptr inbounds i64, i64* %lnboR, i32 1
  %lnboT = bitcast i64* %lnboS to i64*
  %lnboU = load i64, i64* %lnboT, !tbaa !1
  store i64 %lnboU, i64* %ls87R
  %lnboW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhc_info$def to i64
  %lnboV = load i64*, i64** %Sp_Var
  %lnboX = getelementptr inbounds i64, i64* %lnboV, i32 1
  store i64 %lnboW, i64* %lnboX, !tbaa !1
  %lnboY = load i64, i64* %ls87R
  store i64 %lnboY, i64* %R1_Var
  %lnboZ = load i64*, i64** %Sp_Var
  %lnbp0 = getelementptr inbounds i64, i64* %lnboZ, i32 1
  %lnbp1 = ptrtoint i64* %lnbp0 to i64
  %lnbp2 = inttoptr i64 %lnbp1 to i64*
  store i64* %lnbp2, i64** %Sp_Var
  %lnbp3 = load i64, i64* %R1_Var
  %lnbp4 = and i64 %lnbp3, 7
  %lnbp5 = icmp ne i64 %lnbp4, 0
  br i1 %lnbp5, label %ubk2, label %cbhd
cbhd:
  %lnbp7 = load i64, i64* %R1_Var
  %lnbp8 = inttoptr i64 %lnbp7 to i64*
  %lnbp9 = load i64, i64* %lnbp8, !tbaa !3
  %lnbpa = inttoptr i64 %lnbp9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpb = load i64*, i64** %Sp_Var
  %lnbpc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpa( i64* %Base_Arg, i64* %lnbpb, i64* %Hp_Arg, i64 %lnbpc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubk2:
  %lnbpd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhc_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpe = load i64*, i64** %Sp_Var
  %lnbpf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpd( i64* %Base_Arg, i64* %lnbpe, i64* %Hp_Arg, i64 %lnbpf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbjK:
  %lnbph = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjF_info$def to i64
  %lnbpg = load i64*, i64** %Sp_Var
  %lnbpi = getelementptr inbounds i64, i64* %lnbpg, i32 0
  store i64 %lnbph, i64* %lnbpi, !tbaa !1
  %lnbpj = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbpk = add i64 %lnbpj, 1
  store i64 %lnbpk, i64* %R3_Var
  %lnbpl = load i64*, i64** %Sp_Var
  %lnbpm = getelementptr inbounds i64, i64* %lnbpl, i32 2
  %lnbpn = bitcast i64* %lnbpm to i64*
  %lnbpo = load i64, i64* %lnbpn, !tbaa !1
  store i64 %lnbpo, i64* %R2_Var
  %lnbpp = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpq = load i64*, i64** %Sp_Var
  %lnbpr = load i64, i64* %R1_Var
  %lnbps = load i64, i64* %R2_Var
  %lnbpt = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpp( i64* %Base_Arg, i64* %lnbpq, i64* %Hp_Arg, i64 %lnbpr, i64 %lnbps, i64 %lnbpt, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbjF_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjF_info$def to i8*)
define internal ghccc void @cbjF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjF_info$def to i64)),i64 296), i64 130, i64 32510570263478304}>
{
cbjF:
  %ls87R = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbpu = load i64*, i64** %Sp_Var
  %lnbpv = getelementptr inbounds i64, i64* %lnbpu, i32 1
  %lnbpw = bitcast i64* %lnbpv to i64*
  %lnbpx = load i64, i64* %lnbpw, !tbaa !1
  store i64 %lnbpx, i64* %ls87R
  %lnbpz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjJ_info$def to i64
  %lnbpy = load i64*, i64** %Sp_Var
  %lnbpA = getelementptr inbounds i64, i64* %lnbpy, i32 1
  store i64 %lnbpz, i64* %lnbpA, !tbaa !1
  %lnbpB = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbpC = add i64 %lnbpB, 1
  store i64 %lnbpC, i64* %R3_Var
  %lnbpD = load i64, i64* %ls87R
  store i64 %lnbpD, i64* %R2_Var
  %lnbpE = load i64*, i64** %Sp_Var
  %lnbpF = getelementptr inbounds i64, i64* %lnbpE, i32 2
  store i64 %R1_Arg, i64* %lnbpF, !tbaa !1
  %lnbpG = load i64*, i64** %Sp_Var
  %lnbpH = getelementptr inbounds i64, i64* %lnbpG, i32 1
  %lnbpI = ptrtoint i64* %lnbpH to i64
  %lnbpJ = inttoptr i64 %lnbpI to i64*
  store i64* %lnbpJ, i64** %Sp_Var
  %lnbpK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwrshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbpL = load i64*, i64** %Sp_Var
  %lnbpM = load i64, i64* %R2_Var
  %lnbpN = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpK( i64* %Base_Arg, i64* %lnbpL, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbpM, i64 %lnbpN, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbjJ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjJ_info$def to i8*)
define internal ghccc void @cbjJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjJ_info$def to i64)),i64 296), i64 1, i64 32510570263478304}>
{
cbjJ:
  %lnbpO = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnbpO, !tbaa !1
  %lnbpP = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbpQ = bitcast i64* %lnbpP to i64*
  %lnbpR = load i64, i64* %lnbpQ, !tbaa !1
  %lnbpS = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %lnbpR, i64* %lnbpS, !tbaa !1
  %lnbpT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbh3_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbpT( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbhc_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhc_info$def to i8*)
define internal ghccc void @cbhc_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhc_info$def to i64)),i64 296), i64 1, i64 14355434265640992}>
{
cbhc:
  %ls87S = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls87W = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbpU = load i64*, i64** %Sp_Var
  %lnbpV = getelementptr inbounds i64, i64* %lnbpU, i32 1
  %lnbpW = bitcast i64* %lnbpV to i64*
  %lnbpX = load i64, i64* %lnbpW, !tbaa !1
  store i64 %lnbpX, i64* %ls87S
  %lnbpY = load i64, i64* %R1_Var
  %lnbpZ = and i64 %lnbpY, 7
  switch i64 %lnbpZ, label %cbim [i64 1, label %cbim
i64 2, label %cbit
i64 3, label %cbiN]
cbim:
  %lnbq0 = load i64*, i64** %Hp_Var
  %lnbq1 = getelementptr inbounds i64, i64* %lnbq0, i32 6
  %lnbq2 = ptrtoint i64* %lnbq1 to i64
  %lnbq3 = inttoptr i64 %lnbq2 to i64*
  store i64* %lnbq3, i64** %Hp_Var
  %lnbq4 = load i64*, i64** %Hp_Var
  %lnbq5 = ptrtoint i64* %lnbq4 to i64
  %lnbq6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbq7 = bitcast i64* %lnbq6 to i64*
  %lnbq8 = load i64, i64* %lnbq7, !tbaa !4
  %lnbq9 = icmp ugt i64 %lnbq5, %lnbq8
  br i1 %lnbq9, label %cbip, label %cbio
cbio:
  %lnbqc = load i64, i64* %R1_Var
  %lnbqd = add i64 %lnbqc, 7
  %lnbqe = inttoptr i64 %lnbqd to i64*
  %lnbqf = load i64, i64* %lnbqe, !tbaa !3
  store i64 %lnbqf, i64* %ls87W
  %lnbqh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s882_info$def to i64
  %lnbqg = load i64*, i64** %Hp_Var
  %lnbqi = getelementptr inbounds i64, i64* %lnbqg, i32 -5
  store i64 %lnbqh, i64* %lnbqi, !tbaa !2
  %lnbqk = load i64, i64* %ls87S
  %lnbqj = load i64*, i64** %Hp_Var
  %lnbql = getelementptr inbounds i64, i64* %lnbqj, i32 -3
  store i64 %lnbqk, i64* %lnbql, !tbaa !2
  %lnbqn = load i64, i64* %ls87W
  %lnbqm = load i64*, i64** %Hp_Var
  %lnbqo = getelementptr inbounds i64, i64* %lnbqm, i32 -2
  store i64 %lnbqn, i64* %lnbqo, !tbaa !2
  %lnbqq = ptrtoint i8* @Word_W_con_info to i64
  %lnbqp = load i64*, i64** %Hp_Var
  %lnbqr = getelementptr inbounds i64, i64* %lnbqp, i32 -1
  store i64 %lnbqq, i64* %lnbqr, !tbaa !2
  %lnbqt = load i64*, i64** %Hp_Var
  %lnbqu = getelementptr inbounds i64, i64* %lnbqt, i32 -5
  %lnbqv = ptrtoint i64* %lnbqu to i64
  %lnbqs = load i64*, i64** %Hp_Var
  %lnbqw = getelementptr inbounds i64, i64* %lnbqs, i32 0
  store i64 %lnbqv, i64* %lnbqw, !tbaa !2
  %lnbqy = load i64*, i64** %Hp_Var
  %lnbqz = ptrtoint i64* %lnbqy to i64
  %lnbqA = add i64 %lnbqz, -7
  store i64 %lnbqA, i64* %R1_Var
  %lnbqB = load i64*, i64** %Sp_Var
  %lnbqC = getelementptr inbounds i64, i64* %lnbqB, i32 2
  %lnbqD = ptrtoint i64* %lnbqC to i64
  %lnbqE = inttoptr i64 %lnbqD to i64*
  store i64* %lnbqE, i64** %Sp_Var
  %lnbqF = load i64*, i64** %Sp_Var
  %lnbqG = getelementptr inbounds i64, i64* %lnbqF, i32 0
  %lnbqH = bitcast i64* %lnbqG to i64*
  %lnbqI = load i64, i64* %lnbqH, !tbaa !1
  %lnbqJ = inttoptr i64 %lnbqI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqK = load i64*, i64** %Sp_Var
  %lnbqL = load i64*, i64** %Hp_Var
  %lnbqM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqJ( i64* %Base_Arg, i64* %lnbqK, i64* %lnbqL, i64 %lnbqM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbip:
  %lnbqN = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnbqN, !tbaa !4
  %lnbqO = load i64, i64* %R1_Var
  store i64 %lnbqO, i64* %R1_Var
  %lnbqP = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbqQ = load i64*, i64** %Sp_Var
  %lnbqR = load i64*, i64** %Hp_Var
  %lnbqS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbqP( i64* %Base_Arg, i64* %lnbqQ, i64* %lnbqR, i64 %lnbqS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbit:
  %lnbqU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbir_info$def to i64
  %lnbqT = load i64*, i64** %Sp_Var
  %lnbqV = getelementptr inbounds i64, i64* %lnbqT, i32 0
  store i64 %lnbqU, i64* %lnbqV, !tbaa !1
  %lnbqW = load i64, i64* %ls87S
  store i64 %lnbqW, i64* %R2_Var
  %lnbr0 = load i64, i64* %R1_Var
  %lnbr1 = add i64 %lnbr0, 6
  %lnbr2 = inttoptr i64 %lnbr1 to i64*
  %lnbr3 = load i64, i64* %lnbr2, !tbaa !3
  %lnbqX = load i64*, i64** %Sp_Var
  %lnbr4 = getelementptr inbounds i64, i64* %lnbqX, i32 1
  store i64 %lnbr3, i64* %lnbr4, !tbaa !1
  %lnbr5 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbr6 = load i64*, i64** %Sp_Var
  %lnbr7 = load i64*, i64** %Hp_Var
  %lnbr8 = load i64, i64* %R1_Var
  %lnbr9 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbr5( i64* %Base_Arg, i64* %lnbr6, i64* %lnbr7, i64 %lnbr8, i64 %lnbr9, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbiN:
  %lnbrb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhI_info$def to i64
  %lnbra = load i64*, i64** %Sp_Var
  %lnbrc = getelementptr inbounds i64, i64* %lnbra, i32 0
  store i64 %lnbrb, i64* %lnbrc, !tbaa !1
  %lnbrf = load i64, i64* %R1_Var
  %lnbrg = add i64 %lnbrf, 5
  %lnbrh = inttoptr i64 %lnbrg to i64*
  %lnbri = load i64, i64* %lnbrh, !tbaa !3
  store i64 %lnbri, i64* %R1_Var
  %lnbrj = load i64, i64* %R1_Var
  %lnbrk = and i64 %lnbrj, 7
  %lnbrl = icmp ne i64 %lnbrk, 0
  br i1 %lnbrl, label %ubk3, label %cbhJ
cbhJ:
  %lnbrn = load i64, i64* %R1_Var
  %lnbro = inttoptr i64 %lnbrn to i64*
  %lnbrp = load i64, i64* %lnbro, !tbaa !3
  %lnbrq = inttoptr i64 %lnbrp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbrr = load i64*, i64** %Sp_Var
  %lnbrs = load i64*, i64** %Hp_Var
  %lnbrt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbrq( i64* %Base_Arg, i64* %lnbrr, i64* %lnbrs, i64 %lnbrt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubk3:
  %lnbru = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhI_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbrv = load i64*, i64** %Sp_Var
  %lnbrw = load i64*, i64** %Hp_Var
  %lnbrx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbru( i64* %Base_Arg, i64* %lnbrv, i64* %lnbrw, i64 %lnbrx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbhI_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhI_info$def to i8*)
define internal ghccc void @cbhI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhI_info$def to i64)),i64 296), i64 1, i64 14355228107210784}>
{
cbhI:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbrz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhN_info$def to i64
  %lnbry = load i64*, i64** %Sp_Var
  %lnbrA = getelementptr inbounds i64, i64* %lnbry, i32 -5
  store i64 %lnbrz, i64* %lnbrA, !tbaa !1
  %lnbrB = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lnbrC = add i64 %lnbrB, 1
  store i64 %lnbrC, i64* %R3_Var
  %lnbrD = load i64*, i64** %Sp_Var
  %lnbrE = getelementptr inbounds i64, i64* %lnbrD, i32 1
  %lnbrF = bitcast i64* %lnbrE to i64*
  %lnbrG = load i64, i64* %lnbrF, !tbaa !1
  store i64 %lnbrG, i64* %R2_Var
  %lnbrI = add i64 %R1_Arg, 15
  %lnbrJ = inttoptr i64 %lnbrI to i64*
  %lnbrK = load i64, i64* %lnbrJ, !tbaa !3
  %lnbrH = load i64*, i64** %Sp_Var
  %lnbrL = getelementptr inbounds i64, i64* %lnbrH, i32 -4
  store i64 %lnbrK, i64* %lnbrL, !tbaa !1
  %lnbrN = add i64 %R1_Arg, 7
  %lnbrO = inttoptr i64 %lnbrN to i64*
  %lnbrP = load i64, i64* %lnbrO, !tbaa !3
  %lnbrM = load i64*, i64** %Sp_Var
  %lnbrQ = getelementptr inbounds i64, i64* %lnbrM, i32 -3
  store i64 %lnbrP, i64* %lnbrQ, !tbaa !1
  %lnbrS = add i64 %R1_Arg, 23
  %lnbrT = inttoptr i64 %lnbrS to i64*
  %lnbrU = load i64, i64* %lnbrT, !tbaa !3
  %lnbrR = load i64*, i64** %Sp_Var
  %lnbrV = getelementptr inbounds i64, i64* %lnbrR, i32 -2
  store i64 %lnbrU, i64* %lnbrV, !tbaa !1
  %lnbrX = add i64 %R1_Arg, 31
  %lnbrY = inttoptr i64 %lnbrX to i64*
  %lnbrZ = load i64, i64* %lnbrY, !tbaa !3
  %lnbrW = load i64*, i64** %Sp_Var
  %lnbs0 = getelementptr inbounds i64, i64* %lnbrW, i32 -1
  store i64 %lnbrZ, i64* %lnbs0, !tbaa !1
  %lnbs1 = load i64*, i64** %Sp_Var
  %lnbs2 = getelementptr inbounds i64, i64* %lnbs1, i32 0
  store i64 %R1_Arg, i64* %lnbs2, !tbaa !1
  %lnbs3 = load i64*, i64** %Sp_Var
  %lnbs4 = getelementptr inbounds i64, i64* %lnbs3, i32 -5
  %lnbs5 = ptrtoint i64* %lnbs4 to i64
  %lnbs6 = inttoptr i64 %lnbs5 to i64*
  store i64* %lnbs6, i64** %Sp_Var
  %lnbs7 = bitcast i8* @integerzmgmp_GHCziIntegerziType_remInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbs8 = load i64*, i64** %Sp_Var
  %lnbs9 = load i64, i64* %R2_Var
  %lnbsa = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbs7( i64* %Base_Arg, i64* %lnbs8, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbs9, i64 %lnbsa, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbhN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhN_info$def to i8*)
define internal ghccc void @cbhN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhN_info$def to i64)),i64 296), i64 838, i64 13792278153789472}>
{
cbhN:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbsb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhR_info$def to i64
  %lnbsc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbsb, i64* %lnbsc, !tbaa !1
  %lnbsd = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lnbse = add i64 %lnbsd, 1
  store i64 %lnbse, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnbsf = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbsg = load i64, i64* %R2_Var
  %lnbsh = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbsf( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbsg, i64 %lnbsh, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbhR_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhR_info$def to i8*)
define internal ghccc void @cbhR_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbhR_info$def to i64)),i64 296), i64 838, i64 13792278153789472}>
{
cbhR:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls87S = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbsi = load i64*, i64** %Hp_Var
  %lnbsj = getelementptr inbounds i64, i64* %lnbsi, i32 6
  %lnbsk = ptrtoint i64* %lnbsj to i64
  %lnbsl = inttoptr i64 %lnbsk to i64*
  store i64* %lnbsl, i64** %Hp_Var
  %lnbsm = load i64*, i64** %Hp_Var
  %lnbsn = ptrtoint i64* %lnbsm to i64
  %lnbso = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbsp = bitcast i64* %lnbso to i64*
  %lnbsq = load i64, i64* %lnbsp, !tbaa !4
  %lnbsr = icmp ugt i64 %lnbsn, %lnbsq
  br i1 %lnbsr, label %cbiS, label %cbiR
cbiR:
  %lnbss = load i64*, i64** %Sp_Var
  %lnbst = getelementptr inbounds i64, i64* %lnbss, i32 6
  %lnbsu = bitcast i64* %lnbst to i64*
  %lnbsv = load i64, i64* %lnbsu, !tbaa !1
  store i64 %lnbsv, i64* %ls87S
  %lnbsw = load i64, i64* %R1_Var
  switch i64 %lnbsw, label %cbiU [i64 0, label %cbiU
i64 1, label %cbjh]
cbiU:
  %lnbsy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88l_info$def to i64
  %lnbsx = load i64*, i64** %Hp_Var
  %lnbsz = getelementptr inbounds i64, i64* %lnbsx, i32 -5
  store i64 %lnbsy, i64* %lnbsz, !tbaa !2
  %lnbsB = load i64*, i64** %Sp_Var
  %lnbsC = getelementptr inbounds i64, i64* %lnbsB, i32 2
  %lnbsD = bitcast i64* %lnbsC to i64*
  %lnbsE = load i64, i64* %lnbsD, !tbaa !1
  %lnbsA = load i64*, i64** %Hp_Var
  %lnbsF = getelementptr inbounds i64, i64* %lnbsA, i32 -3
  store i64 %lnbsE, i64* %lnbsF, !tbaa !2
  %lnbsH = load i64*, i64** %Sp_Var
  %lnbsI = getelementptr inbounds i64, i64* %lnbsH, i32 1
  %lnbsJ = bitcast i64* %lnbsI to i64*
  %lnbsK = load i64, i64* %lnbsJ, !tbaa !1
  %lnbsG = load i64*, i64** %Hp_Var
  %lnbsL = getelementptr inbounds i64, i64* %lnbsG, i32 -2
  store i64 %lnbsK, i64* %lnbsL, !tbaa !2
  %lnbsN = load i64*, i64** %Sp_Var
  %lnbsO = getelementptr inbounds i64, i64* %lnbsN, i32 3
  %lnbsP = bitcast i64* %lnbsO to i64*
  %lnbsQ = load i64, i64* %lnbsP, !tbaa !1
  %lnbsM = load i64*, i64** %Hp_Var
  %lnbsR = getelementptr inbounds i64, i64* %lnbsM, i32 -1
  store i64 %lnbsQ, i64* %lnbsR, !tbaa !2
  %lnbsT = load i64*, i64** %Sp_Var
  %lnbsU = getelementptr inbounds i64, i64* %lnbsT, i32 4
  %lnbsV = bitcast i64* %lnbsU to i64*
  %lnbsW = load i64, i64* %lnbsV, !tbaa !1
  %lnbsS = load i64*, i64** %Hp_Var
  %lnbsX = getelementptr inbounds i64, i64* %lnbsS, i32 0
  store i64 %lnbsW, i64* %lnbsX, !tbaa !2
  %lnbsY = load i64*, i64** %Hp_Var
  %lnbsZ = getelementptr inbounds i64, i64* %lnbsY, i32 -5
  %lnbt0 = ptrtoint i64* %lnbsZ to i64
  store i64 %lnbt0, i64* %R3_Var
  %lnbt1 = load i64, i64* %ls87S
  store i64 %lnbt1, i64* %R2_Var
  %lnbt2 = load i64*, i64** %Sp_Var
  %lnbt3 = getelementptr inbounds i64, i64* %lnbt2, i32 7
  %lnbt4 = ptrtoint i64* %lnbt3 to i64
  %lnbt5 = inttoptr i64 %lnbt4 to i64*
  store i64* %lnbt5, i64** %Sp_Var
  %lnbt6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshiftzuzdszdwwrshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbt7 = load i64*, i64** %Sp_Var
  %lnbt8 = load i64*, i64** %Hp_Var
  %lnbt9 = load i64, i64* %R1_Var
  %lnbta = load i64, i64* %R2_Var
  %lnbtb = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbt6( i64* %Base_Arg, i64* %lnbt7, i64* %lnbt8, i64 %lnbt9, i64 %lnbta, i64 %lnbtb, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbjh:
  %lnbtc = load i64*, i64** %Hp_Var
  %lnbtd = getelementptr inbounds i64, i64* %lnbtc, i32 -6
  %lnbte = ptrtoint i64* %lnbtd to i64
  %lnbtf = inttoptr i64 %lnbte to i64*
  store i64* %lnbtf, i64** %Hp_Var
  %lnbth = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiW_info$def to i64
  %lnbtg = load i64*, i64** %Sp_Var
  %lnbti = getelementptr inbounds i64, i64* %lnbtg, i32 0
  store i64 %lnbth, i64* %lnbti, !tbaa !1
  %lnbtj = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lnbtk = add i64 %lnbtj, 1
  store i64 %lnbtk, i64* %R3_Var
  %lnbtl = load i64, i64* %ls87S
  store i64 %lnbtl, i64* %R2_Var
  %lnbtm = bitcast i8* @integerzmgmp_GHCziIntegerziType_quotInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbtn = load i64*, i64** %Sp_Var
  %lnbto = load i64*, i64** %Hp_Var
  %lnbtp = load i64, i64* %R1_Var
  %lnbtq = load i64, i64* %R2_Var
  %lnbtr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbtm( i64* %Base_Arg, i64* %lnbtn, i64* %lnbto, i64 %lnbtp, i64 %lnbtq, i64 %lnbtr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbiS:
  %lnbts = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnbts, !tbaa !4
  %lnbtt = load i64, i64* %R1_Var
  store i64 %lnbtt, i64* %R1_Var
  %lnbtu = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbtv = load i64*, i64** %Sp_Var
  %lnbtw = load i64*, i64** %Hp_Var
  %lnbtx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbtu( i64* %Base_Arg, i64* %lnbtv, i64* %lnbtw, i64 %lnbtx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbiW_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiW_info$def to i8*)
define internal ghccc void @cbiW_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbiW_info$def to i64)),i64 456), i64 2886, i64 4294967328}>
{
cbiW:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbty = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbj0_info$def to i64
  %lnbtz = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbty, i64* %lnbtz, !tbaa !1
  store i64 %R1_Arg, i64* %R2_Var
  %lnbtA = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbtB = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbtA( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbtB, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbj0_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbj0_info$def to i8*)
define internal ghccc void @cbj0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbj0_info$def to i64)),i64 456), i64 2886, i64 4294967328}>
{
cbj0:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls88d = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbtC = load i64*, i64** %Hp_Var
  %lnbtD = getelementptr inbounds i64, i64* %lnbtC, i32 5
  %lnbtE = ptrtoint i64* %lnbtD to i64
  %lnbtF = inttoptr i64 %lnbtE to i64*
  store i64* %lnbtF, i64** %Hp_Var
  %lnbtG = load i64*, i64** %Hp_Var
  %lnbtH = ptrtoint i64* %lnbtG to i64
  %lnbtI = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbtJ = bitcast i64* %lnbtI to i64*
  %lnbtK = load i64, i64* %lnbtJ, !tbaa !4
  %lnbtL = icmp ugt i64 %lnbtH, %lnbtK
  br i1 %lnbtL, label %cbjl, label %cbjk
cbjk:
  %lnbtM = load i64, i64* %R1_Var
  %lnbtN = icmp sle i64 %lnbtM, 0
  %lnbtO = zext i1 %lnbtN to i64
  switch i64 %lnbtO, label %cbj9 [i64 0, label %cbj9
i64 1, label %cbja]
cbj9:
  %lnbtP = load i64*, i64** %Sp_Var
  %lnbtQ = getelementptr inbounds i64, i64* %lnbtP, i32 4
  %lnbtR = bitcast i64* %lnbtQ to i64*
  %lnbtS = load i64, i64* %lnbtR, !tbaa !1
  store i64 %lnbtS, i64* %ls88d
  %lnbtT = load i64, i64* %R1_Var
  %lnbtU = load i64, i64* %ls88d
  %lnbtV = icmp sge i64 %lnbtT, %lnbtU
  %lnbtW = zext i1 %lnbtV to i64
  switch i64 %lnbtW, label %cbjs [i64 0, label %cbjs
i64 1, label %cbjw]
cbjs:
  %lnbtY = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lnbtX = load i64*, i64** %Hp_Var
  %lnbtZ = getelementptr inbounds i64, i64* %lnbtX, i32 -4
  store i64 %lnbtY, i64* %lnbtZ, !tbaa !2
  %lnbu1 = load i64*, i64** %Sp_Var
  %lnbu2 = getelementptr inbounds i64, i64* %lnbu1, i32 2
  %lnbu3 = bitcast i64* %lnbu2 to i64*
  %lnbu4 = load i64, i64* %lnbu3, !tbaa !1
  %lnbu0 = load i64*, i64** %Hp_Var
  %lnbu5 = getelementptr inbounds i64, i64* %lnbu0, i32 -3
  store i64 %lnbu4, i64* %lnbu5, !tbaa !2
  %lnbu7 = load i64*, i64** %Sp_Var
  %lnbu8 = getelementptr inbounds i64, i64* %lnbu7, i32 1
  %lnbu9 = bitcast i64* %lnbu8 to i64*
  %lnbua = load i64, i64* %lnbu9, !tbaa !1
  %lnbu6 = load i64*, i64** %Hp_Var
  %lnbub = getelementptr inbounds i64, i64* %lnbu6, i32 -2
  store i64 %lnbua, i64* %lnbub, !tbaa !2
  %lnbud = load i64*, i64** %Sp_Var
  %lnbue = getelementptr inbounds i64, i64* %lnbud, i32 3
  %lnbuf = bitcast i64* %lnbue to i64*
  %lnbug = load i64, i64* %lnbuf, !tbaa !1
  %lnbuh = load i64, i64* %R1_Var
  %lnbui = add i64 %lnbug, %lnbuh
  %lnbuc = load i64*, i64** %Hp_Var
  %lnbuj = getelementptr inbounds i64, i64* %lnbuc, i32 -1
  store i64 %lnbui, i64* %lnbuj, !tbaa !2
  %lnbul = load i64, i64* %ls88d
  %lnbum = load i64, i64* %R1_Var
  %lnbun = sub i64 %lnbul, %lnbum
  %lnbuk = load i64*, i64** %Hp_Var
  %lnbuo = getelementptr inbounds i64, i64* %lnbuk, i32 0
  store i64 %lnbun, i64* %lnbuo, !tbaa !2
  %lnbur = load i64*, i64** %Hp_Var
  %lnbus = ptrtoint i64* %lnbur to i64
  %lnbut = add i64 %lnbus, -31
  %lnbup = load i64*, i64** %Sp_Var
  %lnbuu = getelementptr inbounds i64, i64* %lnbup, i32 6
  store i64 %lnbut, i64* %lnbuu, !tbaa !1
  %lnbuv = load i64*, i64** %Sp_Var
  %lnbuw = getelementptr inbounds i64, i64* %lnbuv, i32 6
  %lnbux = ptrtoint i64* %lnbuw to i64
  %lnbuy = inttoptr i64 %lnbux to i64*
  store i64* %lnbuy, i64** %Sp_Var
  %lnbuz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbje_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbuA = load i64*, i64** %Sp_Var
  %lnbuB = load i64*, i64** %Hp_Var
  %lnbuC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbuz( i64* %Base_Arg, i64* %lnbuA, i64* %lnbuB, i64 %lnbuC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbjw:
  %lnbuD = load i64*, i64** %Hp_Var
  %lnbuE = getelementptr inbounds i64, i64* %lnbuD, i32 -5
  %lnbuF = ptrtoint i64* %lnbuE to i64
  %lnbuG = inttoptr i64 %lnbuF to i64*
  store i64* %lnbuG, i64** %Hp_Var
  %lnbuI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjz_info$def to i64
  %lnbuH = load i64*, i64** %Sp_Var
  %lnbuJ = getelementptr inbounds i64, i64* %lnbuH, i32 6
  store i64 %lnbuI, i64* %lnbuJ, !tbaa !1
  %lnbuK = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteString_empty_closure to i64
  store i64 %lnbuK, i64* %R1_Var
  %lnbuL = load i64*, i64** %Sp_Var
  %lnbuM = getelementptr inbounds i64, i64* %lnbuL, i32 6
  %lnbuN = ptrtoint i64* %lnbuM to i64
  %lnbuO = inttoptr i64 %lnbuN to i64*
  store i64* %lnbuO, i64** %Sp_Var
  %lnbuP = load i64, i64* %R1_Var
  %lnbuQ = and i64 %lnbuP, 7
  %lnbuR = icmp ne i64 %lnbuQ, 0
  br i1 %lnbuR, label %ubk6, label %cbjA
cbjA:
  %lnbuT = load i64, i64* %R1_Var
  %lnbuU = inttoptr i64 %lnbuT to i64*
  %lnbuV = load i64, i64* %lnbuU, !tbaa !3
  %lnbuW = inttoptr i64 %lnbuV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbuX = load i64*, i64** %Sp_Var
  %lnbuY = load i64*, i64** %Hp_Var
  %lnbuZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbuW( i64* %Base_Arg, i64* %lnbuX, i64* %lnbuY, i64 %lnbuZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubk6:
  %lnbv0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjz_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbv1 = load i64*, i64** %Sp_Var
  %lnbv2 = load i64*, i64** %Hp_Var
  %lnbv3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbv0( i64* %Base_Arg, i64* %lnbv1, i64* %lnbv2, i64 %lnbv3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbja:
  %lnbv4 = load i64*, i64** %Hp_Var
  %lnbv5 = getelementptr inbounds i64, i64* %lnbv4, i32 -5
  %lnbv6 = ptrtoint i64* %lnbv5 to i64
  %lnbv7 = inttoptr i64 %lnbv6 to i64*
  store i64* %lnbv7, i64** %Hp_Var
  %lnbv9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjz_info$def to i64
  %lnbv8 = load i64*, i64** %Sp_Var
  %lnbva = getelementptr inbounds i64, i64* %lnbv8, i32 6
  store i64 %lnbv9, i64* %lnbva, !tbaa !1
  %lnbvb = load i64*, i64** %Sp_Var
  %lnbvc = getelementptr inbounds i64, i64* %lnbvb, i32 5
  %lnbvd = bitcast i64* %lnbvc to i64*
  %lnbve = load i64, i64* %lnbvd, !tbaa !1
  store i64 %lnbve, i64* %R1_Var
  %lnbvf = load i64*, i64** %Sp_Var
  %lnbvg = getelementptr inbounds i64, i64* %lnbvf, i32 6
  %lnbvh = ptrtoint i64* %lnbvg to i64
  %lnbvi = inttoptr i64 %lnbvh to i64*
  store i64* %lnbvi, i64** %Sp_Var
  %lnbvj = load i64, i64* %R1_Var
  %lnbvk = and i64 %lnbvj, 7
  %lnbvl = icmp ne i64 %lnbvk, 0
  br i1 %lnbvl, label %ubk6, label %cbjA
cbjl:
  %lnbvm = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnbvm, !tbaa !4
  %lnbvn = load i64, i64* %R1_Var
  store i64 %lnbvn, i64* %R1_Var
  %lnbvo = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbvp = load i64*, i64** %Sp_Var
  %lnbvq = load i64*, i64** %Hp_Var
  %lnbvr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbvo( i64* %Base_Arg, i64* %lnbvp, i64* %lnbvq, i64 %lnbvr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbje_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbje_entry$def to i8*)
define internal ghccc void @cbje_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cbje:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls88u = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbvs = load i64*, i64** %Hp_Var
  %lnbvt = getelementptr inbounds i64, i64* %lnbvs, i32 2
  %lnbvu = ptrtoint i64* %lnbvt to i64
  %lnbvv = inttoptr i64 %lnbvu to i64*
  store i64* %lnbvv, i64** %Hp_Var
  %lnbvw = load i64*, i64** %Sp_Var
  %lnbvx = getelementptr inbounds i64, i64* %lnbvw, i32 0
  %lnbvy = bitcast i64* %lnbvx to i64*
  %lnbvz = load i64, i64* %lnbvy, !tbaa !1
  store i64 %lnbvz, i64* %ls88u
  %lnbvA = load i64*, i64** %Hp_Var
  %lnbvB = ptrtoint i64* %lnbvA to i64
  %lnbvC = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbvD = bitcast i64* %lnbvC to i64*
  %lnbvE = load i64, i64* %lnbvD, !tbaa !4
  %lnbvF = icmp ugt i64 %lnbvB, %lnbvE
  br i1 %lnbvF, label %cbjD, label %cbjC
cbjC:
  %lnbvH = ptrtoint i8* @Word_WBS_con_info to i64
  %lnbvG = load i64*, i64** %Hp_Var
  %lnbvI = getelementptr inbounds i64, i64* %lnbvG, i32 -1
  store i64 %lnbvH, i64* %lnbvI, !tbaa !2
  %lnbvK = load i64, i64* %ls88u
  %lnbvJ = load i64*, i64** %Hp_Var
  %lnbvL = getelementptr inbounds i64, i64* %lnbvJ, i32 0
  store i64 %lnbvK, i64* %lnbvL, !tbaa !2
  %lnbvN = load i64*, i64** %Hp_Var
  %lnbvO = ptrtoint i64* %lnbvN to i64
  %lnbvP = add i64 %lnbvO, -5
  store i64 %lnbvP, i64* %R1_Var
  %lnbvQ = load i64*, i64** %Sp_Var
  %lnbvR = getelementptr inbounds i64, i64* %lnbvQ, i32 1
  %lnbvS = ptrtoint i64* %lnbvR to i64
  %lnbvT = inttoptr i64 %lnbvS to i64*
  store i64* %lnbvT, i64** %Sp_Var
  %lnbvU = load i64*, i64** %Sp_Var
  %lnbvV = getelementptr inbounds i64, i64* %lnbvU, i32 0
  %lnbvW = bitcast i64* %lnbvV to i64*
  %lnbvX = load i64, i64* %lnbvW, !tbaa !1
  %lnbvY = inttoptr i64 %lnbvX to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbvZ = load i64*, i64** %Sp_Var
  %lnbw0 = load i64*, i64** %Hp_Var
  %lnbw1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbvY( i64* %Base_Arg, i64* %lnbvZ, i64* %lnbw0, i64 %lnbw1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbjD:
  %lnbw2 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbw2, !tbaa !4
  %lnbw4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjz_info$def to i64
  %lnbw3 = load i64*, i64** %Sp_Var
  %lnbw5 = getelementptr inbounds i64, i64* %lnbw3, i32 0
  store i64 %lnbw4, i64* %lnbw5, !tbaa !1
  %lnbw6 = load i64, i64* %ls88u
  store i64 %lnbw6, i64* %R1_Var
  %lnbw7 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbw8 = load i64*, i64** %Sp_Var
  %lnbw9 = load i64*, i64** %Hp_Var
  %lnbwa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbw7( i64* %Base_Arg, i64* %lnbw8, i64* %lnbw9, i64 %lnbwa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbjz_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbjz_info$def to i8*)
define internal ghccc void @cbjz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cbjz:
  %lnbwb = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnbwb, !tbaa !1
  %lnbwc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbje_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbwc( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbir_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbir_info$def to i8*)
define internal ghccc void @cbir_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cbir:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbwd = load i64*, i64** %Hp_Var
  %lnbwe = getelementptr inbounds i64, i64* %lnbwd, i32 2
  %lnbwf = ptrtoint i64* %lnbwe to i64
  %lnbwg = inttoptr i64 %lnbwf to i64*
  store i64* %lnbwg, i64** %Hp_Var
  %lnbwh = load i64*, i64** %Hp_Var
  %lnbwi = ptrtoint i64* %lnbwh to i64
  %lnbwj = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbwk = bitcast i64* %lnbwj to i64*
  %lnbwl = load i64, i64* %lnbwk, !tbaa !4
  %lnbwm = icmp ugt i64 %lnbwi, %lnbwl
  br i1 %lnbwm, label %cbiz, label %cbiy
cbiy:
  %lnbwn = load i64, i64* %R1_Var
  %lnbwo = icmp sge i64 %lnbwn, 64
  %lnbwp = zext i1 %lnbwo to i64
  switch i64 %lnbwp, label %cbiK [i64 0, label %cbiK
i64 1, label %cbiL]
cbiK:
  %lnbwr = ptrtoint i8* @Word_W64_con_info to i64
  %lnbwq = load i64*, i64** %Hp_Var
  %lnbws = getelementptr inbounds i64, i64* %lnbwq, i32 -1
  store i64 %lnbwr, i64* %lnbws, !tbaa !2
  %lnbwu = load i64*, i64** %Sp_Var
  %lnbwv = getelementptr inbounds i64, i64* %lnbwu, i32 1
  %lnbww = bitcast i64* %lnbwv to i64*
  %lnbwx = load i64, i64* %lnbww, !tbaa !1
  %lnbwy = load i64, i64* %R1_Var
  %lnbwz = lshr i64 %lnbwx, %lnbwy
  %lnbwt = load i64*, i64** %Hp_Var
  %lnbwA = getelementptr inbounds i64, i64* %lnbwt, i32 0
  store i64 %lnbwz, i64* %lnbwA, !tbaa !2
  %lnbwC = load i64*, i64** %Hp_Var
  %lnbwD = ptrtoint i64* %lnbwC to i64
  %lnbwE = add i64 %lnbwD, -6
  store i64 %lnbwE, i64* %R1_Var
  %lnbwF = load i64*, i64** %Sp_Var
  %lnbwG = getelementptr inbounds i64, i64* %lnbwF, i32 2
  %lnbwH = ptrtoint i64* %lnbwG to i64
  %lnbwI = inttoptr i64 %lnbwH to i64*
  store i64* %lnbwI, i64** %Sp_Var
  %lnbwJ = load i64*, i64** %Sp_Var
  %lnbwK = getelementptr inbounds i64, i64* %lnbwJ, i32 0
  %lnbwL = bitcast i64* %lnbwK to i64*
  %lnbwM = load i64, i64* %lnbwL, !tbaa !1
  %lnbwN = inttoptr i64 %lnbwM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbwO = load i64*, i64** %Sp_Var
  %lnbwP = load i64*, i64** %Hp_Var
  %lnbwQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbwN( i64* %Base_Arg, i64* %lnbwO, i64* %lnbwP, i64 %lnbwQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbiL:
  %lnbwR = load i64*, i64** %Hp_Var
  %lnbwS = getelementptr inbounds i64, i64* %lnbwR, i32 -2
  %lnbwT = ptrtoint i64* %lnbwS to i64
  %lnbwU = inttoptr i64 %lnbwT to i64*
  store i64* %lnbwU, i64** %Hp_Var
  %lnbwV = ptrtoint %Word_wzzero1_closure_struct* @Word_wzzero1_closure$def to i64
  %lnbwW = add i64 %lnbwV, 2
  store i64 %lnbwW, i64* %R1_Var
  %lnbwX = load i64*, i64** %Sp_Var
  %lnbwY = getelementptr inbounds i64, i64* %lnbwX, i32 2
  %lnbwZ = ptrtoint i64* %lnbwY to i64
  %lnbx0 = inttoptr i64 %lnbwZ to i64*
  store i64* %lnbx0, i64** %Sp_Var
  %lnbx1 = load i64*, i64** %Sp_Var
  %lnbx2 = getelementptr inbounds i64, i64* %lnbx1, i32 0
  %lnbx3 = bitcast i64* %lnbx2 to i64*
  %lnbx4 = load i64, i64* %lnbx3, !tbaa !1
  %lnbx5 = inttoptr i64 %lnbx4 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbx6 = load i64*, i64** %Sp_Var
  %lnbx7 = load i64*, i64** %Hp_Var
  %lnbx8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbx5( i64* %Base_Arg, i64* %lnbx6, i64* %lnbx7, i64 %lnbx8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbiz:
  %lnbx9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbx9, !tbaa !4
  %lnbxa = load i64, i64* %R1_Var
  store i64 %lnbxa, i64* %R1_Var
  %lnbxb = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbxc = load i64*, i64** %Sp_Var
  %lnbxd = load i64*, i64** %Hp_Var
  %lnbxe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbxb( i64* %Base_Arg, i64* %lnbxc, i64* %lnbxd, i64 %lnbxe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s88K_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88K_info$def to i8*)
define internal ghccc void @s88K_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88K_info$def to i64)),i64 328), i64 2, i64 12884901907}>
{
cbkH:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbxf = load i64*, i64** %Sp_Var
  %lnbxg = getelementptr inbounds i64, i64* %lnbxf, i32 -4
  %lnbxh = ptrtoint i64* %lnbxg to i64
  %lnbxi = icmp ult i64 %lnbxh, %SpLim_Arg
  br i1 %lnbxi, label %cbkI, label %cbkJ
cbkJ:
  %lnbxk = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbxj = load i64*, i64** %Sp_Var
  %lnbxl = getelementptr inbounds i64, i64* %lnbxj, i32 -2
  store i64 %lnbxk, i64* %lnbxl, !tbaa !1
  %lnbxn = load i64, i64* %R1_Var
  %lnbxm = load i64*, i64** %Sp_Var
  %lnbxo = getelementptr inbounds i64, i64* %lnbxm, i32 -1
  store i64 %lnbxn, i64* %lnbxo, !tbaa !1
  %lnbxq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkF_info$def to i64
  %lnbxp = load i64*, i64** %Sp_Var
  %lnbxr = getelementptr inbounds i64, i64* %lnbxp, i32 -4
  store i64 %lnbxq, i64* %lnbxr, !tbaa !1
  %lnbxu = load i64, i64* %R1_Var
  %lnbxv = add i64 %lnbxu, 16
  %lnbxw = inttoptr i64 %lnbxv to i64*
  %lnbxx = load i64, i64* %lnbxw, !tbaa !3
  store i64 %lnbxx, i64* %R2_Var
  %lnbxB = load i64, i64* %R1_Var
  %lnbxC = add i64 %lnbxB, 24
  %lnbxD = inttoptr i64 %lnbxC to i64*
  %lnbxE = load i64, i64* %lnbxD, !tbaa !3
  %lnbxy = load i64*, i64** %Sp_Var
  %lnbxF = getelementptr inbounds i64, i64* %lnbxy, i32 -3
  store i64 %lnbxE, i64* %lnbxF, !tbaa !1
  %lnbxG = load i64*, i64** %Sp_Var
  %lnbxH = getelementptr inbounds i64, i64* %lnbxG, i32 -4
  %lnbxI = ptrtoint i64* %lnbxH to i64
  %lnbxJ = inttoptr i64 %lnbxI to i64*
  store i64* %lnbxJ, i64** %Sp_Var
  %lnbxK = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbxL = load i64*, i64** %Sp_Var
  %lnbxM = load i64, i64* %R1_Var
  %lnbxN = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbxK( i64* %Base_Arg, i64* %lnbxL, i64* %Hp_Arg, i64 %lnbxM, i64 %lnbxN, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbkI:
  %lnbxO = load i64, i64* %R1_Var
  store i64 %lnbxO, i64* %R1_Var
  %lnbxP = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbxQ = bitcast i64* %lnbxP to i64*
  %lnbxR = load i64, i64* %lnbxQ, !tbaa !4
  %lnbxS = inttoptr i64 %lnbxR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbxT = load i64*, i64** %Sp_Var
  %lnbxU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbxS( i64* %Base_Arg, i64* %lnbxT, i64* %Hp_Arg, i64 %lnbxU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbkF_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkF_info$def to i8*)
define internal ghccc void @cbkF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkF_info$def to i64)),i64 328), i64 1, i64 12884901920}>
{
cbkF:
  %ls88C = alloca i64, i32 1
  %ls88G = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbxV = load i64*, i64** %Sp_Var
  %lnbxW = getelementptr inbounds i64, i64* %lnbxV, i32 1
  %lnbxX = bitcast i64* %lnbxW to i64*
  %lnbxY = load i64, i64* %lnbxX, !tbaa !1
  store i64 %lnbxY, i64* %ls88C
  %lnbxZ = sub i64 0, %R1_Arg
  store i64 %lnbxZ, i64* %ls88G
  %lnby0 = load i64, i64* %ls88G
  %lnby1 = icmp sge i64 %lnby0, 0
  %lnby2 = zext i1 %lnby1 to i64
  switch i64 %lnby2, label %cbkV [i64 0, label %cbkV
i64 1, label %cbkW]
cbkV:
  %lnby3 = load i64, i64* %ls88G
  %lnby4 = sub i64 0, %lnby3
  store i64 %lnby4, i64* %R3_Var
  %lnby5 = load i64, i64* %ls88C
  store i64 %lnby5, i64* %R2_Var
  %lnby6 = load i64*, i64** %Sp_Var
  %lnby7 = getelementptr inbounds i64, i64* %lnby6, i32 2
  %lnby8 = ptrtoint i64* %lnby7 to i64
  %lnby9 = inttoptr i64 %lnby8 to i64*
  store i64* %lnby9, i64** %Sp_Var
  %lnbya = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyb = load i64*, i64** %Sp_Var
  %lnbyc = load i64, i64* %R2_Var
  %lnbyd = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbya( i64* %Base_Arg, i64* %lnbyb, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbyc, i64 %lnbyd, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbkW:
  %lnbye = load i64, i64* %ls88G
  store i64 %lnbye, i64* %R3_Var
  %lnbyf = load i64, i64* %ls88C
  store i64 %lnbyf, i64* %R2_Var
  %lnbyg = load i64*, i64** %Sp_Var
  %lnbyh = getelementptr inbounds i64, i64* %lnbyg, i32 2
  %lnbyi = ptrtoint i64* %lnbyh to i64
  %lnbyj = inttoptr i64 %lnbyi to i64*
  store i64* %lnbyj, i64** %Sp_Var
  %lnbyk = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyl = load i64*, i64** %Sp_Var
  %lnbym = load i64, i64* %R2_Var
  %lnbyn = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyk( i64* %Base_Arg, i64* %lnbyl, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbym, i64 %lnbyn, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wrshiftzuzdszdwwrshift_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshiftzuzdszdwwrshift_info$def to i8*)
define ghccc void @Word_wrshiftzuzdszdwwrshift_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshiftzuzdszdwwrshift_info$def to i64)),i64 328), i64 8589934607, i64 0, i64 1697658838188047}>
{
cbkZ:
  %ls88C = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls88B = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbyo = load i64*, i64** %Sp_Var
  %lnbyp = getelementptr inbounds i64, i64* %lnbyo, i32 -3
  %lnbyq = ptrtoint i64* %lnbyp to i64
  %lnbyr = icmp ult i64 %lnbyq, %SpLim_Arg
  br i1 %lnbyr, label %cbl0, label %cbl1
cbl1:
  %lnbyt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkv_info$def to i64
  %lnbys = load i64*, i64** %Sp_Var
  %lnbyu = getelementptr inbounds i64, i64* %lnbys, i32 -3
  store i64 %lnbyt, i64* %lnbyu, !tbaa !1
  %lnbyv = load i64, i64* %R3_Var
  store i64 %lnbyv, i64* %ls88C
  %lnbyw = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbyx = add i64 %lnbyw, 1
  store i64 %lnbyx, i64* %R3_Var
  %lnbyy = load i64, i64* %R2_Var
  store i64 %lnbyy, i64* %ls88B
  %lnbyz = load i64, i64* %R2_Var
  store i64 %lnbyz, i64* %R2_Var
  %lnbyB = load i64, i64* %ls88B
  %lnbyA = load i64*, i64** %Sp_Var
  %lnbyC = getelementptr inbounds i64, i64* %lnbyA, i32 -2
  store i64 %lnbyB, i64* %lnbyC, !tbaa !1
  %lnbyE = load i64, i64* %ls88C
  %lnbyD = load i64*, i64** %Sp_Var
  %lnbyF = getelementptr inbounds i64, i64* %lnbyD, i32 -1
  store i64 %lnbyE, i64* %lnbyF, !tbaa !1
  %lnbyG = load i64*, i64** %Sp_Var
  %lnbyH = getelementptr inbounds i64, i64* %lnbyG, i32 -3
  %lnbyI = ptrtoint i64* %lnbyH to i64
  %lnbyJ = inttoptr i64 %lnbyI to i64*
  store i64* %lnbyJ, i64** %Sp_Var
  %lnbyK = bitcast i8* @integerzmgmp_GHCziIntegerziType_gtIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyL = load i64*, i64** %Sp_Var
  %lnbyM = load i64, i64* %R1_Var
  %lnbyN = load i64, i64* %R2_Var
  %lnbyO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyK( i64* %Base_Arg, i64* %lnbyL, i64* %Hp_Arg, i64 %lnbyM, i64 %lnbyN, i64 %lnbyO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbl0:
  %lnbyP = load i64, i64* %R3_Var
  store i64 %lnbyP, i64* %R3_Var
  %lnbyQ = load i64, i64* %R2_Var
  store i64 %lnbyQ, i64* %R2_Var
  %lnbyR = ptrtoint %Word_wrshiftzuzdszdwwrshift_closure_struct* @Word_wrshiftzuzdszdwwrshift_closure$def to i64
  store i64 %lnbyR, i64* %R1_Var
  %lnbyS = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbyT = bitcast i64* %lnbyS to i64*
  %lnbyU = load i64, i64* %lnbyT, !tbaa !4
  %lnbyV = inttoptr i64 %lnbyU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbyW = load i64*, i64** %Sp_Var
  %lnbyX = load i64, i64* %R1_Var
  %lnbyY = load i64, i64* %R2_Var
  %lnbyZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbyV( i64* %Base_Arg, i64* %lnbyW, i64* %Hp_Arg, i64 %lnbyX, i64 %lnbyY, i64 %lnbyZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbkv_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkv_info$def to i8*)
define internal ghccc void @cbkv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbkv_info$def to i64)),i64 328), i64 2, i64 1697658838188064}>
{
cbkv:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls88B = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbz0 = load i64*, i64** %Hp_Var
  %lnbz1 = getelementptr inbounds i64, i64* %lnbz0, i32 6
  %lnbz2 = ptrtoint i64* %lnbz1 to i64
  %lnbz3 = inttoptr i64 %lnbz2 to i64*
  store i64* %lnbz3, i64** %Hp_Var
  %lnbz4 = load i64*, i64** %Hp_Var
  %lnbz5 = ptrtoint i64* %lnbz4 to i64
  %lnbz6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbz7 = bitcast i64* %lnbz6 to i64*
  %lnbz8 = load i64, i64* %lnbz7, !tbaa !4
  %lnbz9 = icmp ugt i64 %lnbz5, %lnbz8
  br i1 %lnbz9, label %cbl4, label %cbl3
cbl3:
  %lnbza = load i64*, i64** %Sp_Var
  %lnbzb = getelementptr inbounds i64, i64* %lnbza, i32 1
  %lnbzc = bitcast i64* %lnbzb to i64*
  %lnbzd = load i64, i64* %lnbzc, !tbaa !1
  store i64 %lnbzd, i64* %ls88B
  %lnbze = load i64, i64* %R1_Var
  switch i64 %lnbze, label %cbl7 [i64 0, label %cbl7
i64 1, label %cble]
cbl7:
  %lnbzg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88K_info$def to i64
  %lnbzf = load i64*, i64** %Hp_Var
  %lnbzh = getelementptr inbounds i64, i64* %lnbzf, i32 -5
  store i64 %lnbzg, i64* %lnbzh, !tbaa !2
  %lnbzj = load i64, i64* %ls88B
  %lnbzi = load i64*, i64** %Hp_Var
  %lnbzk = getelementptr inbounds i64, i64* %lnbzi, i32 -3
  store i64 %lnbzj, i64* %lnbzk, !tbaa !2
  %lnbzm = load i64*, i64** %Sp_Var
  %lnbzn = getelementptr inbounds i64, i64* %lnbzm, i32 2
  %lnbzo = bitcast i64* %lnbzn to i64*
  %lnbzp = load i64, i64* %lnbzo, !tbaa !1
  %lnbzl = load i64*, i64** %Hp_Var
  %lnbzq = getelementptr inbounds i64, i64* %lnbzl, i32 -2
  store i64 %lnbzp, i64* %lnbzq, !tbaa !2
  %lnbzs = ptrtoint i8* @Word_W_con_info to i64
  %lnbzr = load i64*, i64** %Hp_Var
  %lnbzt = getelementptr inbounds i64, i64* %lnbzr, i32 -1
  store i64 %lnbzs, i64* %lnbzt, !tbaa !2
  %lnbzv = load i64*, i64** %Hp_Var
  %lnbzw = getelementptr inbounds i64, i64* %lnbzv, i32 -5
  %lnbzx = ptrtoint i64* %lnbzw to i64
  %lnbzu = load i64*, i64** %Hp_Var
  %lnbzy = getelementptr inbounds i64, i64* %lnbzu, i32 0
  store i64 %lnbzx, i64* %lnbzy, !tbaa !2
  %lnbzA = load i64*, i64** %Hp_Var
  %lnbzB = ptrtoint i64* %lnbzA to i64
  %lnbzC = add i64 %lnbzB, -7
  store i64 %lnbzC, i64* %R1_Var
  %lnbzD = load i64*, i64** %Sp_Var
  %lnbzE = getelementptr inbounds i64, i64* %lnbzD, i32 3
  %lnbzF = ptrtoint i64* %lnbzE to i64
  %lnbzG = inttoptr i64 %lnbzF to i64*
  store i64* %lnbzG, i64** %Sp_Var
  %lnbzH = load i64*, i64** %Sp_Var
  %lnbzI = getelementptr inbounds i64, i64* %lnbzH, i32 0
  %lnbzJ = bitcast i64* %lnbzI to i64*
  %lnbzK = load i64, i64* %lnbzJ, !tbaa !1
  %lnbzL = inttoptr i64 %lnbzK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbzM = load i64*, i64** %Sp_Var
  %lnbzN = load i64*, i64** %Hp_Var
  %lnbzO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbzL( i64* %Base_Arg, i64* %lnbzM, i64* %lnbzN, i64 %lnbzO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cble:
  %lnbzP = load i64*, i64** %Hp_Var
  %lnbzQ = getelementptr inbounds i64, i64* %lnbzP, i32 -6
  %lnbzR = ptrtoint i64* %lnbzQ to i64
  %lnbzS = inttoptr i64 %lnbzR to i64*
  store i64* %lnbzS, i64** %Hp_Var
  %lnbzU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbl9_info$def to i64
  %lnbzT = load i64*, i64** %Sp_Var
  %lnbzV = getelementptr inbounds i64, i64* %lnbzT, i32 1
  store i64 %lnbzU, i64* %lnbzV, !tbaa !1
  %lnbzW = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbzX = add i64 %lnbzW, 1
  store i64 %lnbzX, i64* %R3_Var
  %lnbzY = load i64, i64* %ls88B
  store i64 %lnbzY, i64* %R2_Var
  %lnbzZ = load i64*, i64** %Sp_Var
  %lnbA0 = getelementptr inbounds i64, i64* %lnbzZ, i32 1
  %lnbA1 = ptrtoint i64* %lnbA0 to i64
  %lnbA2 = inttoptr i64 %lnbA1 to i64*
  store i64* %lnbA2, i64** %Sp_Var
  %lnbA3 = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbA4 = load i64*, i64** %Sp_Var
  %lnbA5 = load i64*, i64** %Hp_Var
  %lnbA6 = load i64, i64* %R1_Var
  %lnbA7 = load i64, i64* %R2_Var
  %lnbA8 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbA3( i64* %Base_Arg, i64* %lnbA4, i64* %lnbA5, i64 %lnbA6, i64 %lnbA7, i64 %lnbA8, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbl4:
  %lnbA9 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnbA9, !tbaa !4
  %lnbAa = load i64, i64* %R1_Var
  store i64 %lnbAa, i64* %R1_Var
  %lnbAb = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbAc = load i64*, i64** %Sp_Var
  %lnbAd = load i64*, i64** %Hp_Var
  %lnbAe = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbAb( i64* %Base_Arg, i64* %lnbAc, i64* %lnbAd, i64 %lnbAe, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbl9_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbl9_info$def to i8*)
define internal ghccc void @cbl9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbl9_info$def to i64)),i64 464), i64 1, i64 12884901920}>
{
cbl9:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbAf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbld_info$def to i64
  %lnbAg = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbAf, i64* %lnbAg, !tbaa !1
  %lnbAh = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  %lnbAi = bitcast i64* %lnbAh to i64*
  %lnbAj = load i64, i64* %lnbAi, !tbaa !1
  store i64 %lnbAj, i64* %R3_Var
  %lnbAk = ptrtoint %Word_maxShift_closure_struct* @Word_maxShift_closure$def to i64
  %lnbAl = add i64 %lnbAk, 1
  store i64 %lnbAl, i64* %R2_Var
  %lnbAm = getelementptr inbounds i64, i64* %Sp_Arg, i32 1
  store i64 %R1_Arg, i64* %lnbAm, !tbaa !1
  %lnbAn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshiftzuzdszdwwrshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbAo = load i64, i64* %R2_Var
  %lnbAp = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbAn( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbAo, i64 %lnbAp, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbld_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbld_info$def to i8*)
define internal ghccc void @cbld_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbld_info$def to i64)),i64 472), i64 1, i64 4294967328}>
{
cbld:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbAq = load i64*, i64** %Sp_Var
  %lnbAr = getelementptr inbounds i64, i64* %lnbAq, i32 1
  %lnbAs = bitcast i64* %lnbAr to i64*
  %lnbAt = load i64, i64* %lnbAs, !tbaa !1
  store i64 %lnbAt, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnbAu = load i64*, i64** %Sp_Var
  %lnbAv = getelementptr inbounds i64, i64* %lnbAu, i32 2
  %lnbAw = ptrtoint i64* %lnbAv to i64
  %lnbAx = inttoptr i64 %lnbAw to i64*
  store i64* %lnbAx, i64** %Sp_Var
  %lnbAy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwrshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbAz = load i64*, i64** %Sp_Var
  %lnbAA = load i64, i64* %R2_Var
  %lnbAB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbAy( i64* %Base_Arg, i64* %lnbAz, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbAA, i64 %lnbAB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wrshift_closure_struct = type <{i64, i64}>
@Word_wrshift_closure$def = internal global %Word_wrshift_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshift_info$def to i64), i64 0}>
@Word_wrshift_closure = alias i8* bitcast (%Word_wrshift_closure_struct* @Word_wrshift_closure$def to i8*)
@Word_wrshift_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshift_info$def to i8*)
define ghccc void @Word_wrshift_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrshift_info$def to i64)),i64 472), i64 12884901911, i64 0, i64 4294967311}>
{
cbAH:
  %ls88O = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbAK = load i64, i64* %R3_Var
  store i64 %lnbAK, i64* %ls88O
  store i64 %R4_Arg, i64* %R3_Var
  %lnbAL = load i64, i64* %ls88O
  store i64 %lnbAL, i64* %R2_Var
  %lnbAM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwrshift_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbAN = load i64, i64* %R2_Var
  %lnbAO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbAM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbAN, i64 %lnbAO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_ascii2byte_closure_struct = type <{i64}>
@Word_ascii2byte_closure$def = internal global %Word_ascii2byte_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_ascii2byte_info$def to i64)}>
@Word_ascii2byte_closure = alias i8* bitcast (%Word_ascii2byte_closure_struct* @Word_ascii2byte_closure$def to i8*)
@s88U_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88U_info$def to i8*)
define internal ghccc void @s88U_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 17}>
{
cbB8:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbBm = load i64*, i64** %Sp_Var
  %lnbBn = getelementptr inbounds i64, i64* %lnbBm, i32 -3
  %lnbBo = ptrtoint i64* %lnbBn to i64
  %lnbBp = icmp ult i64 %lnbBo, %SpLim_Arg
  br i1 %lnbBp, label %cbB9, label %cbBa
cbBa:
  %lnbBr = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbBq = load i64*, i64** %Sp_Var
  %lnbBs = getelementptr inbounds i64, i64* %lnbBq, i32 -2
  store i64 %lnbBr, i64* %lnbBs, !tbaa !1
  %lnbBu = load i64, i64* %R1_Var
  %lnbBt = load i64*, i64** %Sp_Var
  %lnbBv = getelementptr inbounds i64, i64* %lnbBt, i32 -1
  store i64 %lnbBu, i64* %lnbBv, !tbaa !1
  %lnbBx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbB5_info$def to i64
  %lnbBw = load i64*, i64** %Sp_Var
  %lnbBy = getelementptr inbounds i64, i64* %lnbBw, i32 -3
  store i64 %lnbBx, i64* %lnbBy, !tbaa !1
  %lnbBB = load i64, i64* %R1_Var
  %lnbBC = add i64 %lnbBB, 16
  %lnbBD = inttoptr i64 %lnbBC to i64*
  %lnbBE = load i64, i64* %lnbBD, !tbaa !3
  store i64 %lnbBE, i64* %R1_Var
  %lnbBF = load i64*, i64** %Sp_Var
  %lnbBG = getelementptr inbounds i64, i64* %lnbBF, i32 -3
  %lnbBH = ptrtoint i64* %lnbBG to i64
  %lnbBI = inttoptr i64 %lnbBH to i64*
  store i64* %lnbBI, i64** %Sp_Var
  %lnbBJ = load i64, i64* %R1_Var
  %lnbBK = and i64 %lnbBJ, 7
  %lnbBL = icmp ne i64 %lnbBK, 0
  br i1 %lnbBL, label %ubBf, label %cbB6
cbB6:
  %lnbBN = load i64, i64* %R1_Var
  %lnbBO = inttoptr i64 %lnbBN to i64*
  %lnbBP = load i64, i64* %lnbBO, !tbaa !3
  %lnbBQ = inttoptr i64 %lnbBP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbBR = load i64*, i64** %Sp_Var
  %lnbBS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbBQ( i64* %Base_Arg, i64* %lnbBR, i64* %Hp_Arg, i64 %lnbBS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubBf:
  %lnbBT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbB5_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbBU = load i64*, i64** %Sp_Var
  %lnbBV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbBT( i64* %Base_Arg, i64* %lnbBU, i64* %Hp_Arg, i64 %lnbBV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbB9:
  %lnbBW = load i64, i64* %R1_Var
  store i64 %lnbBW, i64* %R1_Var
  %lnbBX = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbBY = bitcast i64* %lnbBX to i64*
  %lnbBZ = load i64, i64* %lnbBY, !tbaa !4
  %lnbC0 = inttoptr i64 %lnbBZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbC1 = load i64*, i64** %Sp_Var
  %lnbC2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbC0( i64* %Base_Arg, i64* %lnbC1, i64* %Hp_Arg, i64 %lnbC2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbB5_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbB5_info$def to i8*)
define internal ghccc void @cbB5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cbB5:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbC3 = add i64 %R1_Arg, 7
  %lnbC4 = inttoptr i64 %lnbC3 to i64*
  %lnbC5 = load i64, i64* %lnbC4, !tbaa !3
  store i64 %lnbC5, i64* %R2_Var
  %lnbC6 = load i64*, i64** %Sp_Var
  %lnbC7 = getelementptr inbounds i64, i64* %lnbC6, i32 1
  %lnbC8 = ptrtoint i64* %lnbC7 to i64
  %lnbC9 = inttoptr i64 %lnbC8 to i64*
  store i64* %lnbC9, i64** %Sp_Var
  %lnbCa = bitcast i8* @integerzmgmp_GHCziIntegerziType_smallInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCb = load i64*, i64** %Sp_Var
  %lnbCc = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCa( i64* %Base_Arg, i64* %lnbCb, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbCc, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_ascii2byte_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_ascii2byte_info$def to i8*)
define ghccc void @Word_ascii2byte_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
cbBh:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbCd = load i64*, i64** %Hp_Var
  %lnbCe = getelementptr inbounds i64, i64* %lnbCd, i32 5
  %lnbCf = ptrtoint i64* %lnbCe to i64
  %lnbCg = inttoptr i64 %lnbCf to i64*
  store i64* %lnbCg, i64** %Hp_Var
  %lnbCh = load i64*, i64** %Hp_Var
  %lnbCi = ptrtoint i64* %lnbCh to i64
  %lnbCj = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbCk = bitcast i64* %lnbCj to i64*
  %lnbCl = load i64, i64* %lnbCk, !tbaa !4
  %lnbCm = icmp ugt i64 %lnbCi, %lnbCl
  br i1 %lnbCm, label %cbBl, label %cbBk
cbBk:
  %lnbCo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s88U_info$def to i64
  %lnbCn = load i64*, i64** %Hp_Var
  %lnbCp = getelementptr inbounds i64, i64* %lnbCn, i32 -4
  store i64 %lnbCo, i64* %lnbCp, !tbaa !2
  %lnbCr = load i64, i64* %R2_Var
  %lnbCq = load i64*, i64** %Hp_Var
  %lnbCs = getelementptr inbounds i64, i64* %lnbCq, i32 -2
  store i64 %lnbCr, i64* %lnbCs, !tbaa !2
  %lnbCu = ptrtoint i8* @Word_W_con_info to i64
  %lnbCt = load i64*, i64** %Hp_Var
  %lnbCv = getelementptr inbounds i64, i64* %lnbCt, i32 -1
  store i64 %lnbCu, i64* %lnbCv, !tbaa !2
  %lnbCx = load i64*, i64** %Hp_Var
  %lnbCy = getelementptr inbounds i64, i64* %lnbCx, i32 -4
  %lnbCz = ptrtoint i64* %lnbCy to i64
  %lnbCw = load i64*, i64** %Hp_Var
  %lnbCA = getelementptr inbounds i64, i64* %lnbCw, i32 0
  store i64 %lnbCz, i64* %lnbCA, !tbaa !2
  %lnbCC = load i64*, i64** %Hp_Var
  %lnbCD = ptrtoint i64* %lnbCC to i64
  %lnbCE = add i64 %lnbCD, -7
  store i64 %lnbCE, i64* %R1_Var
  %lnbCF = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbCG = bitcast i64* %lnbCF to i64*
  %lnbCH = load i64, i64* %lnbCG, !tbaa !1
  %lnbCI = inttoptr i64 %lnbCH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCJ = load i64*, i64** %Hp_Var
  %lnbCK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCI( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbCJ, i64 %lnbCK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbBl:
  %lnbCL = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnbCL, !tbaa !4
  %lnbCM = load i64, i64* %R2_Var
  store i64 %lnbCM, i64* %R2_Var
  %lnbCN = ptrtoint %Word_ascii2byte_closure_struct* @Word_ascii2byte_closure$def to i64
  store i64 %lnbCN, i64* %R1_Var
  %lnbCO = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbCP = bitcast i64* %lnbCO to i64*
  %lnbCQ = load i64, i64* %lnbCP, !tbaa !4
  %lnbCR = inttoptr i64 %lnbCQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbCS = load i64*, i64** %Hp_Var
  %lnbCT = load i64, i64* %R1_Var
  %lnbCU = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbCR( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbCS, i64 %lnbCT, i64 %lnbCU, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwgo_closure_struct = type <{i64, i64}>
@Word_zdwgo_closure$def = internal global %Word_zdwgo_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwgo_info$def to i64), i64 0}>
@Word_zdwgo_closure = alias i8* bitcast (%Word_zdwgo_closure_struct* @Word_zdwgo_closure$def to i8*)
@s896_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s896_info$def to i8*)
define internal ghccc void @s896_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s896_info$def to i64)),i64 480), i64 4294967296, i64 4294967314}>
{
cbDx:
  %ls891 = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbEe = load i64*, i64** %Sp_Var
  %lnbEf = getelementptr inbounds i64, i64* %lnbEe, i32 -3
  %lnbEg = ptrtoint i64* %lnbEf to i64
  %lnbEh = icmp ult i64 %lnbEg, %SpLim_Arg
  br i1 %lnbEh, label %cbDy, label %cbDJ
cbDJ:
  %lnbEj = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbEi = load i64*, i64** %Sp_Var
  %lnbEk = getelementptr inbounds i64, i64* %lnbEi, i32 -2
  store i64 %lnbEj, i64* %lnbEk, !tbaa !1
  %lnbEm = load i64, i64* %R1_Var
  %lnbEl = load i64*, i64** %Sp_Var
  %lnbEn = getelementptr inbounds i64, i64* %lnbEl, i32 -1
  store i64 %lnbEm, i64* %lnbEn, !tbaa !1
  %lnbEq = load i64, i64* %R1_Var
  %lnbEr = add i64 %lnbEq, 16
  %lnbEs = inttoptr i64 %lnbEr to i64*
  %lnbEt = load i64, i64* %lnbEs, !tbaa !3
  store i64 %lnbEt, i64* %ls891
  %lnbEu = load i64, i64* %ls891
  switch i64 %lnbEu, label %cbDv [i64 9223372036854775807, label %cbDw]
cbDv:
  %lnbEw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDD_info$def to i64
  %lnbEv = load i64*, i64** %Sp_Var
  %lnbEx = getelementptr inbounds i64, i64* %lnbEv, i32 -3
  store i64 %lnbEw, i64* %lnbEx, !tbaa !1
  %lnbEy = load i64, i64* %ls891
  %lnbEz = add i64 %lnbEy, 1
  store i64 %lnbEz, i64* %R2_Var
  %lnbEA = load i64*, i64** %Sp_Var
  %lnbEB = getelementptr inbounds i64, i64* %lnbEA, i32 -3
  %lnbEC = ptrtoint i64* %lnbEB to i64
  %lnbED = inttoptr i64 %lnbEC to i64*
  store i64* %lnbED, i64** %Sp_Var
  %lnbEE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwgo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbEF = load i64*, i64** %Sp_Var
  %lnbEG = load i64, i64* %R1_Var
  %lnbEH = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbEE( i64* %Base_Arg, i64* %lnbEF, i64* %Hp_Arg, i64 %lnbEG, i64 %lnbEH, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbDw:
  %lnbEI = ptrtoint i8* @ghczmprim_GHCziTypes_ZMZN_closure to i64
  %lnbEJ = add i64 %lnbEI, 1
  store i64 %lnbEJ, i64* %R1_Var
  %lnbEK = load i64*, i64** %Sp_Var
  %lnbEL = getelementptr inbounds i64, i64* %lnbEK, i32 -2
  %lnbEM = ptrtoint i64* %lnbEL to i64
  %lnbEN = inttoptr i64 %lnbEM to i64*
  store i64* %lnbEN, i64** %Sp_Var
  %lnbEO = load i64*, i64** %Sp_Var
  %lnbEP = getelementptr inbounds i64, i64* %lnbEO, i32 0
  %lnbEQ = bitcast i64* %lnbEP to i64*
  %lnbER = load i64, i64* %lnbEQ, !tbaa !1
  %lnbES = inttoptr i64 %lnbER to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbET = load i64*, i64** %Sp_Var
  %lnbEU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbES( i64* %Base_Arg, i64* %lnbET, i64* %Hp_Arg, i64 %lnbEU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbDy:
  %lnbEV = load i64, i64* %R1_Var
  store i64 %lnbEV, i64* %R1_Var
  %lnbEW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbEX = bitcast i64* %lnbEW to i64*
  %lnbEY = load i64, i64* %lnbEX, !tbaa !4
  %lnbEZ = inttoptr i64 %lnbEY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbF0 = load i64*, i64** %Sp_Var
  %lnbF1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbEZ( i64* %Base_Arg, i64* %lnbF0, i64* %Hp_Arg, i64 %lnbF1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDD_info$def to i8*)
define internal ghccc void @cbDD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cbDD:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbF2 = load i64*, i64** %Hp_Var
  %lnbF3 = getelementptr inbounds i64, i64* %lnbF2, i32 3
  %lnbF4 = ptrtoint i64* %lnbF3 to i64
  %lnbF5 = inttoptr i64 %lnbF4 to i64*
  store i64* %lnbF5, i64** %Hp_Var
  %lnbF6 = load i64*, i64** %Hp_Var
  %lnbF7 = ptrtoint i64* %lnbF6 to i64
  %lnbF8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbF9 = bitcast i64* %lnbF8 to i64*
  %lnbFa = load i64, i64* %lnbF9, !tbaa !4
  %lnbFb = icmp ugt i64 %lnbF7, %lnbFa
  br i1 %lnbFb, label %cbDI, label %cbDH
cbDH:
  %lnbFd = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lnbFc = load i64*, i64** %Hp_Var
  %lnbFe = getelementptr inbounds i64, i64* %lnbFc, i32 -2
  store i64 %lnbFd, i64* %lnbFe, !tbaa !2
  %lnbFg = load i64, i64* %R1_Var
  %lnbFf = load i64*, i64** %Hp_Var
  %lnbFh = getelementptr inbounds i64, i64* %lnbFf, i32 -1
  store i64 %lnbFg, i64* %lnbFh, !tbaa !2
  %lnbFj = load i64, i64* %R2_Var
  %lnbFi = load i64*, i64** %Hp_Var
  %lnbFk = getelementptr inbounds i64, i64* %lnbFi, i32 0
  store i64 %lnbFj, i64* %lnbFk, !tbaa !2
  %lnbFm = load i64*, i64** %Hp_Var
  %lnbFn = ptrtoint i64* %lnbFm to i64
  %lnbFo = add i64 %lnbFn, -14
  store i64 %lnbFo, i64* %R1_Var
  %lnbFp = load i64*, i64** %Sp_Var
  %lnbFq = getelementptr inbounds i64, i64* %lnbFp, i32 1
  %lnbFr = ptrtoint i64* %lnbFq to i64
  %lnbFs = inttoptr i64 %lnbFr to i64*
  store i64* %lnbFs, i64** %Sp_Var
  %lnbFt = load i64*, i64** %Sp_Var
  %lnbFu = getelementptr inbounds i64, i64* %lnbFt, i32 0
  %lnbFv = bitcast i64* %lnbFu to i64*
  %lnbFw = load i64, i64* %lnbFv, !tbaa !1
  %lnbFx = inttoptr i64 %lnbFw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbFy = load i64*, i64** %Sp_Var
  %lnbFz = load i64*, i64** %Hp_Var
  %lnbFA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbFx( i64* %Base_Arg, i64* %lnbFy, i64* %lnbFz, i64 %lnbFA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbDI:
  %lnbFB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnbFB, !tbaa !4
  %lnbFC = load i64, i64* %R2_Var
  store i64 %lnbFC, i64* %R2_Var
  %lnbFD = load i64, i64* %R1_Var
  store i64 %lnbFD, i64* %R1_Var
  %lnbFE = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbFF = load i64*, i64** %Sp_Var
  %lnbFG = load i64*, i64** %Hp_Var
  %lnbFH = load i64, i64* %R1_Var
  %lnbFI = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbFE( i64* %Base_Arg, i64* %lnbFF, i64* %lnbFG, i64 %lnbFH, i64 %lnbFI, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s890_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s890_info$def to i8*)
define internal ghccc void @s890_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s890_info$def to i64)),i64 416), i64 4294967296, i64 6601364733970}>
{
cbDQ:
  %ls88V = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbFJ = load i64*, i64** %Sp_Var
  %lnbFK = getelementptr inbounds i64, i64* %lnbFJ, i32 -3
  %lnbFL = ptrtoint i64* %lnbFK to i64
  %lnbFM = icmp ult i64 %lnbFL, %SpLim_Arg
  br i1 %lnbFM, label %cbDR, label %cbE8
cbE8:
  %lnbFO = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbFN = load i64*, i64** %Sp_Var
  %lnbFP = getelementptr inbounds i64, i64* %lnbFN, i32 -2
  store i64 %lnbFO, i64* %lnbFP, !tbaa !1
  %lnbFR = load i64, i64* %R1_Var
  %lnbFQ = load i64*, i64** %Sp_Var
  %lnbFS = getelementptr inbounds i64, i64* %lnbFQ, i32 -1
  store i64 %lnbFR, i64* %lnbFS, !tbaa !1
  %lnbFV = load i64, i64* %R1_Var
  %lnbFW = add i64 %lnbFV, 16
  %lnbFX = inttoptr i64 %lnbFW to i64*
  %lnbFY = load i64, i64* %lnbFX, !tbaa !3
  store i64 %lnbFY, i64* %ls88V
  %lnbFZ = load i64, i64* %ls88V
  %lnbG0 = icmp slt i64 %lnbFZ, 0
  %lnbG1 = zext i1 %lnbG0 to i64
  switch i64 %lnbG1, label %cbE6 [i64 0, label %cbE6
i64 1, label %cbE7]
cbE6:
  %lnbG2 = load i64, i64* %ls88V
  switch i64 %lnbG2, label %cbDZ [i64 0, label %cbE4]
cbDZ:
  %lnbG4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDX_info$def to i64
  %lnbG3 = load i64*, i64** %Sp_Var
  %lnbG5 = getelementptr inbounds i64, i64* %lnbG3, i32 -3
  store i64 %lnbG4, i64* %lnbG5, !tbaa !1
  %lnbG6 = load i64, i64* %ls88V
  store i64 %lnbG6, i64* %R3_Var
  %lnbG7 = ptrtoint %Word_pow1_closure_struct* @Word_pow1_closure$def to i64
  %lnbG8 = add i64 %lnbG7, 1
  store i64 %lnbG8, i64* %R2_Var
  %lnbG9 = load i64*, i64** %Sp_Var
  %lnbGa = getelementptr inbounds i64, i64* %lnbG9, i32 -3
  %lnbGb = ptrtoint i64* %lnbGa to i64
  %lnbGc = inttoptr i64 %lnbGb to i64*
  store i64* %lnbGc, i64** %Sp_Var
  %lnbGd = bitcast i8* @base_GHCziReal_zdwf_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbGe = load i64*, i64** %Sp_Var
  %lnbGf = load i64, i64* %R1_Var
  %lnbGg = load i64, i64* %R2_Var
  %lnbGh = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbGd( i64* %Base_Arg, i64* %lnbGe, i64* %Hp_Arg, i64 %lnbGf, i64 %lnbGg, i64 %lnbGh, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbE4:
  %lnbGi = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lnbGj = add i64 %lnbGi, 1
  store i64 %lnbGj, i64* %R1_Var
  %lnbGk = load i64*, i64** %Sp_Var
  %lnbGl = getelementptr inbounds i64, i64* %lnbGk, i32 -2
  %lnbGm = ptrtoint i64* %lnbGl to i64
  %lnbGn = inttoptr i64 %lnbGm to i64*
  store i64* %lnbGn, i64** %Sp_Var
  %lnbGo = load i64*, i64** %Sp_Var
  %lnbGp = getelementptr inbounds i64, i64* %lnbGo, i32 0
  %lnbGq = bitcast i64* %lnbGp to i64*
  %lnbGr = load i64, i64* %lnbGq, !tbaa !1
  %lnbGs = inttoptr i64 %lnbGr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbGt = load i64*, i64** %Sp_Var
  %lnbGu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbGs( i64* %Base_Arg, i64* %lnbGt, i64* %Hp_Arg, i64 %lnbGu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbE7:
  %lnbGv = ptrtoint i8* @base_GHCziReal_zc1_closure to i64
  store i64 %lnbGv, i64* %R1_Var
  %lnbGw = load i64*, i64** %Sp_Var
  %lnbGx = getelementptr inbounds i64, i64* %lnbGw, i32 -2
  %lnbGy = ptrtoint i64* %lnbGx to i64
  %lnbGz = inttoptr i64 %lnbGy to i64*
  store i64* %lnbGz, i64** %Sp_Var
  %lnbGB = load i64, i64* %R1_Var
  %lnbGC = inttoptr i64 %lnbGB to i64*
  %lnbGD = load i64, i64* %lnbGC, !tbaa !3
  %lnbGE = inttoptr i64 %lnbGD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbGF = load i64*, i64** %Sp_Var
  %lnbGG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbGE( i64* %Base_Arg, i64* %lnbGF, i64* %Hp_Arg, i64 %lnbGG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbDR:
  %lnbGH = load i64, i64* %R1_Var
  store i64 %lnbGH, i64* %R1_Var
  %lnbGI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbGJ = bitcast i64* %lnbGI to i64*
  %lnbGK = load i64, i64* %lnbGJ, !tbaa !4
  %lnbGL = inttoptr i64 %lnbGK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbGM = load i64*, i64** %Sp_Var
  %lnbGN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbGL( i64* %Base_Arg, i64* %lnbGM, i64* %Hp_Arg, i64 %lnbGN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbDX_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDX_info$def to i8*)
define internal ghccc void @cbDX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbDX_info$def to i64)),i64 416), i64 0, i64 4294967328}>
{
cbDX:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbGO = ptrtoint %Word_zdszc1_closure_struct* @Word_zdszc1_closure$def to i64
  %lnbGP = add i64 %lnbGO, 1
  store i64 %lnbGP, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnbGQ = load i64*, i64** %Sp_Var
  %lnbGR = getelementptr inbounds i64, i64* %lnbGQ, i32 1
  %lnbGS = ptrtoint i64* %lnbGR to i64
  %lnbGT = inttoptr i64 %lnbGS to i64*
  store i64* %lnbGT, i64** %Sp_Var
  %lnbGU = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbGV = load i64*, i64** %Sp_Var
  %lnbGW = load i64, i64* %R2_Var
  %lnbGX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbGU( i64* %Base_Arg, i64* %lnbGV, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbGW, i64 %lnbGX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwgo_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwgo_info$def to i8*)
define ghccc void @Word_zdwgo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwgo_info$def to i64)),i64 416), i64 4294967300, i64 0, i64 7700876361743}>
{
cbE9:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbGY = load i64*, i64** %Hp_Var
  %lnbGZ = getelementptr inbounds i64, i64* %lnbGY, i32 6
  %lnbH0 = ptrtoint i64* %lnbGZ to i64
  %lnbH1 = inttoptr i64 %lnbH0 to i64*
  store i64* %lnbH1, i64** %Hp_Var
  %lnbH2 = load i64*, i64** %Hp_Var
  %lnbH3 = ptrtoint i64* %lnbH2 to i64
  %lnbH4 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbH5 = bitcast i64* %lnbH4 to i64*
  %lnbH6 = load i64, i64* %lnbH5, !tbaa !4
  %lnbH7 = icmp ugt i64 %lnbH3, %lnbH6
  br i1 %lnbH7, label %cbEd, label %cbEc
cbEc:
  %lnbH9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s896_info$def to i64
  %lnbH8 = load i64*, i64** %Hp_Var
  %lnbHa = getelementptr inbounds i64, i64* %lnbH8, i32 -5
  store i64 %lnbH9, i64* %lnbHa, !tbaa !2
  %lnbHc = load i64, i64* %R2_Var
  %lnbHb = load i64*, i64** %Hp_Var
  %lnbHd = getelementptr inbounds i64, i64* %lnbHb, i32 -3
  store i64 %lnbHc, i64* %lnbHd, !tbaa !2
  %lnbHf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s890_info$def to i64
  %lnbHe = load i64*, i64** %Hp_Var
  %lnbHg = getelementptr inbounds i64, i64* %lnbHe, i32 -2
  store i64 %lnbHf, i64* %lnbHg, !tbaa !2
  %lnbHi = load i64, i64* %R2_Var
  %lnbHh = load i64*, i64** %Hp_Var
  %lnbHj = getelementptr inbounds i64, i64* %lnbHh, i32 0
  store i64 %lnbHi, i64* %lnbHj, !tbaa !2
  %lnbHk = load i64*, i64** %Hp_Var
  %lnbHl = getelementptr inbounds i64, i64* %lnbHk, i32 -5
  %lnbHm = ptrtoint i64* %lnbHl to i64
  store i64 %lnbHm, i64* %R2_Var
  %lnbHn = load i64*, i64** %Hp_Var
  %lnbHo = getelementptr inbounds i64, i64* %lnbHn, i32 -2
  %lnbHp = ptrtoint i64* %lnbHo to i64
  store i64 %lnbHp, i64* %R1_Var
  %lnbHq = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbHr = bitcast i64* %lnbHq to i64*
  %lnbHs = load i64, i64* %lnbHr, !tbaa !1
  %lnbHt = inttoptr i64 %lnbHs to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbHu = load i64*, i64** %Hp_Var
  %lnbHv = load i64, i64* %R1_Var
  %lnbHw = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbHt( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbHu, i64 %lnbHv, i64 %lnbHw, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbEd:
  %lnbHx = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnbHx, !tbaa !4
  %lnbHy = load i64, i64* %R2_Var
  store i64 %lnbHy, i64* %R2_Var
  %lnbHz = ptrtoint %Word_zdwgo_closure_struct* @Word_zdwgo_closure$def to i64
  store i64 %lnbHz, i64* %R1_Var
  %lnbHA = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbHB = bitcast i64* %lnbHA to i64*
  %lnbHC = load i64, i64* %lnbHB, !tbaa !4
  %lnbHD = inttoptr i64 %lnbHC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbHE = load i64*, i64** %Hp_Var
  %lnbHF = load i64, i64* %R1_Var
  %lnbHG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbHD( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbHE, i64 %lnbHF, i64 %lnbHG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_bitmask_closure_struct = type <{i64, i64, i64, i64}>
@Word_bitmask_closure$def = internal global %Word_bitmask_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bitmask_info$def to i64), i64 0, i64 0, i64 0}>
@Word_bitmask_closure = alias i8* bitcast (%Word_bitmask_closure_struct* @Word_bitmask_closure$def to i8*)
@Word_bitmask_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bitmask_info$def to i8*)
define ghccc void @Word_bitmask_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_bitmask_info$def to i64)),i64 480), i64 0, i64 4294967318}>
{
cbHR:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lcbHL = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbHX = load i64*, i64** %Sp_Var
  %lnbHY = getelementptr inbounds i64, i64* %lnbHX, i32 -3
  %lnbHZ = ptrtoint i64* %lnbHY to i64
  %lnbI0 = icmp ult i64 %lnbHZ, %SpLim_Arg
  br i1 %lnbI0, label %cbHS, label %cbHT
cbHT:
  %lnbI1 = ptrtoint i64* %Base_Arg to i64
  %lnbI2 = inttoptr i64 %lnbI1 to i8*
  %lnbI3 = load i64, i64* %R1_Var
  %lnbI4 = inttoptr i64 %lnbI3 to i8*
  %lnbI5 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lnbI6 = call ccc i8* (i8*, i8*) %lnbI5( i8* %lnbI2, i8* %lnbI4 ) nounwind
  %lnbI7 = ptrtoint i8* %lnbI6 to i64
  store i64 %lnbI7, i64* %lcbHL
  %lnbI8 = load i64, i64* %lcbHL
  %lnbI9 = icmp eq i64 %lnbI8, 0
  br i1 %lnbI9, label %cbHN, label %cbHM
cbHM:
  %lnbIb = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnbIa = load i64*, i64** %Sp_Var
  %lnbIc = getelementptr inbounds i64, i64* %lnbIa, i32 -2
  store i64 %lnbIb, i64* %lnbIc, !tbaa !1
  %lnbIe = load i64, i64* %lcbHL
  %lnbId = load i64*, i64** %Sp_Var
  %lnbIf = getelementptr inbounds i64, i64* %lnbId, i32 -1
  store i64 %lnbIe, i64* %lnbIf, !tbaa !1
  %lnbIh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbHO_info$def to i64
  %lnbIg = load i64*, i64** %Sp_Var
  %lnbIi = getelementptr inbounds i64, i64* %lnbIg, i32 -3
  store i64 %lnbIh, i64* %lnbIi, !tbaa !1
  store i64 0, i64* %R2_Var
  %lnbIj = load i64*, i64** %Sp_Var
  %lnbIk = getelementptr inbounds i64, i64* %lnbIj, i32 -3
  %lnbIl = ptrtoint i64* %lnbIk to i64
  %lnbIm = inttoptr i64 %lnbIl to i64*
  store i64* %lnbIm, i64** %Sp_Var
  %lnbIn = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwgo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbIo = load i64*, i64** %Sp_Var
  %lnbIp = load i64, i64* %R1_Var
  %lnbIq = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbIn( i64* %Base_Arg, i64* %lnbIo, i64* %Hp_Arg, i64 %lnbIp, i64 %lnbIq, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbHN:
  %lnbIs = load i64, i64* %R1_Var
  %lnbIt = inttoptr i64 %lnbIs to i64*
  %lnbIu = load i64, i64* %lnbIt, !tbaa !3
  %lnbIv = inttoptr i64 %lnbIu to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbIw = load i64*, i64** %Sp_Var
  %lnbIx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbIv( i64* %Base_Arg, i64* %lnbIw, i64* %Hp_Arg, i64 %lnbIx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbHS:
  %lnbIy = load i64, i64* %R1_Var
  store i64 %lnbIy, i64* %R1_Var
  %lnbIz = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbIA = bitcast i64* %lnbIz to i64*
  %lnbIB = load i64, i64* %lnbIA, !tbaa !4
  %lnbIC = inttoptr i64 %lnbIB to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbID = load i64*, i64** %Sp_Var
  %lnbIE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbIC( i64* %Base_Arg, i64* %lnbID, i64* %Hp_Arg, i64 %lnbIE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbHO_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbHO_info$def to i8*)
define internal ghccc void @cbHO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cbHO:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbIF = load i64*, i64** %Hp_Var
  %lnbIG = getelementptr inbounds i64, i64* %lnbIF, i32 3
  %lnbIH = ptrtoint i64* %lnbIG to i64
  %lnbII = inttoptr i64 %lnbIH to i64*
  store i64* %lnbII, i64** %Hp_Var
  %lnbIJ = load i64*, i64** %Hp_Var
  %lnbIK = ptrtoint i64* %lnbIJ to i64
  %lnbIL = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbIM = bitcast i64* %lnbIL to i64*
  %lnbIN = load i64, i64* %lnbIM, !tbaa !4
  %lnbIO = icmp ugt i64 %lnbIK, %lnbIN
  br i1 %lnbIO, label %cbHW, label %cbHV
cbHV:
  %lnbIQ = ptrtoint i8* @ghczmprim_GHCziTypes_ZC_con_info to i64
  %lnbIP = load i64*, i64** %Hp_Var
  %lnbIR = getelementptr inbounds i64, i64* %lnbIP, i32 -2
  store i64 %lnbIQ, i64* %lnbIR, !tbaa !2
  %lnbIT = load i64, i64* %R1_Var
  %lnbIS = load i64*, i64** %Hp_Var
  %lnbIU = getelementptr inbounds i64, i64* %lnbIS, i32 -1
  store i64 %lnbIT, i64* %lnbIU, !tbaa !2
  %lnbIW = load i64, i64* %R2_Var
  %lnbIV = load i64*, i64** %Hp_Var
  %lnbIX = getelementptr inbounds i64, i64* %lnbIV, i32 0
  store i64 %lnbIW, i64* %lnbIX, !tbaa !2
  %lnbIZ = load i64*, i64** %Hp_Var
  %lnbJ0 = ptrtoint i64* %lnbIZ to i64
  %lnbJ1 = add i64 %lnbJ0, -14
  store i64 %lnbJ1, i64* %R1_Var
  %lnbJ2 = load i64*, i64** %Sp_Var
  %lnbJ3 = getelementptr inbounds i64, i64* %lnbJ2, i32 1
  %lnbJ4 = ptrtoint i64* %lnbJ3 to i64
  %lnbJ5 = inttoptr i64 %lnbJ4 to i64*
  store i64* %lnbJ5, i64** %Sp_Var
  %lnbJ6 = load i64*, i64** %Sp_Var
  %lnbJ7 = getelementptr inbounds i64, i64* %lnbJ6, i32 0
  %lnbJ8 = bitcast i64* %lnbJ7 to i64*
  %lnbJ9 = load i64, i64* %lnbJ8, !tbaa !1
  %lnbJa = inttoptr i64 %lnbJ9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbJb = load i64*, i64** %Sp_Var
  %lnbJc = load i64*, i64** %Hp_Var
  %lnbJd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbJa( i64* %Base_Arg, i64* %lnbJb, i64* %lnbJc, i64 %lnbJd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbHW:
  %lnbJe = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnbJe, !tbaa !4
  %lnbJf = load i64, i64* %R2_Var
  store i64 %lnbJf, i64* %R2_Var
  %lnbJg = load i64, i64* %R1_Var
  store i64 %lnbJg, i64* %R1_Var
  %lnbJh = bitcast i8* @stg_gc_pp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbJi = load i64*, i64** %Sp_Var
  %lnbJj = load i64*, i64** %Hp_Var
  %lnbJk = load i64, i64* %R1_Var
  %lnbJl = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbJh( i64* %Base_Arg, i64* %lnbJi, i64* %lnbJj, i64 %lnbJk, i64 %lnbJl, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wones_closure_struct = type <{i64, i64}>
@Word_wones_closure$def = internal global %Word_wones_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wones_info$def to i64), i64 0}>
@Word_wones_closure = alias i8* bitcast (%Word_wones_closure_struct* @Word_wones_closure$def to i8*)
@s89c_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89c_info$def to i8*)
define internal ghccc void @s89c_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89c_info$def to i64)),i64 504), i64 1, i64 12884901905}>
{
cbJB:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbJN = load i64*, i64** %Sp_Var
  %lnbJO = getelementptr inbounds i64, i64* %lnbJN, i32 -3
  %lnbJP = ptrtoint i64* %lnbJO to i64
  %lnbJQ = icmp ult i64 %lnbJP, %SpLim_Arg
  br i1 %lnbJQ, label %cbJC, label %cbJD
cbJD:
  %lnbJS = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbJR = load i64*, i64** %Sp_Var
  %lnbJT = getelementptr inbounds i64, i64* %lnbJR, i32 -2
  store i64 %lnbJS, i64* %lnbJT, !tbaa !1
  %lnbJV = load i64, i64* %R1_Var
  %lnbJU = load i64*, i64** %Sp_Var
  %lnbJW = getelementptr inbounds i64, i64* %lnbJU, i32 -1
  store i64 %lnbJV, i64* %lnbJW, !tbaa !1
  %lnbJY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbJz_info$def to i64
  %lnbJX = load i64*, i64** %Sp_Var
  %lnbJZ = getelementptr inbounds i64, i64* %lnbJX, i32 -3
  store i64 %lnbJY, i64* %lnbJZ, !tbaa !1
  %lnbK2 = load i64, i64* %R1_Var
  %lnbK3 = add i64 %lnbK2, 16
  %lnbK4 = inttoptr i64 %lnbK3 to i64*
  %lnbK5 = load i64, i64* %lnbK4, !tbaa !3
  store i64 %lnbK5, i64* %R2_Var
  %lnbK6 = load i64*, i64** %Sp_Var
  %lnbK7 = getelementptr inbounds i64, i64* %lnbK6, i32 -3
  %lnbK8 = ptrtoint i64* %lnbK7 to i64
  %lnbK9 = inttoptr i64 %lnbK8 to i64*
  store i64* %lnbK9, i64** %Sp_Var
  %lnbKa = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbKb = load i64*, i64** %Sp_Var
  %lnbKc = load i64, i64* %R1_Var
  %lnbKd = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbKa( i64* %Base_Arg, i64* %lnbKb, i64* %Hp_Arg, i64 %lnbKc, i64 %lnbKd, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbJC:
  %lnbKe = load i64, i64* %R1_Var
  store i64 %lnbKe, i64* %R1_Var
  %lnbKf = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbKg = bitcast i64* %lnbKf to i64*
  %lnbKh = load i64, i64* %lnbKg, !tbaa !4
  %lnbKi = inttoptr i64 %lnbKh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbKj = load i64*, i64** %Sp_Var
  %lnbKk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbKi( i64* %Base_Arg, i64* %lnbKj, i64* %Hp_Arg, i64 %lnbKk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbJz_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbJz_info$def to i8*)
define internal ghccc void @cbJz_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbJz_info$def to i64)),i64 504), i64 0, i64 12884901920}>
{
cbJz:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnbKl = ptrtoint %Word_bitmask_closure_struct* @Word_bitmask_closure$def to i64
  store i64 %lnbKl, i64* %R2_Var
  %lnbKm = load i64*, i64** %Sp_Var
  %lnbKn = getelementptr inbounds i64, i64* %lnbKm, i32 1
  %lnbKo = ptrtoint i64* %lnbKn to i64
  %lnbKp = inttoptr i64 %lnbKo to i64*
  store i64* %lnbKp, i64** %Sp_Var
  %lnbKq = bitcast i8* @base_GHCziList_zdwznzn_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbKr = load i64*, i64** %Sp_Var
  %lnbKs = load i64, i64* %R2_Var
  %lnbKt = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbKq( i64* %Base_Arg, i64* %lnbKr, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbKs, i64 %lnbKt, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wones_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wones_info$def to i8*)
define ghccc void @Word_wones_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wones_info$def to i64)),i64 504), i64 4294967301, i64 0, i64 30064771087}>
{
cbJI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbKu = load i64*, i64** %Hp_Var
  %lnbKv = getelementptr inbounds i64, i64* %lnbKu, i32 5
  %lnbKw = ptrtoint i64* %lnbKv to i64
  %lnbKx = inttoptr i64 %lnbKw to i64*
  store i64* %lnbKx, i64** %Hp_Var
  %lnbKy = load i64*, i64** %Hp_Var
  %lnbKz = ptrtoint i64* %lnbKy to i64
  %lnbKA = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbKB = bitcast i64* %lnbKA to i64*
  %lnbKC = load i64, i64* %lnbKB, !tbaa !4
  %lnbKD = icmp ugt i64 %lnbKz, %lnbKC
  br i1 %lnbKD, label %cbJM, label %cbJL
cbJL:
  %lnbKF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89c_info$def to i64
  %lnbKE = load i64*, i64** %Hp_Var
  %lnbKG = getelementptr inbounds i64, i64* %lnbKE, i32 -4
  store i64 %lnbKF, i64* %lnbKG, !tbaa !2
  %lnbKI = load i64, i64* %R2_Var
  %lnbKH = load i64*, i64** %Hp_Var
  %lnbKJ = getelementptr inbounds i64, i64* %lnbKH, i32 -2
  store i64 %lnbKI, i64* %lnbKJ, !tbaa !2
  %lnbKL = ptrtoint i8* @Word_W_con_info to i64
  %lnbKK = load i64*, i64** %Hp_Var
  %lnbKM = getelementptr inbounds i64, i64* %lnbKK, i32 -1
  store i64 %lnbKL, i64* %lnbKM, !tbaa !2
  %lnbKO = load i64*, i64** %Hp_Var
  %lnbKP = getelementptr inbounds i64, i64* %lnbKO, i32 -4
  %lnbKQ = ptrtoint i64* %lnbKP to i64
  %lnbKN = load i64*, i64** %Hp_Var
  %lnbKR = getelementptr inbounds i64, i64* %lnbKN, i32 0
  store i64 %lnbKQ, i64* %lnbKR, !tbaa !2
  %lnbKT = load i64*, i64** %Hp_Var
  %lnbKU = ptrtoint i64* %lnbKT to i64
  %lnbKV = add i64 %lnbKU, -7
  store i64 %lnbKV, i64* %R1_Var
  %lnbKW = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lnbKX = bitcast i64* %lnbKW to i64*
  %lnbKY = load i64, i64* %lnbKX, !tbaa !1
  %lnbKZ = inttoptr i64 %lnbKY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbL0 = load i64*, i64** %Hp_Var
  %lnbL1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbKZ( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbL0, i64 %lnbL1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbJM:
  %lnbL2 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnbL2, !tbaa !4
  %lnbL3 = load i64, i64* %R2_Var
  store i64 %lnbL3, i64* %R2_Var
  %lnbL4 = ptrtoint %Word_wones_closure_struct* @Word_wones_closure$def to i64
  store i64 %lnbL4, i64* %R1_Var
  %lnbL5 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbL6 = bitcast i64* %lnbL5 to i64*
  %lnbL7 = load i64, i64* %lnbL6, !tbaa !4
  %lnbL8 = inttoptr i64 %lnbL7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbL9 = load i64*, i64** %Hp_Var
  %lnbLa = load i64, i64* %R1_Var
  %lnbLb = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbL8( i64* %Base_Arg, i64* %Sp_Arg, i64* %lnbL9, i64 %lnbLa, i64 %lnbLb, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wrap_closure_struct = type <{i64, i64}>
@Word_wrap_closure$def = internal global %Word_wrap_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to i64), i64 0}>
@Word_wrap_closure = alias i8* bitcast (%Word_wrap_closure_struct* @Word_wrap_closure$def to i8*)
@s89j_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89j_info$def to i8*)
define internal ghccc void @s89j_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89j_info$def to i64)),i64 376), i64 2, i64 844429225099283}>
{
cbLK:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbMe = load i64*, i64** %Sp_Var
  %lnbMf = getelementptr inbounds i64, i64* %lnbMe, i32 -4
  %lnbMg = ptrtoint i64* %lnbMf to i64
  %lnbMh = icmp ult i64 %lnbMg, %SpLim_Arg
  br i1 %lnbMh, label %cbLO, label %cbLP
cbLP:
  %lnbMj = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbMi = load i64*, i64** %Sp_Var
  %lnbMk = getelementptr inbounds i64, i64* %lnbMi, i32 -2
  store i64 %lnbMj, i64* %lnbMk, !tbaa !1
  %lnbMm = load i64, i64* %R1_Var
  %lnbMl = load i64*, i64** %Sp_Var
  %lnbMn = getelementptr inbounds i64, i64* %lnbMl, i32 -1
  store i64 %lnbMm, i64* %lnbMn, !tbaa !1
  %lnbMp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLI_info$def to i64
  %lnbMo = load i64*, i64** %Sp_Var
  %lnbMq = getelementptr inbounds i64, i64* %lnbMo, i32 -4
  store i64 %lnbMp, i64* %lnbMq, !tbaa !1
  %lnbMt = load i64, i64* %R1_Var
  %lnbMu = add i64 %lnbMt, 16
  %lnbMv = inttoptr i64 %lnbMu to i64*
  %lnbMw = load i64, i64* %lnbMv, !tbaa !3
  store i64 %lnbMw, i64* %R2_Var
  %lnbMA = load i64, i64* %R1_Var
  %lnbMB = add i64 %lnbMA, 24
  %lnbMC = inttoptr i64 %lnbMB to i64*
  %lnbMD = load i64, i64* %lnbMC, !tbaa !3
  %lnbMx = load i64*, i64** %Sp_Var
  %lnbME = getelementptr inbounds i64, i64* %lnbMx, i32 -3
  store i64 %lnbMD, i64* %lnbME, !tbaa !1
  %lnbMF = load i64*, i64** %Sp_Var
  %lnbMG = getelementptr inbounds i64, i64* %lnbMF, i32 -4
  %lnbMH = ptrtoint i64* %lnbMG to i64
  %lnbMI = inttoptr i64 %lnbMH to i64*
  store i64* %lnbMI, i64** %Sp_Var
  %lnbMJ = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbMK = load i64*, i64** %Sp_Var
  %lnbML = load i64, i64* %R1_Var
  %lnbMM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbMJ( i64* %Base_Arg, i64* %lnbMK, i64* %Hp_Arg, i64 %lnbML, i64 %lnbMM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbLO:
  %lnbMN = load i64, i64* %R1_Var
  store i64 %lnbMN, i64* %R1_Var
  %lnbMO = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbMP = bitcast i64* %lnbMO to i64*
  %lnbMQ = load i64, i64* %lnbMP, !tbaa !4
  %lnbMR = inttoptr i64 %lnbMQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbMS = load i64*, i64** %Sp_Var
  %lnbMT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbMR( i64* %Base_Arg, i64* %lnbMS, i64* %Hp_Arg, i64 %lnbMT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbLI_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLI_info$def to i8*)
define internal ghccc void @cbLI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLI_info$def to i64)),i64 376), i64 1, i64 844429225099296}>
{
cbLI:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbMU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLN_info$def to i64
  %lnbMV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnbMU, i64* %lnbMV, !tbaa !1
  store i64 %R1_Arg, i64* %R3_Var
  %lnbMW = ptrtoint %Word_bitmask_closure_struct* @Word_bitmask_closure$def to i64
  store i64 %lnbMW, i64* %R2_Var
  %lnbMX = bitcast i8* @base_GHCziList_zdwznzn_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbMY = load i64, i64* %R2_Var
  %lnbMZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbMX( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbMY, i64 %lnbMZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbLN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLN_info$def to i8*)
define internal ghccc void @cbLN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLN_info$def to i64)),i64 376), i64 1, i64 4294967328}>
{
cbLN:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lnbN0 = load i64*, i64** %Sp_Var
  %lnbN1 = getelementptr inbounds i64, i64* %lnbN0, i32 1
  %lnbN2 = bitcast i64* %lnbN1 to i64*
  %lnbN3 = load i64, i64* %lnbN2, !tbaa !1
  store i64 %lnbN3, i64* %R2_Var
  %lnbN4 = load i64*, i64** %Sp_Var
  %lnbN5 = getelementptr inbounds i64, i64* %lnbN4, i32 2
  %lnbN6 = ptrtoint i64* %lnbN5 to i64
  %lnbN7 = inttoptr i64 %lnbN6 to i64*
  store i64* %lnbN7, i64** %Sp_Var
  %lnbN8 = bitcast i8* @integerzmgmp_GHCziIntegerziType_andInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbN9 = load i64*, i64** %Sp_Var
  %lnbNa = load i64, i64* %R2_Var
  %lnbNb = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbN8( i64* %Base_Arg, i64* %lnbN9, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbNa, i64 %lnbNb, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wrap_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to i8*)
define ghccc void @Word_wrap_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to i64)),i64 376), i64 8589934607, i64 0, i64 3096229038784527}>
{
cbLV:
  %ls89e = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls89d = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbNc = load i64*, i64** %Sp_Var
  %lnbNd = getelementptr inbounds i64, i64* %lnbNc, i32 -3
  %lnbNe = ptrtoint i64* %lnbNd to i64
  %lnbNf = icmp ult i64 %lnbNe, %SpLim_Arg
  br i1 %lnbNf, label %cbLW, label %cbLX
cbLX:
  %lnbNh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLy_info$def to i64
  %lnbNg = load i64*, i64** %Sp_Var
  %lnbNi = getelementptr inbounds i64, i64* %lnbNg, i32 -3
  store i64 %lnbNh, i64* %lnbNi, !tbaa !1
  %lnbNj = load i64, i64* %R3_Var
  store i64 %lnbNj, i64* %ls89e
  %lnbNk = ptrtoint %Word_wrap1_closure_struct* @Word_wrap1_closure$def to i64
  %lnbNl = add i64 %lnbNk, 1
  store i64 %lnbNl, i64* %R3_Var
  %lnbNm = load i64, i64* %R2_Var
  store i64 %lnbNm, i64* %ls89d
  %lnbNn = load i64, i64* %R2_Var
  store i64 %lnbNn, i64* %R2_Var
  %lnbNp = load i64, i64* %ls89d
  %lnbNo = load i64*, i64** %Sp_Var
  %lnbNq = getelementptr inbounds i64, i64* %lnbNo, i32 -2
  store i64 %lnbNp, i64* %lnbNq, !tbaa !1
  %lnbNs = load i64, i64* %ls89e
  %lnbNr = load i64*, i64** %Sp_Var
  %lnbNt = getelementptr inbounds i64, i64* %lnbNr, i32 -1
  store i64 %lnbNs, i64* %lnbNt, !tbaa !1
  %lnbNu = load i64*, i64** %Sp_Var
  %lnbNv = getelementptr inbounds i64, i64* %lnbNu, i32 -3
  %lnbNw = ptrtoint i64* %lnbNv to i64
  %lnbNx = inttoptr i64 %lnbNw to i64*
  store i64* %lnbNx, i64** %Sp_Var
  %lnbNy = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbNz = load i64*, i64** %Sp_Var
  %lnbNA = load i64, i64* %R1_Var
  %lnbNB = load i64, i64* %R2_Var
  %lnbNC = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbNy( i64* %Base_Arg, i64* %lnbNz, i64* %Hp_Arg, i64 %lnbNA, i64 %lnbNB, i64 %lnbNC, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbLW:
  %lnbND = load i64, i64* %R3_Var
  store i64 %lnbND, i64* %R3_Var
  %lnbNE = load i64, i64* %R2_Var
  store i64 %lnbNE, i64* %R2_Var
  %lnbNF = ptrtoint %Word_wrap_closure_struct* @Word_wrap_closure$def to i64
  store i64 %lnbNF, i64* %R1_Var
  %lnbNG = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbNH = bitcast i64* %lnbNG to i64*
  %lnbNI = load i64, i64* %lnbNH, !tbaa !4
  %lnbNJ = inttoptr i64 %lnbNI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbNK = load i64*, i64** %Sp_Var
  %lnbNL = load i64, i64* %R1_Var
  %lnbNM = load i64, i64* %R2_Var
  %lnbNN = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbNJ( i64* %Base_Arg, i64* %lnbNK, i64* %Hp_Arg, i64 %lnbNL, i64 %lnbNM, i64 %lnbNN, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbLy_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLy_info$def to i8*)
define internal ghccc void @cbLy_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbLy_info$def to i64)),i64 376), i64 2, i64 844429225099296}>
{
cbLy:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls89e = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbNO = load i64*, i64** %Hp_Var
  %lnbNP = getelementptr inbounds i64, i64* %lnbNO, i32 6
  %lnbNQ = ptrtoint i64* %lnbNP to i64
  %lnbNR = inttoptr i64 %lnbNQ to i64*
  store i64* %lnbNR, i64** %Hp_Var
  %lnbNS = load i64*, i64** %Hp_Var
  %lnbNT = ptrtoint i64* %lnbNS to i64
  %lnbNU = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbNV = bitcast i64* %lnbNU to i64*
  %lnbNW = load i64, i64* %lnbNV, !tbaa !4
  %lnbNX = icmp ugt i64 %lnbNT, %lnbNW
  br i1 %lnbNX, label %cbM0, label %cbLZ
cbLZ:
  %lnbNY = load i64*, i64** %Sp_Var
  %lnbNZ = getelementptr inbounds i64, i64* %lnbNY, i32 2
  %lnbO0 = bitcast i64* %lnbNZ to i64*
  %lnbO1 = load i64, i64* %lnbO0, !tbaa !1
  store i64 %lnbO1, i64* %ls89e
  %lnbO2 = load i64, i64* %R1_Var
  switch i64 %lnbO2, label %cbM3 [i64 0, label %cbM3
i64 1, label %cbMa]
cbM3:
  %lnbO4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89j_info$def to i64
  %lnbO3 = load i64*, i64** %Hp_Var
  %lnbO5 = getelementptr inbounds i64, i64* %lnbO3, i32 -5
  store i64 %lnbO4, i64* %lnbO5, !tbaa !2
  %lnbO7 = load i64*, i64** %Sp_Var
  %lnbO8 = getelementptr inbounds i64, i64* %lnbO7, i32 1
  %lnbO9 = bitcast i64* %lnbO8 to i64*
  %lnbOa = load i64, i64* %lnbO9, !tbaa !1
  %lnbO6 = load i64*, i64** %Hp_Var
  %lnbOb = getelementptr inbounds i64, i64* %lnbO6, i32 -3
  store i64 %lnbOa, i64* %lnbOb, !tbaa !2
  %lnbOd = load i64, i64* %ls89e
  %lnbOc = load i64*, i64** %Hp_Var
  %lnbOe = getelementptr inbounds i64, i64* %lnbOc, i32 -2
  store i64 %lnbOd, i64* %lnbOe, !tbaa !2
  %lnbOg = ptrtoint i8* @Word_W_con_info to i64
  %lnbOf = load i64*, i64** %Hp_Var
  %lnbOh = getelementptr inbounds i64, i64* %lnbOf, i32 -1
  store i64 %lnbOg, i64* %lnbOh, !tbaa !2
  %lnbOj = load i64*, i64** %Hp_Var
  %lnbOk = getelementptr inbounds i64, i64* %lnbOj, i32 -5
  %lnbOl = ptrtoint i64* %lnbOk to i64
  %lnbOi = load i64*, i64** %Hp_Var
  %lnbOm = getelementptr inbounds i64, i64* %lnbOi, i32 0
  store i64 %lnbOl, i64* %lnbOm, !tbaa !2
  %lnbOo = load i64*, i64** %Hp_Var
  %lnbOp = ptrtoint i64* %lnbOo to i64
  %lnbOq = add i64 %lnbOp, -7
  store i64 %lnbOq, i64* %R1_Var
  %lnbOr = load i64*, i64** %Sp_Var
  %lnbOs = getelementptr inbounds i64, i64* %lnbOr, i32 3
  %lnbOt = ptrtoint i64* %lnbOs to i64
  %lnbOu = inttoptr i64 %lnbOt to i64*
  store i64* %lnbOu, i64** %Sp_Var
  %lnbOv = load i64*, i64** %Sp_Var
  %lnbOw = getelementptr inbounds i64, i64* %lnbOv, i32 0
  %lnbOx = bitcast i64* %lnbOw to i64*
  %lnbOy = load i64, i64* %lnbOx, !tbaa !1
  %lnbOz = inttoptr i64 %lnbOy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbOA = load i64*, i64** %Sp_Var
  %lnbOB = load i64*, i64** %Hp_Var
  %lnbOC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbOz( i64* %Base_Arg, i64* %lnbOA, i64* %lnbOB, i64 %lnbOC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbMa:
  %lnbOD = load i64*, i64** %Hp_Var
  %lnbOE = getelementptr inbounds i64, i64* %lnbOD, i32 -6
  %lnbOF = ptrtoint i64* %lnbOE to i64
  %lnbOG = inttoptr i64 %lnbOF to i64*
  store i64* %lnbOG, i64** %Hp_Var
  %lnbOI = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbM5_info$def to i64
  %lnbOH = load i64*, i64** %Sp_Var
  %lnbOJ = getelementptr inbounds i64, i64* %lnbOH, i32 2
  store i64 %lnbOI, i64* %lnbOJ, !tbaa !1
  %lnbOK = load i64, i64* %ls89e
  store i64 %lnbOK, i64* %R2_Var
  %lnbOL = load i64*, i64** %Sp_Var
  %lnbOM = getelementptr inbounds i64, i64* %lnbOL, i32 2
  %lnbON = ptrtoint i64* %lnbOM to i64
  %lnbOO = inttoptr i64 %lnbON to i64*
  store i64* %lnbOO, i64** %Sp_Var
  %lnbOP = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbOQ = load i64*, i64** %Sp_Var
  %lnbOR = load i64*, i64** %Hp_Var
  %lnbOS = load i64, i64* %R1_Var
  %lnbOT = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbOP( i64* %Base_Arg, i64* %lnbOQ, i64* %lnbOR, i64 %lnbOS, i64 %lnbOT, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbM0:
  %lnbOU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lnbOU, !tbaa !4
  %lnbOV = load i64, i64* %R1_Var
  store i64 %lnbOV, i64* %R1_Var
  %lnbOW = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbOX = load i64*, i64** %Sp_Var
  %lnbOY = load i64*, i64** %Hp_Var
  %lnbOZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbOW( i64* %Base_Arg, i64* %lnbOX, i64* %lnbOY, i64 %lnbOZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbM5_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbM5_info$def to i8*)
define internal ghccc void @cbM5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cbM5:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbP0 = load i64*, i64** %Hp_Var
  %lnbP1 = getelementptr inbounds i64, i64* %lnbP0, i32 2
  %lnbP2 = ptrtoint i64* %lnbP1 to i64
  %lnbP3 = inttoptr i64 %lnbP2 to i64*
  store i64* %lnbP3, i64** %Hp_Var
  %lnbP4 = load i64*, i64** %Hp_Var
  %lnbP5 = ptrtoint i64* %lnbP4 to i64
  %lnbP6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbP7 = bitcast i64* %lnbP6 to i64*
  %lnbP8 = load i64, i64* %lnbP7, !tbaa !4
  %lnbP9 = icmp ugt i64 %lnbP5, %lnbP8
  br i1 %lnbP9, label %cbMd, label %cbMc
cbMc:
  %lnbPb = ptrtoint i8* @Word_W64_con_info to i64
  %lnbPa = load i64*, i64** %Hp_Var
  %lnbPc = getelementptr inbounds i64, i64* %lnbPa, i32 -1
  store i64 %lnbPb, i64* %lnbPc, !tbaa !2
  %lnbPe = load i64, i64* %R1_Var
  %lnbPd = load i64*, i64** %Hp_Var
  %lnbPf = getelementptr inbounds i64, i64* %lnbPd, i32 0
  store i64 %lnbPe, i64* %lnbPf, !tbaa !2
  %lnbPh = load i64*, i64** %Hp_Var
  %lnbPi = ptrtoint i64* %lnbPh to i64
  %lnbPj = add i64 %lnbPi, -6
  store i64 %lnbPj, i64* %R1_Var
  %lnbPk = load i64*, i64** %Sp_Var
  %lnbPl = getelementptr inbounds i64, i64* %lnbPk, i32 1
  %lnbPm = ptrtoint i64* %lnbPl to i64
  %lnbPn = inttoptr i64 %lnbPm to i64*
  store i64* %lnbPn, i64** %Sp_Var
  %lnbPo = load i64*, i64** %Sp_Var
  %lnbPp = getelementptr inbounds i64, i64* %lnbPo, i32 0
  %lnbPq = bitcast i64* %lnbPp to i64*
  %lnbPr = load i64, i64* %lnbPq, !tbaa !1
  %lnbPs = inttoptr i64 %lnbPr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbPt = load i64*, i64** %Sp_Var
  %lnbPu = load i64*, i64** %Hp_Var
  %lnbPv = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbPs( i64* %Base_Arg, i64* %lnbPt, i64* %lnbPu, i64 %lnbPv, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbMd:
  %lnbPw = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbPw, !tbaa !4
  %lnbPx = load i64, i64* %R1_Var
  store i64 %lnbPx, i64* %R1_Var
  %lnbPy = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbPz = load i64*, i64** %Sp_Var
  %lnbPA = load i64*, i64** %Hp_Var
  %lnbPB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbPy( i64* %Base_Arg, i64* %lnbPz, i64* %lnbPA, i64 %lnbPB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YO_closure_struct = type <{i64, i64}>
%cbPH_str_struct = type <{[44 x i8]}>
@r7YO_closure$def = internal global %r7YO_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YO_info$def to i64), i64 0}>
@r7YO_closure = internal alias i8* bitcast (%r7YO_closure_struct* @r7YO_closure$def to i8*)
@cbPH_str$def = internal constant %cbPH_str_struct<{[44 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 53, i8 53, i8 44, i8 49, i8 41, i8 45, i8 40, i8 53, i8 56, i8 44, i8 51, i8 55, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 112, i8 108, i8 117, i8 115, i8 0]}>
@cbPH_str = internal alias i8* bitcast (%cbPH_str_struct* @cbPH_str$def to i8*)
@r7YO_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YO_info$def to i8*)
define internal ghccc void @r7YO_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YO_info$def to i64)),i64 536), i64 4294967299, i64 0, i64 4294967311}>
{
cbPI:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbPL = ptrtoint %cbPH_str_struct* @cbPH_str$def to i64
  store i64 %lnbPL, i64* %R2_Var
  %lnbPM = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbPN = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbPM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbPN, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wplus1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wplus1_closure$def = internal global %Word_wplus1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wplus1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wplus1_closure = alias i8* bitcast (%Word_wplus1_closure_struct* @Word_wplus1_closure$def to i8*)
@Word_wplus1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wplus1_info$def to i8*)
define ghccc void @Word_wplus1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wplus1_info$def to i64)),i64 544), i64 0, i64 4294967318}>
{
cbPV:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lcbPS = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbPY = load i64*, i64** %Sp_Var
  %lnbPZ = getelementptr inbounds i64, i64* %lnbPY, i32 -2
  %lnbQ0 = ptrtoint i64* %lnbPZ to i64
  %lnbQ1 = icmp ult i64 %lnbQ0, %SpLim_Arg
  br i1 %lnbQ1, label %cbPW, label %cbPX
cbPX:
  %lnbQ2 = ptrtoint i64* %Base_Arg to i64
  %lnbQ3 = inttoptr i64 %lnbQ2 to i8*
  %lnbQ4 = load i64, i64* %R1_Var
  %lnbQ5 = inttoptr i64 %lnbQ4 to i8*
  %lnbQ6 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lnbQ7 = call ccc i8* (i8*, i8*) %lnbQ6( i8* %lnbQ3, i8* %lnbQ5 ) nounwind
  %lnbQ8 = ptrtoint i8* %lnbQ7 to i64
  store i64 %lnbQ8, i64* %lcbPS
  %lnbQ9 = load i64, i64* %lcbPS
  %lnbQa = icmp eq i64 %lnbQ9, 0
  br i1 %lnbQa, label %cbPU, label %cbPT
cbPT:
  %lnbQc = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnbQb = load i64*, i64** %Sp_Var
  %lnbQd = getelementptr inbounds i64, i64* %lnbQb, i32 -2
  store i64 %lnbQc, i64* %lnbQd, !tbaa !1
  %lnbQf = load i64, i64* %lcbPS
  %lnbQe = load i64*, i64** %Sp_Var
  %lnbQg = getelementptr inbounds i64, i64* %lnbQe, i32 -1
  store i64 %lnbQf, i64* %lnbQg, !tbaa !1
  %lnbQh = load i64*, i64** %Sp_Var
  %lnbQi = getelementptr inbounds i64, i64* %lnbQh, i32 -2
  %lnbQj = ptrtoint i64* %lnbQi to i64
  %lnbQk = inttoptr i64 %lnbQj to i64*
  store i64* %lnbQk, i64** %Sp_Var
  %lnbQl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YO_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbQm = load i64*, i64** %Sp_Var
  %lnbQn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbQl( i64* %Base_Arg, i64* %lnbQm, i64* %Hp_Arg, i64 %lnbQn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbPU:
  %lnbQp = load i64, i64* %R1_Var
  %lnbQq = inttoptr i64 %lnbQp to i64*
  %lnbQr = load i64, i64* %lnbQq, !tbaa !3
  %lnbQs = inttoptr i64 %lnbQr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbQt = load i64*, i64** %Sp_Var
  %lnbQu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbQs( i64* %Base_Arg, i64* %lnbQt, i64* %Hp_Arg, i64 %lnbQu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbPW:
  %lnbQv = load i64, i64* %R1_Var
  store i64 %lnbQv, i64* %R1_Var
  %lnbQw = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbQx = bitcast i64* %lnbQw to i64*
  %lnbQy = load i64, i64* %lnbQx, !tbaa !4
  %lnbQz = inttoptr i64 %lnbQy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbQA = load i64*, i64** %Sp_Var
  %lnbQB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbQz( i64* %Base_Arg, i64* %lnbQA, i64* %Hp_Arg, i64 %lnbQB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wplus_closure_struct = type <{i64, i64}>
@Word_wplus_closure$def = internal global %Word_wplus_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wplus_info$def to i64), i64 0}>
@Word_wplus_closure = alias i8* bitcast (%Word_wplus_closure_struct* @Word_wplus_closure$def to i8*)
@s89t_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89t_info$def to i8*)
define internal ghccc void @s89t_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89t_info$def to i64)),i64 552), i64 2, i64 4294967315}>
{
cbRp:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbSH = load i64*, i64** %Sp_Var
  %lnbSI = getelementptr inbounds i64, i64* %lnbSH, i32 -2
  %lnbSJ = ptrtoint i64* %lnbSI to i64
  %lnbSK = icmp ult i64 %lnbSJ, %SpLim_Arg
  br i1 %lnbSK, label %cbRq, label %cbRr
cbRr:
  %lnbSM = ptrtoint i8* @stg_upd_frame_info to i64
  %lnbSL = load i64*, i64** %Sp_Var
  %lnbSN = getelementptr inbounds i64, i64* %lnbSL, i32 -2
  store i64 %lnbSM, i64* %lnbSN, !tbaa !1
  %lnbSP = load i64, i64* %R1_Var
  %lnbSO = load i64*, i64** %Sp_Var
  %lnbSQ = getelementptr inbounds i64, i64* %lnbSO, i32 -1
  store i64 %lnbSP, i64* %lnbSQ, !tbaa !1
  %lnbST = load i64, i64* %R1_Var
  %lnbSU = add i64 %lnbST, 24
  %lnbSV = inttoptr i64 %lnbSU to i64*
  %lnbSW = load i64, i64* %lnbSV, !tbaa !3
  store i64 %lnbSW, i64* %R3_Var
  %lnbSZ = load i64, i64* %R1_Var
  %lnbT0 = add i64 %lnbSZ, 16
  %lnbT1 = inttoptr i64 %lnbT0 to i64*
  %lnbT2 = load i64, i64* %lnbT1, !tbaa !3
  store i64 %lnbT2, i64* %R2_Var
  %lnbT3 = load i64*, i64** %Sp_Var
  %lnbT4 = getelementptr inbounds i64, i64* %lnbT3, i32 -2
  %lnbT5 = ptrtoint i64* %lnbT4 to i64
  %lnbT6 = inttoptr i64 %lnbT5 to i64*
  store i64* %lnbT6, i64** %Sp_Var
  %lnbT7 = bitcast i8* @integerzmgmp_GHCziIntegerziType_plusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbT8 = load i64*, i64** %Sp_Var
  %lnbT9 = load i64, i64* %R1_Var
  %lnbTa = load i64, i64* %R2_Var
  %lnbTb = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbT7( i64* %Base_Arg, i64* %lnbT8, i64* %Hp_Arg, i64 %lnbT9, i64 %lnbTa, i64 %lnbTb, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRq:
  %lnbTc = load i64, i64* %R1_Var
  store i64 %lnbTc, i64* %R1_Var
  %lnbTd = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnbTe = bitcast i64* %lnbTd to i64*
  %lnbTf = load i64, i64* %lnbTe, !tbaa !4
  %lnbTg = inttoptr i64 %lnbTf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbTh = load i64*, i64** %Sp_Var
  %lnbTi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbTg( i64* %Base_Arg, i64* %lnbTh, i64* %Hp_Arg, i64 %lnbTi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wplus_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wplus_info$def to i8*)
define ghccc void @Word_wplus_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wplus_info$def to i64)),i64 528), i64 12884901911, i64 0, i64 244813135887}>
{
cbRx:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnbTj = load i64*, i64** %Sp_Var
  %lnbTk = getelementptr inbounds i64, i64* %lnbTj, i32 -3
  %lnbTl = ptrtoint i64* %lnbTk to i64
  %lnbTm = icmp ult i64 %lnbTl, %SpLim_Arg
  br i1 %lnbTm, label %cbRy, label %cbRz
cbRz:
  %lnbTo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRb_info$def to i64
  %lnbTn = load i64*, i64** %Sp_Var
  %lnbTp = getelementptr inbounds i64, i64* %lnbTn, i32 -3
  store i64 %lnbTo, i64* %lnbTp, !tbaa !1
  %lnbTq = load i64, i64* %R3_Var
  store i64 %lnbTq, i64* %R1_Var
  %lnbTs = load i64, i64* %R2_Var
  %lnbTr = load i64*, i64** %Sp_Var
  %lnbTt = getelementptr inbounds i64, i64* %lnbTr, i32 -2
  store i64 %lnbTs, i64* %lnbTt, !tbaa !1
  %lnbTv = load i64, i64* %R4_Var
  %lnbTu = load i64*, i64** %Sp_Var
  %lnbTw = getelementptr inbounds i64, i64* %lnbTu, i32 -1
  store i64 %lnbTv, i64* %lnbTw, !tbaa !1
  %lnbTx = load i64*, i64** %Sp_Var
  %lnbTy = getelementptr inbounds i64, i64* %lnbTx, i32 -3
  %lnbTz = ptrtoint i64* %lnbTy to i64
  %lnbTA = inttoptr i64 %lnbTz to i64*
  store i64* %lnbTA, i64** %Sp_Var
  %lnbTB = load i64, i64* %R1_Var
  %lnbTC = and i64 %lnbTB, 7
  %lnbTD = icmp ne i64 %lnbTC, 0
  br i1 %lnbTD, label %ubSG, label %cbRc
cbRc:
  %lnbTF = load i64, i64* %R1_Var
  %lnbTG = inttoptr i64 %lnbTF to i64*
  %lnbTH = load i64, i64* %lnbTG, !tbaa !3
  %lnbTI = inttoptr i64 %lnbTH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbTJ = load i64*, i64** %Sp_Var
  %lnbTK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbTI( i64* %Base_Arg, i64* %lnbTJ, i64* %Hp_Arg, i64 %lnbTK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubSG:
  %lnbTL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRb_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbTM = load i64*, i64** %Sp_Var
  %lnbTN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbTL( i64* %Base_Arg, i64* %lnbTM, i64* %Hp_Arg, i64 %lnbTN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRy:
  %lnbTO = load i64, i64* %R4_Var
  store i64 %lnbTO, i64* %R4_Var
  %lnbTP = load i64, i64* %R3_Var
  store i64 %lnbTP, i64* %R3_Var
  %lnbTQ = load i64, i64* %R2_Var
  store i64 %lnbTQ, i64* %R2_Var
  %lnbTR = ptrtoint %Word_wplus_closure_struct* @Word_wplus_closure$def to i64
  store i64 %lnbTR, i64* %R1_Var
  %lnbTS = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnbTT = bitcast i64* %lnbTS to i64*
  %lnbTU = load i64, i64* %lnbTT, !tbaa !4
  %lnbTV = inttoptr i64 %lnbTU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbTW = load i64*, i64** %Sp_Var
  %lnbTX = load i64, i64* %R1_Var
  %lnbTY = load i64, i64* %R2_Var
  %lnbTZ = load i64, i64* %R3_Var
  %lnbU0 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbTV( i64* %Base_Arg, i64* %lnbTW, i64* %Hp_Arg, i64 %lnbTX, i64 %lnbTY, i64 %lnbTZ, i64 %lnbU0, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbRb_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRb_info$def to i8*)
define internal ghccc void @cbRb_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRb_info$def to i64)),i64 528), i64 2, i64 107374182432}>
{
cbRb:
  %ls89o = alloca i64, i32 1
  %ls89q = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls89y = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbU1 = load i64*, i64** %Sp_Var
  %lnbU2 = getelementptr inbounds i64, i64* %lnbU1, i32 2
  %lnbU3 = bitcast i64* %lnbU2 to i64*
  %lnbU4 = load i64, i64* %lnbU3, !tbaa !1
  store i64 %lnbU4, i64* %ls89o
  %lnbU5 = load i64, i64* %R1_Var
  %lnbU6 = and i64 %lnbU5, 7
  switch i64 %lnbU6, label %cbRt [i64 1, label %cbRt
i64 2, label %cbRu
i64 3, label %cbRv]
cbRt:
  %lnbU8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRg_info$def to i64
  %lnbU7 = load i64*, i64** %Sp_Var
  %lnbU9 = getelementptr inbounds i64, i64* %lnbU7, i32 0
  store i64 %lnbU8, i64* %lnbU9, !tbaa !1
  %lnbUc = load i64, i64* %R1_Var
  %lnbUd = add i64 %lnbUc, 7
  %lnbUe = inttoptr i64 %lnbUd to i64*
  %lnbUf = load i64, i64* %lnbUe, !tbaa !3
  store i64 %lnbUf, i64* %ls89q
  %lnbUg = load i64, i64* %ls89o
  store i64 %lnbUg, i64* %R1_Var
  %lnbUi = load i64, i64* %ls89q
  %lnbUh = load i64*, i64** %Sp_Var
  %lnbUj = getelementptr inbounds i64, i64* %lnbUh, i32 2
  store i64 %lnbUi, i64* %lnbUj, !tbaa !1
  %lnbUk = load i64, i64* %R1_Var
  %lnbUl = and i64 %lnbUk, 7
  %lnbUm = icmp ne i64 %lnbUl, 0
  br i1 %lnbUm, label %ubSE, label %cbRh
cbRh:
  %lnbUo = load i64, i64* %R1_Var
  %lnbUp = inttoptr i64 %lnbUo to i64*
  %lnbUq = load i64, i64* %lnbUp, !tbaa !3
  %lnbUr = inttoptr i64 %lnbUq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUs = load i64*, i64** %Sp_Var
  %lnbUt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUr( i64* %Base_Arg, i64* %lnbUs, i64* %Hp_Arg, i64 %lnbUt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubSE:
  %lnbUu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRg_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUv = load i64*, i64** %Sp_Var
  %lnbUw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUu( i64* %Base_Arg, i64* %lnbUv, i64* %Hp_Arg, i64 %lnbUw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRu:
  %lnbUy = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbS1_info$def to i64
  %lnbUx = load i64*, i64** %Sp_Var
  %lnbUz = getelementptr inbounds i64, i64* %lnbUx, i32 1
  store i64 %lnbUy, i64* %lnbUz, !tbaa !1
  %lnbUC = load i64, i64* %R1_Var
  %lnbUD = add i64 %lnbUC, 6
  %lnbUE = inttoptr i64 %lnbUD to i64*
  %lnbUF = load i64, i64* %lnbUE, !tbaa !3
  store i64 %lnbUF, i64* %ls89y
  %lnbUG = load i64, i64* %ls89o
  store i64 %lnbUG, i64* %R1_Var
  %lnbUI = load i64, i64* %ls89y
  %lnbUH = load i64*, i64** %Sp_Var
  %lnbUJ = getelementptr inbounds i64, i64* %lnbUH, i32 2
  store i64 %lnbUI, i64* %lnbUJ, !tbaa !1
  %lnbUK = load i64*, i64** %Sp_Var
  %lnbUL = getelementptr inbounds i64, i64* %lnbUK, i32 1
  %lnbUM = ptrtoint i64* %lnbUL to i64
  %lnbUN = inttoptr i64 %lnbUM to i64*
  store i64* %lnbUN, i64** %Sp_Var
  %lnbUO = load i64, i64* %R1_Var
  %lnbUP = and i64 %lnbUO, 7
  %lnbUQ = icmp ne i64 %lnbUP, 0
  br i1 %lnbUQ, label %ubSF, label %cbS3
cbS3:
  %lnbUS = load i64, i64* %R1_Var
  %lnbUT = inttoptr i64 %lnbUS to i64*
  %lnbUU = load i64, i64* %lnbUT, !tbaa !3
  %lnbUV = inttoptr i64 %lnbUU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUW = load i64*, i64** %Sp_Var
  %lnbUX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUV( i64* %Base_Arg, i64* %lnbUW, i64* %Hp_Arg, i64 %lnbUX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ubSF:
  %lnbUY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbS1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbUZ = load i64*, i64** %Sp_Var
  %lnbV0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbUY( i64* %Base_Arg, i64* %lnbUZ, i64* %Hp_Arg, i64 %lnbV0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRv:
  %lnbV1 = ptrtoint %Word_wplus1_closure_struct* @Word_wplus1_closure$def to i64
  store i64 %lnbV1, i64* %R1_Var
  %lnbV2 = load i64*, i64** %Sp_Var
  %lnbV3 = getelementptr inbounds i64, i64* %lnbV2, i32 3
  %lnbV4 = ptrtoint i64* %lnbV3 to i64
  %lnbV5 = inttoptr i64 %lnbV4 to i64*
  store i64* %lnbV5, i64** %Sp_Var
  %lnbV7 = load i64, i64* %R1_Var
  %lnbV8 = inttoptr i64 %lnbV7 to i64*
  %lnbV9 = load i64, i64* %lnbV8, !tbaa !3
  %lnbVa = inttoptr i64 %lnbV9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbVb = load i64*, i64** %Sp_Var
  %lnbVc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbVa( i64* %Base_Arg, i64* %lnbVb, i64* %Hp_Arg, i64 %lnbVc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbS1_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbS1_info$def to i8*)
define internal ghccc void @cbS1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbS1_info$def to i64)),i64 560), i64 65, i64 4294967328}>
{
cbS1:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls89E = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbVd = load i64, i64* %R1_Var
  %lnbVe = and i64 %lnbVd, 7
  switch i64 %lnbVe, label %cbSh [i64 1, label %cbSh
i64 2, label %cbSr
i64 3, label %cbSy]
cbSh:
  %lnbVg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbS7_info$def to i64
  %lnbVf = load i64*, i64** %Sp_Var
  %lnbVh = getelementptr inbounds i64, i64* %lnbVf, i32 0
  store i64 %lnbVg, i64* %lnbVh, !tbaa !1
  %lnbVk = load i64, i64* %R1_Var
  %lnbVl = add i64 %lnbVk, 7
  %lnbVm = inttoptr i64 %lnbVl to i64*
  %lnbVn = load i64, i64* %lnbVm, !tbaa !3
  store i64 %lnbVn, i64* %R2_Var
  %lnbVo = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbVp = load i64*, i64** %Sp_Var
  %lnbVq = load i64*, i64** %Hp_Var
  %lnbVr = load i64, i64* %R1_Var
  %lnbVs = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbVo( i64* %Base_Arg, i64* %lnbVp, i64* %lnbVq, i64 %lnbVr, i64 %lnbVs, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbSr:
  %lnbVt = load i64*, i64** %Hp_Var
  %lnbVu = getelementptr inbounds i64, i64* %lnbVt, i32 2
  %lnbVv = ptrtoint i64* %lnbVu to i64
  %lnbVw = inttoptr i64 %lnbVv to i64*
  store i64* %lnbVw, i64** %Hp_Var
  %lnbVx = load i64*, i64** %Hp_Var
  %lnbVy = ptrtoint i64* %lnbVx to i64
  %lnbVz = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbVA = bitcast i64* %lnbVz to i64*
  %lnbVB = load i64, i64* %lnbVA, !tbaa !4
  %lnbVC = icmp ugt i64 %lnbVy, %lnbVB
  br i1 %lnbVC, label %cbSu, label %cbSt
cbSt:
  %lnbVD = load i64*, i64** %Sp_Var
  %lnbVE = getelementptr inbounds i64, i64* %lnbVD, i32 1
  %lnbVF = bitcast i64* %lnbVE to i64*
  %lnbVG = load i64, i64* %lnbVF, !tbaa !1
  %lnbVJ = load i64, i64* %R1_Var
  %lnbVK = add i64 %lnbVJ, 6
  %lnbVL = inttoptr i64 %lnbVK to i64*
  %lnbVM = load i64, i64* %lnbVL, !tbaa !3
  %lnbVN = add i64 %lnbVG, %lnbVM
  store i64 %lnbVN, i64* %ls89E
  %lnbVP = ptrtoint i8* @Word_W64_con_info to i64
  %lnbVO = load i64*, i64** %Hp_Var
  %lnbVQ = getelementptr inbounds i64, i64* %lnbVO, i32 -1
  store i64 %lnbVP, i64* %lnbVQ, !tbaa !2
  %lnbVS = load i64, i64* %ls89E
  %lnbVR = load i64*, i64** %Hp_Var
  %lnbVT = getelementptr inbounds i64, i64* %lnbVR, i32 0
  store i64 %lnbVS, i64* %lnbVT, !tbaa !2
  %lnbVV = load i64*, i64** %Hp_Var
  %lnbVW = ptrtoint i64* %lnbVV to i64
  %lnbVX = add i64 %lnbVW, -6
  store i64 %lnbVX, i64* %R1_Var
  %lnbVY = load i64*, i64** %Sp_Var
  %lnbVZ = getelementptr inbounds i64, i64* %lnbVY, i32 2
  %lnbW0 = ptrtoint i64* %lnbVZ to i64
  %lnbW1 = inttoptr i64 %lnbW0 to i64*
  store i64* %lnbW1, i64** %Sp_Var
  %lnbW2 = load i64*, i64** %Sp_Var
  %lnbW3 = getelementptr inbounds i64, i64* %lnbW2, i32 0
  %lnbW4 = bitcast i64* %lnbW3 to i64*
  %lnbW5 = load i64, i64* %lnbW4, !tbaa !1
  %lnbW6 = inttoptr i64 %lnbW5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbW7 = load i64*, i64** %Sp_Var
  %lnbW8 = load i64*, i64** %Hp_Var
  %lnbW9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbW6( i64* %Base_Arg, i64* %lnbW7, i64* %lnbW8, i64 %lnbW9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbSu:
  %lnbWa = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbWa, !tbaa !4
  %lnbWb = load i64, i64* %R1_Var
  store i64 %lnbWb, i64* %R1_Var
  %lnbWc = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbWd = load i64*, i64** %Sp_Var
  %lnbWe = load i64*, i64** %Hp_Var
  %lnbWf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbWc( i64* %Base_Arg, i64* %lnbWd, i64* %lnbWe, i64 %lnbWf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbSy:
  %lnbWg = ptrtoint %Word_wplus1_closure_struct* @Word_wplus1_closure$def to i64
  store i64 %lnbWg, i64* %R1_Var
  %lnbWh = load i64*, i64** %Sp_Var
  %lnbWi = getelementptr inbounds i64, i64* %lnbWh, i32 2
  %lnbWj = ptrtoint i64* %lnbWi to i64
  %lnbWk = inttoptr i64 %lnbWj to i64*
  store i64* %lnbWk, i64** %Sp_Var
  %lnbWm = load i64, i64* %R1_Var
  %lnbWn = inttoptr i64 %lnbWm to i64*
  %lnbWo = load i64, i64* %lnbWn, !tbaa !3
  %lnbWp = inttoptr i64 %lnbWo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbWq = load i64*, i64** %Sp_Var
  %lnbWr = load i64*, i64** %Hp_Var
  %lnbWs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbWp( i64* %Base_Arg, i64* %lnbWq, i64* %lnbWr, i64 %lnbWs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbS7_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbS7_info$def to i8*)
define internal ghccc void @cbS7_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cbS7:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbWt = load i64*, i64** %Hp_Var
  %lnbWu = getelementptr inbounds i64, i64* %lnbWt, i32 2
  %lnbWv = ptrtoint i64* %lnbWu to i64
  %lnbWw = inttoptr i64 %lnbWv to i64*
  store i64* %lnbWw, i64** %Hp_Var
  %lnbWx = load i64*, i64** %Hp_Var
  %lnbWy = ptrtoint i64* %lnbWx to i64
  %lnbWz = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbWA = bitcast i64* %lnbWz to i64*
  %lnbWB = load i64, i64* %lnbWA, !tbaa !4
  %lnbWC = icmp ugt i64 %lnbWy, %lnbWB
  br i1 %lnbWC, label %cbSk, label %cbSj
cbSj:
  %lnbWE = ptrtoint i8* @Word_W64_con_info to i64
  %lnbWD = load i64*, i64** %Hp_Var
  %lnbWF = getelementptr inbounds i64, i64* %lnbWD, i32 -1
  store i64 %lnbWE, i64* %lnbWF, !tbaa !2
  %lnbWH = load i64*, i64** %Sp_Var
  %lnbWI = getelementptr inbounds i64, i64* %lnbWH, i32 1
  %lnbWJ = bitcast i64* %lnbWI to i64*
  %lnbWK = load i64, i64* %lnbWJ, !tbaa !1
  %lnbWL = load i64, i64* %R1_Var
  %lnbWM = add i64 %lnbWK, %lnbWL
  %lnbWG = load i64*, i64** %Hp_Var
  %lnbWN = getelementptr inbounds i64, i64* %lnbWG, i32 0
  store i64 %lnbWM, i64* %lnbWN, !tbaa !2
  %lnbWP = load i64*, i64** %Hp_Var
  %lnbWQ = ptrtoint i64* %lnbWP to i64
  %lnbWR = add i64 %lnbWQ, -6
  store i64 %lnbWR, i64* %R1_Var
  %lnbWS = load i64*, i64** %Sp_Var
  %lnbWT = getelementptr inbounds i64, i64* %lnbWS, i32 2
  %lnbWU = ptrtoint i64* %lnbWT to i64
  %lnbWV = inttoptr i64 %lnbWU to i64*
  store i64* %lnbWV, i64** %Sp_Var
  %lnbWW = load i64*, i64** %Sp_Var
  %lnbWX = getelementptr inbounds i64, i64* %lnbWW, i32 0
  %lnbWY = bitcast i64* %lnbWX to i64*
  %lnbWZ = load i64, i64* %lnbWY, !tbaa !1
  %lnbX0 = inttoptr i64 %lnbWZ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbX1 = load i64*, i64** %Sp_Var
  %lnbX2 = load i64*, i64** %Hp_Var
  %lnbX3 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbX0( i64* %Base_Arg, i64* %lnbX1, i64* %lnbX2, i64 %lnbX3, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbSk:
  %lnbX4 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbX4, !tbaa !4
  %lnbX5 = load i64, i64* %R1_Var
  store i64 %lnbX5, i64* %R1_Var
  %lnbX6 = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbX7 = load i64*, i64** %Sp_Var
  %lnbX8 = load i64*, i64** %Hp_Var
  %lnbX9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbX6( i64* %Base_Arg, i64* %lnbX7, i64* %lnbX8, i64 %lnbX9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbRg_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRg_info$def to i8*)
define internal ghccc void @cbRg_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRg_info$def to i64)),i64 528), i64 2, i64 107374182432}>
{
cbRg:
  %ls89q = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls89s = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbXa = load i64*, i64** %Sp_Var
  %lnbXb = getelementptr inbounds i64, i64* %lnbXa, i32 2
  %lnbXc = bitcast i64* %lnbXb to i64*
  %lnbXd = load i64, i64* %lnbXc, !tbaa !1
  store i64 %lnbXd, i64* %ls89q
  %lnbXe = load i64, i64* %R1_Var
  %lnbXf = and i64 %lnbXe, 7
  switch i64 %lnbXf, label %cbRC [i64 1, label %cbRC
i64 2, label %cbRR
i64 3, label %cbRY]
cbRC:
  %lnbXg = load i64*, i64** %Hp_Var
  %lnbXh = getelementptr inbounds i64, i64* %lnbXg, i32 4
  %lnbXi = ptrtoint i64* %lnbXh to i64
  %lnbXj = inttoptr i64 %lnbXi to i64*
  store i64* %lnbXj, i64** %Hp_Var
  %lnbXk = load i64*, i64** %Hp_Var
  %lnbXl = ptrtoint i64* %lnbXk to i64
  %lnbXm = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbXn = bitcast i64* %lnbXm to i64*
  %lnbXo = load i64, i64* %lnbXn, !tbaa !4
  %lnbXp = icmp ugt i64 %lnbXl, %lnbXo
  br i1 %lnbXp, label %cbRF, label %cbRE
cbRE:
  %lnbXs = load i64, i64* %R1_Var
  %lnbXt = add i64 %lnbXs, 7
  %lnbXu = inttoptr i64 %lnbXt to i64*
  %lnbXv = load i64, i64* %lnbXu, !tbaa !3
  store i64 %lnbXv, i64* %ls89s
  %lnbXx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89t_info$def to i64
  %lnbXw = load i64*, i64** %Hp_Var
  %lnbXy = getelementptr inbounds i64, i64* %lnbXw, i32 -3
  store i64 %lnbXx, i64* %lnbXy, !tbaa !2
  %lnbXA = load i64, i64* %ls89q
  %lnbXz = load i64*, i64** %Hp_Var
  %lnbXB = getelementptr inbounds i64, i64* %lnbXz, i32 -1
  store i64 %lnbXA, i64* %lnbXB, !tbaa !2
  %lnbXD = load i64, i64* %ls89s
  %lnbXC = load i64*, i64** %Hp_Var
  %lnbXE = getelementptr inbounds i64, i64* %lnbXC, i32 0
  store i64 %lnbXD, i64* %lnbXE, !tbaa !2
  %lnbXF = load i64*, i64** %Hp_Var
  %lnbXG = getelementptr inbounds i64, i64* %lnbXF, i32 -3
  %lnbXH = ptrtoint i64* %lnbXG to i64
  store i64 %lnbXH, i64* %R3_Var
  %lnbXI = load i64*, i64** %Sp_Var
  %lnbXJ = getelementptr inbounds i64, i64* %lnbXI, i32 1
  %lnbXK = bitcast i64* %lnbXJ to i64*
  %lnbXL = load i64, i64* %lnbXK, !tbaa !1
  store i64 %lnbXL, i64* %R2_Var
  %lnbXM = load i64*, i64** %Sp_Var
  %lnbXN = getelementptr inbounds i64, i64* %lnbXM, i32 3
  %lnbXO = ptrtoint i64* %lnbXN to i64
  %lnbXP = inttoptr i64 %lnbXO to i64*
  store i64* %lnbXP, i64** %Sp_Var
  %lnbXQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbXR = load i64*, i64** %Sp_Var
  %lnbXS = load i64*, i64** %Hp_Var
  %lnbXT = load i64, i64* %R1_Var
  %lnbXU = load i64, i64* %R2_Var
  %lnbXV = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbXQ( i64* %Base_Arg, i64* %lnbXR, i64* %lnbXS, i64 %lnbXT, i64 %lnbXU, i64 %lnbXV, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRF:
  %lnbXW = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lnbXW, !tbaa !4
  %lnbXX = load i64, i64* %R1_Var
  store i64 %lnbXX, i64* %R1_Var
  %lnbXY = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbXZ = load i64*, i64** %Sp_Var
  %lnbY0 = load i64*, i64** %Hp_Var
  %lnbY1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbXY( i64* %Base_Arg, i64* %lnbXZ, i64* %lnbY0, i64 %lnbY1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRR:
  %lnbY3 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRI_info$def to i64
  %lnbY2 = load i64*, i64** %Sp_Var
  %lnbY4 = getelementptr inbounds i64, i64* %lnbY2, i32 1
  store i64 %lnbY3, i64* %lnbY4, !tbaa !1
  %lnbY5 = load i64, i64* %ls89q
  store i64 %lnbY5, i64* %R2_Var
  %lnbY9 = load i64, i64* %R1_Var
  %lnbYa = add i64 %lnbY9, 6
  %lnbYb = inttoptr i64 %lnbYa to i64*
  %lnbYc = load i64, i64* %lnbYb, !tbaa !3
  %lnbY6 = load i64*, i64** %Sp_Var
  %lnbYd = getelementptr inbounds i64, i64* %lnbY6, i32 2
  store i64 %lnbYc, i64* %lnbYd, !tbaa !1
  %lnbYe = load i64*, i64** %Sp_Var
  %lnbYf = getelementptr inbounds i64, i64* %lnbYe, i32 1
  %lnbYg = ptrtoint i64* %lnbYf to i64
  %lnbYh = inttoptr i64 %lnbYg to i64*
  store i64* %lnbYh, i64** %Sp_Var
  %lnbYi = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbYj = load i64*, i64** %Sp_Var
  %lnbYk = load i64*, i64** %Hp_Var
  %lnbYl = load i64, i64* %R1_Var
  %lnbYm = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbYi( i64* %Base_Arg, i64* %lnbYj, i64* %lnbYk, i64 %lnbYl, i64 %lnbYm, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRY:
  %lnbYn = ptrtoint %Word_wplus1_closure_struct* @Word_wplus1_closure$def to i64
  store i64 %lnbYn, i64* %R1_Var
  %lnbYo = load i64*, i64** %Sp_Var
  %lnbYp = getelementptr inbounds i64, i64* %lnbYo, i32 3
  %lnbYq = ptrtoint i64* %lnbYp to i64
  %lnbYr = inttoptr i64 %lnbYq to i64*
  store i64* %lnbYr, i64** %Sp_Var
  %lnbYt = load i64, i64* %R1_Var
  %lnbYu = inttoptr i64 %lnbYt to i64*
  %lnbYv = load i64, i64* %lnbYu, !tbaa !3
  %lnbYw = inttoptr i64 %lnbYv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbYx = load i64*, i64** %Sp_Var
  %lnbYy = load i64*, i64** %Hp_Var
  %lnbYz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbYw( i64* %Base_Arg, i64* %lnbYx, i64* %lnbYy, i64 %lnbYz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cbRI_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cbRI_info$def to i8*)
define internal ghccc void @cbRI_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cbRI:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnbYA = load i64*, i64** %Hp_Var
  %lnbYB = getelementptr inbounds i64, i64* %lnbYA, i32 2
  %lnbYC = ptrtoint i64* %lnbYB to i64
  %lnbYD = inttoptr i64 %lnbYC to i64*
  store i64* %lnbYD, i64** %Hp_Var
  %lnbYE = load i64*, i64** %Hp_Var
  %lnbYF = ptrtoint i64* %lnbYE to i64
  %lnbYG = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnbYH = bitcast i64* %lnbYG to i64*
  %lnbYI = load i64, i64* %lnbYH, !tbaa !4
  %lnbYJ = icmp ugt i64 %lnbYF, %lnbYI
  br i1 %lnbYJ, label %cbRU, label %cbRT
cbRT:
  %lnbYL = ptrtoint i8* @Word_W64_con_info to i64
  %lnbYK = load i64*, i64** %Hp_Var
  %lnbYM = getelementptr inbounds i64, i64* %lnbYK, i32 -1
  store i64 %lnbYL, i64* %lnbYM, !tbaa !2
  %lnbYO = load i64, i64* %R1_Var
  %lnbYP = load i64*, i64** %Sp_Var
  %lnbYQ = getelementptr inbounds i64, i64* %lnbYP, i32 1
  %lnbYR = bitcast i64* %lnbYQ to i64*
  %lnbYS = load i64, i64* %lnbYR, !tbaa !1
  %lnbYT = add i64 %lnbYO, %lnbYS
  %lnbYN = load i64*, i64** %Hp_Var
  %lnbYU = getelementptr inbounds i64, i64* %lnbYN, i32 0
  store i64 %lnbYT, i64* %lnbYU, !tbaa !2
  %lnbYW = load i64*, i64** %Hp_Var
  %lnbYX = ptrtoint i64* %lnbYW to i64
  %lnbYY = add i64 %lnbYX, -6
  store i64 %lnbYY, i64* %R1_Var
  %lnbYZ = load i64*, i64** %Sp_Var
  %lnbZ0 = getelementptr inbounds i64, i64* %lnbYZ, i32 2
  %lnbZ1 = ptrtoint i64* %lnbZ0 to i64
  %lnbZ2 = inttoptr i64 %lnbZ1 to i64*
  store i64* %lnbZ2, i64** %Sp_Var
  %lnbZ3 = load i64*, i64** %Sp_Var
  %lnbZ4 = getelementptr inbounds i64, i64* %lnbZ3, i32 0
  %lnbZ5 = bitcast i64* %lnbZ4 to i64*
  %lnbZ6 = load i64, i64* %lnbZ5, !tbaa !1
  %lnbZ7 = inttoptr i64 %lnbZ6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbZ8 = load i64*, i64** %Sp_Var
  %lnbZ9 = load i64*, i64** %Hp_Var
  %lnbZa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbZ7( i64* %Base_Arg, i64* %lnbZ8, i64* %lnbZ9, i64 %lnbZa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbRU:
  %lnbZb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnbZb, !tbaa !4
  %lnbZc = load i64, i64* %R1_Var
  store i64 %lnbZc, i64* %R1_Var
  %lnbZd = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbZe = load i64*, i64** %Sp_Var
  %lnbZf = load i64*, i64** %Hp_Var
  %lnbZg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbZd( i64* %Base_Arg, i64* %lnbZe, i64* %lnbZf, i64 %lnbZg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YP_closure_struct = type <{i64, i64}>
%cbZm_str_struct = type <{[45 x i8]}>
@r7YP_closure$def = internal global %r7YP_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YP_info$def to i64), i64 0}>
@r7YP_closure = internal alias i8* bitcast (%r7YP_closure_struct* @r7YP_closure$def to i8*)
@cbZm_str$def = internal constant %cbZm_str_struct<{[45 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 54, i8 49, i8 44, i8 49, i8 41, i8 45, i8 40, i8 54, i8 52, i8 44, i8 51, i8 56, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 109, i8 105, i8 110, i8 117, i8 115, i8 0]}>
@cbZm_str = internal alias i8* bitcast (%cbZm_str_struct* @cbZm_str$def to i8*)
@r7YP_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YP_info$def to i8*)
define internal ghccc void @r7YP_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YP_info$def to i64)),i64 536), i64 4294967299, i64 0, i64 4294967311}>
{
cbZn:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnbZq = ptrtoint %cbZm_str_struct* @cbZm_str$def to i64
  store i64 %lnbZq, i64* %R2_Var
  %lnbZr = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnbZs = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnbZr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnbZs, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wminus1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wminus1_closure$def = internal global %Word_wminus1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wminus1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wminus1_closure = alias i8* bitcast (%Word_wminus1_closure_struct* @Word_wminus1_closure$def to i8*)
@Word_wminus1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wminus1_info$def to i8*)
define ghccc void @Word_wminus1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wminus1_info$def to i64)),i64 576), i64 0, i64 4294967318}>
{
cbZA:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lcbZx = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnbZD = load i64*, i64** %Sp_Var
  %lnbZE = getelementptr inbounds i64, i64* %lnbZD, i32 -2
  %lnbZF = ptrtoint i64* %lnbZE to i64
  %lnbZG = icmp ult i64 %lnbZF, %SpLim_Arg
  br i1 %lnbZG, label %cbZB, label %cbZC
cbZC:
  %lnbZH = ptrtoint i64* %Base_Arg to i64
  %lnbZI = inttoptr i64 %lnbZH to i8*
  %lnbZJ = load i64, i64* %R1_Var
  %lnbZK = inttoptr i64 %lnbZJ to i8*
  %lnbZL = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lnbZM = call ccc i8* (i8*, i8*) %lnbZL( i8* %lnbZI, i8* %lnbZK ) nounwind
  %lnbZN = ptrtoint i8* %lnbZM to i64
  store i64 %lnbZN, i64* %lcbZx
  %lnbZO = load i64, i64* %lcbZx
  %lnbZP = icmp eq i64 %lnbZO, 0
  br i1 %lnbZP, label %cbZz, label %cbZy
cbZy:
  %lnbZR = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnbZQ = load i64*, i64** %Sp_Var
  %lnbZS = getelementptr inbounds i64, i64* %lnbZQ, i32 -2
  store i64 %lnbZR, i64* %lnbZS, !tbaa !1
  %lnbZU = load i64, i64* %lcbZx
  %lnbZT = load i64*, i64** %Sp_Var
  %lnbZV = getelementptr inbounds i64, i64* %lnbZT, i32 -1
  store i64 %lnbZU, i64* %lnbZV, !tbaa !1
  %lnbZW = load i64*, i64** %Sp_Var
  %lnbZX = getelementptr inbounds i64, i64* %lnbZW, i32 -2
  %lnbZY = ptrtoint i64* %lnbZX to i64
  %lnbZZ = inttoptr i64 %lnbZY to i64*
  store i64* %lnbZZ, i64** %Sp_Var
  %lnc00 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YP_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc01 = load i64*, i64** %Sp_Var
  %lnc02 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc00( i64* %Base_Arg, i64* %lnc01, i64* %Hp_Arg, i64 %lnc02, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbZz:
  %lnc04 = load i64, i64* %R1_Var
  %lnc05 = inttoptr i64 %lnc04 to i64*
  %lnc06 = load i64, i64* %lnc05, !tbaa !3
  %lnc07 = inttoptr i64 %lnc06 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc08 = load i64*, i64** %Sp_Var
  %lnc09 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc07( i64* %Base_Arg, i64* %lnc08, i64* %Hp_Arg, i64 %lnc09, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cbZB:
  %lnc0a = load i64, i64* %R1_Var
  store i64 %lnc0a, i64* %R1_Var
  %lnc0b = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnc0c = bitcast i64* %lnc0b to i64*
  %lnc0d = load i64, i64* %lnc0c, !tbaa !4
  %lnc0e = inttoptr i64 %lnc0d to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc0f = load i64*, i64** %Sp_Var
  %lnc0g = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc0e( i64* %Base_Arg, i64* %lnc0f, i64* %Hp_Arg, i64 %lnc0g, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wminus_closure_struct = type <{i64, i64}>
%uc2D_srtd_struct = type <{i64, i64, i64}>
%uc2E_srtd_struct = type <{i64, i64, i64}>
%uc2F_srtd_struct = type <{i64, i64, i64}>
%uc2G_srtd_struct = type <{i64, i64, i64}>
@Word_wminus_closure$def = internal global %Word_wminus_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wminus_info$def to i64), i64 0}>
@Word_wminus_closure = alias i8* bitcast (%Word_wminus_closure_struct* @Word_wminus_closure$def to i8*)
@uc2D_srtd$def = internal constant %uc2D_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 200), i64 45, i64 17592320262145}>
@uc2D_srtd = internal alias i8* bitcast (%uc2D_srtd_struct* @uc2D_srtd$def to i8*)
@uc2E_srtd$def = internal constant %uc2E_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 200), i64 50, i64 864216273649665}>
@uc2E_srtd = internal alias i8* bitcast (%uc2E_srtd_struct* @uc2E_srtd$def to i8*)
@uc2F_srtd$def = internal constant %uc2F_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 200), i64 49, i64 301266320228353}>
@uc2F_srtd = internal alias i8* bitcast (%uc2F_srtd_struct* @uc2F_srtd$def to i8*)
@uc2G_srtd$def = internal constant %uc2G_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 200), i64 49, i64 301266320228353}>
@uc2G_srtd = internal alias i8* bitcast (%uc2G_srtd_struct* @uc2G_srtd$def to i8*)
@s89R_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89R_info$def to i8*)
define internal ghccc void @s89R_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%uc2D_srtd_struct* @uc2D_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89R_info$def to i64)),i64 0), i64 3, i64 -4294967280}>
{
cc1d:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnc2H = load i64*, i64** %Sp_Var
  %lnc2I = getelementptr inbounds i64, i64* %lnc2H, i32 -5
  %lnc2J = ptrtoint i64* %lnc2I to i64
  %lnc2K = icmp ult i64 %lnc2J, %SpLim_Arg
  br i1 %lnc2K, label %cc1h, label %cc1i
cc1i:
  %lnc2M = ptrtoint i8* @stg_upd_frame_info to i64
  %lnc2L = load i64*, i64** %Sp_Var
  %lnc2N = getelementptr inbounds i64, i64* %lnc2L, i32 -2
  store i64 %lnc2M, i64* %lnc2N, !tbaa !1
  %lnc2P = load i64, i64* %R1_Var
  %lnc2O = load i64*, i64** %Sp_Var
  %lnc2Q = getelementptr inbounds i64, i64* %lnc2O, i32 -1
  store i64 %lnc2P, i64* %lnc2Q, !tbaa !1
  %lnc2S = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1b_info$def to i64
  %lnc2R = load i64*, i64** %Sp_Var
  %lnc2T = getelementptr inbounds i64, i64* %lnc2R, i32 -5
  store i64 %lnc2S, i64* %lnc2T, !tbaa !1
  %lnc2W = load i64, i64* %R1_Var
  %lnc2X = add i64 %lnc2W, 16
  %lnc2Y = inttoptr i64 %lnc2X to i64*
  %lnc2Z = load i64, i64* %lnc2Y, !tbaa !3
  store i64 %lnc2Z, i64* %R3_Var
  %lnc30 = ptrtoint %Word_pow1_closure_struct* @Word_pow1_closure$def to i64
  %lnc31 = add i64 %lnc30, 1
  store i64 %lnc31, i64* %R2_Var
  %lnc35 = load i64, i64* %R1_Var
  %lnc36 = add i64 %lnc35, 24
  %lnc37 = inttoptr i64 %lnc36 to i64*
  %lnc38 = load i64, i64* %lnc37, !tbaa !3
  %lnc32 = load i64*, i64** %Sp_Var
  %lnc39 = getelementptr inbounds i64, i64* %lnc32, i32 -4
  store i64 %lnc38, i64* %lnc39, !tbaa !1
  %lnc3d = load i64, i64* %R1_Var
  %lnc3e = add i64 %lnc3d, 32
  %lnc3f = inttoptr i64 %lnc3e to i64*
  %lnc3g = load i64, i64* %lnc3f, !tbaa !3
  %lnc3a = load i64*, i64** %Sp_Var
  %lnc3h = getelementptr inbounds i64, i64* %lnc3a, i32 -3
  store i64 %lnc3g, i64* %lnc3h, !tbaa !1
  %lnc3i = load i64*, i64** %Sp_Var
  %lnc3j = getelementptr inbounds i64, i64* %lnc3i, i32 -5
  %lnc3k = ptrtoint i64* %lnc3j to i64
  %lnc3l = inttoptr i64 %lnc3k to i64*
  store i64* %lnc3l, i64** %Sp_Var
  %lnc3m = bitcast i8* @base_GHCziReal_zczuzdszc_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3n = load i64*, i64** %Sp_Var
  %lnc3o = load i64, i64* %R1_Var
  %lnc3p = load i64, i64* %R2_Var
  %lnc3q = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3m( i64* %Base_Arg, i64* %lnc3n, i64* %Hp_Arg, i64 %lnc3o, i64 %lnc3p, i64 %lnc3q, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1h:
  %lnc3r = load i64, i64* %R1_Var
  store i64 %lnc3r, i64* %R1_Var
  %lnc3s = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnc3t = bitcast i64* %lnc3s to i64*
  %lnc3u = load i64, i64* %lnc3t, !tbaa !4
  %lnc3v = inttoptr i64 %lnc3u to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3w = load i64*, i64** %Sp_Var
  %lnc3x = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3v( i64* %Base_Arg, i64* %lnc3w, i64* %Hp_Arg, i64 %lnc3x, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc1b_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1b_info$def to i8*)
define internal ghccc void @cc1b_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1b_info$def to i64)),i64 416), i64 2, i64 562954248388640}>
{
cc1b:
  %ls89M = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnc3y = load i64*, i64** %Sp_Var
  %lnc3z = getelementptr inbounds i64, i64* %lnc3y, i32 1
  %lnc3A = bitcast i64* %lnc3z to i64*
  %lnc3B = load i64, i64* %lnc3A, !tbaa !1
  store i64 %lnc3B, i64* %ls89M
  %lnc3D = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1g_info$def to i64
  %lnc3C = load i64*, i64** %Sp_Var
  %lnc3E = getelementptr inbounds i64, i64* %lnc3C, i32 1
  store i64 %lnc3D, i64* %lnc3E, !tbaa !1
  %lnc3F = load i64, i64* %ls89M
  store i64 %lnc3F, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnc3G = load i64*, i64** %Sp_Var
  %lnc3H = getelementptr inbounds i64, i64* %lnc3G, i32 1
  %lnc3I = ptrtoint i64* %lnc3H to i64
  %lnc3J = inttoptr i64 %lnc3I to i64*
  store i64* %lnc3J, i64** %Sp_Var
  %lnc3K = bitcast i8* @integerzmgmp_GHCziIntegerziType_plusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3L = load i64*, i64** %Sp_Var
  %lnc3M = load i64, i64* %R2_Var
  %lnc3N = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3K( i64* %Base_Arg, i64* %lnc3L, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnc3M, i64 %lnc3N, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc1g_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1g_info$def to i8*)
define internal ghccc void @cc1g_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1g_info$def to i64)),i64 416), i64 1, i64 4294967328}>
{
cc1g:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnc3O = load i64*, i64** %Sp_Var
  %lnc3P = getelementptr inbounds i64, i64* %lnc3O, i32 1
  %lnc3Q = bitcast i64* %lnc3P to i64*
  %lnc3R = load i64, i64* %lnc3Q, !tbaa !1
  store i64 %lnc3R, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnc3S = load i64*, i64** %Sp_Var
  %lnc3T = getelementptr inbounds i64, i64* %lnc3S, i32 2
  %lnc3U = ptrtoint i64* %lnc3T to i64
  %lnc3V = inttoptr i64 %lnc3U to i64*
  store i64* %lnc3V, i64** %Sp_Var
  %lnc3W = bitcast i8* @integerzmgmp_GHCziIntegerziType_minusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc3X = load i64*, i64** %Sp_Var
  %lnc3Y = load i64, i64* %R2_Var
  %lnc3Z = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc3W( i64* %Base_Arg, i64* %lnc3X, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnc3Y, i64 %lnc3Z, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wminus_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wminus_info$def to i8*)
define ghccc void @Word_wminus_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%uc2E_srtd_struct* @uc2E_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wminus_info$def to i64)),i64 0), i64 12884901911, i64 0, i64 -4294967281}>
{
cc1t:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnc40 = load i64*, i64** %Sp_Var
  %lnc41 = getelementptr inbounds i64, i64* %lnc40, i32 -3
  %lnc42 = ptrtoint i64* %lnc41 to i64
  %lnc43 = icmp ult i64 %lnc42, %SpLim_Arg
  br i1 %lnc43, label %cc1u, label %cc1v
cc1v:
  %lnc45 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc0X_info$def to i64
  %lnc44 = load i64*, i64** %Sp_Var
  %lnc46 = getelementptr inbounds i64, i64* %lnc44, i32 -3
  store i64 %lnc45, i64* %lnc46, !tbaa !1
  %lnc47 = load i64, i64* %R3_Var
  store i64 %lnc47, i64* %R1_Var
  %lnc49 = load i64, i64* %R2_Var
  %lnc48 = load i64*, i64** %Sp_Var
  %lnc4a = getelementptr inbounds i64, i64* %lnc48, i32 -2
  store i64 %lnc49, i64* %lnc4a, !tbaa !1
  %lnc4c = load i64, i64* %R4_Var
  %lnc4b = load i64*, i64** %Sp_Var
  %lnc4d = getelementptr inbounds i64, i64* %lnc4b, i32 -1
  store i64 %lnc4c, i64* %lnc4d, !tbaa !1
  %lnc4e = load i64*, i64** %Sp_Var
  %lnc4f = getelementptr inbounds i64, i64* %lnc4e, i32 -3
  %lnc4g = ptrtoint i64* %lnc4f to i64
  %lnc4h = inttoptr i64 %lnc4g to i64*
  store i64* %lnc4h, i64** %Sp_Var
  %lnc4i = load i64, i64* %R1_Var
  %lnc4j = and i64 %lnc4i, 7
  %lnc4k = icmp ne i64 %lnc4j, 0
  br i1 %lnc4k, label %uc2C, label %cc0Y
cc0Y:
  %lnc4m = load i64, i64* %R1_Var
  %lnc4n = inttoptr i64 %lnc4m to i64*
  %lnc4o = load i64, i64* %lnc4n, !tbaa !3
  %lnc4p = inttoptr i64 %lnc4o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4q = load i64*, i64** %Sp_Var
  %lnc4r = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4p( i64* %Base_Arg, i64* %lnc4q, i64* %Hp_Arg, i64 %lnc4r, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uc2C:
  %lnc4s = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc0X_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4t = load i64*, i64** %Sp_Var
  %lnc4u = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4s( i64* %Base_Arg, i64* %lnc4t, i64* %Hp_Arg, i64 %lnc4u, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1u:
  %lnc4v = load i64, i64* %R4_Var
  store i64 %lnc4v, i64* %R4_Var
  %lnc4w = load i64, i64* %R3_Var
  store i64 %lnc4w, i64* %R3_Var
  %lnc4x = load i64, i64* %R2_Var
  store i64 %lnc4x, i64* %R2_Var
  %lnc4y = ptrtoint %Word_wminus_closure_struct* @Word_wminus_closure$def to i64
  store i64 %lnc4y, i64* %R1_Var
  %lnc4z = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnc4A = bitcast i64* %lnc4z to i64*
  %lnc4B = load i64, i64* %lnc4A, !tbaa !4
  %lnc4C = inttoptr i64 %lnc4B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc4D = load i64*, i64** %Sp_Var
  %lnc4E = load i64, i64* %R1_Var
  %lnc4F = load i64, i64* %R2_Var
  %lnc4G = load i64, i64* %R3_Var
  %lnc4H = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc4C( i64* %Base_Arg, i64* %lnc4D, i64* %Hp_Arg, i64 %lnc4E, i64 %lnc4F, i64 %lnc4G, i64 %lnc4H, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc0X_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc0X_info$def to i8*)
define internal ghccc void @cc0X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%uc2F_srtd_struct* @uc2F_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc0X_info$def to i64)),i64 0), i64 2, i64 -4294967264}>
{
cc0X:
  %ls89K = alloca i64, i32 1
  %ls89M = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls89W = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnc4I = load i64*, i64** %Sp_Var
  %lnc4J = getelementptr inbounds i64, i64* %lnc4I, i32 2
  %lnc4K = bitcast i64* %lnc4J to i64*
  %lnc4L = load i64, i64* %lnc4K, !tbaa !1
  store i64 %lnc4L, i64* %ls89K
  %lnc4M = load i64, i64* %R1_Var
  %lnc4N = and i64 %lnc4M, 7
  switch i64 %lnc4N, label %cc1p [i64 1, label %cc1p
i64 2, label %cc1q
i64 3, label %cc1r]
cc1p:
  %lnc4P = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc12_info$def to i64
  %lnc4O = load i64*, i64** %Sp_Var
  %lnc4Q = getelementptr inbounds i64, i64* %lnc4O, i32 0
  store i64 %lnc4P, i64* %lnc4Q, !tbaa !1
  %lnc4T = load i64, i64* %R1_Var
  %lnc4U = add i64 %lnc4T, 7
  %lnc4V = inttoptr i64 %lnc4U to i64*
  %lnc4W = load i64, i64* %lnc4V, !tbaa !3
  store i64 %lnc4W, i64* %ls89M
  %lnc4X = load i64, i64* %ls89K
  store i64 %lnc4X, i64* %R1_Var
  %lnc4Z = load i64, i64* %ls89M
  %lnc4Y = load i64*, i64** %Sp_Var
  %lnc50 = getelementptr inbounds i64, i64* %lnc4Y, i32 2
  store i64 %lnc4Z, i64* %lnc50, !tbaa !1
  %lnc51 = load i64, i64* %R1_Var
  %lnc52 = and i64 %lnc51, 7
  %lnc53 = icmp ne i64 %lnc52, 0
  br i1 %lnc53, label %uc2A, label %cc13
cc13:
  %lnc55 = load i64, i64* %R1_Var
  %lnc56 = inttoptr i64 %lnc55 to i64*
  %lnc57 = load i64, i64* %lnc56, !tbaa !3
  %lnc58 = inttoptr i64 %lnc57 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc59 = load i64*, i64** %Sp_Var
  %lnc5a = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc58( i64* %Base_Arg, i64* %lnc59, i64* %Hp_Arg, i64 %lnc5a, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uc2A:
  %lnc5b = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc12_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5c = load i64*, i64** %Sp_Var
  %lnc5d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5b( i64* %Base_Arg, i64* %lnc5c, i64* %Hp_Arg, i64 %lnc5d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1q:
  %lnc5f = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1X_info$def to i64
  %lnc5e = load i64*, i64** %Sp_Var
  %lnc5g = getelementptr inbounds i64, i64* %lnc5e, i32 1
  store i64 %lnc5f, i64* %lnc5g, !tbaa !1
  %lnc5j = load i64, i64* %R1_Var
  %lnc5k = add i64 %lnc5j, 6
  %lnc5l = inttoptr i64 %lnc5k to i64*
  %lnc5m = load i64, i64* %lnc5l, !tbaa !3
  store i64 %lnc5m, i64* %ls89W
  %lnc5n = load i64, i64* %ls89K
  store i64 %lnc5n, i64* %R1_Var
  %lnc5p = load i64, i64* %ls89W
  %lnc5o = load i64*, i64** %Sp_Var
  %lnc5q = getelementptr inbounds i64, i64* %lnc5o, i32 2
  store i64 %lnc5p, i64* %lnc5q, !tbaa !1
  %lnc5r = load i64*, i64** %Sp_Var
  %lnc5s = getelementptr inbounds i64, i64* %lnc5r, i32 1
  %lnc5t = ptrtoint i64* %lnc5s to i64
  %lnc5u = inttoptr i64 %lnc5t to i64*
  store i64* %lnc5u, i64** %Sp_Var
  %lnc5v = load i64, i64* %R1_Var
  %lnc5w = and i64 %lnc5v, 7
  %lnc5x = icmp ne i64 %lnc5w, 0
  br i1 %lnc5x, label %uc2B, label %cc1Z
cc1Z:
  %lnc5z = load i64, i64* %R1_Var
  %lnc5A = inttoptr i64 %lnc5z to i64*
  %lnc5B = load i64, i64* %lnc5A, !tbaa !3
  %lnc5C = inttoptr i64 %lnc5B to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5D = load i64*, i64** %Sp_Var
  %lnc5E = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5C( i64* %Base_Arg, i64* %lnc5D, i64* %Hp_Arg, i64 %lnc5E, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uc2B:
  %lnc5F = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1X_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5G = load i64*, i64** %Sp_Var
  %lnc5H = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5F( i64* %Base_Arg, i64* %lnc5G, i64* %Hp_Arg, i64 %lnc5H, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1r:
  %lnc5I = ptrtoint %Word_wminus1_closure_struct* @Word_wminus1_closure$def to i64
  store i64 %lnc5I, i64* %R1_Var
  %lnc5J = load i64*, i64** %Sp_Var
  %lnc5K = getelementptr inbounds i64, i64* %lnc5J, i32 3
  %lnc5L = ptrtoint i64* %lnc5K to i64
  %lnc5M = inttoptr i64 %lnc5L to i64*
  store i64* %lnc5M, i64** %Sp_Var
  %lnc5O = load i64, i64* %R1_Var
  %lnc5P = inttoptr i64 %lnc5O to i64*
  %lnc5Q = load i64, i64* %lnc5P, !tbaa !3
  %lnc5R = inttoptr i64 %lnc5Q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc5S = load i64*, i64** %Sp_Var
  %lnc5T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc5R( i64* %Base_Arg, i64* %lnc5S, i64* %Hp_Arg, i64 %lnc5T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc1X_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1X_info$def to i8*)
define internal ghccc void @cc1X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1X_info$def to i64)),i64 584), i64 65, i64 4294967328}>
{
cc1X:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8a2 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnc5U = load i64, i64* %R1_Var
  %lnc5V = and i64 %lnc5U, 7
  switch i64 %lnc5V, label %cc2d [i64 1, label %cc2d
i64 2, label %cc2n
i64 3, label %cc2u]
cc2d:
  %lnc5X = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc23_info$def to i64
  %lnc5W = load i64*, i64** %Sp_Var
  %lnc5Y = getelementptr inbounds i64, i64* %lnc5W, i32 0
  store i64 %lnc5X, i64* %lnc5Y, !tbaa !1
  %lnc61 = load i64, i64* %R1_Var
  %lnc62 = add i64 %lnc61, 7
  %lnc63 = inttoptr i64 %lnc62 to i64*
  %lnc64 = load i64, i64* %lnc63, !tbaa !3
  store i64 %lnc64, i64* %R2_Var
  %lnc65 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc66 = load i64*, i64** %Sp_Var
  %lnc67 = load i64*, i64** %Hp_Var
  %lnc68 = load i64, i64* %R1_Var
  %lnc69 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc65( i64* %Base_Arg, i64* %lnc66, i64* %lnc67, i64 %lnc68, i64 %lnc69, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc2n:
  %lnc6a = load i64*, i64** %Hp_Var
  %lnc6b = getelementptr inbounds i64, i64* %lnc6a, i32 2
  %lnc6c = ptrtoint i64* %lnc6b to i64
  %lnc6d = inttoptr i64 %lnc6c to i64*
  store i64* %lnc6d, i64** %Hp_Var
  %lnc6e = load i64*, i64** %Hp_Var
  %lnc6f = ptrtoint i64* %lnc6e to i64
  %lnc6g = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnc6h = bitcast i64* %lnc6g to i64*
  %lnc6i = load i64, i64* %lnc6h, !tbaa !4
  %lnc6j = icmp ugt i64 %lnc6f, %lnc6i
  br i1 %lnc6j, label %cc2q, label %cc2p
cc2p:
  %lnc6k = load i64*, i64** %Sp_Var
  %lnc6l = getelementptr inbounds i64, i64* %lnc6k, i32 1
  %lnc6m = bitcast i64* %lnc6l to i64*
  %lnc6n = load i64, i64* %lnc6m, !tbaa !1
  %lnc6q = load i64, i64* %R1_Var
  %lnc6r = add i64 %lnc6q, 6
  %lnc6s = inttoptr i64 %lnc6r to i64*
  %lnc6t = load i64, i64* %lnc6s, !tbaa !3
  %lnc6u = sub i64 %lnc6n, %lnc6t
  store i64 %lnc6u, i64* %ls8a2
  %lnc6w = ptrtoint i8* @Word_W64_con_info to i64
  %lnc6v = load i64*, i64** %Hp_Var
  %lnc6x = getelementptr inbounds i64, i64* %lnc6v, i32 -1
  store i64 %lnc6w, i64* %lnc6x, !tbaa !2
  %lnc6z = load i64, i64* %ls8a2
  %lnc6y = load i64*, i64** %Hp_Var
  %lnc6A = getelementptr inbounds i64, i64* %lnc6y, i32 0
  store i64 %lnc6z, i64* %lnc6A, !tbaa !2
  %lnc6C = load i64*, i64** %Hp_Var
  %lnc6D = ptrtoint i64* %lnc6C to i64
  %lnc6E = add i64 %lnc6D, -6
  store i64 %lnc6E, i64* %R1_Var
  %lnc6F = load i64*, i64** %Sp_Var
  %lnc6G = getelementptr inbounds i64, i64* %lnc6F, i32 2
  %lnc6H = ptrtoint i64* %lnc6G to i64
  %lnc6I = inttoptr i64 %lnc6H to i64*
  store i64* %lnc6I, i64** %Sp_Var
  %lnc6J = load i64*, i64** %Sp_Var
  %lnc6K = getelementptr inbounds i64, i64* %lnc6J, i32 0
  %lnc6L = bitcast i64* %lnc6K to i64*
  %lnc6M = load i64, i64* %lnc6L, !tbaa !1
  %lnc6N = inttoptr i64 %lnc6M to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc6O = load i64*, i64** %Sp_Var
  %lnc6P = load i64*, i64** %Hp_Var
  %lnc6Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc6N( i64* %Base_Arg, i64* %lnc6O, i64* %lnc6P, i64 %lnc6Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc2q:
  %lnc6R = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnc6R, !tbaa !4
  %lnc6S = load i64, i64* %R1_Var
  store i64 %lnc6S, i64* %R1_Var
  %lnc6T = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc6U = load i64*, i64** %Sp_Var
  %lnc6V = load i64*, i64** %Hp_Var
  %lnc6W = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc6T( i64* %Base_Arg, i64* %lnc6U, i64* %lnc6V, i64 %lnc6W, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc2u:
  %lnc6X = ptrtoint %Word_wminus1_closure_struct* @Word_wminus1_closure$def to i64
  store i64 %lnc6X, i64* %R1_Var
  %lnc6Y = load i64*, i64** %Sp_Var
  %lnc6Z = getelementptr inbounds i64, i64* %lnc6Y, i32 2
  %lnc70 = ptrtoint i64* %lnc6Z to i64
  %lnc71 = inttoptr i64 %lnc70 to i64*
  store i64* %lnc71, i64** %Sp_Var
  %lnc73 = load i64, i64* %R1_Var
  %lnc74 = inttoptr i64 %lnc73 to i64*
  %lnc75 = load i64, i64* %lnc74, !tbaa !3
  %lnc76 = inttoptr i64 %lnc75 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc77 = load i64*, i64** %Sp_Var
  %lnc78 = load i64*, i64** %Hp_Var
  %lnc79 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc76( i64* %Base_Arg, i64* %lnc77, i64* %lnc78, i64 %lnc79, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc23_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc23_info$def to i8*)
define internal ghccc void @cc23_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cc23:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnc7a = load i64*, i64** %Hp_Var
  %lnc7b = getelementptr inbounds i64, i64* %lnc7a, i32 2
  %lnc7c = ptrtoint i64* %lnc7b to i64
  %lnc7d = inttoptr i64 %lnc7c to i64*
  store i64* %lnc7d, i64** %Hp_Var
  %lnc7e = load i64*, i64** %Hp_Var
  %lnc7f = ptrtoint i64* %lnc7e to i64
  %lnc7g = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnc7h = bitcast i64* %lnc7g to i64*
  %lnc7i = load i64, i64* %lnc7h, !tbaa !4
  %lnc7j = icmp ugt i64 %lnc7f, %lnc7i
  br i1 %lnc7j, label %cc2g, label %cc2f
cc2f:
  %lnc7l = ptrtoint i8* @Word_W64_con_info to i64
  %lnc7k = load i64*, i64** %Hp_Var
  %lnc7m = getelementptr inbounds i64, i64* %lnc7k, i32 -1
  store i64 %lnc7l, i64* %lnc7m, !tbaa !2
  %lnc7o = load i64*, i64** %Sp_Var
  %lnc7p = getelementptr inbounds i64, i64* %lnc7o, i32 1
  %lnc7q = bitcast i64* %lnc7p to i64*
  %lnc7r = load i64, i64* %lnc7q, !tbaa !1
  %lnc7s = load i64, i64* %R1_Var
  %lnc7t = sub i64 %lnc7r, %lnc7s
  %lnc7n = load i64*, i64** %Hp_Var
  %lnc7u = getelementptr inbounds i64, i64* %lnc7n, i32 0
  store i64 %lnc7t, i64* %lnc7u, !tbaa !2
  %lnc7w = load i64*, i64** %Hp_Var
  %lnc7x = ptrtoint i64* %lnc7w to i64
  %lnc7y = add i64 %lnc7x, -6
  store i64 %lnc7y, i64* %R1_Var
  %lnc7z = load i64*, i64** %Sp_Var
  %lnc7A = getelementptr inbounds i64, i64* %lnc7z, i32 2
  %lnc7B = ptrtoint i64* %lnc7A to i64
  %lnc7C = inttoptr i64 %lnc7B to i64*
  store i64* %lnc7C, i64** %Sp_Var
  %lnc7D = load i64*, i64** %Sp_Var
  %lnc7E = getelementptr inbounds i64, i64* %lnc7D, i32 0
  %lnc7F = bitcast i64* %lnc7E to i64*
  %lnc7G = load i64, i64* %lnc7F, !tbaa !1
  %lnc7H = inttoptr i64 %lnc7G to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc7I = load i64*, i64** %Sp_Var
  %lnc7J = load i64*, i64** %Hp_Var
  %lnc7K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc7H( i64* %Base_Arg, i64* %lnc7I, i64* %lnc7J, i64 %lnc7K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc2g:
  %lnc7L = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnc7L, !tbaa !4
  %lnc7M = load i64, i64* %R1_Var
  store i64 %lnc7M, i64* %R1_Var
  %lnc7N = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc7O = load i64*, i64** %Sp_Var
  %lnc7P = load i64*, i64** %Hp_Var
  %lnc7Q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc7N( i64* %Base_Arg, i64* %lnc7O, i64* %lnc7P, i64 %lnc7Q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc12_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc12_info$def to i8*)
define internal ghccc void @cc12_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%uc2G_srtd_struct* @uc2G_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc12_info$def to i64)),i64 0), i64 2, i64 -4294967264}>
{
cc12:
  %ls89M = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls89O = alloca i64, i32 1
  %ls89I = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnc7R = load i64*, i64** %Sp_Var
  %lnc7S = getelementptr inbounds i64, i64* %lnc7R, i32 2
  %lnc7T = bitcast i64* %lnc7S to i64*
  %lnc7U = load i64, i64* %lnc7T, !tbaa !1
  store i64 %lnc7U, i64* %ls89M
  %lnc7V = load i64, i64* %R1_Var
  %lnc7W = and i64 %lnc7V, 7
  switch i64 %lnc7W, label %cc1y [i64 1, label %cc1y
i64 2, label %cc1N
i64 3, label %cc1U]
cc1y:
  %lnc7X = load i64*, i64** %Hp_Var
  %lnc7Y = getelementptr inbounds i64, i64* %lnc7X, i32 5
  %lnc7Z = ptrtoint i64* %lnc7Y to i64
  %lnc80 = inttoptr i64 %lnc7Z to i64*
  store i64* %lnc80, i64** %Hp_Var
  %lnc81 = load i64*, i64** %Hp_Var
  %lnc82 = ptrtoint i64* %lnc81 to i64
  %lnc83 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnc84 = bitcast i64* %lnc83 to i64*
  %lnc85 = load i64, i64* %lnc84, !tbaa !4
  %lnc86 = icmp ugt i64 %lnc82, %lnc85
  br i1 %lnc86, label %cc1B, label %cc1A
cc1A:
  %lnc89 = load i64, i64* %R1_Var
  %lnc8a = add i64 %lnc89, 7
  %lnc8b = inttoptr i64 %lnc8a to i64*
  %lnc8c = load i64, i64* %lnc8b, !tbaa !3
  store i64 %lnc8c, i64* %ls89O
  %lnc8e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s89R_info$def to i64
  %lnc8d = load i64*, i64** %Hp_Var
  %lnc8f = getelementptr inbounds i64, i64* %lnc8d, i32 -4
  store i64 %lnc8e, i64* %lnc8f, !tbaa !2
  %lnc8g = load i64*, i64** %Sp_Var
  %lnc8h = getelementptr inbounds i64, i64* %lnc8g, i32 1
  %lnc8i = bitcast i64* %lnc8h to i64*
  %lnc8j = load i64, i64* %lnc8i, !tbaa !1
  store i64 %lnc8j, i64* %ls89I
  %lnc8l = load i64, i64* %ls89I
  %lnc8k = load i64*, i64** %Hp_Var
  %lnc8m = getelementptr inbounds i64, i64* %lnc8k, i32 -2
  store i64 %lnc8l, i64* %lnc8m, !tbaa !2
  %lnc8o = load i64, i64* %ls89M
  %lnc8n = load i64*, i64** %Hp_Var
  %lnc8p = getelementptr inbounds i64, i64* %lnc8n, i32 -1
  store i64 %lnc8o, i64* %lnc8p, !tbaa !2
  %lnc8r = load i64, i64* %ls89O
  %lnc8q = load i64*, i64** %Hp_Var
  %lnc8s = getelementptr inbounds i64, i64* %lnc8q, i32 0
  store i64 %lnc8r, i64* %lnc8s, !tbaa !2
  %lnc8t = load i64*, i64** %Hp_Var
  %lnc8u = getelementptr inbounds i64, i64* %lnc8t, i32 -4
  %lnc8v = ptrtoint i64* %lnc8u to i64
  store i64 %lnc8v, i64* %R3_Var
  %lnc8w = load i64, i64* %ls89I
  store i64 %lnc8w, i64* %R2_Var
  %lnc8x = load i64*, i64** %Sp_Var
  %lnc8y = getelementptr inbounds i64, i64* %lnc8x, i32 3
  %lnc8z = ptrtoint i64* %lnc8y to i64
  %lnc8A = inttoptr i64 %lnc8z to i64*
  store i64* %lnc8A, i64** %Sp_Var
  %lnc8B = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc8C = load i64*, i64** %Sp_Var
  %lnc8D = load i64*, i64** %Hp_Var
  %lnc8E = load i64, i64* %R1_Var
  %lnc8F = load i64, i64* %R2_Var
  %lnc8G = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc8B( i64* %Base_Arg, i64* %lnc8C, i64* %lnc8D, i64 %lnc8E, i64 %lnc8F, i64 %lnc8G, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1B:
  %lnc8H = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lnc8H, !tbaa !4
  %lnc8I = load i64, i64* %R1_Var
  store i64 %lnc8I, i64* %R1_Var
  %lnc8J = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc8K = load i64*, i64** %Sp_Var
  %lnc8L = load i64*, i64** %Hp_Var
  %lnc8M = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc8J( i64* %Base_Arg, i64* %lnc8K, i64* %lnc8L, i64 %lnc8M, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1N:
  %lnc8O = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1E_info$def to i64
  %lnc8N = load i64*, i64** %Sp_Var
  %lnc8P = getelementptr inbounds i64, i64* %lnc8N, i32 1
  store i64 %lnc8O, i64* %lnc8P, !tbaa !1
  %lnc8Q = load i64, i64* %ls89M
  store i64 %lnc8Q, i64* %R2_Var
  %lnc8U = load i64, i64* %R1_Var
  %lnc8V = add i64 %lnc8U, 6
  %lnc8W = inttoptr i64 %lnc8V to i64*
  %lnc8X = load i64, i64* %lnc8W, !tbaa !3
  %lnc8R = load i64*, i64** %Sp_Var
  %lnc8Y = getelementptr inbounds i64, i64* %lnc8R, i32 2
  store i64 %lnc8X, i64* %lnc8Y, !tbaa !1
  %lnc8Z = load i64*, i64** %Sp_Var
  %lnc90 = getelementptr inbounds i64, i64* %lnc8Z, i32 1
  %lnc91 = ptrtoint i64* %lnc90 to i64
  %lnc92 = inttoptr i64 %lnc91 to i64*
  store i64* %lnc92, i64** %Sp_Var
  %lnc93 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc94 = load i64*, i64** %Sp_Var
  %lnc95 = load i64*, i64** %Hp_Var
  %lnc96 = load i64, i64* %R1_Var
  %lnc97 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc93( i64* %Base_Arg, i64* %lnc94, i64* %lnc95, i64 %lnc96, i64 %lnc97, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1U:
  %lnc98 = ptrtoint %Word_wminus1_closure_struct* @Word_wminus1_closure$def to i64
  store i64 %lnc98, i64* %R1_Var
  %lnc99 = load i64*, i64** %Sp_Var
  %lnc9a = getelementptr inbounds i64, i64* %lnc99, i32 3
  %lnc9b = ptrtoint i64* %lnc9a to i64
  %lnc9c = inttoptr i64 %lnc9b to i64*
  store i64* %lnc9c, i64** %Sp_Var
  %lnc9e = load i64, i64* %R1_Var
  %lnc9f = inttoptr i64 %lnc9e to i64*
  %lnc9g = load i64, i64* %lnc9f, !tbaa !3
  %lnc9h = inttoptr i64 %lnc9g to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc9i = load i64*, i64** %Sp_Var
  %lnc9j = load i64*, i64** %Hp_Var
  %lnc9k = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc9h( i64* %Base_Arg, i64* %lnc9i, i64* %lnc9j, i64 %lnc9k, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cc1E_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cc1E_info$def to i8*)
define internal ghccc void @cc1E_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cc1E:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnc9l = load i64*, i64** %Hp_Var
  %lnc9m = getelementptr inbounds i64, i64* %lnc9l, i32 2
  %lnc9n = ptrtoint i64* %lnc9m to i64
  %lnc9o = inttoptr i64 %lnc9n to i64*
  store i64* %lnc9o, i64** %Hp_Var
  %lnc9p = load i64*, i64** %Hp_Var
  %lnc9q = ptrtoint i64* %lnc9p to i64
  %lnc9r = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnc9s = bitcast i64* %lnc9r to i64*
  %lnc9t = load i64, i64* %lnc9s, !tbaa !4
  %lnc9u = icmp ugt i64 %lnc9q, %lnc9t
  br i1 %lnc9u, label %cc1Q, label %cc1P
cc1P:
  %lnc9w = ptrtoint i8* @Word_W64_con_info to i64
  %lnc9v = load i64*, i64** %Hp_Var
  %lnc9x = getelementptr inbounds i64, i64* %lnc9v, i32 -1
  store i64 %lnc9w, i64* %lnc9x, !tbaa !2
  %lnc9z = load i64, i64* %R1_Var
  %lnc9A = load i64*, i64** %Sp_Var
  %lnc9B = getelementptr inbounds i64, i64* %lnc9A, i32 1
  %lnc9C = bitcast i64* %lnc9B to i64*
  %lnc9D = load i64, i64* %lnc9C, !tbaa !1
  %lnc9E = sub i64 %lnc9z, %lnc9D
  %lnc9y = load i64*, i64** %Hp_Var
  %lnc9F = getelementptr inbounds i64, i64* %lnc9y, i32 0
  store i64 %lnc9E, i64* %lnc9F, !tbaa !2
  %lnc9H = load i64*, i64** %Hp_Var
  %lnc9I = ptrtoint i64* %lnc9H to i64
  %lnc9J = add i64 %lnc9I, -6
  store i64 %lnc9J, i64* %R1_Var
  %lnc9K = load i64*, i64** %Sp_Var
  %lnc9L = getelementptr inbounds i64, i64* %lnc9K, i32 2
  %lnc9M = ptrtoint i64* %lnc9L to i64
  %lnc9N = inttoptr i64 %lnc9M to i64*
  store i64* %lnc9N, i64** %Sp_Var
  %lnc9O = load i64*, i64** %Sp_Var
  %lnc9P = getelementptr inbounds i64, i64* %lnc9O, i32 0
  %lnc9Q = bitcast i64* %lnc9P to i64*
  %lnc9R = load i64, i64* %lnc9Q, !tbaa !1
  %lnc9S = inttoptr i64 %lnc9R to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc9T = load i64*, i64** %Sp_Var
  %lnc9U = load i64*, i64** %Hp_Var
  %lnc9V = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc9S( i64* %Base_Arg, i64* %lnc9T, i64* %lnc9U, i64 %lnc9V, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cc1Q:
  %lnc9W = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnc9W, !tbaa !4
  %lnc9X = load i64, i64* %R1_Var
  store i64 %lnc9X, i64* %R1_Var
  %lnc9Y = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnc9Z = load i64*, i64** %Sp_Var
  %lnca0 = load i64*, i64** %Hp_Var
  %lnca1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnc9Y( i64* %Base_Arg, i64* %lnc9Z, i64* %lnca0, i64 %lnca1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%r7YQ_closure_struct = type <{i64, i64}>
%cca7_str_struct = type <{[44 x i8]}>
@r7YQ_closure$def = internal global %r7YQ_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YQ_info$def to i64), i64 0}>
@r7YQ_closure = internal alias i8* bitcast (%r7YQ_closure_struct* @r7YQ_closure$def to i8*)
@cca7_str$def = internal constant %cca7_str_struct<{[44 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 54, i8 55, i8 44, i8 49, i8 41, i8 45, i8 40, i8 55, i8 48, i8 44, i8 51, i8 57, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 109, i8 117, i8 108, i8 116, i8 0]}>
@cca7_str = internal alias i8* bitcast (%cca7_str_struct* @cca7_str$def to i8*)
@r7YQ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YQ_info$def to i8*)
define internal ghccc void @r7YQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YQ_info$def to i64)),i64 536), i64 4294967299, i64 0, i64 4294967311}>
{
cca8:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lncab = ptrtoint %cca7_str_struct* @cca7_str$def to i64
  store i64 %lncab, i64* %R2_Var
  %lncac = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncad = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncac( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncad, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wmult1_closure_struct = type <{i64, i64, i64, i64}>
@Word_wmult1_closure$def = internal global %Word_wmult1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmult1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wmult1_closure = alias i8* bitcast (%Word_wmult1_closure_struct* @Word_wmult1_closure$def to i8*)
@Word_wmult1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmult1_info$def to i8*)
define ghccc void @Word_wmult1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmult1_info$def to i64)),i64 600), i64 0, i64 4294967318}>
{
ccal:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lccai = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncao = load i64*, i64** %Sp_Var
  %lncap = getelementptr inbounds i64, i64* %lncao, i32 -2
  %lncaq = ptrtoint i64* %lncap to i64
  %lncar = icmp ult i64 %lncaq, %SpLim_Arg
  br i1 %lncar, label %ccam, label %ccan
ccan:
  %lncas = ptrtoint i64* %Base_Arg to i64
  %lncat = inttoptr i64 %lncas to i8*
  %lncau = load i64, i64* %R1_Var
  %lncav = inttoptr i64 %lncau to i8*
  %lncaw = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lncax = call ccc i8* (i8*, i8*) %lncaw( i8* %lncat, i8* %lncav ) nounwind
  %lncay = ptrtoint i8* %lncax to i64
  store i64 %lncay, i64* %lccai
  %lncaz = load i64, i64* %lccai
  %lncaA = icmp eq i64 %lncaz, 0
  br i1 %lncaA, label %ccak, label %ccaj
ccaj:
  %lncaC = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lncaB = load i64*, i64** %Sp_Var
  %lncaD = getelementptr inbounds i64, i64* %lncaB, i32 -2
  store i64 %lncaC, i64* %lncaD, !tbaa !1
  %lncaF = load i64, i64* %lccai
  %lncaE = load i64*, i64** %Sp_Var
  %lncaG = getelementptr inbounds i64, i64* %lncaE, i32 -1
  store i64 %lncaF, i64* %lncaG, !tbaa !1
  %lncaH = load i64*, i64** %Sp_Var
  %lncaI = getelementptr inbounds i64, i64* %lncaH, i32 -2
  %lncaJ = ptrtoint i64* %lncaI to i64
  %lncaK = inttoptr i64 %lncaJ to i64*
  store i64* %lncaK, i64** %Sp_Var
  %lncaL = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @r7YQ_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncaM = load i64*, i64** %Sp_Var
  %lncaN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncaL( i64* %Base_Arg, i64* %lncaM, i64* %Hp_Arg, i64 %lncaN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccak:
  %lncaP = load i64, i64* %R1_Var
  %lncaQ = inttoptr i64 %lncaP to i64*
  %lncaR = load i64, i64* %lncaQ, !tbaa !3
  %lncaS = inttoptr i64 %lncaR to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncaT = load i64*, i64** %Sp_Var
  %lncaU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncaS( i64* %Base_Arg, i64* %lncaT, i64* %Hp_Arg, i64 %lncaU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccam:
  %lncaV = load i64, i64* %R1_Var
  store i64 %lncaV, i64* %R1_Var
  %lncaW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncaX = bitcast i64* %lncaW to i64*
  %lncaY = load i64, i64* %lncaX, !tbaa !4
  %lncaZ = inttoptr i64 %lncaY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncb0 = load i64*, i64** %Sp_Var
  %lncb1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncaZ( i64* %Base_Arg, i64* %lncb0, i64* %Hp_Arg, i64 %lncb1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wmult_closure_struct = type <{i64, i64}>
@Word_wmult_closure$def = internal global %Word_wmult_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmult_info$def to i64), i64 0}>
@Word_wmult_closure = alias i8* bitcast (%Word_wmult_closure_struct* @Word_wmult_closure$def to i8*)
@s8ad_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ad_info$def to i8*)
define internal ghccc void @s8ad_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ad_info$def to i64)),i64 608), i64 2, i64 4294967315}>
{
ccbP:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncd7 = load i64*, i64** %Sp_Var
  %lncd8 = getelementptr inbounds i64, i64* %lncd7, i32 -2
  %lncd9 = ptrtoint i64* %lncd8 to i64
  %lncda = icmp ult i64 %lncd9, %SpLim_Arg
  br i1 %lncda, label %ccbQ, label %ccbR
ccbR:
  %lncdc = ptrtoint i8* @stg_upd_frame_info to i64
  %lncdb = load i64*, i64** %Sp_Var
  %lncdd = getelementptr inbounds i64, i64* %lncdb, i32 -2
  store i64 %lncdc, i64* %lncdd, !tbaa !1
  %lncdf = load i64, i64* %R1_Var
  %lncde = load i64*, i64** %Sp_Var
  %lncdg = getelementptr inbounds i64, i64* %lncde, i32 -1
  store i64 %lncdf, i64* %lncdg, !tbaa !1
  %lncdj = load i64, i64* %R1_Var
  %lncdk = add i64 %lncdj, 24
  %lncdl = inttoptr i64 %lncdk to i64*
  %lncdm = load i64, i64* %lncdl, !tbaa !3
  store i64 %lncdm, i64* %R3_Var
  %lncdp = load i64, i64* %R1_Var
  %lncdq = add i64 %lncdp, 16
  %lncdr = inttoptr i64 %lncdq to i64*
  %lncds = load i64, i64* %lncdr, !tbaa !3
  store i64 %lncds, i64* %R2_Var
  %lncdt = load i64*, i64** %Sp_Var
  %lncdu = getelementptr inbounds i64, i64* %lncdt, i32 -2
  %lncdv = ptrtoint i64* %lncdu to i64
  %lncdw = inttoptr i64 %lncdv to i64*
  store i64* %lncdw, i64** %Sp_Var
  %lncdx = bitcast i8* @integerzmgmp_GHCziIntegerziType_timesInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncdy = load i64*, i64** %Sp_Var
  %lncdz = load i64, i64* %R1_Var
  %lncdA = load i64, i64* %R2_Var
  %lncdB = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncdx( i64* %Base_Arg, i64* %lncdy, i64* %Hp_Arg, i64 %lncdz, i64 %lncdA, i64 %lncdB, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccbQ:
  %lncdC = load i64, i64* %R1_Var
  store i64 %lncdC, i64* %R1_Var
  %lncdD = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncdE = bitcast i64* %lncdD to i64*
  %lncdF = load i64, i64* %lncdE, !tbaa !4
  %lncdG = inttoptr i64 %lncdF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncdH = load i64*, i64** %Sp_Var
  %lncdI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncdG( i64* %Base_Arg, i64* %lncdH, i64* %Hp_Arg, i64 %lncdI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_wmult_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmult_info$def to i8*)
define ghccc void @Word_wmult_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wmult_info$def to i64)),i64 528), i64 12884901911, i64 0, i64 30790620545039}>
{
ccbX:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncdJ = load i64*, i64** %Sp_Var
  %lncdK = getelementptr inbounds i64, i64* %lncdJ, i32 -3
  %lncdL = ptrtoint i64* %lncdK to i64
  %lncdM = icmp ult i64 %lncdL, %SpLim_Arg
  br i1 %lncdM, label %ccbY, label %ccbZ
ccbZ:
  %lncdO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbB_info$def to i64
  %lncdN = load i64*, i64** %Sp_Var
  %lncdP = getelementptr inbounds i64, i64* %lncdN, i32 -3
  store i64 %lncdO, i64* %lncdP, !tbaa !1
  %lncdQ = load i64, i64* %R3_Var
  store i64 %lncdQ, i64* %R1_Var
  %lncdS = load i64, i64* %R2_Var
  %lncdR = load i64*, i64** %Sp_Var
  %lncdT = getelementptr inbounds i64, i64* %lncdR, i32 -2
  store i64 %lncdS, i64* %lncdT, !tbaa !1
  %lncdV = load i64, i64* %R4_Var
  %lncdU = load i64*, i64** %Sp_Var
  %lncdW = getelementptr inbounds i64, i64* %lncdU, i32 -1
  store i64 %lncdV, i64* %lncdW, !tbaa !1
  %lncdX = load i64*, i64** %Sp_Var
  %lncdY = getelementptr inbounds i64, i64* %lncdX, i32 -3
  %lncdZ = ptrtoint i64* %lncdY to i64
  %lnce0 = inttoptr i64 %lncdZ to i64*
  store i64* %lnce0, i64** %Sp_Var
  %lnce1 = load i64, i64* %R1_Var
  %lnce2 = and i64 %lnce1, 7
  %lnce3 = icmp ne i64 %lnce2, 0
  br i1 %lnce3, label %ucd6, label %ccbC
ccbC:
  %lnce5 = load i64, i64* %R1_Var
  %lnce6 = inttoptr i64 %lnce5 to i64*
  %lnce7 = load i64, i64* %lnce6, !tbaa !3
  %lnce8 = inttoptr i64 %lnce7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnce9 = load i64*, i64** %Sp_Var
  %lncea = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnce8( i64* %Base_Arg, i64* %lnce9, i64* %Hp_Arg, i64 %lncea, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucd6:
  %lnceb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbB_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncec = load i64*, i64** %Sp_Var
  %lnced = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnceb( i64* %Base_Arg, i64* %lncec, i64* %Hp_Arg, i64 %lnced, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccbY:
  %lncee = load i64, i64* %R4_Var
  store i64 %lncee, i64* %R4_Var
  %lncef = load i64, i64* %R3_Var
  store i64 %lncef, i64* %R3_Var
  %lnceg = load i64, i64* %R2_Var
  store i64 %lnceg, i64* %R2_Var
  %lnceh = ptrtoint %Word_wmult_closure_struct* @Word_wmult_closure$def to i64
  store i64 %lnceh, i64* %R1_Var
  %lncei = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncej = bitcast i64* %lncei to i64*
  %lncek = load i64, i64* %lncej, !tbaa !4
  %lncel = inttoptr i64 %lncek to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncem = load i64*, i64** %Sp_Var
  %lncen = load i64, i64* %R1_Var
  %lnceo = load i64, i64* %R2_Var
  %lncep = load i64, i64* %R3_Var
  %lnceq = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncel( i64* %Base_Arg, i64* %lncem, i64* %Hp_Arg, i64 %lncen, i64 %lnceo, i64 %lncep, i64 %lnceq, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccbB_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbB_info$def to i8*)
define internal ghccc void @ccbB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbB_info$def to i64)),i64 528), i64 2, i64 13198434500640}>
{
ccbB:
  %ls8a8 = alloca i64, i32 1
  %ls8aa = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls8ai = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncer = load i64*, i64** %Sp_Var
  %lnces = getelementptr inbounds i64, i64* %lncer, i32 2
  %lncet = bitcast i64* %lnces to i64*
  %lnceu = load i64, i64* %lncet, !tbaa !1
  store i64 %lnceu, i64* %ls8a8
  %lncev = load i64, i64* %R1_Var
  %lncew = and i64 %lncev, 7
  switch i64 %lncew, label %ccbT [i64 1, label %ccbT
i64 2, label %ccbU
i64 3, label %ccbV]
ccbT:
  %lncey = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbG_info$def to i64
  %lncex = load i64*, i64** %Sp_Var
  %lncez = getelementptr inbounds i64, i64* %lncex, i32 0
  store i64 %lncey, i64* %lncez, !tbaa !1
  %lnceC = load i64, i64* %R1_Var
  %lnceD = add i64 %lnceC, 7
  %lnceE = inttoptr i64 %lnceD to i64*
  %lnceF = load i64, i64* %lnceE, !tbaa !3
  store i64 %lnceF, i64* %ls8aa
  %lnceG = load i64, i64* %ls8a8
  store i64 %lnceG, i64* %R1_Var
  %lnceI = load i64, i64* %ls8aa
  %lnceH = load i64*, i64** %Sp_Var
  %lnceJ = getelementptr inbounds i64, i64* %lnceH, i32 2
  store i64 %lnceI, i64* %lnceJ, !tbaa !1
  %lnceK = load i64, i64* %R1_Var
  %lnceL = and i64 %lnceK, 7
  %lnceM = icmp ne i64 %lnceL, 0
  br i1 %lnceM, label %ucd4, label %ccbH
ccbH:
  %lnceO = load i64, i64* %R1_Var
  %lnceP = inttoptr i64 %lnceO to i64*
  %lnceQ = load i64, i64* %lnceP, !tbaa !3
  %lnceR = inttoptr i64 %lnceQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnceS = load i64*, i64** %Sp_Var
  %lnceT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnceR( i64* %Base_Arg, i64* %lnceS, i64* %Hp_Arg, i64 %lnceT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucd4:
  %lnceU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnceV = load i64*, i64** %Sp_Var
  %lnceW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnceU( i64* %Base_Arg, i64* %lnceV, i64* %Hp_Arg, i64 %lnceW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccbU:
  %lnceY = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cccr_info$def to i64
  %lnceX = load i64*, i64** %Sp_Var
  %lnceZ = getelementptr inbounds i64, i64* %lnceX, i32 1
  store i64 %lnceY, i64* %lnceZ, !tbaa !1
  %lncf2 = load i64, i64* %R1_Var
  %lncf3 = add i64 %lncf2, 6
  %lncf4 = inttoptr i64 %lncf3 to i64*
  %lncf5 = load i64, i64* %lncf4, !tbaa !3
  store i64 %lncf5, i64* %ls8ai
  %lncf6 = load i64, i64* %ls8a8
  store i64 %lncf6, i64* %R1_Var
  %lncf8 = load i64, i64* %ls8ai
  %lncf7 = load i64*, i64** %Sp_Var
  %lncf9 = getelementptr inbounds i64, i64* %lncf7, i32 2
  store i64 %lncf8, i64* %lncf9, !tbaa !1
  %lncfa = load i64*, i64** %Sp_Var
  %lncfb = getelementptr inbounds i64, i64* %lncfa, i32 1
  %lncfc = ptrtoint i64* %lncfb to i64
  %lncfd = inttoptr i64 %lncfc to i64*
  store i64* %lncfd, i64** %Sp_Var
  %lncfe = load i64, i64* %R1_Var
  %lncff = and i64 %lncfe, 7
  %lncfg = icmp ne i64 %lncff, 0
  br i1 %lncfg, label %ucd5, label %ccct
ccct:
  %lncfi = load i64, i64* %R1_Var
  %lncfj = inttoptr i64 %lncfi to i64*
  %lncfk = load i64, i64* %lncfj, !tbaa !3
  %lncfl = inttoptr i64 %lncfk to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncfm = load i64*, i64** %Sp_Var
  %lncfn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncfl( i64* %Base_Arg, i64* %lncfm, i64* %Hp_Arg, i64 %lncfn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucd5:
  %lncfo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cccr_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncfp = load i64*, i64** %Sp_Var
  %lncfq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncfo( i64* %Base_Arg, i64* %lncfp, i64* %Hp_Arg, i64 %lncfq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccbV:
  %lncfr = ptrtoint %Word_wmult1_closure_struct* @Word_wmult1_closure$def to i64
  store i64 %lncfr, i64* %R1_Var
  %lncfs = load i64*, i64** %Sp_Var
  %lncft = getelementptr inbounds i64, i64* %lncfs, i32 3
  %lncfu = ptrtoint i64* %lncft to i64
  %lncfv = inttoptr i64 %lncfu to i64*
  store i64* %lncfv, i64** %Sp_Var
  %lncfx = load i64, i64* %R1_Var
  %lncfy = inttoptr i64 %lncfx to i64*
  %lncfz = load i64, i64* %lncfy, !tbaa !3
  %lncfA = inttoptr i64 %lncfz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncfB = load i64*, i64** %Sp_Var
  %lncfC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncfA( i64* %Base_Arg, i64* %lncfB, i64* %Hp_Arg, i64 %lncfC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cccr_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cccr_info$def to i8*)
define internal ghccc void @cccr_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cccr_info$def to i64)),i64 616), i64 65, i64 4294967328}>
{
cccr:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8ao = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncfD = load i64, i64* %R1_Var
  %lncfE = and i64 %lncfD, 7
  switch i64 %lncfE, label %cccH [i64 1, label %cccH
i64 2, label %cccR
i64 3, label %cccY]
cccH:
  %lncfG = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cccx_info$def to i64
  %lncfF = load i64*, i64** %Sp_Var
  %lncfH = getelementptr inbounds i64, i64* %lncfF, i32 0
  store i64 %lncfG, i64* %lncfH, !tbaa !1
  %lncfK = load i64, i64* %R1_Var
  %lncfL = add i64 %lncfK, 7
  %lncfM = inttoptr i64 %lncfL to i64*
  %lncfN = load i64, i64* %lncfM, !tbaa !3
  store i64 %lncfN, i64* %R2_Var
  %lncfO = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncfP = load i64*, i64** %Sp_Var
  %lncfQ = load i64*, i64** %Hp_Var
  %lncfR = load i64, i64* %R1_Var
  %lncfS = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncfO( i64* %Base_Arg, i64* %lncfP, i64* %lncfQ, i64 %lncfR, i64 %lncfS, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cccR:
  %lncfT = load i64*, i64** %Hp_Var
  %lncfU = getelementptr inbounds i64, i64* %lncfT, i32 2
  %lncfV = ptrtoint i64* %lncfU to i64
  %lncfW = inttoptr i64 %lncfV to i64*
  store i64* %lncfW, i64** %Hp_Var
  %lncfX = load i64*, i64** %Hp_Var
  %lncfY = ptrtoint i64* %lncfX to i64
  %lncfZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncg0 = bitcast i64* %lncfZ to i64*
  %lncg1 = load i64, i64* %lncg0, !tbaa !4
  %lncg2 = icmp ugt i64 %lncfY, %lncg1
  br i1 %lncg2, label %cccU, label %cccT
cccT:
  %lncg3 = load i64*, i64** %Sp_Var
  %lncg4 = getelementptr inbounds i64, i64* %lncg3, i32 1
  %lncg5 = bitcast i64* %lncg4 to i64*
  %lncg6 = load i64, i64* %lncg5, !tbaa !1
  %lncg9 = load i64, i64* %R1_Var
  %lncga = add i64 %lncg9, 6
  %lncgb = inttoptr i64 %lncga to i64*
  %lncgc = load i64, i64* %lncgb, !tbaa !3
  %lncgd = mul i64 %lncg6, %lncgc
  store i64 %lncgd, i64* %ls8ao
  %lncgf = ptrtoint i8* @Word_W64_con_info to i64
  %lncge = load i64*, i64** %Hp_Var
  %lncgg = getelementptr inbounds i64, i64* %lncge, i32 -1
  store i64 %lncgf, i64* %lncgg, !tbaa !2
  %lncgi = load i64, i64* %ls8ao
  %lncgh = load i64*, i64** %Hp_Var
  %lncgj = getelementptr inbounds i64, i64* %lncgh, i32 0
  store i64 %lncgi, i64* %lncgj, !tbaa !2
  %lncgl = load i64*, i64** %Hp_Var
  %lncgm = ptrtoint i64* %lncgl to i64
  %lncgn = add i64 %lncgm, -6
  store i64 %lncgn, i64* %R1_Var
  %lncgo = load i64*, i64** %Sp_Var
  %lncgp = getelementptr inbounds i64, i64* %lncgo, i32 2
  %lncgq = ptrtoint i64* %lncgp to i64
  %lncgr = inttoptr i64 %lncgq to i64*
  store i64* %lncgr, i64** %Sp_Var
  %lncgs = load i64*, i64** %Sp_Var
  %lncgt = getelementptr inbounds i64, i64* %lncgs, i32 0
  %lncgu = bitcast i64* %lncgt to i64*
  %lncgv = load i64, i64* %lncgu, !tbaa !1
  %lncgw = inttoptr i64 %lncgv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncgx = load i64*, i64** %Sp_Var
  %lncgy = load i64*, i64** %Hp_Var
  %lncgz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncgw( i64* %Base_Arg, i64* %lncgx, i64* %lncgy, i64 %lncgz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cccU:
  %lncgA = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncgA, !tbaa !4
  %lncgB = load i64, i64* %R1_Var
  store i64 %lncgB, i64* %R1_Var
  %lncgC = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncgD = load i64*, i64** %Sp_Var
  %lncgE = load i64*, i64** %Hp_Var
  %lncgF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncgC( i64* %Base_Arg, i64* %lncgD, i64* %lncgE, i64 %lncgF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cccY:
  %lncgG = ptrtoint %Word_wmult1_closure_struct* @Word_wmult1_closure$def to i64
  store i64 %lncgG, i64* %R1_Var
  %lncgH = load i64*, i64** %Sp_Var
  %lncgI = getelementptr inbounds i64, i64* %lncgH, i32 2
  %lncgJ = ptrtoint i64* %lncgI to i64
  %lncgK = inttoptr i64 %lncgJ to i64*
  store i64* %lncgK, i64** %Sp_Var
  %lncgM = load i64, i64* %R1_Var
  %lncgN = inttoptr i64 %lncgM to i64*
  %lncgO = load i64, i64* %lncgN, !tbaa !3
  %lncgP = inttoptr i64 %lncgO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncgQ = load i64*, i64** %Sp_Var
  %lncgR = load i64*, i64** %Hp_Var
  %lncgS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncgP( i64* %Base_Arg, i64* %lncgQ, i64* %lncgR, i64 %lncgS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cccx_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cccx_info$def to i8*)
define internal ghccc void @cccx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
cccx:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncgT = load i64*, i64** %Hp_Var
  %lncgU = getelementptr inbounds i64, i64* %lncgT, i32 2
  %lncgV = ptrtoint i64* %lncgU to i64
  %lncgW = inttoptr i64 %lncgV to i64*
  store i64* %lncgW, i64** %Hp_Var
  %lncgX = load i64*, i64** %Hp_Var
  %lncgY = ptrtoint i64* %lncgX to i64
  %lncgZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnch0 = bitcast i64* %lncgZ to i64*
  %lnch1 = load i64, i64* %lnch0, !tbaa !4
  %lnch2 = icmp ugt i64 %lncgY, %lnch1
  br i1 %lnch2, label %cccK, label %cccJ
cccJ:
  %lnch4 = ptrtoint i8* @Word_W64_con_info to i64
  %lnch3 = load i64*, i64** %Hp_Var
  %lnch5 = getelementptr inbounds i64, i64* %lnch3, i32 -1
  store i64 %lnch4, i64* %lnch5, !tbaa !2
  %lnch7 = load i64*, i64** %Sp_Var
  %lnch8 = getelementptr inbounds i64, i64* %lnch7, i32 1
  %lnch9 = bitcast i64* %lnch8 to i64*
  %lncha = load i64, i64* %lnch9, !tbaa !1
  %lnchb = load i64, i64* %R1_Var
  %lnchc = mul i64 %lncha, %lnchb
  %lnch6 = load i64*, i64** %Hp_Var
  %lnchd = getelementptr inbounds i64, i64* %lnch6, i32 0
  store i64 %lnchc, i64* %lnchd, !tbaa !2
  %lnchf = load i64*, i64** %Hp_Var
  %lnchg = ptrtoint i64* %lnchf to i64
  %lnchh = add i64 %lnchg, -6
  store i64 %lnchh, i64* %R1_Var
  %lnchi = load i64*, i64** %Sp_Var
  %lnchj = getelementptr inbounds i64, i64* %lnchi, i32 2
  %lnchk = ptrtoint i64* %lnchj to i64
  %lnchl = inttoptr i64 %lnchk to i64*
  store i64* %lnchl, i64** %Sp_Var
  %lnchm = load i64*, i64** %Sp_Var
  %lnchn = getelementptr inbounds i64, i64* %lnchm, i32 0
  %lncho = bitcast i64* %lnchn to i64*
  %lnchp = load i64, i64* %lncho, !tbaa !1
  %lnchq = inttoptr i64 %lnchp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnchr = load i64*, i64** %Sp_Var
  %lnchs = load i64*, i64** %Hp_Var
  %lncht = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnchq( i64* %Base_Arg, i64* %lnchr, i64* %lnchs, i64 %lncht, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cccK:
  %lnchu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnchu, !tbaa !4
  %lnchv = load i64, i64* %R1_Var
  store i64 %lnchv, i64* %R1_Var
  %lnchw = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnchx = load i64*, i64** %Sp_Var
  %lnchy = load i64*, i64** %Hp_Var
  %lnchz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnchw( i64* %Base_Arg, i64* %lnchx, i64* %lnchy, i64 %lnchz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccbG_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbG_info$def to i8*)
define internal ghccc void @ccbG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccbG_info$def to i64)),i64 528), i64 2, i64 13198434500640}>
{
ccbG:
  %ls8aa = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8ac = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnchA = load i64*, i64** %Sp_Var
  %lnchB = getelementptr inbounds i64, i64* %lnchA, i32 2
  %lnchC = bitcast i64* %lnchB to i64*
  %lnchD = load i64, i64* %lnchC, !tbaa !1
  store i64 %lnchD, i64* %ls8aa
  %lnchE = load i64, i64* %R1_Var
  %lnchF = and i64 %lnchE, 7
  switch i64 %lnchF, label %ccc2 [i64 1, label %ccc2
i64 2, label %ccch
i64 3, label %ccco]
ccc2:
  %lnchG = load i64*, i64** %Hp_Var
  %lnchH = getelementptr inbounds i64, i64* %lnchG, i32 4
  %lnchI = ptrtoint i64* %lnchH to i64
  %lnchJ = inttoptr i64 %lnchI to i64*
  store i64* %lnchJ, i64** %Hp_Var
  %lnchK = load i64*, i64** %Hp_Var
  %lnchL = ptrtoint i64* %lnchK to i64
  %lnchM = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnchN = bitcast i64* %lnchM to i64*
  %lnchO = load i64, i64* %lnchN, !tbaa !4
  %lnchP = icmp ugt i64 %lnchL, %lnchO
  br i1 %lnchP, label %ccc5, label %ccc4
ccc4:
  %lnchS = load i64, i64* %R1_Var
  %lnchT = add i64 %lnchS, 7
  %lnchU = inttoptr i64 %lnchT to i64*
  %lnchV = load i64, i64* %lnchU, !tbaa !3
  store i64 %lnchV, i64* %ls8ac
  %lnchX = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ad_info$def to i64
  %lnchW = load i64*, i64** %Hp_Var
  %lnchY = getelementptr inbounds i64, i64* %lnchW, i32 -3
  store i64 %lnchX, i64* %lnchY, !tbaa !2
  %lnci0 = load i64, i64* %ls8aa
  %lnchZ = load i64*, i64** %Hp_Var
  %lnci1 = getelementptr inbounds i64, i64* %lnchZ, i32 -1
  store i64 %lnci0, i64* %lnci1, !tbaa !2
  %lnci3 = load i64, i64* %ls8ac
  %lnci2 = load i64*, i64** %Hp_Var
  %lnci4 = getelementptr inbounds i64, i64* %lnci2, i32 0
  store i64 %lnci3, i64* %lnci4, !tbaa !2
  %lnci5 = load i64*, i64** %Hp_Var
  %lnci6 = getelementptr inbounds i64, i64* %lnci5, i32 -3
  %lnci7 = ptrtoint i64* %lnci6 to i64
  store i64 %lnci7, i64* %R3_Var
  %lnci8 = load i64*, i64** %Sp_Var
  %lnci9 = getelementptr inbounds i64, i64* %lnci8, i32 1
  %lncia = bitcast i64* %lnci9 to i64*
  %lncib = load i64, i64* %lncia, !tbaa !1
  store i64 %lncib, i64* %R2_Var
  %lncic = load i64*, i64** %Sp_Var
  %lncid = getelementptr inbounds i64, i64* %lncic, i32 3
  %lncie = ptrtoint i64* %lncid to i64
  %lncif = inttoptr i64 %lncie to i64*
  store i64* %lncif, i64** %Sp_Var
  %lncig = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncih = load i64*, i64** %Sp_Var
  %lncii = load i64*, i64** %Hp_Var
  %lncij = load i64, i64* %R1_Var
  %lncik = load i64, i64* %R2_Var
  %lncil = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncig( i64* %Base_Arg, i64* %lncih, i64* %lncii, i64 %lncij, i64 %lncik, i64 %lncil, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccc5:
  %lncim = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 32, i64* %lncim, !tbaa !4
  %lncin = load i64, i64* %R1_Var
  store i64 %lncin, i64* %R1_Var
  %lncio = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncip = load i64*, i64** %Sp_Var
  %lnciq = load i64*, i64** %Hp_Var
  %lncir = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncio( i64* %Base_Arg, i64* %lncip, i64* %lnciq, i64 %lncir, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccch:
  %lncit = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccc8_info$def to i64
  %lncis = load i64*, i64** %Sp_Var
  %lnciu = getelementptr inbounds i64, i64* %lncis, i32 1
  store i64 %lncit, i64* %lnciu, !tbaa !1
  %lnciv = load i64, i64* %ls8aa
  store i64 %lnciv, i64* %R2_Var
  %lnciz = load i64, i64* %R1_Var
  %lnciA = add i64 %lnciz, 6
  %lnciB = inttoptr i64 %lnciA to i64*
  %lnciC = load i64, i64* %lnciB, !tbaa !3
  %lnciw = load i64*, i64** %Sp_Var
  %lnciD = getelementptr inbounds i64, i64* %lnciw, i32 2
  store i64 %lnciC, i64* %lnciD, !tbaa !1
  %lnciE = load i64*, i64** %Sp_Var
  %lnciF = getelementptr inbounds i64, i64* %lnciE, i32 1
  %lnciG = ptrtoint i64* %lnciF to i64
  %lnciH = inttoptr i64 %lnciG to i64*
  store i64* %lnciH, i64** %Sp_Var
  %lnciI = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToWord_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnciJ = load i64*, i64** %Sp_Var
  %lnciK = load i64*, i64** %Hp_Var
  %lnciL = load i64, i64* %R1_Var
  %lnciM = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnciI( i64* %Base_Arg, i64* %lnciJ, i64* %lnciK, i64 %lnciL, i64 %lnciM, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccco:
  %lnciN = ptrtoint %Word_wmult1_closure_struct* @Word_wmult1_closure$def to i64
  store i64 %lnciN, i64* %R1_Var
  %lnciO = load i64*, i64** %Sp_Var
  %lnciP = getelementptr inbounds i64, i64* %lnciO, i32 3
  %lnciQ = ptrtoint i64* %lnciP to i64
  %lnciR = inttoptr i64 %lnciQ to i64*
  store i64* %lnciR, i64** %Sp_Var
  %lnciT = load i64, i64* %R1_Var
  %lnciU = inttoptr i64 %lnciT to i64*
  %lnciV = load i64, i64* %lnciU, !tbaa !3
  %lnciW = inttoptr i64 %lnciV to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnciX = load i64*, i64** %Sp_Var
  %lnciY = load i64*, i64** %Hp_Var
  %lnciZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnciW( i64* %Base_Arg, i64* %lnciX, i64* %lnciY, i64 %lnciZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccc8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccc8_info$def to i8*)
define internal ghccc void @ccc8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 65, i64 32}>
{
ccc8:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncj0 = load i64*, i64** %Hp_Var
  %lncj1 = getelementptr inbounds i64, i64* %lncj0, i32 2
  %lncj2 = ptrtoint i64* %lncj1 to i64
  %lncj3 = inttoptr i64 %lncj2 to i64*
  store i64* %lncj3, i64** %Hp_Var
  %lncj4 = load i64*, i64** %Hp_Var
  %lncj5 = ptrtoint i64* %lncj4 to i64
  %lncj6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncj7 = bitcast i64* %lncj6 to i64*
  %lncj8 = load i64, i64* %lncj7, !tbaa !4
  %lncj9 = icmp ugt i64 %lncj5, %lncj8
  br i1 %lncj9, label %ccck, label %cccj
cccj:
  %lncjb = ptrtoint i8* @Word_W64_con_info to i64
  %lncja = load i64*, i64** %Hp_Var
  %lncjc = getelementptr inbounds i64, i64* %lncja, i32 -1
  store i64 %lncjb, i64* %lncjc, !tbaa !2
  %lncje = load i64, i64* %R1_Var
  %lncjf = load i64*, i64** %Sp_Var
  %lncjg = getelementptr inbounds i64, i64* %lncjf, i32 1
  %lncjh = bitcast i64* %lncjg to i64*
  %lncji = load i64, i64* %lncjh, !tbaa !1
  %lncjj = mul i64 %lncje, %lncji
  %lncjd = load i64*, i64** %Hp_Var
  %lncjk = getelementptr inbounds i64, i64* %lncjd, i32 0
  store i64 %lncjj, i64* %lncjk, !tbaa !2
  %lncjm = load i64*, i64** %Hp_Var
  %lncjn = ptrtoint i64* %lncjm to i64
  %lncjo = add i64 %lncjn, -6
  store i64 %lncjo, i64* %R1_Var
  %lncjp = load i64*, i64** %Sp_Var
  %lncjq = getelementptr inbounds i64, i64* %lncjp, i32 2
  %lncjr = ptrtoint i64* %lncjq to i64
  %lncjs = inttoptr i64 %lncjr to i64*
  store i64* %lncjs, i64** %Sp_Var
  %lncjt = load i64*, i64** %Sp_Var
  %lncju = getelementptr inbounds i64, i64* %lncjt, i32 0
  %lncjv = bitcast i64* %lncju to i64*
  %lncjw = load i64, i64* %lncjv, !tbaa !1
  %lncjx = inttoptr i64 %lncjw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncjy = load i64*, i64** %Sp_Var
  %lncjz = load i64*, i64** %Hp_Var
  %lncjA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncjx( i64* %Base_Arg, i64* %lncjy, i64* %lncjz, i64 %lncjA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccck:
  %lncjB = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncjB, !tbaa !4
  %lncjC = load i64, i64* %R1_Var
  store i64 %lncjC, i64* %R1_Var
  %lncjD = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncjE = load i64*, i64** %Sp_Var
  %lncjF = load i64*, i64** %Hp_Var
  %lncjG = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncjD( i64* %Base_Arg, i64* %lncjE, i64* %lncjF, i64 %lncjG, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wbit1_closure_struct = type <{i64, i64, i64, i64}>
%ccjO_str_struct = type <{[43 x i8]}>
@Word_wbit1_closure$def = internal global %Word_wbit1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wbit1_info$def to i64), i64 0, i64 0, i64 0}>
@Word_wbit1_closure = alias i8* bitcast (%Word_wbit1_closure_struct* @Word_wbit1_closure$def to i8*)
@ccjO_str$def = internal constant %ccjO_str_struct<{[43 x i8] [i8 104, i8 115, i8 108, i8 105, i8 98, i8 47, i8 87, i8 111, i8 114, i8 100, i8 46, i8 104, i8 115, i8 58, i8 40, i8 56, i8 53, i8 44, i8 49, i8 41, i8 45, i8 40, i8 56, i8 54, i8 44, i8 51, i8 51, i8 41, i8 124, i8 102, i8 117, i8 110, i8 99, i8 116, i8 105, i8 111, i8 110, i8 32, i8 119, i8 98, i8 105, i8 116, i8 0]}>
@ccjO_str = internal alias i8* bitcast (%ccjO_str_struct* @ccjO_str$def to i8*)
@Word_wbit1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wbit1_info$def to i8*)
define ghccc void @Word_wbit1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wbit1_info$def to i64)),i64 536), i64 0, i64 4294967318}>
{
ccjP:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %lccjL = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncjS = load i64*, i64** %Sp_Var
  %lncjT = getelementptr inbounds i64, i64* %lncjS, i32 -2
  %lncjU = ptrtoint i64* %lncjT to i64
  %lncjV = icmp ult i64 %lncjU, %SpLim_Arg
  br i1 %lncjV, label %ccjQ, label %ccjR
ccjR:
  %lncjW = ptrtoint i64* %Base_Arg to i64
  %lncjX = inttoptr i64 %lncjW to i8*
  %lncjY = load i64, i64* %R1_Var
  %lncjZ = inttoptr i64 %lncjY to i8*
  %lnck0 = bitcast i8* @newCAF to i8* (i8*, i8*)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lnck1 = call ccc i8* (i8*, i8*) %lnck0( i8* %lncjX, i8* %lncjZ ) nounwind
  %lnck2 = ptrtoint i8* %lnck1 to i64
  store i64 %lnck2, i64* %lccjL
  %lnck3 = load i64, i64* %lccjL
  %lnck4 = icmp eq i64 %lnck3, 0
  br i1 %lnck4, label %ccjN, label %ccjM
ccjM:
  %lnck6 = ptrtoint i8* @stg_bh_upd_frame_info to i64
  %lnck5 = load i64*, i64** %Sp_Var
  %lnck7 = getelementptr inbounds i64, i64* %lnck5, i32 -2
  store i64 %lnck6, i64* %lnck7, !tbaa !1
  %lnck9 = load i64, i64* %lccjL
  %lnck8 = load i64*, i64** %Sp_Var
  %lncka = getelementptr inbounds i64, i64* %lnck8, i32 -1
  store i64 %lnck9, i64* %lncka, !tbaa !1
  %lnckb = ptrtoint %ccjO_str_struct* @ccjO_str$def to i64
  store i64 %lnckb, i64* %R2_Var
  %lnckc = load i64*, i64** %Sp_Var
  %lnckd = getelementptr inbounds i64, i64* %lnckc, i32 -2
  %lncke = ptrtoint i64* %lnckd to i64
  %lnckf = inttoptr i64 %lncke to i64*
  store i64* %lnckf, i64** %Sp_Var
  %lnckg = bitcast i8* @base_ControlziExceptionziBase_patError_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnckh = load i64*, i64** %Sp_Var
  %lncki = load i64, i64* %R1_Var
  %lnckj = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnckg( i64* %Base_Arg, i64* %lnckh, i64* %Hp_Arg, i64 %lncki, i64 %lnckj, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccjN:
  %lnckl = load i64, i64* %R1_Var
  %lnckm = inttoptr i64 %lnckl to i64*
  %lnckn = load i64, i64* %lnckm, !tbaa !3
  %lncko = inttoptr i64 %lnckn to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnckp = load i64*, i64** %Sp_Var
  %lnckq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncko( i64* %Base_Arg, i64* %lnckp, i64* %Hp_Arg, i64 %lnckq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccjQ:
  %lnckr = load i64, i64* %R1_Var
  store i64 %lnckr, i64* %R1_Var
  %lncks = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnckt = bitcast i64* %lncks to i64*
  %lncku = load i64, i64* %lnckt, !tbaa !4
  %lnckv = inttoptr i64 %lncku to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnckw = load i64*, i64** %Sp_Var
  %lnckx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnckv( i64* %Base_Arg, i64* %lnckw, i64* %Hp_Arg, i64 %lnckx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwwbit_closure_struct = type <{i64, i64}>
@Word_zdwwbit_closure$def = internal global %Word_zdwwbit_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwbit_info$def to i64), i64 0}>
@Word_zdwwbit_closure = alias i8* bitcast (%Word_zdwwbit_closure_struct* @Word_zdwwbit_closure$def to i8*)
@s8av_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8av_info$def to i8*)
define internal ghccc void @s8av_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8av_info$def to i64)),i64 632), i64 1, i64 4294967313}>
{
cckW:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnclu = load i64*, i64** %Sp_Var
  %lnclv = getelementptr inbounds i64, i64* %lnclu, i32 -2
  %lnclw = ptrtoint i64* %lnclv to i64
  %lnclx = icmp ult i64 %lnclw, %SpLim_Arg
  br i1 %lnclx, label %cckX, label %cckY
cckY:
  %lnclz = ptrtoint i8* @stg_upd_frame_info to i64
  %lncly = load i64*, i64** %Sp_Var
  %lnclA = getelementptr inbounds i64, i64* %lncly, i32 -2
  store i64 %lnclz, i64* %lnclA, !tbaa !1
  %lnclC = load i64, i64* %R1_Var
  %lnclB = load i64*, i64** %Sp_Var
  %lnclD = getelementptr inbounds i64, i64* %lnclB, i32 -1
  store i64 %lnclC, i64* %lnclD, !tbaa !1
  %lnclG = load i64, i64* %R1_Var
  %lnclH = add i64 %lnclG, 16
  %lnclI = inttoptr i64 %lnclH to i64*
  %lnclJ = load i64, i64* %lnclI, !tbaa !3
  store i64 %lnclJ, i64* %R3_Var
  %lnclK = ptrtoint %Word_pow1_closure_struct* @Word_pow1_closure$def to i64
  %lnclL = add i64 %lnclK, 1
  store i64 %lnclL, i64* %R2_Var
  %lnclM = load i64*, i64** %Sp_Var
  %lnclN = getelementptr inbounds i64, i64* %lnclM, i32 -2
  %lnclO = ptrtoint i64* %lnclN to i64
  %lnclP = inttoptr i64 %lnclO to i64*
  store i64* %lnclP, i64** %Sp_Var
  %lnclQ = bitcast i8* @base_GHCziReal_zczuzdszc_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnclR = load i64*, i64** %Sp_Var
  %lnclS = load i64, i64* %R1_Var
  %lnclT = load i64, i64* %R2_Var
  %lnclU = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnclQ( i64* %Base_Arg, i64* %lnclR, i64* %Hp_Arg, i64 %lnclS, i64 %lnclT, i64 %lnclU, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cckX:
  %lnclV = load i64, i64* %R1_Var
  store i64 %lnclV, i64* %R1_Var
  %lnclW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnclX = bitcast i64* %lnclW to i64*
  %lnclY = load i64, i64* %lnclX, !tbaa !4
  %lnclZ = inttoptr i64 %lnclY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncm0 = load i64*, i64** %Sp_Var
  %lncm1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnclZ( i64* %Base_Arg, i64* %lncm0, i64* %Hp_Arg, i64 %lncm1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8ay_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ay_info$def to i8*)
define internal ghccc void @s8ay_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ay_info$def to i64)),i64 640), i64 4294967296, i64 4294967314}>
{
ccl9:
  %ls8ax = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncm2 = load i64*, i64** %Sp_Var
  %lncm3 = getelementptr inbounds i64, i64* %lncm2, i32 -2
  %lncm4 = ptrtoint i64* %lncm3 to i64
  %lncm5 = icmp ult i64 %lncm4, %SpLim_Arg
  br i1 %lncm5, label %ccla, label %cclb
cclb:
  %lncm7 = ptrtoint i8* @stg_upd_frame_info to i64
  %lncm6 = load i64*, i64** %Sp_Var
  %lncm8 = getelementptr inbounds i64, i64* %lncm6, i32 -2
  store i64 %lncm7, i64* %lncm8, !tbaa !1
  %lncma = load i64, i64* %R1_Var
  %lncm9 = load i64*, i64** %Sp_Var
  %lncmb = getelementptr inbounds i64, i64* %lncm9, i32 -1
  store i64 %lncma, i64* %lncmb, !tbaa !1
  %lncme = load i64, i64* %R1_Var
  %lncmf = add i64 %lncme, 16
  %lncmg = inttoptr i64 %lncmf to i64*
  %lncmh = load i64, i64* %lncmg, !tbaa !3
  store i64 %lncmh, i64* %ls8ax
  %lncmi = load i64, i64* %ls8ax
  switch i64 %lncmi, label %ccl7 [i64 0, label %ccl8]
ccl7:
  %lncmj = load i64, i64* %ls8ax
  store i64 %lncmj, i64* %R3_Var
  %lncmk = ptrtoint %Word_pow1_closure_struct* @Word_pow1_closure$def to i64
  %lncml = add i64 %lncmk, 1
  store i64 %lncml, i64* %R2_Var
  %lncmm = load i64*, i64** %Sp_Var
  %lncmn = getelementptr inbounds i64, i64* %lncmm, i32 -2
  %lncmo = ptrtoint i64* %lncmn to i64
  %lncmp = inttoptr i64 %lncmo to i64*
  store i64* %lncmp, i64** %Sp_Var
  %lncmq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncmr = load i64*, i64** %Sp_Var
  %lncms = load i64, i64* %R1_Var
  %lncmt = load i64, i64* %R2_Var
  %lncmu = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncmq( i64* %Base_Arg, i64* %lncmr, i64* %Hp_Arg, i64 %lncms, i64 %lncmt, i64 %lncmu, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccl8:
  %lncmv = ptrtoint %Word_zdszc1_closure_struct* @Word_zdszc1_closure$def to i64
  %lncmw = add i64 %lncmv, 1
  store i64 %lncmw, i64* %R1_Var
  %lncmx = load i64*, i64** %Sp_Var
  %lncmy = getelementptr inbounds i64, i64* %lncmx, i32 -2
  %lncmz = ptrtoint i64* %lncmy to i64
  %lncmA = inttoptr i64 %lncmz to i64*
  store i64* %lncmA, i64** %Sp_Var
  %lncmB = load i64*, i64** %Sp_Var
  %lncmC = getelementptr inbounds i64, i64* %lncmB, i32 0
  %lncmD = bitcast i64* %lncmC to i64*
  %lncmE = load i64, i64* %lncmD, !tbaa !1
  %lncmF = inttoptr i64 %lncmE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncmG = load i64*, i64** %Sp_Var
  %lncmH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncmF( i64* %Base_Arg, i64* %lncmG, i64* %Hp_Arg, i64 %lncmH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccla:
  %lncmI = load i64, i64* %R1_Var
  store i64 %lncmI, i64* %R1_Var
  %lncmJ = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncmK = bitcast i64* %lncmJ to i64*
  %lncmL = load i64, i64* %lncmK, !tbaa !4
  %lncmM = inttoptr i64 %lncmL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncmN = load i64*, i64** %Sp_Var
  %lncmO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncmM( i64* %Base_Arg, i64* %lncmN, i64* %Hp_Arg, i64 %lncmO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_zdwwbit_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwbit_info$def to i8*)
define ghccc void @Word_zdwwbit_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwbit_info$def to i64)),i64 528), i64 8589934607, i64 0, i64 527769876299791}>
{
cclh:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncmP = load i64*, i64** %Sp_Var
  %lncmQ = getelementptr inbounds i64, i64* %lncmP, i32 -2
  %lncmR = ptrtoint i64* %lncmQ to i64
  %lncmS = icmp ult i64 %lncmR, %SpLim_Arg
  br i1 %lncmS, label %ccli, label %cclj
cclj:
  %lncmU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cckN_info$def to i64
  %lncmT = load i64*, i64** %Sp_Var
  %lncmV = getelementptr inbounds i64, i64* %lncmT, i32 -2
  store i64 %lncmU, i64* %lncmV, !tbaa !1
  %lncmW = load i64, i64* %R3_Var
  store i64 %lncmW, i64* %R1_Var
  %lncmY = load i64, i64* %R2_Var
  %lncmX = load i64*, i64** %Sp_Var
  %lncmZ = getelementptr inbounds i64, i64* %lncmX, i32 -1
  store i64 %lncmY, i64* %lncmZ, !tbaa !1
  %lncn0 = load i64*, i64** %Sp_Var
  %lncn1 = getelementptr inbounds i64, i64* %lncn0, i32 -2
  %lncn2 = ptrtoint i64* %lncn1 to i64
  %lncn3 = inttoptr i64 %lncn2 to i64*
  store i64* %lncn3, i64** %Sp_Var
  %lncn4 = load i64, i64* %R1_Var
  %lncn5 = and i64 %lncn4, 7
  %lncn6 = icmp ne i64 %lncn5, 0
  br i1 %lncn6, label %uclt, label %cckO
cckO:
  %lncn8 = load i64, i64* %R1_Var
  %lncn9 = inttoptr i64 %lncn8 to i64*
  %lncna = load i64, i64* %lncn9, !tbaa !3
  %lncnb = inttoptr i64 %lncna to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncnc = load i64*, i64** %Sp_Var
  %lncnd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncnb( i64* %Base_Arg, i64* %lncnc, i64* %Hp_Arg, i64 %lncnd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
uclt:
  %lncne = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cckN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncnf = load i64*, i64** %Sp_Var
  %lncng = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncne( i64* %Base_Arg, i64* %lncnf, i64* %Hp_Arg, i64 %lncng, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccli:
  %lncnh = load i64, i64* %R3_Var
  store i64 %lncnh, i64* %R3_Var
  %lncni = load i64, i64* %R2_Var
  store i64 %lncni, i64* %R2_Var
  %lncnj = ptrtoint %Word_zdwwbit_closure_struct* @Word_zdwwbit_closure$def to i64
  store i64 %lncnj, i64* %R1_Var
  %lncnk = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncnl = bitcast i64* %lncnk to i64*
  %lncnm = load i64, i64* %lncnl, !tbaa !4
  %lncnn = inttoptr i64 %lncnm to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncno = load i64*, i64** %Sp_Var
  %lncnp = load i64, i64* %R1_Var
  %lncnq = load i64, i64* %R2_Var
  %lncnr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncnn( i64* %Base_Arg, i64* %lncno, i64* %Hp_Arg, i64 %lncnp, i64 %lncnq, i64 %lncnr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cckN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cckN_info$def to i8*)
define internal ghccc void @cckN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cckN_info$def to i64)),i64 528), i64 1, i64 387032387944480}>
{
cckN:
  %ls8ar = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8at = alloca i64, i32 1
  %ls8au = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls8aw = alloca i64, i32 1
  %lncns = load i64*, i64** %Sp_Var
  %lncnt = getelementptr inbounds i64, i64* %lncns, i32 1
  %lncnu = bitcast i64* %lncnt to i64*
  %lncnv = load i64, i64* %lncnu, !tbaa !1
  store i64 %lncnv, i64* %ls8ar
  %lncnw = load i64, i64* %R1_Var
  %lncnx = and i64 %lncnw, 7
  switch i64 %lncnx, label %ccld [i64 1, label %ccld
i64 2, label %ccle
i64 3, label %cclf]
ccld:
  %lncny = load i64*, i64** %Hp_Var
  %lncnz = getelementptr inbounds i64, i64* %lncny, i32 3
  %lncnA = ptrtoint i64* %lncnz to i64
  %lncnB = inttoptr i64 %lncnA to i64*
  store i64* %lncnB, i64** %Hp_Var
  %lncnC = load i64, i64* %R1_Var
  store i64 %lncnC, i64* %ls8at
  %lncnD = load i64*, i64** %Hp_Var
  %lncnE = ptrtoint i64* %lncnD to i64
  %lncnF = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncnG = bitcast i64* %lncnF to i64*
  %lncnH = load i64, i64* %lncnG, !tbaa !4
  %lncnI = icmp ugt i64 %lncnE, %lncnH
  br i1 %lncnI, label %cclp, label %ccll
ccll:
  %lncnJ = load i64, i64* %ls8at
  %lncnK = add i64 %lncnJ, 7
  %lncnL = inttoptr i64 %lncnK to i64*
  %lncnM = load i64, i64* %lncnL, !tbaa !5
  store i64 %lncnM, i64* %ls8au
  %lncnO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8av_info$def to i64
  %lncnN = load i64*, i64** %Hp_Var
  %lncnP = getelementptr inbounds i64, i64* %lncnN, i32 -2
  store i64 %lncnO, i64* %lncnP, !tbaa !2
  %lncnR = load i64, i64* %ls8au
  %lncnQ = load i64*, i64** %Hp_Var
  %lncnS = getelementptr inbounds i64, i64* %lncnQ, i32 0
  store i64 %lncnR, i64* %lncnS, !tbaa !2
  %lncnT = load i64*, i64** %Hp_Var
  %lncnU = getelementptr inbounds i64, i64* %lncnT, i32 -2
  %lncnV = ptrtoint i64* %lncnU to i64
  store i64 %lncnV, i64* %R3_Var
  %lncnW = load i64, i64* %ls8ar
  store i64 %lncnW, i64* %R2_Var
  %lncnX = load i64*, i64** %Sp_Var
  %lncnY = getelementptr inbounds i64, i64* %lncnX, i32 2
  %lncnZ = ptrtoint i64* %lncnY to i64
  %lnco0 = inttoptr i64 %lncnZ to i64*
  store i64* %lnco0, i64** %Sp_Var
  %lnco1 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnco2 = load i64*, i64** %Sp_Var
  %lnco3 = load i64*, i64** %Hp_Var
  %lnco4 = load i64, i64* %R1_Var
  %lnco5 = load i64, i64* %R2_Var
  %lnco6 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnco1( i64* %Base_Arg, i64* %lnco2, i64* %lnco3, i64 %lnco4, i64 %lnco5, i64 %lnco6, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cclp:
  %lnco7 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnco7, !tbaa !4
  %lnco8 = load i64, i64* %ls8at
  store i64 %lnco8, i64* %R1_Var
  %lnco9 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncoa = load i64*, i64** %Sp_Var
  %lncob = load i64*, i64** %Hp_Var
  %lncoc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnco9( i64* %Base_Arg, i64* %lncoa, i64* %lncob, i64 %lncoc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccle:
  %lncod = load i64*, i64** %Hp_Var
  %lncoe = getelementptr inbounds i64, i64* %lncod, i32 3
  %lncof = ptrtoint i64* %lncoe to i64
  %lncog = inttoptr i64 %lncof to i64*
  store i64* %lncog, i64** %Hp_Var
  %lncoh = load i64, i64* %R1_Var
  store i64 %lncoh, i64* %ls8at
  %lncoi = load i64*, i64** %Hp_Var
  %lncoj = ptrtoint i64* %lncoi to i64
  %lncok = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncol = bitcast i64* %lncok to i64*
  %lncom = load i64, i64* %lncol, !tbaa !4
  %lncon = icmp ugt i64 %lncoj, %lncom
  br i1 %lncon, label %cclp, label %cclo
cclo:
  %lncoo = load i64, i64* %ls8at
  %lncop = add i64 %lncoo, 6
  %lncoq = inttoptr i64 %lncop to i64*
  %lncor = load i64, i64* %lncoq, !tbaa !5
  store i64 %lncor, i64* %ls8aw
  %lncot = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ay_info$def to i64
  %lncos = load i64*, i64** %Hp_Var
  %lncou = getelementptr inbounds i64, i64* %lncos, i32 -2
  store i64 %lncot, i64* %lncou, !tbaa !2
  %lncow = load i64, i64* %ls8aw
  %lncov = load i64*, i64** %Hp_Var
  %lncox = getelementptr inbounds i64, i64* %lncov, i32 0
  store i64 %lncow, i64* %lncox, !tbaa !2
  %lncoy = load i64*, i64** %Hp_Var
  %lncoz = getelementptr inbounds i64, i64* %lncoy, i32 -2
  %lncoA = ptrtoint i64* %lncoz to i64
  store i64 %lncoA, i64* %R3_Var
  %lncoB = load i64, i64* %ls8ar
  store i64 %lncoB, i64* %R2_Var
  %lncoC = load i64*, i64** %Sp_Var
  %lncoD = getelementptr inbounds i64, i64* %lncoC, i32 2
  %lncoE = ptrtoint i64* %lncoD to i64
  %lncoF = inttoptr i64 %lncoE to i64*
  store i64* %lncoF, i64** %Sp_Var
  %lncoG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncoH = load i64*, i64** %Sp_Var
  %lncoI = load i64*, i64** %Hp_Var
  %lncoJ = load i64, i64* %R1_Var
  %lncoK = load i64, i64* %R2_Var
  %lncoL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncoG( i64* %Base_Arg, i64* %lncoH, i64* %lncoI, i64 %lncoJ, i64 %lncoK, i64 %lncoL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cclf:
  %lncoM = ptrtoint %Word_wbit1_closure_struct* @Word_wbit1_closure$def to i64
  store i64 %lncoM, i64* %R1_Var
  %lncoN = load i64*, i64** %Sp_Var
  %lncoO = getelementptr inbounds i64, i64* %lncoN, i32 2
  %lncoP = ptrtoint i64* %lncoO to i64
  %lncoQ = inttoptr i64 %lncoP to i64*
  store i64* %lncoQ, i64** %Sp_Var
  %lncoS = load i64, i64* %R1_Var
  %lncoT = inttoptr i64 %lncoS to i64*
  %lncoU = load i64, i64* %lncoT, !tbaa !3
  %lncoV = inttoptr i64 %lncoU to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncoW = load i64*, i64** %Sp_Var
  %lncoX = load i64*, i64** %Hp_Var
  %lncoY = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncoV( i64* %Base_Arg, i64* %lncoW, i64* %lncoX, i64 %lncoY, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_wbit_closure_struct = type <{i64, i64}>
@Word_wbit_closure$def = internal global %Word_wbit_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wbit_info$def to i64), i64 0}>
@Word_wbit_closure = alias i8* bitcast (%Word_wbit_closure_struct* @Word_wbit_closure$def to i8*)
@Word_wbit_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wbit_info$def to i8*)
define ghccc void @Word_wbit_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wbit_info$def to i64)),i64 648), i64 12884901911, i64 0, i64 4294967311}>
{
ccp4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  store i64 %R4_Arg, i64* %R3_Var
  %lncp7 = load i64, i64* %R2_Var
  store i64 %lncp7, i64* %R2_Var
  %lncp8 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwwbit_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncp9 = load i64, i64* %R2_Var
  %lncpa = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncp8( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncp9, i64 %lncpa, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_natToWord_closure_struct = type <{i64, i64}>
@Word_natToWord_closure$def = internal global %Word_natToWord_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_natToWord_info$def to i64), i64 0}>
@Word_natToWord_closure = alias i8* bitcast (%Word_natToWord_closure_struct* @Word_natToWord_closure$def to i8*)
@Word_natToWord_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_natToWord_info$def to i8*)
define ghccc void @Word_natToWord_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_natToWord_info$def to i64)),i64 528), i64 8589934607, i64 0, i64 562954248388623}>
{
ccpp:
  %ls8aE = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls8aD = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncpz = load i64*, i64** %Sp_Var
  %lncpA = getelementptr inbounds i64, i64* %lncpz, i32 -3
  %lncpB = ptrtoint i64* %lncpA to i64
  %lncpC = icmp ult i64 %lncpB, %SpLim_Arg
  br i1 %lncpC, label %ccpq, label %ccpr
ccpr:
  %lncpE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccpn_info$def to i64
  %lncpD = load i64*, i64** %Sp_Var
  %lncpF = getelementptr inbounds i64, i64* %lncpD, i32 -3
  store i64 %lncpE, i64* %lncpF, !tbaa !1
  %lncpG = load i64, i64* %R3_Var
  store i64 %lncpG, i64* %ls8aE
  %lncpH = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lncpI = add i64 %lncpH, 1
  store i64 %lncpI, i64* %R3_Var
  %lncpJ = load i64, i64* %R2_Var
  store i64 %lncpJ, i64* %ls8aD
  %lncpK = load i64, i64* %ls8aE
  store i64 %lncpK, i64* %R2_Var
  %lncpM = load i64, i64* %ls8aD
  %lncpL = load i64*, i64** %Sp_Var
  %lncpN = getelementptr inbounds i64, i64* %lncpL, i32 -2
  store i64 %lncpM, i64* %lncpN, !tbaa !1
  %lncpP = load i64, i64* %ls8aE
  %lncpO = load i64*, i64** %Sp_Var
  %lncpQ = getelementptr inbounds i64, i64* %lncpO, i32 -1
  store i64 %lncpP, i64* %lncpQ, !tbaa !1
  %lncpR = load i64*, i64** %Sp_Var
  %lncpS = getelementptr inbounds i64, i64* %lncpR, i32 -3
  %lncpT = ptrtoint i64* %lncpS to i64
  %lncpU = inttoptr i64 %lncpT to i64*
  store i64* %lncpU, i64** %Sp_Var
  %lncpV = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncpW = load i64*, i64** %Sp_Var
  %lncpX = load i64, i64* %R1_Var
  %lncpY = load i64, i64* %R2_Var
  %lncpZ = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncpV( i64* %Base_Arg, i64* %lncpW, i64* %Hp_Arg, i64 %lncpX, i64 %lncpY, i64 %lncpZ, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccpq:
  %lncq0 = load i64, i64* %R3_Var
  store i64 %lncq0, i64* %R3_Var
  %lncq1 = load i64, i64* %R2_Var
  store i64 %lncq1, i64* %R2_Var
  %lncq2 = ptrtoint %Word_natToWord_closure_struct* @Word_natToWord_closure$def to i64
  store i64 %lncq2, i64* %R1_Var
  %lncq3 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncq4 = bitcast i64* %lncq3 to i64*
  %lncq5 = load i64, i64* %lncq4, !tbaa !4
  %lncq6 = inttoptr i64 %lncq5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncq7 = load i64*, i64** %Sp_Var
  %lncq8 = load i64, i64* %R1_Var
  %lncq9 = load i64, i64* %R2_Var
  %lncqa = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncq6( i64* %Base_Arg, i64* %lncq7, i64* %Hp_Arg, i64 %lncq8, i64 %lncq9, i64 %lncqa, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccpn_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccpn_info$def to i8*)
define internal ghccc void @ccpn_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccpn_info$def to i64)),i64 528), i64 2, i64 4294967328}>
{
ccpn:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncqb = load i64, i64* %R1_Var
  switch i64 %lncqb, label %ccpx [i64 0, label %ccpx
i64 1, label %ccpy]
ccpx:
  %lncqc = load i64*, i64** %Sp_Var
  %lncqd = getelementptr inbounds i64, i64* %lncqc, i32 2
  %lncqe = bitcast i64* %lncqd to i64*
  %lncqf = load i64, i64* %lncqe, !tbaa !1
  store i64 %lncqf, i64* %R3_Var
  %lncqg = load i64*, i64** %Sp_Var
  %lncqh = getelementptr inbounds i64, i64* %lncqg, i32 1
  %lncqi = bitcast i64* %lncqh to i64*
  %lncqj = load i64, i64* %lncqi, !tbaa !1
  store i64 %lncqj, i64* %R2_Var
  %lncqk = load i64*, i64** %Sp_Var
  %lncql = getelementptr inbounds i64, i64* %lncqk, i32 3
  %lncqm = ptrtoint i64* %lncql to i64
  %lncqn = inttoptr i64 %lncqm to i64*
  store i64* %lncqn, i64** %Sp_Var
  %lncqo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncqp = load i64*, i64** %Sp_Var
  %lncqq = load i64, i64* %R1_Var
  %lncqr = load i64, i64* %R2_Var
  %lncqs = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncqo( i64* %Base_Arg, i64* %lncqp, i64* %Hp_Arg, i64 %lncqq, i64 %lncqr, i64 %lncqs, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccpy:
  %lncqt = ptrtoint %Word_natToWord1_closure_struct* @Word_natToWord1_closure$def to i64
  %lncqu = add i64 %lncqt, 1
  store i64 %lncqu, i64* %R1_Var
  %lncqv = load i64*, i64** %Sp_Var
  %lncqw = getelementptr inbounds i64, i64* %lncqv, i32 3
  %lncqx = ptrtoint i64* %lncqw to i64
  %lncqy = inttoptr i64 %lncqx to i64*
  store i64* %lncqy, i64** %Sp_Var
  %lncqz = load i64*, i64** %Sp_Var
  %lncqA = getelementptr inbounds i64, i64* %lncqz, i32 0
  %lncqB = bitcast i64* %lncqA to i64*
  %lncqC = load i64, i64* %lncqB, !tbaa !1
  %lncqD = inttoptr i64 %lncqC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncqE = load i64*, i64** %Sp_Var
  %lncqF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncqD( i64* %Base_Arg, i64* %lncqE, i64* %Hp_Arg, i64 %lncqF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_split6_closure_struct = type <{i64, i64}>
@Word_split6_closure$def = internal global %Word_split6_closure_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_Szh_static_info to i64), i64 0}>
@Word_split6_closure = alias i8* bitcast (%Word_split6_closure_struct* @Word_split6_closure$def to i8*)
%Word_split5_closure_struct = type <{i64, i64, i64}>
@Word_split5_closure$def = internal global %Word_split5_closure_struct<{i64 ptrtoint (i8* @Word_W_static_info to i64), i64 add (i64 ptrtoint (%Word_split6_closure_struct* @Word_split6_closure$def to i64),i64 1), i64 3}>
@Word_split5_closure = alias i8* bitcast (%Word_split5_closure_struct* @Word_split5_closure$def to i8*)
%Word_split1zuzdssplit1_closure_struct = type <{i64, i64}>
%ucuh_srtd_struct = type <{i64, i64, i64}>
@Word_split1zuzdssplit1_closure$def = internal global %Word_split1zuzdssplit1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1zuzdssplit1_info$def to i64), i64 0}>
@Word_split1zuzdssplit1_closure = alias i8* bitcast (%Word_split1zuzdssplit1_closure_struct* @Word_split1zuzdssplit1_closure$def to i8*)
@ucuh_srtd$def = internal constant %ucuh_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 432), i64 33, i64 7516196865}>
@ucuh_srtd = internal alias i8* bitcast (%ucuh_srtd_struct* @ucuh_srtd$def to i8*)
@s8bm_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8bm_info$def to i8*)
define internal ghccc void @s8bm_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8bm_info$def to i64)),i64 672), i64 4294967297, i64 12884901908}>
{
ccsv:
  %ls8aQ = alloca i64, i32 1
  %ls8aZ = alloca i64, i32 1
  %ls8aP = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8b3 = alloca i64, i32 1
  %ls8b6 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncui = load i64*, i64** %Sp_Var
  %lncuj = getelementptr inbounds i64, i64* %lncui, i32 -5
  %lncuk = ptrtoint i64* %lncuj to i64
  %lncul = icmp ult i64 %lncuk, %SpLim_Arg
  br i1 %lncul, label %ccsw, label %ccth
ccth:
  %lncun = ptrtoint i8* @stg_upd_frame_info to i64
  %lncum = load i64*, i64** %Sp_Var
  %lncuo = getelementptr inbounds i64, i64* %lncum, i32 -2
  store i64 %lncun, i64* %lncuo, !tbaa !1
  %lncuq = load i64, i64* %R1_Var
  %lncup = load i64*, i64** %Sp_Var
  %lncur = getelementptr inbounds i64, i64* %lncup, i32 -1
  store i64 %lncuq, i64* %lncur, !tbaa !1
  %lncuu = load i64, i64* %R1_Var
  %lncuv = add i64 %lncuu, 24
  %lncuw = inttoptr i64 %lncuv to i64*
  %lncux = load i64, i64* %lncuw, !tbaa !3
  store i64 %lncux, i64* %ls8aQ
  %lncuy = load i64, i64* %ls8aQ
  %lncuz = load i64, i64* %ls8aQ
  %lncuA = ashr i64 %lncuz, 63
  %lncuB = and i64 %lncuA, 7
  %lncuC = add i64 %lncuy, %lncuB
  %lncuD = ashr i64 %lncuC, 3
  store i64 %lncuD, i64* %ls8aZ
  %lncuE = load i64, i64* %ls8aZ
  switch i64 %lncuE, label %ccsD [i64 0, label %cctd]
ccsD:
  %lncuH = load i64, i64* %R1_Var
  %lncuI = add i64 %lncuH, 16
  %lncuJ = inttoptr i64 %lncuI to i64*
  %lncuK = load i64, i64* %lncuJ, !tbaa !3
  store i64 %lncuK, i64* %ls8aP
  %lncuL = load i64, i64* %ls8aP
  %lncuM = add i64 %lncuL, 16
  %lncuN = inttoptr i64 %lncuM to i8*
  %lncuO = load i64, i64* %ls8aZ
  %lncuP = bitcast i8* @integer_gmp_rscan_nzbyte to i64 (i8*, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lncuQ = call ccc i64 (i8*, i64, i64) %lncuP( i8* %lncuN, i64 0, i64 %lncuO ) nounwind
  store i64 %lncuQ, i64* %ls8b3
  %lncuR = load i64, i64* %ls8b3
  switch i64 %lncuR, label %cct1 [i64 0, label %cct6]
cct1:
  %lncuT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccsZ_info$def to i64
  %lncuS = load i64*, i64** %Sp_Var
  %lncuU = getelementptr inbounds i64, i64* %lncuS, i32 -5
  store i64 %lncuT, i64* %lncuU, !tbaa !1
  %lncuV = load i64, i64* %ls8b3
  %lncuW = add i64 %lncuV, 7
  store i64 %lncuW, i64* %ls8b6
  %lncuX = load i64, i64* %ls8b6
  %lncuY = load i64, i64* %ls8b6
  %lncuZ = ashr i64 %lncuY, 63
  %lncv0 = and i64 %lncuZ, 7
  %lncv1 = add i64 %lncuX, %lncv0
  %lncv2 = ashr i64 %lncv1, 3
  %lncv3 = shl i64 %lncv2, 3
  store i64 %lncv3, i64* %R1_Var
  %lncv5 = load i64, i64* %ls8aP
  %lncv4 = load i64*, i64** %Sp_Var
  %lncv6 = getelementptr inbounds i64, i64* %lncv4, i32 -4
  store i64 %lncv5, i64* %lncv6, !tbaa !1
  %lncv8 = load i64, i64* %ls8b3
  %lncv7 = load i64*, i64** %Sp_Var
  %lncv9 = getelementptr inbounds i64, i64* %lncv7, i32 -3
  store i64 %lncv8, i64* %lncv9, !tbaa !1
  %lncva = load i64*, i64** %Sp_Var
  %lncvb = getelementptr inbounds i64, i64* %lncva, i32 -5
  %lncvc = ptrtoint i64* %lncvb to i64
  %lncvd = inttoptr i64 %lncvc to i64*
  store i64* %lncvd, i64** %Sp_Var
  %lncve = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvf = load i64*, i64** %Sp_Var
  %lncvg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncve( i64* %Base_Arg, i64* %lncvf, i64* %Hp_Arg, i64 %lncvg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cct6:
  %lncvi = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_zzeroBigNat_closure to i64
  %lncvh = load i64*, i64** %Sp_Var
  %lncvj = getelementptr inbounds i64, i64* %lncvh, i32 -3
  store i64 %lncvi, i64* %lncvj, !tbaa !1
  %lncvk = load i64*, i64** %Sp_Var
  %lncvl = getelementptr inbounds i64, i64* %lncvk, i32 -3
  %lncvm = ptrtoint i64* %lncvl to i64
  %lncvn = inttoptr i64 %lncvm to i64*
  store i64* %lncvn, i64** %Sp_Var
  %lncvo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cct0_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvp = load i64*, i64** %Sp_Var
  %lncvq = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvo( i64* %Base_Arg, i64* %lncvp, i64* %Hp_Arg, i64 %lncvq, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctd:
  %lncvr = ptrtoint %Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64
  store i64 %lncvr, i64* %R1_Var
  %lncvs = load i64*, i64** %Sp_Var
  %lncvt = getelementptr inbounds i64, i64* %lncvs, i32 -2
  %lncvu = ptrtoint i64* %lncvt to i64
  %lncvv = inttoptr i64 %lncvu to i64*
  store i64* %lncvv, i64** %Sp_Var
  %lncvx = load i64, i64* %R1_Var
  %lncvy = inttoptr i64 %lncvx to i64*
  %lncvz = load i64, i64* %lncvy, !tbaa !3
  %lncvA = inttoptr i64 %lncvz to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvB = load i64*, i64** %Sp_Var
  %lncvC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvA( i64* %Base_Arg, i64* %lncvB, i64* %Hp_Arg, i64 %lncvC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccsw:
  %lncvD = load i64, i64* %R1_Var
  store i64 %lncvD, i64* %R1_Var
  %lncvE = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncvF = bitcast i64* %lncvE to i64*
  %lncvG = load i64, i64* %lncvF, !tbaa !4
  %lncvH = inttoptr i64 %lncvG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncvI = load i64*, i64** %Sp_Var
  %lncvJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncvH( i64* %Base_Arg, i64* %lncvI, i64* %Hp_Arg, i64 %lncvJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccsZ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccsZ_info$def to i8*)
define internal ghccc void @ccsZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 130, i64 32}>
{
ccsZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncvK = load i64*, i64** %Hp_Var
  %lncvL = getelementptr inbounds i64, i64* %lncvK, i32 2
  %lncvM = ptrtoint i64* %lncvL to i64
  %lncvN = inttoptr i64 %lncvM to i64*
  store i64* %lncvN, i64** %Hp_Var
  %lncvO = load i64*, i64** %Hp_Var
  %lncvP = ptrtoint i64* %lncvO to i64
  %lncvQ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncvR = bitcast i64* %lncvQ to i64*
  %lncvS = load i64, i64* %lncvR, !tbaa !4
  %lncvT = icmp ugt i64 %lncvP, %lncvS
  br i1 %lncvT, label %cct5, label %cct4
cct4:
  %lncvV = load i64, i64* %R1_Var
  %lncvW = add i64 %lncvV, 16
  %lncvX = inttoptr i64 %lncvW to i8*
  %lncvY = load i64*, i64** %Sp_Var
  %lncvZ = getelementptr inbounds i64, i64* %lncvY, i32 1
  %lncw0 = bitcast i64* %lncvZ to i64*
  %lncw1 = load i64, i64* %lncw0, !tbaa !1
  %lncw2 = add i64 %lncw1, 16
  %lncw3 = inttoptr i64 %lncw2 to i8*
  %lncw4 = load i64*, i64** %Sp_Var
  %lncw5 = getelementptr inbounds i64, i64* %lncw4, i32 2
  %lncw6 = bitcast i64* %lncw5 to i64*
  %lncw7 = load i64, i64* %lncw6, !tbaa !1
  %lncw8 = bitcast i8* @integer_gmp_mpn_import to void (i8*, i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i8*, i64, i64, i64) %lncw8( i8* %lncvX, i8* %lncw3, i64 0, i64 %lncw7, i64 0 ) nounwind
  %lncwa = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_BNzh_con_info to i64
  %lncw9 = load i64*, i64** %Hp_Var
  %lncwb = getelementptr inbounds i64, i64* %lncw9, i32 -1
  store i64 %lncwa, i64* %lncwb, !tbaa !2
  %lncwd = load i64, i64* %R1_Var
  %lncwc = load i64*, i64** %Hp_Var
  %lncwe = getelementptr inbounds i64, i64* %lncwc, i32 0
  store i64 %lncwd, i64* %lncwe, !tbaa !2
  %lncwh = load i64*, i64** %Hp_Var
  %lncwi = ptrtoint i64* %lncwh to i64
  %lncwj = add i64 %lncwi, -7
  %lncwf = load i64*, i64** %Sp_Var
  %lncwk = getelementptr inbounds i64, i64* %lncwf, i32 2
  store i64 %lncwj, i64* %lncwk, !tbaa !1
  %lncwl = load i64*, i64** %Sp_Var
  %lncwm = getelementptr inbounds i64, i64* %lncwl, i32 2
  %lncwn = ptrtoint i64* %lncwm to i64
  %lncwo = inttoptr i64 %lncwn to i64*
  store i64* %lncwo, i64** %Sp_Var
  %lncwp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cct0_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncwq = load i64*, i64** %Sp_Var
  %lncwr = load i64*, i64** %Hp_Var
  %lncws = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncwp( i64* %Base_Arg, i64* %lncwq, i64* %lncwr, i64 %lncws, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cct5:
  %lncwt = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncwt, !tbaa !4
  %lncwu = load i64, i64* %R1_Var
  store i64 %lncwu, i64* %R1_Var
  %lncwv = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncww = load i64*, i64** %Sp_Var
  %lncwx = load i64*, i64** %Hp_Var
  %lncwy = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncwv( i64* %Base_Arg, i64* %lncww, i64* %lncwx, i64 %lncwy, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cct0_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cct0_entry$def to i8*)
define internal ghccc void @cct0_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cct0:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncwz = load i64*, i64** %Sp_Var
  %lncwA = getelementptr inbounds i64, i64* %lncwz, i32 0
  %lncwB = bitcast i64* %lncwA to i64*
  %lncwC = load i64, i64* %lncwB, !tbaa !1
  store i64 %lncwC, i64* %R2_Var
  %lncwD = load i64*, i64** %Sp_Var
  %lncwE = getelementptr inbounds i64, i64* %lncwD, i32 1
  %lncwF = ptrtoint i64* %lncwE to i64
  %lncwG = inttoptr i64 %lncwF to i64*
  store i64* %lncwG, i64** %Sp_Var
  %lncwH = bitcast i8* @integerzmgmp_GHCziIntegerziType_bigNatToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncwI = load i64*, i64** %Sp_Var
  %lncwJ = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncwH( i64* %Base_Arg, i64* %lncwI, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncwJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_split1zuzdssplit1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1zuzdssplit1_info$def to i8*)
define ghccc void @Word_split1zuzdssplit1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ucuh_srtd_struct* @ucuh_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1zuzdssplit1_info$def to i64)),i64 0), i64 12884901911, i64 0, i64 -4294967281}>
{
ccty:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncwK = load i64*, i64** %Sp_Var
  %lncwL = getelementptr inbounds i64, i64* %lncwK, i32 -5
  %lncwM = ptrtoint i64* %lncwL to i64
  %lncwN = icmp ult i64 %lncwM, %SpLim_Arg
  br i1 %lncwN, label %cctz, label %cctA
cctA:
  %lncwP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrT_info$def to i64
  %lncwO = load i64*, i64** %Sp_Var
  %lncwQ = getelementptr inbounds i64, i64* %lncwO, i32 -2
  store i64 %lncwP, i64* %lncwQ, !tbaa !1
  %lncwR = load i64, i64* %R2_Var
  store i64 %lncwR, i64* %R1_Var
  %lncwT = load i64, i64* %R4_Var
  %lncwS = load i64*, i64** %Sp_Var
  %lncwU = getelementptr inbounds i64, i64* %lncwS, i32 -1
  store i64 %lncwT, i64* %lncwU, !tbaa !1
  %lncwV = load i64*, i64** %Sp_Var
  %lncwW = getelementptr inbounds i64, i64* %lncwV, i32 -2
  %lncwX = ptrtoint i64* %lncwW to i64
  %lncwY = inttoptr i64 %lncwX to i64*
  store i64* %lncwY, i64** %Sp_Var
  %lncwZ = load i64, i64* %R1_Var
  %lncx0 = and i64 %lncwZ, 7
  %lncx1 = icmp ne i64 %lncx0, 0
  br i1 %lncx1, label %ucug, label %ccrU
ccrU:
  %lncx3 = load i64, i64* %R1_Var
  %lncx4 = inttoptr i64 %lncx3 to i64*
  %lncx5 = load i64, i64* %lncx4, !tbaa !3
  %lncx6 = inttoptr i64 %lncx5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncx7 = load i64*, i64** %Sp_Var
  %lncx8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncx6( i64* %Base_Arg, i64* %lncx7, i64* %Hp_Arg, i64 %lncx8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucug:
  %lncx9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrT_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncxa = load i64*, i64** %Sp_Var
  %lncxb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncx9( i64* %Base_Arg, i64* %lncxa, i64* %Hp_Arg, i64 %lncxb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctz:
  %lncxc = load i64, i64* %R4_Var
  store i64 %lncxc, i64* %R4_Var
  %lncxd = load i64, i64* %R3_Var
  store i64 %lncxd, i64* %R3_Var
  %lncxe = load i64, i64* %R2_Var
  store i64 %lncxe, i64* %R2_Var
  %lncxf = ptrtoint %Word_split1zuzdssplit1_closure_struct* @Word_split1zuzdssplit1_closure$def to i64
  store i64 %lncxf, i64* %R1_Var
  %lncxg = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncxh = bitcast i64* %lncxg to i64*
  %lncxi = load i64, i64* %lncxh, !tbaa !4
  %lncxj = inttoptr i64 %lncxi to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncxk = load i64*, i64** %Sp_Var
  %lncxl = load i64, i64* %R1_Var
  %lncxm = load i64, i64* %R2_Var
  %lncxn = load i64, i64* %R3_Var
  %lncxo = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncxj( i64* %Base_Arg, i64* %lncxk, i64* %Hp_Arg, i64 %lncxl, i64 %lncxm, i64 %lncxn, i64 %lncxo, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccrT_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrT_info$def to i8*)
define internal ghccc void @ccrT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrT_info$def to i64)),i64 432), i64 1, i64 -4611668421946376160}>
{
ccrT:
  %ls8aJ = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncxp = load i64*, i64** %Sp_Var
  %lncxq = getelementptr inbounds i64, i64* %lncxp, i32 1
  %lncxr = bitcast i64* %lncxq to i64*
  %lncxs = load i64, i64* %lncxr, !tbaa !1
  store i64 %lncxs, i64* %ls8aJ
  %lncxt = load i64, i64* %R1_Var
  %lncxu = and i64 %lncxt, 7
  switch i64 %lncxu, label %cctu [i64 1, label %cctu
i64 2, label %cctv
i64 3, label %cctw]
cctu:
  %lncxx = load i64, i64* %R1_Var
  %lncxy = add i64 %lncxx, 7
  %lncxz = inttoptr i64 %lncxy to i64*
  %lncxA = load i64, i64* %lncxz, !tbaa !3
  switch i64 %lncxA, label %cctH [i64 0, label %cctV]
cctH:
  %lncxC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cctF_info$def to i64
  %lncxB = load i64*, i64** %Sp_Var
  %lncxD = getelementptr inbounds i64, i64* %lncxB, i32 -1
  store i64 %lncxC, i64* %lncxD, !tbaa !1
  %lncxE = ptrtoint %Word_wrap1_closure_struct* @Word_wrap1_closure$def to i64
  %lncxF = add i64 %lncxE, 1
  store i64 %lncxF, i64* %R3_Var
  %lncxG = load i64, i64* %ls8aJ
  store i64 %lncxG, i64* %R2_Var
  %lncxI = load i64, i64* %R1_Var
  %lncxH = load i64*, i64** %Sp_Var
  %lncxJ = getelementptr inbounds i64, i64* %lncxH, i32 0
  store i64 %lncxI, i64* %lncxJ, !tbaa !1
  %lncxK = load i64*, i64** %Sp_Var
  %lncxL = getelementptr inbounds i64, i64* %lncxK, i32 -1
  %lncxM = ptrtoint i64* %lncxL to i64
  %lncxN = inttoptr i64 %lncxM to i64*
  store i64* %lncxN, i64** %Sp_Var
  %lncxO = bitcast i8* @integerzmgmp_GHCziIntegerziType_geIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncxP = load i64*, i64** %Sp_Var
  %lncxQ = load i64, i64* %R1_Var
  %lncxR = load i64, i64* %R2_Var
  %lncxS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncxO( i64* %Base_Arg, i64* %lncxP, i64* %Hp_Arg, i64 %lncxQ, i64 %lncxR, i64 %lncxS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctV:
  %lncxT = ptrtoint %Word_split5_closure_struct* @Word_split5_closure$def to i64
  %lncxU = add i64 %lncxT, 1
  store i64 %lncxU, i64* %R1_Var
  %lncxV = load i64*, i64** %Sp_Var
  %lncxW = getelementptr inbounds i64, i64* %lncxV, i32 2
  %lncxX = ptrtoint i64* %lncxW to i64
  %lncxY = inttoptr i64 %lncxX to i64*
  store i64* %lncxY, i64** %Sp_Var
  %lncxZ = load i64*, i64** %Sp_Var
  %lncy0 = getelementptr inbounds i64, i64* %lncxZ, i32 0
  %lncy1 = bitcast i64* %lncy0 to i64*
  %lncy2 = load i64, i64* %lncy1, !tbaa !1
  %lncy3 = inttoptr i64 %lncy2 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncy4 = load i64*, i64** %Sp_Var
  %lncy5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncy3( i64* %Base_Arg, i64* %lncy4, i64* %Hp_Arg, i64 %lncy5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctv:
  %lncy7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrZ_info$def to i64
  %lncy6 = load i64*, i64** %Sp_Var
  %lncy8 = getelementptr inbounds i64, i64* %lncy6, i32 -2
  store i64 %lncy7, i64* %lncy8, !tbaa !1
  %lncy9 = load i64, i64* %ls8aJ
  store i64 %lncy9, i64* %R2_Var
  %lncyd = load i64, i64* %R1_Var
  %lncye = add i64 %lncyd, 6
  %lncyf = inttoptr i64 %lncye to i64*
  %lncyg = load i64, i64* %lncyf, !tbaa !3
  %lncya = load i64*, i64** %Sp_Var
  %lncyh = getelementptr inbounds i64, i64* %lncya, i32 -1
  store i64 %lncyg, i64* %lncyh, !tbaa !1
  %lncyj = load i64, i64* %R1_Var
  %lncyi = load i64*, i64** %Sp_Var
  %lncyk = getelementptr inbounds i64, i64* %lncyi, i32 0
  store i64 %lncyj, i64* %lncyk, !tbaa !1
  %lncyl = load i64*, i64** %Sp_Var
  %lncym = getelementptr inbounds i64, i64* %lncyl, i32 -2
  %lncyn = ptrtoint i64* %lncym to i64
  %lncyo = inttoptr i64 %lncyn to i64*
  store i64* %lncyo, i64** %Sp_Var
  %lncyp = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncyq = load i64*, i64** %Sp_Var
  %lncyr = load i64, i64* %R1_Var
  %lncys = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncyp( i64* %Base_Arg, i64* %lncyq, i64* %Hp_Arg, i64 %lncyr, i64 %lncys, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctw:
  %lncyt = load i64, i64* %R1_Var
  store i64 %lncyt, i64* %R3_Var
  %lncyu = load i64, i64* %ls8aJ
  store i64 %lncyu, i64* %R2_Var
  %lncyv = load i64*, i64** %Sp_Var
  %lncyw = getelementptr inbounds i64, i64* %lncyv, i32 2
  %lncyx = ptrtoint i64* %lncyw to i64
  %lncyy = inttoptr i64 %lncyx to i64*
  store i64* %lncyy, i64** %Sp_Var
  %lncyz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncyA = load i64*, i64** %Sp_Var
  %lncyB = load i64, i64* %R1_Var
  %lncyC = load i64, i64* %R2_Var
  %lncyD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncyz( i64* %Base_Arg, i64* %lncyA, i64* %Hp_Arg, i64 %lncyB, i64 %lncyC, i64 %lncyD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccrZ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrZ_info$def to i8*)
define internal ghccc void @ccrZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccrZ_info$def to i64)),i64 432), i64 3, i64 -4611668421946376160}>
{
ccrZ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncyE = load i64*, i64** %Hp_Var
  %lncyF = getelementptr inbounds i64, i64* %lncyE, i32 2
  %lncyG = ptrtoint i64* %lncyF to i64
  %lncyH = inttoptr i64 %lncyG to i64*
  store i64* %lncyH, i64** %Hp_Var
  %lncyI = load i64*, i64** %Hp_Var
  %lncyJ = ptrtoint i64* %lncyI to i64
  %lncyK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncyL = bitcast i64* %lncyK to i64*
  %lncyM = load i64, i64* %lncyL, !tbaa !4
  %lncyN = icmp ugt i64 %lncyJ, %lncyM
  br i1 %lncyN, label %cctZ, label %cctY
cctY:
  %lncyO = load i64, i64* %R1_Var
  %lncyP = load i64*, i64** %Sp_Var
  %lncyQ = getelementptr inbounds i64, i64* %lncyP, i32 1
  %lncyR = bitcast i64* %lncyQ to i64*
  %lncyS = load i64, i64* %lncyR, !tbaa !1
  %lncyT = add i64 %lncyS, 8
  %lncyU = inttoptr i64 %lncyT to i64*
  %lncyV = load i64, i64* %lncyU, !tbaa !5
  %lncyW = shl i64 %lncyV, 3
  %lncyX = icmp sge i64 %lncyO, %lncyW
  %lncyY = zext i1 %lncyX to i64
  switch i64 %lncyY, label %ccu1 [i64 0, label %ccu1
i64 1, label %ccuc]
ccu1:
  %lncyZ = load i64*, i64** %Hp_Var
  %lncz0 = getelementptr inbounds i64, i64* %lncyZ, i32 -2
  %lncz1 = ptrtoint i64* %lncz0 to i64
  %lncz2 = inttoptr i64 %lncz1 to i64*
  store i64* %lncz2, i64** %Hp_Var
  %lncz4 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccse_info$def to i64
  %lncz3 = load i64*, i64** %Sp_Var
  %lncz5 = getelementptr inbounds i64, i64* %lncz3, i32 -1
  store i64 %lncz4, i64* %lncz5, !tbaa !1
  %lncz6 = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lncz7 = add i64 %lncz6, 1
  store i64 %lncz7, i64* %R3_Var
  %lncz8 = load i64*, i64** %Sp_Var
  %lncz9 = getelementptr inbounds i64, i64* %lncz8, i32 3
  %lncza = bitcast i64* %lncz9 to i64*
  %lnczb = load i64, i64* %lncza, !tbaa !1
  store i64 %lnczb, i64* %R2_Var
  %lnczd = load i64, i64* %R1_Var
  %lnczc = load i64*, i64** %Sp_Var
  %lncze = getelementptr inbounds i64, i64* %lnczc, i32 0
  store i64 %lnczd, i64* %lncze, !tbaa !1
  %lnczf = load i64*, i64** %Sp_Var
  %lnczg = getelementptr inbounds i64, i64* %lnczf, i32 -1
  %lnczh = ptrtoint i64* %lnczg to i64
  %lnczi = inttoptr i64 %lnczh to i64*
  store i64* %lnczi, i64** %Sp_Var
  %lnczj = bitcast i8* @integerzmgmp_GHCziIntegerziType_remInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczk = load i64*, i64** %Sp_Var
  %lnczl = load i64*, i64** %Hp_Var
  %lnczm = load i64, i64* %R1_Var
  %lnczn = load i64, i64* %R2_Var
  %lnczo = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczj( i64* %Base_Arg, i64* %lnczk, i64* %lnczl, i64 %lnczm, i64 %lnczn, i64 %lnczo, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccuc:
  %lnczq = ptrtoint i8* @Word_W_con_info to i64
  %lnczp = load i64*, i64** %Hp_Var
  %lnczr = getelementptr inbounds i64, i64* %lnczp, i32 -1
  store i64 %lnczq, i64* %lnczr, !tbaa !2
  %lnczt = load i64*, i64** %Sp_Var
  %lnczu = getelementptr inbounds i64, i64* %lnczt, i32 2
  %lnczv = bitcast i64* %lnczu to i64*
  %lnczw = load i64, i64* %lnczv, !tbaa !1
  %lnczs = load i64*, i64** %Hp_Var
  %lnczx = getelementptr inbounds i64, i64* %lnczs, i32 0
  store i64 %lnczw, i64* %lnczx, !tbaa !2
  %lnczz = load i64*, i64** %Hp_Var
  %lnczA = ptrtoint i64* %lnczz to i64
  %lnczB = add i64 %lnczA, -7
  store i64 %lnczB, i64* %R1_Var
  %lnczC = load i64*, i64** %Sp_Var
  %lnczD = getelementptr inbounds i64, i64* %lnczC, i32 4
  %lnczE = ptrtoint i64* %lnczD to i64
  %lnczF = inttoptr i64 %lnczE to i64*
  store i64* %lnczF, i64** %Sp_Var
  %lnczG = load i64*, i64** %Sp_Var
  %lnczH = getelementptr inbounds i64, i64* %lnczG, i32 0
  %lnczI = bitcast i64* %lnczH to i64*
  %lnczJ = load i64, i64* %lnczI, !tbaa !1
  %lnczK = inttoptr i64 %lnczJ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczL = load i64*, i64** %Sp_Var
  %lnczM = load i64*, i64** %Hp_Var
  %lnczN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczK( i64* %Base_Arg, i64* %lnczL, i64* %lnczM, i64 %lnczN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctZ:
  %lnczO = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lnczO, !tbaa !4
  %lnczP = load i64, i64* %R1_Var
  store i64 %lnczP, i64* %R1_Var
  %lnczQ = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczR = load i64*, i64** %Sp_Var
  %lnczS = load i64*, i64** %Hp_Var
  %lnczT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczQ( i64* %Base_Arg, i64* %lnczR, i64* %lnczS, i64 %lnczT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccse_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccse_info$def to i8*)
define internal ghccc void @ccse_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccse_info$def to i64)),i64 528), i64 68, i64 3377704015495200}>
{
ccse:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnczU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccsi_info$def to i64
  %lnczV = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnczU, i64* %lnczV, !tbaa !1
  %lnczW = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lnczX = add i64 %lnczW, 1
  store i64 %lnczX, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lnczY = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnczZ = load i64, i64* %R2_Var
  %lncA0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnczY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnczZ, i64 %lncA0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccsi_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccsi_info$def to i8*)
define internal ghccc void @ccsi_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccsi_info$def to i64)),i64 528), i64 68, i64 3377704015495200}>
{
ccsi:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncA1 = load i64*, i64** %Hp_Var
  %lncA2 = getelementptr inbounds i64, i64* %lncA1, i32 6
  %lncA3 = ptrtoint i64* %lncA2 to i64
  %lncA4 = inttoptr i64 %lncA3 to i64*
  store i64* %lncA4, i64** %Hp_Var
  %lncA5 = load i64*, i64** %Hp_Var
  %lncA6 = ptrtoint i64* %lncA5 to i64
  %lncA7 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncA8 = bitcast i64* %lncA7 to i64*
  %lncA9 = load i64, i64* %lncA8, !tbaa !4
  %lncAa = icmp ugt i64 %lncA6, %lncA9
  br i1 %lncAa, label %ccu5, label %ccu4
ccu4:
  %lncAb = load i64, i64* %R1_Var
  switch i64 %lncAb, label %ccu7 [i64 0, label %ccu7
i64 1, label %ccu9]
ccu7:
  %lncAc = load i64*, i64** %Hp_Var
  %lncAd = getelementptr inbounds i64, i64* %lncAc, i32 -6
  %lncAe = ptrtoint i64* %lncAd to i64
  %lncAf = inttoptr i64 %lncAe to i64*
  store i64* %lncAf, i64** %Hp_Var
  %lncAg = load i64*, i64** %Sp_Var
  %lncAh = getelementptr inbounds i64, i64* %lncAg, i32 3
  %lncAi = bitcast i64* %lncAh to i64*
  %lncAj = load i64, i64* %lncAi, !tbaa !1
  store i64 %lncAj, i64* %R3_Var
  %lncAk = load i64*, i64** %Sp_Var
  %lncAl = getelementptr inbounds i64, i64* %lncAk, i32 4
  %lncAm = bitcast i64* %lncAl to i64*
  %lncAn = load i64, i64* %lncAm, !tbaa !1
  store i64 %lncAn, i64* %R2_Var
  %lncAo = load i64*, i64** %Sp_Var
  %lncAp = getelementptr inbounds i64, i64* %lncAo, i32 5
  %lncAq = ptrtoint i64* %lncAp to i64
  %lncAr = inttoptr i64 %lncAq to i64*
  store i64* %lncAr, i64** %Sp_Var
  %lncAs = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncAt = load i64*, i64** %Sp_Var
  %lncAu = load i64*, i64** %Hp_Var
  %lncAv = load i64, i64* %R1_Var
  %lncAw = load i64, i64* %R2_Var
  %lncAx = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncAs( i64* %Base_Arg, i64* %lncAt, i64* %lncAu, i64 %lncAv, i64 %lncAw, i64 %lncAx, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccu9:
  %lncAz = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8bm_info$def to i64
  %lncAy = load i64*, i64** %Hp_Var
  %lncAA = getelementptr inbounds i64, i64* %lncAy, i32 -5
  store i64 %lncAz, i64* %lncAA, !tbaa !2
  %lncAC = load i64*, i64** %Sp_Var
  %lncAD = getelementptr inbounds i64, i64* %lncAC, i32 2
  %lncAE = bitcast i64* %lncAD to i64*
  %lncAF = load i64, i64* %lncAE, !tbaa !1
  %lncAB = load i64*, i64** %Hp_Var
  %lncAG = getelementptr inbounds i64, i64* %lncAB, i32 -3
  store i64 %lncAF, i64* %lncAG, !tbaa !2
  %lncAI = load i64*, i64** %Sp_Var
  %lncAJ = getelementptr inbounds i64, i64* %lncAI, i32 1
  %lncAK = bitcast i64* %lncAJ to i64*
  %lncAL = load i64, i64* %lncAK, !tbaa !1
  %lncAH = load i64*, i64** %Hp_Var
  %lncAM = getelementptr inbounds i64, i64* %lncAH, i32 -2
  store i64 %lncAL, i64* %lncAM, !tbaa !2
  %lncAO = ptrtoint i8* @Word_W_con_info to i64
  %lncAN = load i64*, i64** %Hp_Var
  %lncAP = getelementptr inbounds i64, i64* %lncAN, i32 -1
  store i64 %lncAO, i64* %lncAP, !tbaa !2
  %lncAR = load i64*, i64** %Hp_Var
  %lncAS = getelementptr inbounds i64, i64* %lncAR, i32 -5
  %lncAT = ptrtoint i64* %lncAS to i64
  %lncAQ = load i64*, i64** %Hp_Var
  %lncAU = getelementptr inbounds i64, i64* %lncAQ, i32 0
  store i64 %lncAT, i64* %lncAU, !tbaa !2
  %lncAW = load i64*, i64** %Hp_Var
  %lncAX = ptrtoint i64* %lncAW to i64
  %lncAY = add i64 %lncAX, -7
  store i64 %lncAY, i64* %R1_Var
  %lncAZ = load i64*, i64** %Sp_Var
  %lncB0 = getelementptr inbounds i64, i64* %lncAZ, i32 5
  %lncB1 = ptrtoint i64* %lncB0 to i64
  %lncB2 = inttoptr i64 %lncB1 to i64*
  store i64* %lncB2, i64** %Sp_Var
  %lncB3 = load i64*, i64** %Sp_Var
  %lncB4 = getelementptr inbounds i64, i64* %lncB3, i32 0
  %lncB5 = bitcast i64* %lncB4 to i64*
  %lncB6 = load i64, i64* %lncB5, !tbaa !1
  %lncB7 = inttoptr i64 %lncB6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncB8 = load i64*, i64** %Sp_Var
  %lncB9 = load i64*, i64** %Hp_Var
  %lncBa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncB7( i64* %Base_Arg, i64* %lncB8, i64* %lncB9, i64 %lncBa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccu5:
  %lncBb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lncBb, !tbaa !4
  %lncBc = load i64, i64* %R1_Var
  store i64 %lncBc, i64* %R1_Var
  %lncBd = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncBe = load i64*, i64** %Sp_Var
  %lncBf = load i64*, i64** %Hp_Var
  %lncBg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncBd( i64* %Base_Arg, i64* %lncBe, i64* %lncBf, i64 %lncBg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cctF_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cctF_info$def to i8*)
define internal ghccc void @cctF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cctF_info$def to i64)),i64 528), i64 2, i64 4294967328}>
{
cctF:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8aK = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncBh = load i64*, i64** %Hp_Var
  %lncBi = getelementptr inbounds i64, i64* %lncBh, i32 2
  %lncBj = ptrtoint i64* %lncBi to i64
  %lncBk = inttoptr i64 %lncBj to i64*
  store i64* %lncBk, i64** %Hp_Var
  %lncBl = load i64*, i64** %Hp_Var
  %lncBm = ptrtoint i64* %lncBl to i64
  %lncBn = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncBo = bitcast i64* %lncBn to i64*
  %lncBp = load i64, i64* %lncBo, !tbaa !4
  %lncBq = icmp ugt i64 %lncBm, %lncBp
  br i1 %lncBq, label %cctN, label %cctM
cctM:
  %lncBr = load i64*, i64** %Sp_Var
  %lncBs = getelementptr inbounds i64, i64* %lncBr, i32 1
  %lncBt = bitcast i64* %lncBs to i64*
  %lncBu = load i64, i64* %lncBt, !tbaa !1
  store i64 %lncBu, i64* %ls8aK
  %lncBv = load i64, i64* %R1_Var
  switch i64 %lncBv, label %cctQ [i64 0, label %cctQ
i64 1, label %cctU]
cctQ:
  %lncBw = load i64*, i64** %Hp_Var
  %lncBx = getelementptr inbounds i64, i64* %lncBw, i32 -2
  %lncBy = ptrtoint i64* %lncBx to i64
  %lncBz = inttoptr i64 %lncBy to i64*
  store i64* %lncBz, i64** %Hp_Var
  %lncBA = load i64, i64* %ls8aK
  store i64 %lncBA, i64* %R3_Var
  %lncBB = load i64*, i64** %Sp_Var
  %lncBC = getelementptr inbounds i64, i64* %lncBB, i32 2
  %lncBD = bitcast i64* %lncBC to i64*
  %lncBE = load i64, i64* %lncBD, !tbaa !1
  store i64 %lncBE, i64* %R2_Var
  %lncBF = load i64*, i64** %Sp_Var
  %lncBG = getelementptr inbounds i64, i64* %lncBF, i32 3
  %lncBH = ptrtoint i64* %lncBG to i64
  %lncBI = inttoptr i64 %lncBH to i64*
  store i64* %lncBI, i64** %Sp_Var
  %lncBJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncBK = load i64*, i64** %Sp_Var
  %lncBL = load i64*, i64** %Hp_Var
  %lncBM = load i64, i64* %R1_Var
  %lncBN = load i64, i64* %R2_Var
  %lncBO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncBJ( i64* %Base_Arg, i64* %lncBK, i64* %lncBL, i64 %lncBM, i64 %lncBN, i64 %lncBO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctU:
  %lncBQ = ptrtoint i8* @Word_W_con_info to i64
  %lncBP = load i64*, i64** %Hp_Var
  %lncBR = getelementptr inbounds i64, i64* %lncBP, i32 -1
  store i64 %lncBQ, i64* %lncBR, !tbaa !2
  %lncBT = load i64, i64* %ls8aK
  %lncBS = load i64*, i64** %Hp_Var
  %lncBU = getelementptr inbounds i64, i64* %lncBS, i32 0
  store i64 %lncBT, i64* %lncBU, !tbaa !2
  %lncBW = load i64*, i64** %Hp_Var
  %lncBX = ptrtoint i64* %lncBW to i64
  %lncBY = add i64 %lncBX, -7
  store i64 %lncBY, i64* %R1_Var
  %lncBZ = load i64*, i64** %Sp_Var
  %lncC0 = getelementptr inbounds i64, i64* %lncBZ, i32 3
  %lncC1 = ptrtoint i64* %lncC0 to i64
  %lncC2 = inttoptr i64 %lncC1 to i64*
  store i64* %lncC2, i64** %Sp_Var
  %lncC3 = load i64*, i64** %Sp_Var
  %lncC4 = getelementptr inbounds i64, i64* %lncC3, i32 0
  %lncC5 = bitcast i64* %lncC4 to i64*
  %lncC6 = load i64, i64* %lncC5, !tbaa !1
  %lncC7 = inttoptr i64 %lncC6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncC8 = load i64*, i64** %Sp_Var
  %lncC9 = load i64*, i64** %Hp_Var
  %lncCa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncC7( i64* %Base_Arg, i64* %lncC8, i64* %lncC9, i64 %lncCa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cctN:
  %lncCb = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncCb, !tbaa !4
  %lncCc = load i64, i64* %R1_Var
  store i64 %lncCc, i64* %R1_Var
  %lncCd = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncCe = load i64*, i64** %Sp_Var
  %lncCf = load i64*, i64** %Hp_Var
  %lncCg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncCd( i64* %Base_Arg, i64* %lncCe, i64* %lncCf, i64 %lncCg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_split1_closure_struct = type <{i64, i64}>
%ucGP_srtd_struct = type <{i64, i64, i64}>
%ucGQ_srtd_struct = type <{i64, i64, i64}>
@Word_split1_closure$def = internal global %Word_split1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1_info$def to i64), i64 0}>
@Word_split1_closure = alias i8* bitcast (%Word_split1_closure_struct* @Word_split1_closure$def to i8*)
@ucGP_srtd$def = internal constant %ucGP_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 432), i64 36, i64 67645739009}>
@ucGP_srtd = internal alias i8* bitcast (%ucGP_srtd_struct* @ucGP_srtd$def to i8*)
@ucGQ_srtd$def = internal constant %ucGQ_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 432), i64 35, i64 33286000641}>
@ucGQ_srtd = internal alias i8* bitcast (%ucGQ_srtd_struct* @ucGQ_srtd$def to i8*)
@s8c5_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8c5_info$def to i8*)
define internal ghccc void @s8c5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8c5_info$def to i64)),i64 672), i64 4294967297, i64 12884901908}>
{
ccEm:
  %ls8bz = alloca i64, i32 1
  %ls8bI = alloca i64, i32 1
  %ls8by = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8bM = alloca i64, i32 1
  %ls8bP = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncGR = load i64*, i64** %Sp_Var
  %lncGS = getelementptr inbounds i64, i64* %lncGR, i32 -5
  %lncGT = ptrtoint i64* %lncGS to i64
  %lncGU = icmp ult i64 %lncGT, %SpLim_Arg
  br i1 %lncGU, label %ccEn, label %ccF8
ccF8:
  %lncGW = ptrtoint i8* @stg_upd_frame_info to i64
  %lncGV = load i64*, i64** %Sp_Var
  %lncGX = getelementptr inbounds i64, i64* %lncGV, i32 -2
  store i64 %lncGW, i64* %lncGX, !tbaa !1
  %lncGZ = load i64, i64* %R1_Var
  %lncGY = load i64*, i64** %Sp_Var
  %lncH0 = getelementptr inbounds i64, i64* %lncGY, i32 -1
  store i64 %lncGZ, i64* %lncH0, !tbaa !1
  %lncH3 = load i64, i64* %R1_Var
  %lncH4 = add i64 %lncH3, 24
  %lncH5 = inttoptr i64 %lncH4 to i64*
  %lncH6 = load i64, i64* %lncH5, !tbaa !3
  store i64 %lncH6, i64* %ls8bz
  %lncH7 = load i64, i64* %ls8bz
  %lncH8 = load i64, i64* %ls8bz
  %lncH9 = ashr i64 %lncH8, 63
  %lncHa = and i64 %lncH9, 7
  %lncHb = add i64 %lncH7, %lncHa
  %lncHc = ashr i64 %lncHb, 3
  store i64 %lncHc, i64* %ls8bI
  %lncHd = load i64, i64* %ls8bI
  switch i64 %lncHd, label %ccEu [i64 0, label %ccF4]
ccEu:
  %lncHg = load i64, i64* %R1_Var
  %lncHh = add i64 %lncHg, 16
  %lncHi = inttoptr i64 %lncHh to i64*
  %lncHj = load i64, i64* %lncHi, !tbaa !3
  store i64 %lncHj, i64* %ls8by
  %lncHk = load i64, i64* %ls8by
  %lncHl = add i64 %lncHk, 16
  %lncHm = inttoptr i64 %lncHl to i8*
  %lncHn = load i64, i64* %ls8bI
  %lncHo = bitcast i8* @integer_gmp_rscan_nzbyte to i64 (i8*, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lncHp = call ccc i64 (i8*, i64, i64) %lncHo( i8* %lncHm, i64 0, i64 %lncHn ) nounwind
  store i64 %lncHp, i64* %ls8bM
  %lncHq = load i64, i64* %ls8bM
  switch i64 %lncHq, label %ccES [i64 0, label %ccEX]
ccES:
  %lncHs = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccEQ_info$def to i64
  %lncHr = load i64*, i64** %Sp_Var
  %lncHt = getelementptr inbounds i64, i64* %lncHr, i32 -5
  store i64 %lncHs, i64* %lncHt, !tbaa !1
  %lncHu = load i64, i64* %ls8bM
  %lncHv = add i64 %lncHu, 7
  store i64 %lncHv, i64* %ls8bP
  %lncHw = load i64, i64* %ls8bP
  %lncHx = load i64, i64* %ls8bP
  %lncHy = ashr i64 %lncHx, 63
  %lncHz = and i64 %lncHy, 7
  %lncHA = add i64 %lncHw, %lncHz
  %lncHB = ashr i64 %lncHA, 3
  %lncHC = shl i64 %lncHB, 3
  store i64 %lncHC, i64* %R1_Var
  %lncHE = load i64, i64* %ls8by
  %lncHD = load i64*, i64** %Sp_Var
  %lncHF = getelementptr inbounds i64, i64* %lncHD, i32 -4
  store i64 %lncHE, i64* %lncHF, !tbaa !1
  %lncHH = load i64, i64* %ls8bM
  %lncHG = load i64*, i64** %Sp_Var
  %lncHI = getelementptr inbounds i64, i64* %lncHG, i32 -3
  store i64 %lncHH, i64* %lncHI, !tbaa !1
  %lncHJ = load i64*, i64** %Sp_Var
  %lncHK = getelementptr inbounds i64, i64* %lncHJ, i32 -5
  %lncHL = ptrtoint i64* %lncHK to i64
  %lncHM = inttoptr i64 %lncHL to i64*
  store i64* %lncHM, i64** %Sp_Var
  %lncHN = bitcast i8* @stg_newByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncHO = load i64*, i64** %Sp_Var
  %lncHP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncHN( i64* %Base_Arg, i64* %lncHO, i64* %Hp_Arg, i64 %lncHP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEX:
  %lncHR = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_zzeroBigNat_closure to i64
  %lncHQ = load i64*, i64** %Sp_Var
  %lncHS = getelementptr inbounds i64, i64* %lncHQ, i32 -3
  store i64 %lncHR, i64* %lncHS, !tbaa !1
  %lncHT = load i64*, i64** %Sp_Var
  %lncHU = getelementptr inbounds i64, i64* %lncHT, i32 -3
  %lncHV = ptrtoint i64* %lncHU to i64
  %lncHW = inttoptr i64 %lncHV to i64*
  store i64* %lncHW, i64** %Sp_Var
  %lncHX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccER_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncHY = load i64*, i64** %Sp_Var
  %lncHZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncHX( i64* %Base_Arg, i64* %lncHY, i64* %Hp_Arg, i64 %lncHZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccF4:
  %lncI0 = ptrtoint %Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64
  store i64 %lncI0, i64* %R1_Var
  %lncI1 = load i64*, i64** %Sp_Var
  %lncI2 = getelementptr inbounds i64, i64* %lncI1, i32 -2
  %lncI3 = ptrtoint i64* %lncI2 to i64
  %lncI4 = inttoptr i64 %lncI3 to i64*
  store i64* %lncI4, i64** %Sp_Var
  %lncI6 = load i64, i64* %R1_Var
  %lncI7 = inttoptr i64 %lncI6 to i64*
  %lncI8 = load i64, i64* %lncI7, !tbaa !3
  %lncI9 = inttoptr i64 %lncI8 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncIa = load i64*, i64** %Sp_Var
  %lncIb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncI9( i64* %Base_Arg, i64* %lncIa, i64* %Hp_Arg, i64 %lncIb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEn:
  %lncIc = load i64, i64* %R1_Var
  store i64 %lncIc, i64* %R1_Var
  %lncId = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncIe = bitcast i64* %lncId to i64*
  %lncIf = load i64, i64* %lncIe, !tbaa !4
  %lncIg = inttoptr i64 %lncIf to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncIh = load i64*, i64** %Sp_Var
  %lncIi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncIg( i64* %Base_Arg, i64* %lncIh, i64* %Hp_Arg, i64 %lncIi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccEQ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccEQ_info$def to i8*)
define internal ghccc void @ccEQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 130, i64 32}>
{
ccEQ:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncIj = load i64*, i64** %Hp_Var
  %lncIk = getelementptr inbounds i64, i64* %lncIj, i32 2
  %lncIl = ptrtoint i64* %lncIk to i64
  %lncIm = inttoptr i64 %lncIl to i64*
  store i64* %lncIm, i64** %Hp_Var
  %lncIn = load i64*, i64** %Hp_Var
  %lncIo = ptrtoint i64* %lncIn to i64
  %lncIp = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncIq = bitcast i64* %lncIp to i64*
  %lncIr = load i64, i64* %lncIq, !tbaa !4
  %lncIs = icmp ugt i64 %lncIo, %lncIr
  br i1 %lncIs, label %ccEW, label %ccEV
ccEV:
  %lncIu = load i64, i64* %R1_Var
  %lncIv = add i64 %lncIu, 16
  %lncIw = inttoptr i64 %lncIv to i8*
  %lncIx = load i64*, i64** %Sp_Var
  %lncIy = getelementptr inbounds i64, i64* %lncIx, i32 1
  %lncIz = bitcast i64* %lncIy to i64*
  %lncIA = load i64, i64* %lncIz, !tbaa !1
  %lncIB = add i64 %lncIA, 16
  %lncIC = inttoptr i64 %lncIB to i8*
  %lncID = load i64*, i64** %Sp_Var
  %lncIE = getelementptr inbounds i64, i64* %lncID, i32 2
  %lncIF = bitcast i64* %lncIE to i64*
  %lncIG = load i64, i64* %lncIF, !tbaa !1
  %lncIH = bitcast i8* @integer_gmp_mpn_import to void (i8*, i8*, i64, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  call ccc void (i8*, i8*, i64, i64, i64) %lncIH( i8* %lncIw, i8* %lncIC, i64 0, i64 %lncIG, i64 0 ) nounwind
  %lncIJ = ptrtoint i8* @integerzmgmp_GHCziIntegerziType_BNzh_con_info to i64
  %lncII = load i64*, i64** %Hp_Var
  %lncIK = getelementptr inbounds i64, i64* %lncII, i32 -1
  store i64 %lncIJ, i64* %lncIK, !tbaa !2
  %lncIM = load i64, i64* %R1_Var
  %lncIL = load i64*, i64** %Hp_Var
  %lncIN = getelementptr inbounds i64, i64* %lncIL, i32 0
  store i64 %lncIM, i64* %lncIN, !tbaa !2
  %lncIQ = load i64*, i64** %Hp_Var
  %lncIR = ptrtoint i64* %lncIQ to i64
  %lncIS = add i64 %lncIR, -7
  %lncIO = load i64*, i64** %Sp_Var
  %lncIT = getelementptr inbounds i64, i64* %lncIO, i32 2
  store i64 %lncIS, i64* %lncIT, !tbaa !1
  %lncIU = load i64*, i64** %Sp_Var
  %lncIV = getelementptr inbounds i64, i64* %lncIU, i32 2
  %lncIW = ptrtoint i64* %lncIV to i64
  %lncIX = inttoptr i64 %lncIW to i64*
  store i64* %lncIX, i64** %Sp_Var
  %lncIY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccER_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncIZ = load i64*, i64** %Sp_Var
  %lncJ0 = load i64*, i64** %Hp_Var
  %lncJ1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncIY( i64* %Base_Arg, i64* %lncIZ, i64* %lncJ0, i64 %lncJ1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccEW:
  %lncJ2 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lncJ2, !tbaa !4
  %lncJ3 = load i64, i64* %R1_Var
  store i64 %lncJ3, i64* %R1_Var
  %lncJ4 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJ5 = load i64*, i64** %Sp_Var
  %lncJ6 = load i64*, i64** %Hp_Var
  %lncJ7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJ4( i64* %Base_Arg, i64* %lncJ5, i64* %lncJ6, i64 %lncJ7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccER_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccER_entry$def to i8*)
define internal ghccc void @ccER_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ccER:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncJ8 = load i64*, i64** %Sp_Var
  %lncJ9 = getelementptr inbounds i64, i64* %lncJ8, i32 0
  %lncJa = bitcast i64* %lncJ9 to i64*
  %lncJb = load i64, i64* %lncJa, !tbaa !1
  store i64 %lncJb, i64* %R2_Var
  %lncJc = load i64*, i64** %Sp_Var
  %lncJd = getelementptr inbounds i64, i64* %lncJc, i32 1
  %lncJe = ptrtoint i64* %lncJd to i64
  %lncJf = inttoptr i64 %lncJe to i64*
  store i64* %lncJf, i64** %Sp_Var
  %lncJg = bitcast i8* @integerzmgmp_GHCziIntegerziType_bigNatToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJh = load i64*, i64** %Sp_Var
  %lncJi = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJg( i64* %Base_Arg, i64* %lncJh, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncJi, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8c8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8c8_info$def to i8*)
define internal ghccc void @s8c8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8c8_info$def to i64)),i64 696), i64 4294967296, i64 4294967314}>
{
ccFq:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncJj = load i64*, i64** %Sp_Var
  %lncJk = getelementptr inbounds i64, i64* %lncJj, i32 -2
  %lncJl = ptrtoint i64* %lncJk to i64
  %lncJm = icmp ult i64 %lncJl, %SpLim_Arg
  br i1 %lncJm, label %ccFr, label %ccFs
ccFs:
  %lncJo = ptrtoint i8* @stg_upd_frame_info to i64
  %lncJn = load i64*, i64** %Sp_Var
  %lncJp = getelementptr inbounds i64, i64* %lncJn, i32 -2
  store i64 %lncJo, i64* %lncJp, !tbaa !1
  %lncJr = load i64, i64* %R1_Var
  %lncJq = load i64*, i64** %Sp_Var
  %lncJs = getelementptr inbounds i64, i64* %lncJq, i32 -1
  store i64 %lncJr, i64* %lncJs, !tbaa !1
  %lncJv = load i64, i64* %R1_Var
  %lncJw = add i64 %lncJv, 16
  %lncJx = inttoptr i64 %lncJw to i64*
  %lncJy = load i64, i64* %lncJx, !tbaa !3
  store i64 %lncJy, i64* %R2_Var
  %lncJz = load i64*, i64** %Sp_Var
  %lncJA = getelementptr inbounds i64, i64* %lncJz, i32 -2
  %lncJB = ptrtoint i64* %lncJA to i64
  %lncJC = inttoptr i64 %lncJB to i64*
  store i64* %lncJC, i64** %Sp_Var
  %lncJD = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJE = load i64*, i64** %Sp_Var
  %lncJF = load i64, i64* %R1_Var
  %lncJG = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJD( i64* %Base_Arg, i64* %lncJE, i64* %Hp_Arg, i64 %lncJF, i64 %lncJG, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFr:
  %lncJH = load i64, i64* %R1_Var
  store i64 %lncJH, i64* %R1_Var
  %lncJI = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncJJ = bitcast i64* %lncJI to i64*
  %lncJK = load i64, i64* %lncJJ, !tbaa !4
  %lncJL = inttoptr i64 %lncJK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncJM = load i64*, i64** %Sp_Var
  %lncJN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncJL( i64* %Base_Arg, i64* %lncJM, i64* %Hp_Arg, i64 %lncJN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8cj_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8cj_info$def to i8*)
define internal ghccc void @s8cj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8cj_info$def to i64)),i64 704), i64 12884901889, i64 4294967312}>
{
ccFJ:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncJO = load i64*, i64** %Sp_Var
  %lncJP = getelementptr inbounds i64, i64* %lncJO, i32 -7
  %lncJQ = ptrtoint i64* %lncJP to i64
  %lncJR = icmp ult i64 %lncJQ, %SpLim_Arg
  br i1 %lncJR, label %ccFN, label %ccFO
ccFO:
  %lncJT = ptrtoint i8* @stg_upd_frame_info to i64
  %lncJS = load i64*, i64** %Sp_Var
  %lncJU = getelementptr inbounds i64, i64* %lncJS, i32 -2
  store i64 %lncJT, i64* %lncJU, !tbaa !1
  %lncJW = load i64, i64* %R1_Var
  %lncJV = load i64*, i64** %Sp_Var
  %lncJX = getelementptr inbounds i64, i64* %lncJV, i32 -1
  store i64 %lncJW, i64* %lncJX, !tbaa !1
  %lncJZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFE_info$def to i64
  %lncJY = load i64*, i64** %Sp_Var
  %lncK0 = getelementptr inbounds i64, i64* %lncJY, i32 -7
  store i64 %lncJZ, i64* %lncK0, !tbaa !1
  %lncK4 = load i64, i64* %R1_Var
  %lncK5 = add i64 %lncK4, 24
  %lncK6 = inttoptr i64 %lncK5 to i64*
  %lncK7 = load i64, i64* %lncK6, !tbaa !3
  %lncK1 = load i64*, i64** %Sp_Var
  %lncK8 = getelementptr inbounds i64, i64* %lncK1, i32 -6
  store i64 %lncK7, i64* %lncK8, !tbaa !1
  %lncKc = load i64, i64* %R1_Var
  %lncKd = add i64 %lncKc, 16
  %lncKe = inttoptr i64 %lncKd to i64*
  %lncKf = load i64, i64* %lncKe, !tbaa !3
  %lncK9 = load i64*, i64** %Sp_Var
  %lncKg = getelementptr inbounds i64, i64* %lncK9, i32 -5
  store i64 %lncKf, i64* %lncKg, !tbaa !1
  %lncKk = load i64, i64* %R1_Var
  %lncKl = add i64 %lncKk, 32
  %lncKm = inttoptr i64 %lncKl to i64*
  %lncKn = load i64, i64* %lncKm, !tbaa !3
  %lncKh = load i64*, i64** %Sp_Var
  %lncKo = getelementptr inbounds i64, i64* %lncKh, i32 -4
  store i64 %lncKn, i64* %lncKo, !tbaa !1
  %lncKs = load i64, i64* %R1_Var
  %lncKt = add i64 %lncKs, 40
  %lncKu = inttoptr i64 %lncKt to i64*
  %lncKv = load i64, i64* %lncKu, !tbaa !3
  %lncKp = load i64*, i64** %Sp_Var
  %lncKw = getelementptr inbounds i64, i64* %lncKp, i32 -3
  store i64 %lncKv, i64* %lncKw, !tbaa !1
  %lncKx = load i64*, i64** %Sp_Var
  %lncKy = getelementptr inbounds i64, i64* %lncKx, i32 -7
  %lncKz = ptrtoint i64* %lncKy to i64
  %lncKA = inttoptr i64 %lncKz to i64*
  store i64* %lncKA, i64** %Sp_Var
  %lncKB = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncKC = load i64*, i64** %Sp_Var
  %lncKD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncKB( i64* %Base_Arg, i64* %lncKC, i64* %Hp_Arg, i64 %lncKD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFN:
  %lncKE = load i64, i64* %R1_Var
  store i64 %lncKE, i64* %R1_Var
  %lncKF = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lncKG = bitcast i64* %lncKF to i64*
  %lncKH = load i64, i64* %lncKG, !tbaa !4
  %lncKI = inttoptr i64 %lncKH to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncKJ = load i64*, i64** %Sp_Var
  %lncKK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncKI( i64* %Base_Arg, i64* %lncKJ, i64* %Hp_Arg, i64 %lncKK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFE_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFE_info$def to i8*)
define internal ghccc void @ccFE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFE_info$def to i64)),i64 704), i64 836, i64 4294967328}>
{
ccFE:
  %ls8ce = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncKL = load i64*, i64** %Sp_Var
  %lncKM = getelementptr inbounds i64, i64* %lncKL, i32 4
  %lncKN = bitcast i64* %lncKM to i64*
  %lncKO = load i64, i64* %lncKN, !tbaa !1
  store i64 %lncKO, i64* %ls8ce
  %lncKQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFM_info$def to i64
  %lncKP = load i64*, i64** %Sp_Var
  %lncKR = getelementptr inbounds i64, i64* %lncKP, i32 4
  store i64 %lncKQ, i64* %lncKR, !tbaa !1
  %lncKS = load i64, i64* %ls8ce
  store i64 %lncKS, i64* %R5_Var
  %lncKT = load i64*, i64** %Sp_Var
  %lncKU = getelementptr inbounds i64, i64* %lncKT, i32 3
  %lncKV = bitcast i64* %lncKU to i64*
  %lncKW = load i64, i64* %lncKV, !tbaa !1
  store i64 %lncKW, i64* %R4_Var
  %lncKX = load i64*, i64** %Sp_Var
  %lncKY = getelementptr inbounds i64, i64* %lncKX, i32 2
  %lncKZ = bitcast i64* %lncKY to i64*
  %lncL0 = load i64, i64* %lncKZ, !tbaa !1
  store i64 %lncL0, i64* %R3_Var
  %lncL1 = load i64*, i64** %Sp_Var
  %lncL2 = getelementptr inbounds i64, i64* %lncL1, i32 1
  %lncL3 = bitcast i64* %lncL2 to i64*
  %lncL4 = load i64, i64* %lncL3, !tbaa !1
  store i64 %lncL4, i64* %R2_Var
  %lncL5 = load i64*, i64** %Sp_Var
  %lncL6 = getelementptr inbounds i64, i64* %lncL5, i32 4
  %lncL7 = ptrtoint i64* %lncL6 to i64
  %lncL8 = inttoptr i64 %lncL7 to i64*
  store i64* %lncL8, i64** %Sp_Var
  %lncL9 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwbs2i_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLa = load i64*, i64** %Sp_Var
  %lncLb = load i64, i64* %R2_Var
  %lncLc = load i64, i64* %R3_Var
  %lncLd = load i64, i64* %R4_Var
  %lncLe = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncL9( i64* %Base_Arg, i64* %lncLa, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncLb, i64 %lncLc, i64 %lncLd, i64 %lncLe, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFM_info$def to i8*)
define internal ghccc void @ccFM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
ccFM:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncLf = load i64, i64* %R1_Var
  %lncLg = and i64 %lncLf, -8
  store i64 %lncLg, i64* %R1_Var
  %lncLh = load i64*, i64** %Sp_Var
  %lncLi = getelementptr inbounds i64, i64* %lncLh, i32 1
  %lncLj = ptrtoint i64* %lncLi to i64
  %lncLk = inttoptr i64 %lncLj to i64*
  store i64* %lncLk, i64** %Sp_Var
  %lncLm = load i64, i64* %R1_Var
  %lncLn = inttoptr i64 %lncLm to i64*
  %lncLo = load i64, i64* %lncLn, !tbaa !3
  %lncLp = inttoptr i64 %lncLo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLq = load i64*, i64** %Sp_Var
  %lncLr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLp( i64* %Base_Arg, i64* %lncLq, i64* %Hp_Arg, i64 %lncLr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_split1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1_info$def to i8*)
define ghccc void @Word_split1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ucGP_srtd_struct* @ucGP_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1_info$def to i64)),i64 0), i64 12884901911, i64 0, i64 -4294967281}>
{
ccFW:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncLs = load i64*, i64** %Sp_Var
  %lncLt = getelementptr inbounds i64, i64* %lncLs, i32 -5
  %lncLu = ptrtoint i64* %lncLt to i64
  %lncLv = icmp ult i64 %lncLu, %SpLim_Arg
  br i1 %lncLv, label %ccFX, label %ccFY
ccFY:
  %lncLx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDF_info$def to i64
  %lncLw = load i64*, i64** %Sp_Var
  %lncLy = getelementptr inbounds i64, i64* %lncLw, i32 -3
  store i64 %lncLx, i64* %lncLy, !tbaa !1
  %lncLz = load i64, i64* %R4_Var
  store i64 %lncLz, i64* %R1_Var
  %lncLB = load i64, i64* %R2_Var
  %lncLA = load i64*, i64** %Sp_Var
  %lncLC = getelementptr inbounds i64, i64* %lncLA, i32 -2
  store i64 %lncLB, i64* %lncLC, !tbaa !1
  %lncLE = load i64, i64* %R3_Var
  %lncLD = load i64*, i64** %Sp_Var
  %lncLF = getelementptr inbounds i64, i64* %lncLD, i32 -1
  store i64 %lncLE, i64* %lncLF, !tbaa !1
  %lncLG = load i64*, i64** %Sp_Var
  %lncLH = getelementptr inbounds i64, i64* %lncLG, i32 -3
  %lncLI = ptrtoint i64* %lncLH to i64
  %lncLJ = inttoptr i64 %lncLI to i64*
  store i64* %lncLJ, i64** %Sp_Var
  %lncLK = load i64, i64* %R1_Var
  %lncLL = and i64 %lncLK, 7
  %lncLM = icmp ne i64 %lncLL, 0
  br i1 %lncLM, label %ucGN, label %ccDG
ccDG:
  %lncLO = load i64, i64* %R1_Var
  %lncLP = inttoptr i64 %lncLO to i64*
  %lncLQ = load i64, i64* %lncLP, !tbaa !3
  %lncLR = inttoptr i64 %lncLQ to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLS = load i64*, i64** %Sp_Var
  %lncLT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLR( i64* %Base_Arg, i64* %lncLS, i64* %Hp_Arg, i64 %lncLT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucGN:
  %lncLU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDF_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncLV = load i64*, i64** %Sp_Var
  %lncLW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncLU( i64* %Base_Arg, i64* %lncLV, i64* %Hp_Arg, i64 %lncLW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFX:
  %lncLX = load i64, i64* %R4_Var
  store i64 %lncLX, i64* %R4_Var
  %lncLY = load i64, i64* %R3_Var
  store i64 %lncLY, i64* %R3_Var
  %lncLZ = load i64, i64* %R2_Var
  store i64 %lncLZ, i64* %R2_Var
  %lncM0 = ptrtoint %Word_split1_closure_struct* @Word_split1_closure$def to i64
  store i64 %lncM0, i64* %R1_Var
  %lncM1 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncM2 = bitcast i64* %lncM1 to i64*
  %lncM3 = load i64, i64* %lncM2, !tbaa !4
  %lncM4 = inttoptr i64 %lncM3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncM5 = load i64*, i64** %Sp_Var
  %lncM6 = load i64, i64* %R1_Var
  %lncM7 = load i64, i64* %R2_Var
  %lncM8 = load i64, i64* %R3_Var
  %lncM9 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncM4( i64* %Base_Arg, i64* %lncM5, i64* %Hp_Arg, i64 %lncM6, i64 %lncM7, i64 %lncM8, i64 %lncM9, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccDF_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDF_info$def to i8*)
define internal ghccc void @ccDF_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ucGQ_srtd_struct* @ucGQ_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDF_info$def to i64)),i64 0), i64 2, i64 -4294967264}>
{
ccDF:
  %ls8br = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8c7 = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncMa = load i64, i64* %R1_Var
  %lncMb = and i64 %lncMa, 7
  switch i64 %lncMb, label %ccFS [i64 1, label %ccFS
i64 2, label %ccFT
i64 3, label %ccFU]
ccFS:
  %lncMd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDK_info$def to i64
  %lncMc = load i64*, i64** %Sp_Var
  %lncMe = getelementptr inbounds i64, i64* %lncMc, i32 0
  store i64 %lncMd, i64* %lncMe, !tbaa !1
  %lncMf = load i64, i64* %R1_Var
  store i64 %lncMf, i64* %ls8br
  %lncMi = load i64, i64* %R1_Var
  %lncMj = add i64 %lncMi, 7
  %lncMk = inttoptr i64 %lncMj to i64*
  %lncMl = load i64, i64* %lncMk, !tbaa !3
  store i64 %lncMl, i64* %R1_Var
  %lncMn = load i64, i64* %ls8br
  %lncMm = load i64*, i64** %Sp_Var
  %lncMo = getelementptr inbounds i64, i64* %lncMm, i32 2
  store i64 %lncMn, i64* %lncMo, !tbaa !1
  %lncMp = load i64, i64* %R1_Var
  %lncMq = and i64 %lncMp, 7
  %lncMr = icmp ne i64 %lncMq, 0
  br i1 %lncMr, label %ucGK, label %ccDL
ccDL:
  %lncMt = load i64, i64* %R1_Var
  %lncMu = inttoptr i64 %lncMt to i64*
  %lncMv = load i64, i64* %lncMu, !tbaa !3
  %lncMw = inttoptr i64 %lncMv to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncMx = load i64*, i64** %Sp_Var
  %lncMy = load i64*, i64** %Hp_Var
  %lncMz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncMw( i64* %Base_Arg, i64* %lncMx, i64* %lncMy, i64 %lncMz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucGK:
  %lncMA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncMB = load i64*, i64** %Sp_Var
  %lncMC = load i64*, i64** %Hp_Var
  %lncMD = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncMA( i64* %Base_Arg, i64* %lncMB, i64* %lncMC, i64 %lncMD, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFT:
  %lncME = load i64*, i64** %Hp_Var
  %lncMF = getelementptr inbounds i64, i64* %lncME, i32 3
  %lncMG = ptrtoint i64* %lncMF to i64
  %lncMH = inttoptr i64 %lncMG to i64*
  store i64* %lncMH, i64** %Hp_Var
  %lncMI = load i64*, i64** %Hp_Var
  %lncMJ = ptrtoint i64* %lncMI to i64
  %lncMK = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncML = bitcast i64* %lncMK to i64*
  %lncMM = load i64, i64* %lncML, !tbaa !4
  %lncMN = icmp ugt i64 %lncMJ, %lncMM
  br i1 %lncMN, label %ccGC, label %ccGB
ccGB:
  %lncMQ = load i64, i64* %R1_Var
  %lncMR = add i64 %lncMQ, 6
  %lncMS = inttoptr i64 %lncMR to i64*
  %lncMT = load i64, i64* %lncMS, !tbaa !3
  store i64 %lncMT, i64* %ls8c7
  %lncMV = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8c8_info$def to i64
  %lncMU = load i64*, i64** %Hp_Var
  %lncMW = getelementptr inbounds i64, i64* %lncMU, i32 -2
  store i64 %lncMV, i64* %lncMW, !tbaa !2
  %lncMY = load i64, i64* %ls8c7
  %lncMX = load i64*, i64** %Hp_Var
  %lncMZ = getelementptr inbounds i64, i64* %lncMX, i32 0
  store i64 %lncMY, i64* %lncMZ, !tbaa !2
  %lncN0 = load i64*, i64** %Sp_Var
  %lncN1 = getelementptr inbounds i64, i64* %lncN0, i32 1
  %lncN2 = bitcast i64* %lncN1 to i64*
  %lncN3 = load i64, i64* %lncN2, !tbaa !1
  store i64 %lncN3, i64* %R4_Var
  %lncN4 = load i64*, i64** %Sp_Var
  %lncN5 = getelementptr inbounds i64, i64* %lncN4, i32 2
  %lncN6 = bitcast i64* %lncN5 to i64*
  %lncN7 = load i64, i64* %lncN6, !tbaa !1
  store i64 %lncN7, i64* %R3_Var
  %lncN8 = load i64*, i64** %Hp_Var
  %lncN9 = getelementptr inbounds i64, i64* %lncN8, i32 -2
  %lncNa = ptrtoint i64* %lncN9 to i64
  store i64 %lncNa, i64* %R2_Var
  %lncNb = load i64*, i64** %Sp_Var
  %lncNc = getelementptr inbounds i64, i64* %lncNb, i32 3
  %lncNd = ptrtoint i64* %lncNc to i64
  %lncNe = inttoptr i64 %lncNd to i64*
  store i64* %lncNe, i64** %Sp_Var
  %lncNf = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1zuzdssplit1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNg = load i64*, i64** %Sp_Var
  %lncNh = load i64*, i64** %Hp_Var
  %lncNi = load i64, i64* %R1_Var
  %lncNj = load i64, i64* %R2_Var
  %lncNk = load i64, i64* %R3_Var
  %lncNl = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNf( i64* %Base_Arg, i64* %lncNg, i64* %lncNh, i64 %lncNi, i64 %lncNj, i64 %lncNk, i64 %lncNl, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGC:
  %lncNm = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lncNm, !tbaa !4
  %lncNn = load i64, i64* %R1_Var
  store i64 %lncNn, i64* %R1_Var
  %lncNo = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNp = load i64*, i64** %Sp_Var
  %lncNq = load i64*, i64** %Hp_Var
  %lncNr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNo( i64* %Base_Arg, i64* %lncNp, i64* %lncNq, i64 %lncNr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccFU:
  %lncNt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFv_info$def to i64
  %lncNs = load i64*, i64** %Sp_Var
  %lncNu = getelementptr inbounds i64, i64* %lncNs, i32 1
  store i64 %lncNt, i64* %lncNu, !tbaa !1
  %lncNx = load i64, i64* %R1_Var
  %lncNy = add i64 %lncNx, 5
  %lncNz = inttoptr i64 %lncNy to i64*
  %lncNA = load i64, i64* %lncNz, !tbaa !3
  store i64 %lncNA, i64* %R1_Var
  %lncNB = load i64*, i64** %Sp_Var
  %lncNC = getelementptr inbounds i64, i64* %lncNB, i32 1
  %lncND = ptrtoint i64* %lncNC to i64
  %lncNE = inttoptr i64 %lncND to i64*
  store i64* %lncNE, i64** %Sp_Var
  %lncNF = load i64, i64* %R1_Var
  %lncNG = and i64 %lncNF, 7
  %lncNH = icmp ne i64 %lncNG, 0
  br i1 %lncNH, label %ucGL, label %ccFw
ccFw:
  %lncNJ = load i64, i64* %R1_Var
  %lncNK = inttoptr i64 %lncNJ to i64*
  %lncNL = load i64, i64* %lncNK, !tbaa !3
  %lncNM = inttoptr i64 %lncNL to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNN = load i64*, i64** %Sp_Var
  %lncNO = load i64*, i64** %Hp_Var
  %lncNP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNM( i64* %Base_Arg, i64* %lncNN, i64* %lncNO, i64 %lncNP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucGL:
  %lncNQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFv_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncNR = load i64*, i64** %Sp_Var
  %lncNS = load i64*, i64** %Hp_Var
  %lncNT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncNQ( i64* %Base_Arg, i64* %lncNR, i64* %lncNS, i64 %lncNT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccFv_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFv_info$def to i8*)
define internal ghccc void @ccFv_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccFv_info$def to i64)),i64 688), i64 1, i64 21474836512}>
{
ccFv:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8cc = alloca i64, i32 1
  %ls8cb = alloca i64, i32 1
  %ls8cd = alloca i64, i32 1
  %ls8ce = alloca i64, i32 1
  %ls8bp = alloca i64, i32 1
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncNU = load i64*, i64** %Hp_Var
  %lncNV = getelementptr inbounds i64, i64* %lncNU, i32 6
  %lncNW = ptrtoint i64* %lncNV to i64
  %lncNX = inttoptr i64 %lncNW to i64*
  store i64* %lncNX, i64** %Hp_Var
  %lncNY = load i64*, i64** %Hp_Var
  %lncNZ = ptrtoint i64* %lncNY to i64
  %lncO0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncO1 = bitcast i64* %lncO0 to i64*
  %lncO2 = load i64, i64* %lncO1, !tbaa !4
  %lncO3 = icmp ugt i64 %lncNZ, %lncO2
  br i1 %lncO3, label %ccGG, label %ccGF
ccGF:
  %lncO6 = load i64, i64* %R1_Var
  %lncO7 = add i64 %lncO6, 7
  %lncO8 = inttoptr i64 %lncO7 to i64*
  %lncO9 = load i64, i64* %lncO8, !tbaa !3
  store i64 %lncO9, i64* %ls8cc
  %lncOc = load i64, i64* %R1_Var
  %lncOd = add i64 %lncOc, 15
  %lncOe = inttoptr i64 %lncOd to i64*
  %lncOf = load i64, i64* %lncOe, !tbaa !3
  store i64 %lncOf, i64* %ls8cb
  %lncOi = load i64, i64* %R1_Var
  %lncOj = add i64 %lncOi, 23
  %lncOk = inttoptr i64 %lncOj to i64*
  %lncOl = load i64, i64* %lncOk, !tbaa !3
  store i64 %lncOl, i64* %ls8cd
  %lncOo = load i64, i64* %R1_Var
  %lncOp = add i64 %lncOo, 31
  %lncOq = inttoptr i64 %lncOp to i64*
  %lncOr = load i64, i64* %lncOq, !tbaa !3
  store i64 %lncOr, i64* %ls8ce
  %lncOt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8cj_info$def to i64
  %lncOs = load i64*, i64** %Hp_Var
  %lncOu = getelementptr inbounds i64, i64* %lncOs, i32 -5
  store i64 %lncOt, i64* %lncOu, !tbaa !2
  %lncOw = load i64, i64* %ls8cc
  %lncOv = load i64*, i64** %Hp_Var
  %lncOx = getelementptr inbounds i64, i64* %lncOv, i32 -3
  store i64 %lncOw, i64* %lncOx, !tbaa !2
  %lncOz = load i64, i64* %ls8cb
  %lncOy = load i64*, i64** %Hp_Var
  %lncOA = getelementptr inbounds i64, i64* %lncOy, i32 -2
  store i64 %lncOz, i64* %lncOA, !tbaa !2
  %lncOC = load i64, i64* %ls8cd
  %lncOB = load i64*, i64** %Hp_Var
  %lncOD = getelementptr inbounds i64, i64* %lncOB, i32 -1
  store i64 %lncOC, i64* %lncOD, !tbaa !2
  %lncOF = load i64, i64* %ls8ce
  %lncOE = load i64*, i64** %Hp_Var
  %lncOG = getelementptr inbounds i64, i64* %lncOE, i32 0
  store i64 %lncOF, i64* %lncOG, !tbaa !2
  %lncOH = load i64*, i64** %Sp_Var
  %lncOI = getelementptr inbounds i64, i64* %lncOH, i32 1
  %lncOJ = bitcast i64* %lncOI to i64*
  %lncOK = load i64, i64* %lncOJ, !tbaa !1
  store i64 %lncOK, i64* %ls8bp
  %lncOL = load i64, i64* %ls8bp
  store i64 %lncOL, i64* %R4_Var
  %lncOM = load i64, i64* %ls8bp
  store i64 %lncOM, i64* %R3_Var
  %lncON = load i64*, i64** %Hp_Var
  %lncOO = getelementptr inbounds i64, i64* %lncON, i32 -5
  %lncOP = ptrtoint i64* %lncOO to i64
  store i64 %lncOP, i64* %R2_Var
  %lncOQ = load i64*, i64** %Sp_Var
  %lncOR = getelementptr inbounds i64, i64* %lncOQ, i32 2
  %lncOS = ptrtoint i64* %lncOR to i64
  %lncOT = inttoptr i64 %lncOS to i64*
  store i64* %lncOT, i64** %Sp_Var
  %lncOU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_split1zuzdssplit1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncOV = load i64*, i64** %Sp_Var
  %lncOW = load i64*, i64** %Hp_Var
  %lncOX = load i64, i64* %R1_Var
  %lncOY = load i64, i64* %R2_Var
  %lncOZ = load i64, i64* %R3_Var
  %lncP0 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncOU( i64* %Base_Arg, i64* %lncOV, i64* %lncOW, i64 %lncOX, i64 %lncOY, i64 %lncOZ, i64 %lncP0, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGG:
  %lncP1 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lncP1, !tbaa !4
  %lncP2 = load i64, i64* %R1_Var
  store i64 %lncP2, i64* %R1_Var
  %lncP3 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncP4 = load i64*, i64** %Sp_Var
  %lncP5 = load i64*, i64** %Hp_Var
  %lncP6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncP3( i64* %Base_Arg, i64* %lncP4, i64* %lncP5, i64 %lncP6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccDK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDK_info$def to i8*)
define internal ghccc void @ccDK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDK_info$def to i64)),i64 432), i64 2, i64 -4611668421946376160}>
{
ccDK:
  %ls8bo = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncP7 = load i64*, i64** %Sp_Var
  %lncP8 = getelementptr inbounds i64, i64* %lncP7, i32 1
  %lncP9 = bitcast i64* %lncP8 to i64*
  %lncPa = load i64, i64* %lncP9, !tbaa !1
  store i64 %lncPa, i64* %ls8bo
  %lncPb = load i64, i64* %R1_Var
  %lncPc = and i64 %lncPb, 7
  switch i64 %lncPc, label %ccGh [i64 1, label %ccGh
i64 2, label %ccGj
i64 3, label %ccGz]
ccGh:
  %lncPf = load i64, i64* %R1_Var
  %lncPg = add i64 %lncPf, 7
  %lncPh = inttoptr i64 %lncPg to i64*
  %lncPi = load i64, i64* %lncPh, !tbaa !3
  switch i64 %lncPi, label %ccG6 [i64 0, label %ccGf]
ccG6:
  %lncPk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccG4_info$def to i64
  %lncPj = load i64*, i64** %Sp_Var
  %lncPl = getelementptr inbounds i64, i64* %lncPj, i32 -1
  store i64 %lncPk, i64* %lncPl, !tbaa !1
  %lncPm = ptrtoint %Word_wrap1_closure_struct* @Word_wrap1_closure$def to i64
  %lncPn = add i64 %lncPm, 1
  store i64 %lncPn, i64* %R3_Var
  %lncPo = load i64, i64* %ls8bo
  store i64 %lncPo, i64* %R2_Var
  %lncPq = load i64, i64* %R1_Var
  %lncPp = load i64*, i64** %Sp_Var
  %lncPr = getelementptr inbounds i64, i64* %lncPp, i32 0
  store i64 %lncPq, i64* %lncPr, !tbaa !1
  %lncPs = load i64*, i64** %Sp_Var
  %lncPt = getelementptr inbounds i64, i64* %lncPs, i32 -1
  %lncPu = ptrtoint i64* %lncPt to i64
  %lncPv = inttoptr i64 %lncPu to i64*
  store i64* %lncPv, i64** %Sp_Var
  %lncPw = bitcast i8* @integerzmgmp_GHCziIntegerziType_geIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncPx = load i64*, i64** %Sp_Var
  %lncPy = load i64, i64* %R1_Var
  %lncPz = load i64, i64* %R2_Var
  %lncPA = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncPw( i64* %Base_Arg, i64* %lncPx, i64* %Hp_Arg, i64 %lncPy, i64 %lncPz, i64 %lncPA, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGf:
  %lncPB = ptrtoint %Word_split5_closure_struct* @Word_split5_closure$def to i64
  %lncPC = add i64 %lncPB, 1
  store i64 %lncPC, i64* %R1_Var
  %lncPD = load i64*, i64** %Sp_Var
  %lncPE = getelementptr inbounds i64, i64* %lncPD, i32 3
  %lncPF = ptrtoint i64* %lncPE to i64
  %lncPG = inttoptr i64 %lncPF to i64*
  store i64* %lncPG, i64** %Sp_Var
  %lncPH = load i64*, i64** %Sp_Var
  %lncPI = getelementptr inbounds i64, i64* %lncPH, i32 0
  %lncPJ = bitcast i64* %lncPI to i64*
  %lncPK = load i64, i64* %lncPJ, !tbaa !1
  %lncPL = inttoptr i64 %lncPK to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncPM = load i64*, i64** %Sp_Var
  %lncPN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncPL( i64* %Base_Arg, i64* %lncPM, i64* %Hp_Arg, i64 %lncPN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGj:
  %lncPP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDQ_info$def to i64
  %lncPO = load i64*, i64** %Sp_Var
  %lncPQ = getelementptr inbounds i64, i64* %lncPO, i32 -2
  store i64 %lncPP, i64* %lncPQ, !tbaa !1
  %lncPR = load i64, i64* %ls8bo
  store i64 %lncPR, i64* %R2_Var
  %lncPV = load i64, i64* %R1_Var
  %lncPW = add i64 %lncPV, 6
  %lncPX = inttoptr i64 %lncPW to i64*
  %lncPY = load i64, i64* %lncPX, !tbaa !3
  %lncPS = load i64*, i64** %Sp_Var
  %lncPZ = getelementptr inbounds i64, i64* %lncPS, i32 -1
  store i64 %lncPY, i64* %lncPZ, !tbaa !1
  %lncQ1 = load i64, i64* %R1_Var
  %lncQ0 = load i64*, i64** %Sp_Var
  %lncQ2 = getelementptr inbounds i64, i64* %lncQ0, i32 0
  store i64 %lncQ1, i64* %lncQ2, !tbaa !1
  %lncQ3 = load i64*, i64** %Sp_Var
  %lncQ4 = getelementptr inbounds i64, i64* %lncQ3, i32 -2
  %lncQ5 = ptrtoint i64* %lncQ4 to i64
  %lncQ6 = inttoptr i64 %lncQ5 to i64*
  store i64* %lncQ6, i64** %Sp_Var
  %lncQ7 = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQ8 = load i64*, i64** %Sp_Var
  %lncQ9 = load i64, i64* %R1_Var
  %lncQa = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQ7( i64* %Base_Arg, i64* %lncQ8, i64* %Hp_Arg, i64 %lncQ9, i64 %lncQa, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGz:
  %lncQb = load i64, i64* %R1_Var
  store i64 %lncQb, i64* %R3_Var
  %lncQc = load i64, i64* %ls8bo
  store i64 %lncQc, i64* %R2_Var
  %lncQd = load i64*, i64** %Sp_Var
  %lncQe = getelementptr inbounds i64, i64* %lncQd, i32 3
  %lncQf = ptrtoint i64* %lncQe to i64
  %lncQg = inttoptr i64 %lncQf to i64*
  store i64* %lncQg, i64** %Sp_Var
  %lncQh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQi = load i64*, i64** %Sp_Var
  %lncQj = load i64, i64* %R1_Var
  %lncQk = load i64, i64* %R2_Var
  %lncQl = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQh( i64* %Base_Arg, i64* %lncQi, i64* %Hp_Arg, i64 %lncQj, i64 %lncQk, i64 %lncQl, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccDQ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDQ_info$def to i8*)
define internal ghccc void @ccDQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccDQ_info$def to i64)),i64 432), i64 4, i64 -4611668421946376160}>
{
ccDQ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncQm = load i64*, i64** %Sp_Var
  %lncQn = getelementptr inbounds i64, i64* %lncQm, i32 1
  %lncQo = bitcast i64* %lncQn to i64*
  %lncQp = load i64, i64* %lncQo, !tbaa !1
  %lncQq = add i64 %lncQp, 8
  %lncQr = inttoptr i64 %lncQq to i64*
  %lncQs = load i64, i64* %lncQr, !tbaa !5
  %lncQt = shl i64 %lncQs, 3
  %lncQu = icmp sge i64 %R1_Arg, %lncQt
  %lncQv = zext i1 %lncQu to i64
  switch i64 %lncQv, label %ccGm [i64 0, label %ccGm
i64 1, label %ucGI]
ccGm:
  %lncQx = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccE5_info$def to i64
  %lncQw = load i64*, i64** %Sp_Var
  %lncQy = getelementptr inbounds i64, i64* %lncQw, i32 0
  store i64 %lncQx, i64* %lncQy, !tbaa !1
  %lncQz = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lncQA = add i64 %lncQz, 1
  store i64 %lncQA, i64* %R3_Var
  %lncQB = load i64*, i64** %Sp_Var
  %lncQC = getelementptr inbounds i64, i64* %lncQB, i32 3
  %lncQD = bitcast i64* %lncQC to i64*
  %lncQE = load i64, i64* %lncQD, !tbaa !1
  store i64 %lncQE, i64* %R2_Var
  %lncQF = load i64*, i64** %Sp_Var
  %lncQG = getelementptr inbounds i64, i64* %lncQF, i32 4
  store i64 %R1_Arg, i64* %lncQG, !tbaa !1
  %lncQH = bitcast i8* @integerzmgmp_GHCziIntegerziType_remInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQI = load i64*, i64** %Sp_Var
  %lncQJ = load i64, i64* %R2_Var
  %lncQK = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQH( i64* %Base_Arg, i64* %lncQI, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncQJ, i64 %lncQK, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucGI:
  %lncQL = load i64*, i64** %Sp_Var
  %lncQM = getelementptr inbounds i64, i64* %lncQL, i32 4
  %lncQN = ptrtoint i64* %lncQM to i64
  %lncQO = inttoptr i64 %lncQN to i64*
  store i64* %lncQO, i64** %Sp_Var
  %lncQP = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccGv_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQQ = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQP( i64* %Base_Arg, i64* %lncQQ, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccE5_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccE5_info$def to i8*)
define internal ghccc void @ccE5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccE5_info$def to i64)),i64 528), i64 516, i64 3377704015495200}>
{
ccE5:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lncQR = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccE9_info$def to i64
  %lncQS = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncQR, i64* %lncQS, !tbaa !1
  %lncQT = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lncQU = add i64 %lncQT, 1
  store i64 %lncQU, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lncQV = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncQW = load i64, i64* %R2_Var
  %lncQX = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncQV( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncQW, i64 %lncQX, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccE9_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccE9_info$def to i8*)
define internal ghccc void @ccE9_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccE9_info$def to i64)),i64 528), i64 516, i64 3377704015495200}>
{
ccE9:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncQY = load i64*, i64** %Hp_Var
  %lncQZ = getelementptr inbounds i64, i64* %lncQY, i32 6
  %lncR0 = ptrtoint i64* %lncQZ to i64
  %lncR1 = inttoptr i64 %lncR0 to i64*
  store i64* %lncR1, i64** %Hp_Var
  %lncR2 = load i64*, i64** %Hp_Var
  %lncR3 = ptrtoint i64* %lncR2 to i64
  %lncR4 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncR5 = bitcast i64* %lncR4 to i64*
  %lncR6 = load i64, i64* %lncR5, !tbaa !4
  %lncR7 = icmp ugt i64 %lncR3, %lncR6
  br i1 %lncR7, label %ccGq, label %ccGp
ccGp:
  %lncR8 = load i64, i64* %R1_Var
  switch i64 %lncR8, label %ccGs [i64 0, label %ccGs
i64 1, label %ccGu]
ccGs:
  %lncR9 = load i64*, i64** %Hp_Var
  %lncRa = getelementptr inbounds i64, i64* %lncR9, i32 -6
  %lncRb = ptrtoint i64* %lncRa to i64
  %lncRc = inttoptr i64 %lncRb to i64*
  store i64* %lncRc, i64** %Hp_Var
  %lncRd = load i64*, i64** %Sp_Var
  %lncRe = getelementptr inbounds i64, i64* %lncRd, i32 2
  %lncRf = bitcast i64* %lncRe to i64*
  %lncRg = load i64, i64* %lncRf, !tbaa !1
  store i64 %lncRg, i64* %R3_Var
  %lncRh = load i64*, i64** %Sp_Var
  %lncRi = getelementptr inbounds i64, i64* %lncRh, i32 3
  %lncRj = bitcast i64* %lncRi to i64*
  %lncRk = load i64, i64* %lncRj, !tbaa !1
  store i64 %lncRk, i64* %R2_Var
  %lncRl = load i64*, i64** %Sp_Var
  %lncRm = getelementptr inbounds i64, i64* %lncRl, i32 5
  %lncRn = ptrtoint i64* %lncRm to i64
  %lncRo = inttoptr i64 %lncRn to i64*
  store i64* %lncRo, i64** %Sp_Var
  %lncRp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncRq = load i64*, i64** %Sp_Var
  %lncRr = load i64*, i64** %Hp_Var
  %lncRs = load i64, i64* %R1_Var
  %lncRt = load i64, i64* %R2_Var
  %lncRu = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncRp( i64* %Base_Arg, i64* %lncRq, i64* %lncRr, i64 %lncRs, i64 %lncRt, i64 %lncRu, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGu:
  %lncRw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8c5_info$def to i64
  %lncRv = load i64*, i64** %Hp_Var
  %lncRx = getelementptr inbounds i64, i64* %lncRv, i32 -5
  store i64 %lncRw, i64* %lncRx, !tbaa !2
  %lncRz = load i64*, i64** %Sp_Var
  %lncRA = getelementptr inbounds i64, i64* %lncRz, i32 1
  %lncRB = bitcast i64* %lncRA to i64*
  %lncRC = load i64, i64* %lncRB, !tbaa !1
  %lncRy = load i64*, i64** %Hp_Var
  %lncRD = getelementptr inbounds i64, i64* %lncRy, i32 -3
  store i64 %lncRC, i64* %lncRD, !tbaa !2
  %lncRF = load i64*, i64** %Sp_Var
  %lncRG = getelementptr inbounds i64, i64* %lncRF, i32 4
  %lncRH = bitcast i64* %lncRG to i64*
  %lncRI = load i64, i64* %lncRH, !tbaa !1
  %lncRE = load i64*, i64** %Hp_Var
  %lncRJ = getelementptr inbounds i64, i64* %lncRE, i32 -2
  store i64 %lncRI, i64* %lncRJ, !tbaa !2
  %lncRL = ptrtoint i8* @Word_W_con_info to i64
  %lncRK = load i64*, i64** %Hp_Var
  %lncRM = getelementptr inbounds i64, i64* %lncRK, i32 -1
  store i64 %lncRL, i64* %lncRM, !tbaa !2
  %lncRO = load i64*, i64** %Hp_Var
  %lncRP = getelementptr inbounds i64, i64* %lncRO, i32 -5
  %lncRQ = ptrtoint i64* %lncRP to i64
  %lncRN = load i64*, i64** %Hp_Var
  %lncRR = getelementptr inbounds i64, i64* %lncRN, i32 0
  store i64 %lncRQ, i64* %lncRR, !tbaa !2
  %lncRT = load i64*, i64** %Hp_Var
  %lncRU = ptrtoint i64* %lncRT to i64
  %lncRV = add i64 %lncRU, -7
  store i64 %lncRV, i64* %R1_Var
  %lncRW = load i64*, i64** %Sp_Var
  %lncRX = getelementptr inbounds i64, i64* %lncRW, i32 5
  %lncRY = ptrtoint i64* %lncRX to i64
  %lncRZ = inttoptr i64 %lncRY to i64*
  store i64* %lncRZ, i64** %Sp_Var
  %lncS0 = load i64*, i64** %Sp_Var
  %lncS1 = getelementptr inbounds i64, i64* %lncS0, i32 0
  %lncS2 = bitcast i64* %lncS1 to i64*
  %lncS3 = load i64, i64* %lncS2, !tbaa !1
  %lncS4 = inttoptr i64 %lncS3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncS5 = load i64*, i64** %Sp_Var
  %lncS6 = load i64*, i64** %Hp_Var
  %lncS7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncS4( i64* %Base_Arg, i64* %lncS5, i64* %lncS6, i64 %lncS7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccGq:
  %lncS8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lncS8, !tbaa !4
  %lncS9 = load i64, i64* %R1_Var
  store i64 %lncS9, i64* %R1_Var
  %lncSa = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncSb = load i64*, i64** %Sp_Var
  %lncSc = load i64*, i64** %Hp_Var
  %lncSd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncSa( i64* %Base_Arg, i64* %lncSb, i64* %lncSc, i64 %lncSd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccG4_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccG4_info$def to i8*)
define internal ghccc void @ccG4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccG4_info$def to i64)),i64 528), i64 3, i64 4294967328}>
{
ccG4:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  switch i64 %R1_Arg, label %ccGd [i64 0, label %ccGd
i64 1, label %ucGJ]
ccGd:
  %lncSe = load i64*, i64** %Sp_Var
  %lncSf = getelementptr inbounds i64, i64* %lncSe, i32 1
  %lncSg = bitcast i64* %lncSf to i64*
  %lncSh = load i64, i64* %lncSg, !tbaa !1
  store i64 %lncSh, i64* %R3_Var
  %lncSi = load i64*, i64** %Sp_Var
  %lncSj = getelementptr inbounds i64, i64* %lncSi, i32 2
  %lncSk = bitcast i64* %lncSj to i64*
  %lncSl = load i64, i64* %lncSk, !tbaa !1
  store i64 %lncSl, i64* %R2_Var
  %lncSm = load i64*, i64** %Sp_Var
  %lncSn = getelementptr inbounds i64, i64* %lncSm, i32 4
  %lncSo = ptrtoint i64* %lncSn to i64
  %lncSp = inttoptr i64 %lncSo to i64*
  store i64* %lncSp, i64** %Sp_Var
  %lncSq = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_wrap_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncSr = load i64*, i64** %Sp_Var
  %lncSs = load i64, i64* %R2_Var
  %lncSt = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncSq( i64* %Base_Arg, i64* %lncSr, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncSs, i64 %lncSt, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucGJ:
  %lncSu = load i64*, i64** %Sp_Var
  %lncSv = getelementptr inbounds i64, i64* %lncSu, i32 3
  %lncSw = ptrtoint i64* %lncSv to i64
  %lncSx = inttoptr i64 %lncSw to i64*
  store i64* %lncSx, i64** %Sp_Var
  %lncSy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccGv_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncSz = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncSy( i64* %Base_Arg, i64* %lncSz, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccGv_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccGv_entry$def to i8*)
define internal ghccc void @ccGv_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
ccGv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncSA = load i64*, i64** %Sp_Var
  %lncSB = getelementptr inbounds i64, i64* %lncSA, i32 0
  %lncSC = bitcast i64* %lncSB to i64*
  %lncSD = load i64, i64* %lncSC, !tbaa !1
  %lncSE = and i64 %lncSD, -8
  store i64 %lncSE, i64* %R1_Var
  %lncSF = load i64*, i64** %Sp_Var
  %lncSG = getelementptr inbounds i64, i64* %lncSF, i32 1
  %lncSH = ptrtoint i64* %lncSG to i64
  %lncSI = inttoptr i64 %lncSH to i64*
  store i64* %lncSI, i64** %Sp_Var
  %lncSK = load i64, i64* %R1_Var
  %lncSL = inttoptr i64 %lncSK to i64*
  %lncSM = load i64, i64* %lncSL, !tbaa !3
  %lncSN = inttoptr i64 %lncSM to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncSO = load i64*, i64** %Sp_Var
  %lncSP = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncSN( i64* %Base_Arg, i64* %lncSO, i64* %Hp_Arg, i64 %lncSP, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwi2buf_closure_struct = type <{i64}>
@Word_zdwi2buf_closure$def = internal global %Word_zdwi2buf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2buf_info$def to i64)}>
@Word_zdwi2buf_closure = alias i8* bitcast (%Word_zdwi2buf_closure_struct* @Word_zdwi2buf_closure$def to i8*)
@Word_zdwi2buf_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2buf_info$def to i8*)
define ghccc void @Word_zdwi2buf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 17179869204, i64 0, i64 15}>
{
ccT1:
  %ls8cm = alloca i64, i32 1
  %lccSW = alloca i64, i32 1
  %lccSY = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8cr = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncT5 = load i64*, i64** %Sp_Var
  %lncT6 = getelementptr inbounds i64, i64* %lncT5, i32 -1
  %lncT7 = ptrtoint i64* %lncT6 to i64
  %lncT8 = icmp ult i64 %lncT7, %SpLim_Arg
  br i1 %lncT8, label %ccT2, label %ccT3
ccT3:
  %lncT9 = load i64, i64* %R4_Var
  store i64 %lncT9, i64* %ls8cm
  %lncTa = load i64, i64* %R4_Var
  store i64 %lncTa, i64* %lccSW
  %lncTb = load i64, i64* %R3_Var
  store i64 %lncTb, i64* %lccSY
  %lncTc = load i64, i64* %lccSW
  %lncTd = inttoptr i64 %lncTc to i8*
  %lncTe = load i64, i64* %lccSY
  %lncTf = bitcast i8* @memset to i8* (i8*, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lncTg = call ccc i8* (i8*, i64, i64) %lncTf( i8* %lncTd, i64 0, i64 %lncTe ) nounwind
  %lncTh = ptrtoint i8* %lncTg to i64
  store i64 %lncTh, i64* %ls8cr
  %lncTj = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccSZ_info$def to i64
  %lncTi = load i64*, i64** %Sp_Var
  %lncTk = getelementptr inbounds i64, i64* %lncTi, i32 -1
  store i64 %lncTj, i64* %lncTk, !tbaa !1
  store i64 0, i64* %R4_Var
  %lncTl = load i64, i64* %ls8cm
  store i64 %lncTl, i64* %R3_Var
  %lncTm = load i64, i64* %R2_Var
  store i64 %lncTm, i64* %R2_Var
  %lncTn = load i64*, i64** %Sp_Var
  %lncTo = getelementptr inbounds i64, i64* %lncTn, i32 -1
  %lncTp = ptrtoint i64* %lncTo to i64
  %lncTq = inttoptr i64 %lncTp to i64*
  store i64* %lncTq, i64** %Sp_Var
  %lncTr = bitcast i8* @integerzmgmp_GHCziIntegerziGMPziInternals_exportIntegerToAddr1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncTs = load i64*, i64** %Sp_Var
  %lncTt = load i64, i64* %R1_Var
  %lncTu = load i64, i64* %R2_Var
  %lncTv = load i64, i64* %R3_Var
  %lncTw = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncTr( i64* %Base_Arg, i64* %lncTs, i64* %Hp_Arg, i64 %lncTt, i64 %lncTu, i64 %lncTv, i64 %lncTw, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccT2:
  %lncTx = load i64, i64* %R4_Var
  store i64 %lncTx, i64* %R4_Var
  %lncTy = load i64, i64* %R3_Var
  store i64 %lncTy, i64* %R3_Var
  %lncTz = load i64, i64* %R2_Var
  store i64 %lncTz, i64* %R2_Var
  %lncTA = ptrtoint %Word_zdwi2buf_closure_struct* @Word_zdwi2buf_closure$def to i64
  store i64 %lncTA, i64* %R1_Var
  %lncTB = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncTC = bitcast i64* %lncTB to i64*
  %lncTD = load i64, i64* %lncTC, !tbaa !4
  %lncTE = inttoptr i64 %lncTD to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncTF = load i64*, i64** %Sp_Var
  %lncTG = load i64, i64* %R1_Var
  %lncTH = load i64, i64* %R2_Var
  %lncTI = load i64, i64* %R3_Var
  %lncTJ = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncTE( i64* %Base_Arg, i64* %lncTF, i64* %Hp_Arg, i64 %lncTG, i64 %lncTH, i64 %lncTI, i64 %lncTJ, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccSZ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccSZ_info$def to i8*)
define internal ghccc void @ccSZ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
ccSZ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncTK = ptrtoint i8* @ghczmprim_GHCziTuple_Z0T_closure to i64
  %lncTL = add i64 %lncTK, 1
  store i64 %lncTL, i64* %R1_Var
  %lncTM = load i64*, i64** %Sp_Var
  %lncTN = getelementptr inbounds i64, i64* %lncTM, i32 1
  %lncTO = ptrtoint i64* %lncTN to i64
  %lncTP = inttoptr i64 %lncTO to i64*
  store i64* %lncTP, i64** %Sp_Var
  %lncTQ = load i64*, i64** %Sp_Var
  %lncTR = getelementptr inbounds i64, i64* %lncTQ, i32 0
  %lncTS = bitcast i64* %lncTR to i64*
  %lncTT = load i64, i64* %lncTS, !tbaa !1
  %lncTU = inttoptr i64 %lncTT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncTV = load i64*, i64** %Sp_Var
  %lncTW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncTU( i64* %Base_Arg, i64* %lncTV, i64* %Hp_Arg, i64 %lncTW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_i2buf1_closure_struct = type <{i64}>
@Word_i2buf1_closure$def = internal global %Word_i2buf1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2buf1_info$def to i64)}>
@Word_i2buf1_closure = alias i8* bitcast (%Word_i2buf1_closure_struct* @Word_i2buf1_closure$def to i8*)
@Word_i2buf1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2buf1_info$def to i8*)
define ghccc void @Word_i2buf1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 17179869207, i64 0, i64 15}>
{
ccUb:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncUp = load i64*, i64** %Sp_Var
  %lncUq = getelementptr inbounds i64, i64* %lncUp, i32 -3
  %lncUr = ptrtoint i64* %lncUq to i64
  %lncUs = icmp ult i64 %lncUr, %SpLim_Arg
  br i1 %lncUs, label %ccUf, label %ccUg
ccUg:
  %lncUu = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccU8_info$def to i64
  %lncUt = load i64*, i64** %Sp_Var
  %lncUv = getelementptr inbounds i64, i64* %lncUt, i32 -3
  store i64 %lncUu, i64* %lncUv, !tbaa !1
  %lncUw = load i64, i64* %R3_Var
  store i64 %lncUw, i64* %R1_Var
  %lncUy = load i64, i64* %R2_Var
  %lncUx = load i64*, i64** %Sp_Var
  %lncUz = getelementptr inbounds i64, i64* %lncUx, i32 -2
  store i64 %lncUy, i64* %lncUz, !tbaa !1
  %lncUB = load i64, i64* %R4_Var
  %lncUA = load i64*, i64** %Sp_Var
  %lncUC = getelementptr inbounds i64, i64* %lncUA, i32 -1
  store i64 %lncUB, i64* %lncUC, !tbaa !1
  %lncUD = load i64*, i64** %Sp_Var
  %lncUE = getelementptr inbounds i64, i64* %lncUD, i32 -3
  %lncUF = ptrtoint i64* %lncUE to i64
  %lncUG = inttoptr i64 %lncUF to i64*
  store i64* %lncUG, i64** %Sp_Var
  %lncUH = load i64, i64* %R1_Var
  %lncUI = and i64 %lncUH, 7
  %lncUJ = icmp ne i64 %lncUI, 0
  br i1 %lncUJ, label %ucUo, label %ccU9
ccU9:
  %lncUL = load i64, i64* %R1_Var
  %lncUM = inttoptr i64 %lncUL to i64*
  %lncUN = load i64, i64* %lncUM, !tbaa !3
  %lncUO = inttoptr i64 %lncUN to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncUP = load i64*, i64** %Sp_Var
  %lncUQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncUO( i64* %Base_Arg, i64* %lncUP, i64* %Hp_Arg, i64 %lncUQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucUo:
  %lncUR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccU8_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncUS = load i64*, i64** %Sp_Var
  %lncUT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncUR( i64* %Base_Arg, i64* %lncUS, i64* %Hp_Arg, i64 %lncUT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccUf:
  %lncUU = load i64, i64* %R4_Var
  store i64 %lncUU, i64* %R4_Var
  %lncUV = load i64, i64* %R3_Var
  store i64 %lncUV, i64* %R3_Var
  %lncUW = load i64, i64* %R2_Var
  store i64 %lncUW, i64* %R2_Var
  %lncUX = ptrtoint %Word_i2buf1_closure_struct* @Word_i2buf1_closure$def to i64
  store i64 %lncUX, i64* %R1_Var
  %lncUY = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncUZ = bitcast i64* %lncUY to i64*
  %lncV0 = load i64, i64* %lncUZ, !tbaa !4
  %lncV1 = inttoptr i64 %lncV0 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncV2 = load i64*, i64** %Sp_Var
  %lncV3 = load i64, i64* %R1_Var
  %lncV4 = load i64, i64* %R2_Var
  %lncV5 = load i64, i64* %R3_Var
  %lncV6 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncV1( i64* %Base_Arg, i64* %lncV2, i64* %Hp_Arg, i64 %lncV3, i64 %lncV4, i64 %lncV5, i64 %lncV6, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccU8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccU8_info$def to i8*)
define internal ghccc void @ccU8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 2, i64 32}>
{
ccU8:
  %ls8cA = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lncV7 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccUe_info$def to i64
  %lncV8 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lncV7, i64* %lncV8, !tbaa !1
  %lncVb = load i64, i64* %R1_Var
  %lncVc = add i64 %lncVb, 7
  %lncVd = inttoptr i64 %lncVc to i64*
  %lncVe = load i64, i64* %lncVd, !tbaa !3
  store i64 %lncVe, i64* %ls8cA
  %lncVf = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lncVg = bitcast i64* %lncVf to i64*
  %lncVh = load i64, i64* %lncVg, !tbaa !1
  store i64 %lncVh, i64* %R1_Var
  %lncVi = load i64, i64* %ls8cA
  %lncVj = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  store i64 %lncVi, i64* %lncVj, !tbaa !1
  %lncVk = load i64, i64* %R1_Var
  %lncVl = and i64 %lncVk, 7
  %lncVm = icmp ne i64 %lncVl, 0
  br i1 %lncVm, label %ucUn, label %ccUi
ccUi:
  %lncVo = load i64, i64* %R1_Var
  %lncVp = inttoptr i64 %lncVo to i64*
  %lncVq = load i64, i64* %lncVp, !tbaa !3
  %lncVr = inttoptr i64 %lncVq to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncVs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncVr( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncVs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucUn:
  %lncVt = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccUe_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncVu = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncVt( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lncVu, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccUe_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccUe_info$def to i8*)
define internal ghccc void @ccUe_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 130, i64 32}>
{
ccUe:
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncVv = add i64 %R1_Arg, 7
  %lncVw = inttoptr i64 %lncVv to i64*
  %lncVx = load i64, i64* %lncVw, !tbaa !3
  store i64 %lncVx, i64* %R4_Var
  %lncVy = load i64*, i64** %Sp_Var
  %lncVz = getelementptr inbounds i64, i64* %lncVy, i32 2
  %lncVA = bitcast i64* %lncVz to i64*
  %lncVB = load i64, i64* %lncVA, !tbaa !1
  store i64 %lncVB, i64* %R3_Var
  %lncVC = load i64*, i64** %Sp_Var
  %lncVD = getelementptr inbounds i64, i64* %lncVC, i32 1
  %lncVE = bitcast i64* %lncVD to i64*
  %lncVF = load i64, i64* %lncVE, !tbaa !1
  store i64 %lncVF, i64* %R2_Var
  %lncVG = load i64*, i64** %Sp_Var
  %lncVH = getelementptr inbounds i64, i64* %lncVG, i32 3
  %lncVI = ptrtoint i64* %lncVH to i64
  %lncVJ = inttoptr i64 %lncVI to i64*
  store i64* %lncVJ, i64** %Sp_Var
  %lncVK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2buf_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncVL = load i64*, i64** %Sp_Var
  %lncVM = load i64, i64* %R2_Var
  %lncVN = load i64, i64* %R3_Var
  %lncVO = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncVK( i64* %Base_Arg, i64* %lncVL, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncVM, i64 %lncVN, i64 %lncVO, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_i2buf_closure_struct = type <{i64}>
@Word_i2buf_closure$def = internal global %Word_i2buf_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2buf_info$def to i64)}>
@Word_i2buf_closure = alias i8* bitcast (%Word_i2buf_closure_struct* @Word_i2buf_closure$def to i8*)
@Word_i2buf_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2buf_info$def to i8*)
define ghccc void @Word_i2buf_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 17179869207, i64 0, i64 15}>
{
ccVU:
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncVX = load i64, i64* %R4_Var
  store i64 %lncVX, i64* %R4_Var
  %lncVY = load i64, i64* %R3_Var
  store i64 %lncVY, i64* %R3_Var
  %lncVZ = load i64, i64* %R2_Var
  store i64 %lncVZ, i64* %R2_Var
  %lncW0 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2buf1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncW1 = load i64, i64* %R2_Var
  %lncW2 = load i64, i64* %R3_Var
  %lncW3 = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncW0( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncW1, i64 %lncW2, i64 %lncW3, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_zdwi2bs_closure_struct = type <{i64, i64}>
@Word_zdwi2bs_closure$def = internal global %Word_zdwi2bs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2bs_info$def to i64), i64 0}>
@Word_zdwi2bs_closure = alias i8* bitcast (%Word_zdwi2bs_closure_struct* @Word_zdwi2bs_closure$def to i8*)
@Word_zdwi2bs_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2bs_info$def to i8*)
define ghccc void @Word_zdwi2bs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2bs_info$def to i64)),i64 720), i64 12884901902, i64 0, i64 12884901903}>
{
ccWv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncX1 = load i64*, i64** %Sp_Var
  %lncX2 = getelementptr inbounds i64, i64* %lncX1, i32 -4
  %lncX3 = ptrtoint i64* %lncX2 to i64
  %lncX4 = icmp ult i64 %lncX3, %SpLim_Arg
  br i1 %lncX4, label %ccWw, label %ccWx
ccWx:
  %lncX5 = load i64, i64* %R3_Var
  %lncX6 = icmp slt i64 %lncX5, 0
  %lncX7 = zext i1 %lncX6 to i64
  switch i64 %lncX7, label %ccWV [i64 0, label %ccWV
i64 1, label %ccX0]
ccWV:
  %lncX9 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccWB_info$def to i64
  %lncX8 = load i64*, i64** %Sp_Var
  %lncXa = getelementptr inbounds i64, i64* %lncX8, i32 -3
  store i64 %lncX9, i64* %lncXa, !tbaa !1
  %lncXb = load i64, i64* %R3_Var
  store i64 %lncXb, i64* %R1_Var
  %lncXd = load i64, i64* %R2_Var
  %lncXc = load i64*, i64** %Sp_Var
  %lncXe = getelementptr inbounds i64, i64* %lncXc, i32 -2
  store i64 %lncXd, i64* %lncXe, !tbaa !1
  %lncXg = load i64, i64* %R3_Var
  %lncXf = load i64*, i64** %Sp_Var
  %lncXh = getelementptr inbounds i64, i64* %lncXf, i32 -1
  store i64 %lncXg, i64* %lncXh, !tbaa !1
  %lncXi = load i64*, i64** %Sp_Var
  %lncXj = getelementptr inbounds i64, i64* %lncXi, i32 -3
  %lncXk = ptrtoint i64* %lncXj to i64
  %lncXl = inttoptr i64 %lncXk to i64*
  store i64* %lncXl, i64** %Sp_Var
  %lncXm = bitcast i8* @stg_newPinnedByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncXn = load i64*, i64** %Sp_Var
  %lncXo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncXm( i64* %Base_Arg, i64* %lncXn, i64* %Hp_Arg, i64 %lncXo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccX0:
  %lncXp = ptrtoint i8* @base_GHCziForeignPtr_mallocPlainForeignPtrBytes2_closure to i64
  store i64 %lncXp, i64* %R1_Var
  %lncXq = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncXr = load i64*, i64** %Sp_Var
  %lncXs = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncXq( i64* %Base_Arg, i64* %lncXr, i64* %Hp_Arg, i64 %lncXs, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccWw:
  %lncXt = load i64, i64* %R3_Var
  store i64 %lncXt, i64* %R3_Var
  %lncXu = load i64, i64* %R2_Var
  store i64 %lncXu, i64* %R2_Var
  %lncXv = ptrtoint %Word_zdwi2bs_closure_struct* @Word_zdwi2bs_closure$def to i64
  store i64 %lncXv, i64* %R1_Var
  %lncXw = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lncXx = bitcast i64* %lncXw to i64*
  %lncXy = load i64, i64* %lncXx, !tbaa !4
  %lncXz = inttoptr i64 %lncXy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncXA = load i64*, i64** %Sp_Var
  %lncXB = load i64, i64* %R1_Var
  %lncXC = load i64, i64* %R2_Var
  %lncXD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncXz( i64* %Base_Arg, i64* %lncXA, i64* %Hp_Arg, i64 %lncXB, i64 %lncXC, i64 %lncXD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccWB_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccWB_info$def to i8*)
define internal ghccc void @ccWB_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 130, i64 32}>
{
ccWB:
  %ls8cD = alloca i64, i32 1
  %ls8cL = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8cQ = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncXE = load i64*, i64** %Sp_Var
  %lncXF = getelementptr inbounds i64, i64* %lncXE, i32 1
  %lncXG = bitcast i64* %lncXF to i64*
  %lncXH = load i64, i64* %lncXG, !tbaa !1
  store i64 %lncXH, i64* %ls8cD
  %lncXI = add i64 %R1_Arg, 16
  store i64 %lncXI, i64* %ls8cL
  %lncXJ = load i64, i64* %ls8cL
  %lncXK = inttoptr i64 %lncXJ to i8*
  %lncXL = load i64*, i64** %Sp_Var
  %lncXM = getelementptr inbounds i64, i64* %lncXL, i32 2
  %lncXN = bitcast i64* %lncXM to i64*
  %lncXO = load i64, i64* %lncXN, !tbaa !1
  %lncXP = bitcast i8* @memset to i8* (i8*, i64, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lncXQ = call ccc i8* (i8*, i64, i64) %lncXP( i8* %lncXK, i64 0, i64 %lncXO ) nounwind
  %lncXR = ptrtoint i8* %lncXQ to i64
  store i64 %lncXR, i64* %ls8cQ
  %lncXT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccWN_info$def to i64
  %lncXS = load i64*, i64** %Sp_Var
  %lncXU = getelementptr inbounds i64, i64* %lncXS, i32 -1
  store i64 %lncXT, i64* %lncXU, !tbaa !1
  store i64 0, i64* %R4_Var
  %lncXV = load i64, i64* %ls8cL
  store i64 %lncXV, i64* %R3_Var
  %lncXW = load i64, i64* %ls8cD
  store i64 %lncXW, i64* %R2_Var
  %lncXY = load i64, i64* %ls8cL
  %lncXX = load i64*, i64** %Sp_Var
  %lncXZ = getelementptr inbounds i64, i64* %lncXX, i32 0
  store i64 %lncXY, i64* %lncXZ, !tbaa !1
  %lncY0 = load i64*, i64** %Sp_Var
  %lncY1 = getelementptr inbounds i64, i64* %lncY0, i32 1
  store i64 %R1_Arg, i64* %lncY1, !tbaa !1
  %lncY2 = load i64*, i64** %Sp_Var
  %lncY3 = getelementptr inbounds i64, i64* %lncY2, i32 -1
  %lncY4 = ptrtoint i64* %lncY3 to i64
  %lncY5 = inttoptr i64 %lncY4 to i64*
  store i64* %lncY5, i64** %Sp_Var
  %lncY6 = bitcast i8* @integerzmgmp_GHCziIntegerziGMPziInternals_exportIntegerToAddr1_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncY7 = load i64*, i64** %Sp_Var
  %lncY8 = load i64, i64* %R2_Var
  %lncY9 = load i64, i64* %R3_Var
  %lncYa = load i64, i64* %R4_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncY6( i64* %Base_Arg, i64* %lncY7, i64* %Hp_Arg, i64 %R1_Arg, i64 %lncY8, i64 %lncY9, i64 %lncYa, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccWN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccWN_info$def to i8*)
define internal ghccc void @ccWN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 323, i64 32}>
{
ccWN:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8cE = alloca i64, i32 1
  %ls8cL = alloca i64, i32 1
  %lccWP = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lncYb = load i64*, i64** %Hp_Var
  %lncYc = getelementptr inbounds i64, i64* %lncYb, i32 7
  %lncYd = ptrtoint i64* %lncYc to i64
  %lncYe = inttoptr i64 %lncYd to i64*
  store i64* %lncYe, i64** %Hp_Var
  %lncYf = load i64*, i64** %Hp_Var
  %lncYg = ptrtoint i64* %lncYf to i64
  %lncYh = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lncYi = bitcast i64* %lncYh to i64*
  %lncYj = load i64, i64* %lncYi, !tbaa !4
  %lncYk = icmp ugt i64 %lncYg, %lncYj
  br i1 %lncYk, label %ccWZ, label %ccWY
ccWY:
  %lncYm = ptrtoint i8* @base_GHCziForeignPtr_PlainPtr_con_info to i64
  %lncYl = load i64*, i64** %Hp_Var
  %lncYn = getelementptr inbounds i64, i64* %lncYl, i32 -6
  store i64 %lncYm, i64* %lncYn, !tbaa !2
  %lncYp = load i64*, i64** %Sp_Var
  %lncYq = getelementptr inbounds i64, i64* %lncYp, i32 2
  %lncYr = bitcast i64* %lncYq to i64*
  %lncYs = load i64, i64* %lncYr, !tbaa !1
  %lncYo = load i64*, i64** %Hp_Var
  %lncYt = getelementptr inbounds i64, i64* %lncYo, i32 -5
  store i64 %lncYs, i64* %lncYt, !tbaa !2
  %lncYu = load i64*, i64** %Sp_Var
  %lncYv = getelementptr inbounds i64, i64* %lncYu, i32 3
  %lncYw = bitcast i64* %lncYv to i64*
  %lncYx = load i64, i64* %lncYw, !tbaa !1
  store i64 %lncYx, i64* %ls8cE
  %lncYy = load i64*, i64** %Sp_Var
  %lncYz = getelementptr inbounds i64, i64* %lncYy, i32 1
  %lncYA = bitcast i64* %lncYz to i64*
  %lncYB = load i64, i64* %lncYA, !tbaa !1
  store i64 %lncYB, i64* %ls8cL
  %lncYD = load i64*, i64** %Hp_Var
  %lncYE = ptrtoint i64* %lncYD to i64
  %lncYF = add i64 %lncYE, -45
  store i64 %lncYF, i64* %lccWP
  %lncYH = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lncYG = load i64*, i64** %Hp_Var
  %lncYI = getelementptr inbounds i64, i64* %lncYG, i32 -4
  store i64 %lncYH, i64* %lncYI, !tbaa !2
  %lncYK = load i64, i64* %lccWP
  %lncYJ = load i64*, i64** %Hp_Var
  %lncYL = getelementptr inbounds i64, i64* %lncYJ, i32 -3
  store i64 %lncYK, i64* %lncYL, !tbaa !2
  %lncYN = load i64, i64* %ls8cL
  %lncYM = load i64*, i64** %Hp_Var
  %lncYO = getelementptr inbounds i64, i64* %lncYM, i32 -2
  store i64 %lncYN, i64* %lncYO, !tbaa !2
  %lncYP = load i64*, i64** %Hp_Var
  %lncYQ = getelementptr inbounds i64, i64* %lncYP, i32 -1
  store i64 0, i64* %lncYQ, !tbaa !2
  %lncYS = load i64, i64* %ls8cE
  %lncYR = load i64*, i64** %Hp_Var
  %lncYT = getelementptr inbounds i64, i64* %lncYR, i32 0
  store i64 %lncYS, i64* %lncYT, !tbaa !2
  %lncYV = load i64*, i64** %Hp_Var
  %lncYW = ptrtoint i64* %lncYV to i64
  %lncYX = add i64 %lncYW, -31
  store i64 %lncYX, i64* %R1_Var
  %lncYY = load i64*, i64** %Sp_Var
  %lncYZ = getelementptr inbounds i64, i64* %lncYY, i32 4
  %lncZ0 = ptrtoint i64* %lncYZ to i64
  %lncZ1 = inttoptr i64 %lncZ0 to i64*
  store i64* %lncZ1, i64** %Sp_Var
  %lncZ2 = load i64*, i64** %Sp_Var
  %lncZ3 = getelementptr inbounds i64, i64* %lncZ2, i32 0
  %lncZ4 = bitcast i64* %lncZ3 to i64*
  %lncZ5 = load i64, i64* %lncZ4, !tbaa !1
  %lncZ6 = inttoptr i64 %lncZ5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncZ7 = load i64*, i64** %Sp_Var
  %lncZ8 = load i64*, i64** %Hp_Var
  %lncZ9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncZ6( i64* %Base_Arg, i64* %lncZ7, i64* %lncZ8, i64 %lncZ9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccWZ:
  %lncZa = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lncZa, !tbaa !4
  %lncZb = load i64, i64* %R1_Var
  store i64 %lncZb, i64* %R1_Var
  %lncZc = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncZd = load i64*, i64** %Sp_Var
  %lncZe = load i64*, i64** %Hp_Var
  %lncZf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncZc( i64* %Base_Arg, i64* %lncZd, i64* %lncZe, i64 %lncZf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_i2bs1_closure_struct = type <{i64, i64}>
@Word_i2bs1_closure$def = internal global %Word_i2bs1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs1_info$def to i64), i64 0}>
@Word_i2bs1_closure = alias i8* bitcast (%Word_i2bs1_closure_struct* @Word_i2bs1_closure$def to i8*)
@Word_i2bs1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs1_info$def to i8*)
define ghccc void @Word_i2bs1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs1_info$def to i64)),i64 720), i64 12884901903, i64 0, i64 21474836495}>
{
ccZr:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lncZy = load i64*, i64** %Sp_Var
  %lncZz = getelementptr inbounds i64, i64* %lncZy, i32 -2
  %lncZA = ptrtoint i64* %lncZz to i64
  %lncZB = icmp ult i64 %lncZA, %SpLim_Arg
  br i1 %lncZB, label %ccZs, label %ccZt
ccZt:
  %lncZD = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccZo_info$def to i64
  %lncZC = load i64*, i64** %Sp_Var
  %lncZE = getelementptr inbounds i64, i64* %lncZC, i32 -2
  store i64 %lncZD, i64* %lncZE, !tbaa !1
  %lncZF = load i64, i64* %R3_Var
  store i64 %lncZF, i64* %R1_Var
  %lncZH = load i64, i64* %R2_Var
  %lncZG = load i64*, i64** %Sp_Var
  %lncZI = getelementptr inbounds i64, i64* %lncZG, i32 -1
  store i64 %lncZH, i64* %lncZI, !tbaa !1
  %lncZJ = load i64*, i64** %Sp_Var
  %lncZK = getelementptr inbounds i64, i64* %lncZJ, i32 -2
  %lncZL = ptrtoint i64* %lncZK to i64
  %lncZM = inttoptr i64 %lncZL to i64*
  store i64* %lncZM, i64** %Sp_Var
  %lncZN = load i64, i64* %R1_Var
  %lncZO = and i64 %lncZN, 7
  %lncZP = icmp ne i64 %lncZO, 0
  br i1 %lncZP, label %ucZx, label %ccZp
ccZp:
  %lncZR = load i64, i64* %R1_Var
  %lncZS = inttoptr i64 %lncZR to i64*
  %lncZT = load i64, i64* %lncZS, !tbaa !3
  %lncZU = inttoptr i64 %lncZT to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncZV = load i64*, i64** %Sp_Var
  %lncZW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncZU( i64* %Base_Arg, i64* %lncZV, i64* %Hp_Arg, i64 %lncZW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ucZx:
  %lncZX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccZo_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lncZY = load i64*, i64** %Sp_Var
  %lncZZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lncZX( i64* %Base_Arg, i64* %lncZY, i64* %Hp_Arg, i64 %lncZZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ccZs:
  %lnd00 = load i64, i64* %R3_Var
  store i64 %lnd00, i64* %R3_Var
  %lnd01 = load i64, i64* %R2_Var
  store i64 %lnd01, i64* %R2_Var
  %lnd02 = ptrtoint %Word_i2bs1_closure_struct* @Word_i2bs1_closure$def to i64
  store i64 %lnd02, i64* %R1_Var
  %lnd03 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnd04 = bitcast i64* %lnd03 to i64*
  %lnd05 = load i64, i64* %lnd04, !tbaa !4
  %lnd06 = inttoptr i64 %lnd05 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd07 = load i64*, i64** %Sp_Var
  %lnd08 = load i64, i64* %R1_Var
  %lnd09 = load i64, i64* %R2_Var
  %lnd0a = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd06( i64* %Base_Arg, i64* %lnd07, i64* %Hp_Arg, i64 %lnd08, i64 %lnd09, i64 %lnd0a, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@ccZo_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccZo_info$def to i8*)
define internal ghccc void @ccZo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @ccZo_info$def to i64)),i64 720), i64 1, i64 4294967328}>
{
ccZo:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnd0b = add i64 %R1_Arg, 7
  %lnd0c = inttoptr i64 %lnd0b to i64*
  %lnd0d = load i64, i64* %lnd0c, !tbaa !3
  store i64 %lnd0d, i64* %R3_Var
  %lnd0e = load i64*, i64** %Sp_Var
  %lnd0f = getelementptr inbounds i64, i64* %lnd0e, i32 1
  %lnd0g = bitcast i64* %lnd0f to i64*
  %lnd0h = load i64, i64* %lnd0g, !tbaa !1
  store i64 %lnd0h, i64* %R2_Var
  %lnd0i = load i64*, i64** %Sp_Var
  %lnd0j = getelementptr inbounds i64, i64* %lnd0i, i32 2
  %lnd0k = ptrtoint i64* %lnd0j to i64
  %lnd0l = inttoptr i64 %lnd0k to i64*
  store i64* %lnd0l, i64** %Sp_Var
  %lnd0m = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2bs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd0n = load i64*, i64** %Sp_Var
  %lnd0o = load i64, i64* %R2_Var
  %lnd0p = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd0m( i64* %Base_Arg, i64* %lnd0n, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnd0o, i64 %lnd0p, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_i2bs_closure_struct = type <{i64, i64}>
@Word_i2bs_closure$def = internal global %Word_i2bs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs_info$def to i64), i64 0}>
@Word_i2bs_closure = alias i8* bitcast (%Word_i2bs_closure_struct* @Word_i2bs_closure$def to i8*)
@Word_i2bs_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs_info$def to i8*)
define ghccc void @Word_i2bs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs_info$def to i64)),i64 736), i64 12884901903, i64 0, i64 4294967311}>
{
cd0v:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnd0y = load i64, i64* %R3_Var
  store i64 %lnd0y, i64* %R3_Var
  %lnd0z = load i64, i64* %R2_Var
  store i64 %lnd0z, i64* %R2_Var
  %lnd0A = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bs1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd0B = load i64, i64* %R2_Var
  %lnd0C = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd0A( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnd0B, i64 %lnd0C, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_i2bszq_closure_struct = type <{i64, i64}>
@Word_i2bszq_closure$def = internal global %Word_i2bszq_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bszq_info$def to i64), i64 0}>
@Word_i2bszq_closure = alias i8* bitcast (%Word_i2bszq_closure_struct* @Word_i2bszq_closure$def to i8*)
@Word_i2bszq_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bszq_info$def to i8*)
define ghccc void @Word_i2bszq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bszq_info$def to i64)),i64 720), i64 8589934607, i64 0, i64 38654705679}>
{
cd0U:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnd19 = load i64*, i64** %Sp_Var
  %lnd1a = getelementptr inbounds i64, i64* %lnd19, i32 -3
  %lnd1b = ptrtoint i64* %lnd1a to i64
  %lnd1c = icmp ult i64 %lnd1b, %SpLim_Arg
  br i1 %lnd1c, label %cd13, label %cd14
cd14:
  %lnd1e = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0P_info$def to i64
  %lnd1d = load i64*, i64** %Sp_Var
  %lnd1f = getelementptr inbounds i64, i64* %lnd1d, i32 -3
  store i64 %lnd1e, i64* %lnd1f, !tbaa !1
  %lnd1h = load i64, i64* %R2_Var
  %lnd1g = load i64*, i64** %Sp_Var
  %lnd1i = getelementptr inbounds i64, i64* %lnd1g, i32 -2
  store i64 %lnd1h, i64* %lnd1i, !tbaa !1
  %lnd1k = load i64, i64* %R3_Var
  %lnd1j = load i64*, i64** %Sp_Var
  %lnd1l = getelementptr inbounds i64, i64* %lnd1j, i32 -1
  store i64 %lnd1k, i64* %lnd1l, !tbaa !1
  %lnd1m = load i64*, i64** %Sp_Var
  %lnd1n = getelementptr inbounds i64, i64* %lnd1m, i32 -3
  %lnd1o = ptrtoint i64* %lnd1n to i64
  %lnd1p = inttoptr i64 %lnd1o to i64*
  store i64* %lnd1p, i64** %Sp_Var
  %lnd1q = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd1r = load i64*, i64** %Sp_Var
  %lnd1s = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd1q( i64* %Base_Arg, i64* %lnd1r, i64* %Hp_Arg, i64 %lnd1s, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd13:
  %lnd1t = load i64, i64* %R3_Var
  store i64 %lnd1t, i64* %R3_Var
  %lnd1u = load i64, i64* %R2_Var
  store i64 %lnd1u, i64* %R2_Var
  %lnd1v = ptrtoint %Word_i2bszq_closure_struct* @Word_i2bszq_closure$def to i64
  store i64 %lnd1v, i64* %R1_Var
  %lnd1w = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnd1x = bitcast i64* %lnd1w to i64*
  %lnd1y = load i64, i64* %lnd1x, !tbaa !4
  %lnd1z = inttoptr i64 %lnd1y to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd1A = load i64*, i64** %Sp_Var
  %lnd1B = load i64, i64* %R1_Var
  %lnd1C = load i64, i64* %R2_Var
  %lnd1D = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd1z( i64* %Base_Arg, i64* %lnd1A, i64* %Hp_Arg, i64 %lnd1B, i64 %lnd1C, i64 %lnd1D, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd0P_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0P_info$def to i8*)
define internal ghccc void @cd0P_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0P_info$def to i64)),i64 720), i64 2, i64 4294967328}>
{
cd0P:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnd1E = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0X_info$def to i64
  %lnd1F = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnd1E, i64* %lnd1F, !tbaa !1
  %lnd1G = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnd1H = bitcast i64* %lnd1G to i64*
  %lnd1I = load i64, i64* %lnd1H, !tbaa !1
  store i64 %lnd1I, i64* %R1_Var
  %lnd1J = load i64, i64* %R1_Var
  %lnd1K = and i64 %lnd1J, 7
  %lnd1L = icmp ne i64 %lnd1K, 0
  br i1 %lnd1L, label %ud18, label %cd0Y
cd0Y:
  %lnd1N = load i64, i64* %R1_Var
  %lnd1O = inttoptr i64 %lnd1N to i64*
  %lnd1P = load i64, i64* %lnd1O, !tbaa !3
  %lnd1Q = inttoptr i64 %lnd1P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd1R = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd1Q( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnd1R, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud18:
  %lnd1S = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0X_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd1T = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd1S( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnd1T, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd0X_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0X_info$def to i8*)
define internal ghccc void @cd0X_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd0X_info$def to i64)),i64 720), i64 130, i64 4294967328}>
{
cd0X:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnd1V = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd12_info$def to i64
  %lnd1U = load i64*, i64** %Sp_Var
  %lnd1W = getelementptr inbounds i64, i64* %lnd1U, i32 2
  store i64 %lnd1V, i64* %lnd1W, !tbaa !1
  %lnd1X = add i64 %R1_Arg, 7
  %lnd1Y = inttoptr i64 %lnd1X to i64*
  %lnd1Z = load i64, i64* %lnd1Y, !tbaa !3
  store i64 %lnd1Z, i64* %R3_Var
  %lnd20 = load i64*, i64** %Sp_Var
  %lnd21 = getelementptr inbounds i64, i64* %lnd20, i32 1
  %lnd22 = bitcast i64* %lnd21 to i64*
  %lnd23 = load i64, i64* %lnd22, !tbaa !1
  store i64 %lnd23, i64* %R2_Var
  %lnd24 = load i64*, i64** %Sp_Var
  %lnd25 = getelementptr inbounds i64, i64* %lnd24, i32 2
  %lnd26 = ptrtoint i64* %lnd25 to i64
  %lnd27 = inttoptr i64 %lnd26 to i64*
  store i64* %lnd27, i64** %Sp_Var
  %lnd28 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2bs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd29 = load i64*, i64** %Sp_Var
  %lnd2a = load i64, i64* %R2_Var
  %lnd2b = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd28( i64* %Base_Arg, i64* %lnd29, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnd2a, i64 %lnd2b, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd12_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd12_info$def to i8*)
define internal ghccc void @cd12_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cd12:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnd2c = load i64, i64* %R1_Var
  %lnd2d = and i64 %lnd2c, -8
  store i64 %lnd2d, i64* %R1_Var
  %lnd2e = load i64*, i64** %Sp_Var
  %lnd2f = getelementptr inbounds i64, i64* %lnd2e, i32 1
  %lnd2g = ptrtoint i64* %lnd2f to i64
  %lnd2h = inttoptr i64 %lnd2g to i64*
  store i64* %lnd2h, i64** %Sp_Var
  %lnd2j = load i64, i64* %R1_Var
  %lnd2k = inttoptr i64 %lnd2j to i64*
  %lnd2l = load i64, i64* %lnd2k, !tbaa !3
  %lnd2m = inttoptr i64 %lnd2l to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd2n = load i64*, i64** %Sp_Var
  %lnd2o = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd2m( i64* %Base_Arg, i64* %lnd2n, i64* %Hp_Arg, i64 %lnd2o, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_w2bs_closure_struct = type <{i64, i64}>
@Word_w2bs_closure$def = internal global %Word_w2bs_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_w2bs_info$def to i64), i64 0}>
@Word_w2bs_closure = alias i8* bitcast (%Word_w2bs_closure_struct* @Word_w2bs_closure$def to i8*)
@s8dj_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8dj_info$def to i8*)
define internal ghccc void @s8dj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8dj_info$def to i64)),i64 696), i64 4294967296, i64 4294967314}>
{
cd2Z:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lnd3r = add i64 %R1_Arg, 16
  %lnd3s = inttoptr i64 %lnd3r to i64*
  %lnd3t = load i64, i64* %lnd3s, !tbaa !3
  store i64 %lnd3t, i64* %R2_Var
  %lnd3u = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd3v = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd3u( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lnd3v, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_w2bs_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_w2bs_info$def to i8*)
define ghccc void @Word_w2bs_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_w2bs_info$def to i64)),i64 696), i64 8589934607, i64 0, i64 863288426511}>
{
cd37:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lnd3w = load i64*, i64** %Sp_Var
  %lnd3x = getelementptr inbounds i64, i64* %lnd3w, i32 -3
  %lnd3y = ptrtoint i64* %lnd3x to i64
  %lnd3z = icmp ult i64 %lnd3y, %SpLim_Arg
  br i1 %lnd3z, label %cd38, label %cd39
cd39:
  %lnd3B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2G_info$def to i64
  %lnd3A = load i64*, i64** %Sp_Var
  %lnd3C = getelementptr inbounds i64, i64* %lnd3A, i32 -2
  store i64 %lnd3B, i64* %lnd3C, !tbaa !1
  %lnd3D = load i64, i64* %R2_Var
  store i64 %lnd3D, i64* %R1_Var
  %lnd3F = load i64, i64* %R3_Var
  %lnd3E = load i64*, i64** %Sp_Var
  %lnd3G = getelementptr inbounds i64, i64* %lnd3E, i32 -1
  store i64 %lnd3F, i64* %lnd3G, !tbaa !1
  %lnd3H = load i64*, i64** %Sp_Var
  %lnd3I = getelementptr inbounds i64, i64* %lnd3H, i32 -2
  %lnd3J = ptrtoint i64* %lnd3I to i64
  %lnd3K = inttoptr i64 %lnd3J to i64*
  store i64* %lnd3K, i64** %Sp_Var
  %lnd3L = load i64, i64* %R1_Var
  %lnd3M = and i64 %lnd3L, 7
  %lnd3N = icmp ne i64 %lnd3M, 0
  br i1 %lnd3N, label %ud3q, label %cd2H
cd2H:
  %lnd3P = load i64, i64* %R1_Var
  %lnd3Q = inttoptr i64 %lnd3P to i64*
  %lnd3R = load i64, i64* %lnd3Q, !tbaa !3
  %lnd3S = inttoptr i64 %lnd3R to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd3T = load i64*, i64** %Sp_Var
  %lnd3U = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd3S( i64* %Base_Arg, i64* %lnd3T, i64* %Hp_Arg, i64 %lnd3U, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud3q:
  %lnd3V = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2G_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd3W = load i64*, i64** %Sp_Var
  %lnd3X = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd3V( i64* %Base_Arg, i64* %lnd3W, i64* %Hp_Arg, i64 %lnd3X, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd38:
  %lnd3Y = load i64, i64* %R3_Var
  store i64 %lnd3Y, i64* %R3_Var
  %lnd3Z = load i64, i64* %R2_Var
  store i64 %lnd3Z, i64* %R2_Var
  %lnd40 = ptrtoint %Word_w2bs_closure_struct* @Word_w2bs_closure$def to i64
  store i64 %lnd40, i64* %R1_Var
  %lnd41 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lnd42 = bitcast i64* %lnd41 to i64*
  %lnd43 = load i64, i64* %lnd42, !tbaa !4
  %lnd44 = inttoptr i64 %lnd43 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd45 = load i64*, i64** %Sp_Var
  %lnd46 = load i64, i64* %R1_Var
  %lnd47 = load i64, i64* %R2_Var
  %lnd48 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd44( i64* %Base_Arg, i64* %lnd45, i64* %Hp_Arg, i64 %lnd46, i64 %lnd47, i64 %lnd48, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd2G_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2G_info$def to i8*)
define internal ghccc void @cd2G_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2G_info$def to i64)),i64 696), i64 1, i64 313532612640}>
{
cd2G:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnd49 = load i64, i64* %R1_Var
  %lnd4a = and i64 %lnd49, 7
  switch i64 %lnd4a, label %cd33 [i64 1, label %cd33
i64 2, label %cd34
i64 3, label %cd35]
cd33:
  %lnd4b = load i64*, i64** %Sp_Var
  %lnd4c = getelementptr inbounds i64, i64* %lnd4b, i32 1
  %lnd4d = bitcast i64* %lnd4c to i64*
  %lnd4e = load i64, i64* %lnd4d, !tbaa !1
  store i64 %lnd4e, i64* %R3_Var
  %lnd4h = load i64, i64* %R1_Var
  %lnd4i = add i64 %lnd4h, 7
  %lnd4j = inttoptr i64 %lnd4i to i64*
  %lnd4k = load i64, i64* %lnd4j, !tbaa !3
  store i64 %lnd4k, i64* %R2_Var
  %lnd4l = load i64*, i64** %Sp_Var
  %lnd4m = getelementptr inbounds i64, i64* %lnd4l, i32 2
  %lnd4n = ptrtoint i64* %lnd4m to i64
  %lnd4o = inttoptr i64 %lnd4n to i64*
  store i64* %lnd4o, i64** %Sp_Var
  %lnd4p = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_i2bszq_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd4q = load i64*, i64** %Sp_Var
  %lnd4r = load i64, i64* %R1_Var
  %lnd4s = load i64, i64* %R2_Var
  %lnd4t = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd4p( i64* %Base_Arg, i64* %lnd4q, i64* %Hp_Arg, i64 %lnd4r, i64 %lnd4s, i64 %lnd4t, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd34:
  %lnd4v = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2M_info$def to i64
  %lnd4u = load i64*, i64** %Sp_Var
  %lnd4w = getelementptr inbounds i64, i64* %lnd4u, i32 -1
  store i64 %lnd4v, i64* %lnd4w, !tbaa !1
  %lnd4A = load i64, i64* %R1_Var
  %lnd4B = add i64 %lnd4A, 6
  %lnd4C = inttoptr i64 %lnd4B to i64*
  %lnd4D = load i64, i64* %lnd4C, !tbaa !3
  %lnd4x = load i64*, i64** %Sp_Var
  %lnd4E = getelementptr inbounds i64, i64* %lnd4x, i32 0
  store i64 %lnd4D, i64* %lnd4E, !tbaa !1
  %lnd4F = load i64*, i64** %Sp_Var
  %lnd4G = getelementptr inbounds i64, i64* %lnd4F, i32 -1
  %lnd4H = ptrtoint i64* %lnd4G to i64
  %lnd4I = inttoptr i64 %lnd4H to i64*
  store i64* %lnd4I, i64** %Sp_Var
  %lnd4J = bitcast i8* @stg_noDuplicatezh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd4K = load i64*, i64** %Sp_Var
  %lnd4L = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd4J( i64* %Base_Arg, i64* %lnd4K, i64* %Hp_Arg, i64 %lnd4L, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd35:
  %lnd4O = load i64, i64* %R1_Var
  %lnd4P = add i64 %lnd4O, 5
  %lnd4Q = inttoptr i64 %lnd4P to i64*
  %lnd4R = load i64, i64* %lnd4Q, !tbaa !3
  %lnd4S = and i64 %lnd4R, -8
  store i64 %lnd4S, i64* %R1_Var
  %lnd4T = load i64*, i64** %Sp_Var
  %lnd4U = getelementptr inbounds i64, i64* %lnd4T, i32 2
  %lnd4V = ptrtoint i64* %lnd4U to i64
  %lnd4W = inttoptr i64 %lnd4V to i64*
  store i64* %lnd4W, i64** %Sp_Var
  %lnd4Y = load i64, i64* %R1_Var
  %lnd4Z = inttoptr i64 %lnd4Y to i64*
  %lnd50 = load i64, i64* %lnd4Z, !tbaa !3
  %lnd51 = inttoptr i64 %lnd50 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd52 = load i64*, i64** %Sp_Var
  %lnd53 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd51( i64* %Base_Arg, i64* %lnd52, i64* %Hp_Arg, i64 %lnd53, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd2M_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2M_info$def to i8*)
define internal ghccc void @cd2M_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2M_info$def to i64)),i64 696), i64 66, i64 38654705696}>
{
cd2M:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnd54 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2Q_info$def to i64
  %lnd55 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lnd54, i64* %lnd55, !tbaa !1
  %lnd56 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lnd57 = bitcast i64* %lnd56 to i64*
  %lnd58 = load i64, i64* %lnd57, !tbaa !1
  store i64 %lnd58, i64* %R1_Var
  %lnd59 = load i64, i64* %R1_Var
  %lnd5a = and i64 %lnd59, 7
  %lnd5b = icmp ne i64 %lnd5a, 0
  br i1 %lnd5b, label %ud3p, label %cd2R
cd2R:
  %lnd5d = load i64, i64* %R1_Var
  %lnd5e = inttoptr i64 %lnd5d to i64*
  %lnd5f = load i64, i64* %lnd5e, !tbaa !3
  %lnd5g = inttoptr i64 %lnd5f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd5h = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd5g( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnd5h, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud3p:
  %lnd5i = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2Q_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd5j = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd5i( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lnd5j, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd2Q_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2Q_info$def to i8*)
define internal ghccc void @cd2Q_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd2Q_info$def to i64)),i64 696), i64 194, i64 38654705696}>
{
cd2Q:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8di = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnd5k = load i64*, i64** %Hp_Var
  %lnd5l = getelementptr inbounds i64, i64* %lnd5k, i32 3
  %lnd5m = ptrtoint i64* %lnd5l to i64
  %lnd5n = inttoptr i64 %lnd5m to i64*
  store i64* %lnd5n, i64** %Hp_Var
  %lnd5o = load i64*, i64** %Hp_Var
  %lnd5p = ptrtoint i64* %lnd5o to i64
  %lnd5q = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnd5r = bitcast i64* %lnd5q to i64*
  %lnd5s = load i64, i64* %lnd5r, !tbaa !4
  %lnd5t = icmp ugt i64 %lnd5p, %lnd5s
  br i1 %lnd5t, label %cd3h, label %cd3g
cd3g:
  %lnd5w = load i64, i64* %R1_Var
  %lnd5x = add i64 %lnd5w, 7
  %lnd5y = inttoptr i64 %lnd5x to i64*
  %lnd5z = load i64, i64* %lnd5y, !tbaa !3
  store i64 %lnd5z, i64* %ls8di
  %lnd5B = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8dj_info$def to i64
  %lnd5A = load i64*, i64** %Hp_Var
  %lnd5C = getelementptr inbounds i64, i64* %lnd5A, i32 -2
  store i64 %lnd5B, i64* %lnd5C, !tbaa !2
  %lnd5E = load i64*, i64** %Sp_Var
  %lnd5F = getelementptr inbounds i64, i64* %lnd5E, i32 1
  %lnd5G = bitcast i64* %lnd5F to i64*
  %lnd5H = load i64, i64* %lnd5G, !tbaa !1
  %lnd5D = load i64*, i64** %Hp_Var
  %lnd5I = getelementptr inbounds i64, i64* %lnd5D, i32 0
  store i64 %lnd5H, i64* %lnd5I, !tbaa !2
  %lnd5K = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd3c_info$def to i64
  %lnd5J = load i64*, i64** %Sp_Var
  %lnd5L = getelementptr inbounds i64, i64* %lnd5J, i32 2
  store i64 %lnd5K, i64* %lnd5L, !tbaa !1
  %lnd5M = load i64, i64* %ls8di
  store i64 %lnd5M, i64* %R3_Var
  %lnd5N = load i64*, i64** %Hp_Var
  %lnd5O = getelementptr inbounds i64, i64* %lnd5N, i32 -2
  %lnd5P = ptrtoint i64* %lnd5O to i64
  store i64 %lnd5P, i64* %R2_Var
  %lnd5Q = load i64*, i64** %Sp_Var
  %lnd5R = getelementptr inbounds i64, i64* %lnd5Q, i32 2
  %lnd5S = ptrtoint i64* %lnd5R to i64
  %lnd5T = inttoptr i64 %lnd5S to i64*
  store i64* %lnd5T, i64** %Sp_Var
  %lnd5U = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_zdwi2bs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd5V = load i64*, i64** %Sp_Var
  %lnd5W = load i64*, i64** %Hp_Var
  %lnd5X = load i64, i64* %R1_Var
  %lnd5Y = load i64, i64* %R2_Var
  %lnd5Z = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd5U( i64* %Base_Arg, i64* %lnd5V, i64* %lnd5W, i64 %lnd5X, i64 %lnd5Y, i64 %lnd5Z, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd3h:
  %lnd60 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lnd60, !tbaa !4
  %lnd61 = load i64, i64* %R1_Var
  store i64 %lnd61, i64* %R1_Var
  %lnd62 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd63 = load i64*, i64** %Sp_Var
  %lnd64 = load i64*, i64** %Hp_Var
  %lnd65 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd62( i64* %Base_Arg, i64* %lnd63, i64* %lnd64, i64 %lnd65, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd3c_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd3c_info$def to i8*)
define internal ghccc void @cd3c_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cd3c:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnd66 = load i64, i64* %R1_Var
  %lnd67 = and i64 %lnd66, -8
  store i64 %lnd67, i64* %R1_Var
  %lnd68 = load i64*, i64** %Sp_Var
  %lnd69 = getelementptr inbounds i64, i64* %lnd68, i32 1
  %lnd6a = ptrtoint i64* %lnd69 to i64
  %lnd6b = inttoptr i64 %lnd6a to i64*
  store i64* %lnd6b, i64** %Sp_Var
  %lnd6d = load i64, i64* %R1_Var
  %lnd6e = inttoptr i64 %lnd6d to i64*
  %lnd6f = load i64, i64* %lnd6e, !tbaa !3
  %lnd6g = inttoptr i64 %lnd6f to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd6h = load i64*, i64** %Sp_Var
  %lnd6i = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd6g( i64* %Base_Arg, i64* %lnd6h, i64* %Hp_Arg, i64 %lnd6i, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_combinezuzdscombine_closure_struct = type <{i64, i64}>
@Word_combinezuzdscombine_closure$def = internal global %Word_combinezuzdscombine_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_info$def to i64), i64 0}>
@Word_combinezuzdscombine_closure = alias i8* bitcast (%Word_combinezuzdscombine_closure_struct* @Word_combinezuzdscombine_closure$def to i8*)
@Word_combinezuzdscombine_slow = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_slow$def to i8*)
define ghccc void @Word_combinezuzdscombine_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cd7f:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnd97 = load i64*, i64** %Sp_Var
  %lnd98 = getelementptr inbounds i64, i64* %lnd97, i32 4
  %lnd99 = bitcast i64* %lnd98 to i64*
  %lnd9a = load i64, i64* %lnd99, !tbaa !1
  store i64 %lnd9a, i64* %R6_Var
  %lnd9b = load i64*, i64** %Sp_Var
  %lnd9c = getelementptr inbounds i64, i64* %lnd9b, i32 3
  %lnd9d = bitcast i64* %lnd9c to i64*
  %lnd9e = load i64, i64* %lnd9d, !tbaa !1
  store i64 %lnd9e, i64* %R5_Var
  %lnd9f = load i64*, i64** %Sp_Var
  %lnd9g = getelementptr inbounds i64, i64* %lnd9f, i32 2
  %lnd9h = bitcast i64* %lnd9g to i64*
  %lnd9i = load i64, i64* %lnd9h, !tbaa !1
  store i64 %lnd9i, i64* %R4_Var
  %lnd9j = load i64*, i64** %Sp_Var
  %lnd9k = getelementptr inbounds i64, i64* %lnd9j, i32 1
  %lnd9l = bitcast i64* %lnd9k to i64*
  %lnd9m = load i64, i64* %lnd9l, !tbaa !1
  store i64 %lnd9m, i64* %R3_Var
  %lnd9n = load i64*, i64** %Sp_Var
  %lnd9o = getelementptr inbounds i64, i64* %lnd9n, i32 0
  %lnd9p = bitcast i64* %lnd9o to i64*
  %lnd9q = load i64, i64* %lnd9p, !tbaa !1
  store i64 %lnd9q, i64* %R2_Var
  %lnd9r = load i64, i64* %R1_Var
  store i64 %lnd9r, i64* %R1_Var
  %lnd9s = load i64*, i64** %Sp_Var
  %lnd9t = getelementptr inbounds i64, i64* %lnd9s, i32 5
  %lnd9u = ptrtoint i64* %lnd9t to i64
  %lnd9v = inttoptr i64 %lnd9u to i64*
  store i64* %lnd9v, i64** %Sp_Var
  %lnd9w = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnd9x = load i64*, i64** %Sp_Var
  %lnd9y = load i64, i64* %R1_Var
  %lnd9z = load i64, i64* %R2_Var
  %lnd9A = load i64, i64* %R3_Var
  %lnd9B = load i64, i64* %R4_Var
  %lnd9C = load i64, i64* %R5_Var
  %lnd9D = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnd9w( i64* %Base_Arg, i64* %lnd9x, i64* %Hp_Arg, i64 %lnd9y, i64 %lnd9z, i64 %lnd9A, i64 %lnd9B, i64 %lnd9C, i64 %lnd9D, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_combinezuzdscombine_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_info$def to i8*)
define ghccc void @Word_combinezuzdscombine_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_info$def to i64)),i64 0), i64 839, i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_info$def to i64)),i64 728), i64 30064771072, i64 0, i64 73014444047}>
{
cd7m:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnd9E = load i64*, i64** %Sp_Var
  %lnd9F = getelementptr inbounds i64, i64* %lnd9E, i32 -8
  %lnd9G = ptrtoint i64* %lnd9F to i64
  %lnd9H = icmp ult i64 %lnd9G, %SpLim_Arg
  br i1 %lnd9H, label %cd7z, label %cd7A
cd7A:
  %lnd9J = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7j_info$def to i64
  %lnd9I = load i64*, i64** %Sp_Var
  %lnd9K = getelementptr inbounds i64, i64* %lnd9I, i32 -3
  store i64 %lnd9J, i64* %lnd9K, !tbaa !1
  %lnd9L = load i64*, i64** %Sp_Var
  %lnd9M = getelementptr inbounds i64, i64* %lnd9L, i32 0
  %lnd9N = bitcast i64* %lnd9M to i64*
  %lnd9O = load i64, i64* %lnd9N, !tbaa !1
  store i64 %lnd9O, i64* %R1_Var
  %lnd9P = load i64*, i64** %Sp_Var
  %lnd9Q = getelementptr inbounds i64, i64* %lnd9P, i32 -2
  store i64 %R4_Arg, i64* %lnd9Q, !tbaa !1
  %lnd9R = load i64*, i64** %Sp_Var
  %lnd9S = getelementptr inbounds i64, i64* %lnd9R, i32 -1
  store i64 %R5_Arg, i64* %lnd9S, !tbaa !1
  %lnd9T = load i64*, i64** %Sp_Var
  %lnd9U = getelementptr inbounds i64, i64* %lnd9T, i32 0
  store i64 %R3_Arg, i64* %lnd9U, !tbaa !1
  %lnd9V = load i64*, i64** %Sp_Var
  %lnd9W = getelementptr inbounds i64, i64* %lnd9V, i32 1
  store i64 %R2_Arg, i64* %lnd9W, !tbaa !1
  %lnd9X = load i64*, i64** %Sp_Var
  %lnd9Y = getelementptr inbounds i64, i64* %lnd9X, i32 -3
  %lnd9Z = ptrtoint i64* %lnd9Y to i64
  %lnda0 = inttoptr i64 %lnd9Z to i64*
  store i64* %lnda0, i64** %Sp_Var
  %lnda1 = load i64, i64* %R1_Var
  %lnda2 = and i64 %lnda1, 7
  %lnda3 = icmp ne i64 %lnda2, 0
  br i1 %lnda3, label %ud91, label %cd7k
cd7k:
  %lnda5 = load i64, i64* %R1_Var
  %lnda6 = inttoptr i64 %lnda5 to i64*
  %lnda7 = load i64, i64* %lnda6, !tbaa !3
  %lnda8 = inttoptr i64 %lnda7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnda9 = load i64*, i64** %Sp_Var
  %lndaa = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnda8( i64* %Base_Arg, i64* %lnda9, i64* %Hp_Arg, i64 %lndaa, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud91:
  %lndab = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7j_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndac = load i64*, i64** %Sp_Var
  %lndad = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndab( i64* %Base_Arg, i64* %lndac, i64* %Hp_Arg, i64 %lndad, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd7z:
  %lndae = ptrtoint %Word_combinezuzdscombine_closure_struct* @Word_combinezuzdscombine_closure$def to i64
  store i64 %lndae, i64* %R1_Var
  %lndaf = load i64*, i64** %Sp_Var
  %lndag = getelementptr inbounds i64, i64* %lndaf, i32 -5
  store i64 %R2_Arg, i64* %lndag, !tbaa !1
  %lndah = load i64*, i64** %Sp_Var
  %lndai = getelementptr inbounds i64, i64* %lndah, i32 -4
  store i64 %R3_Arg, i64* %lndai, !tbaa !1
  %lndaj = load i64*, i64** %Sp_Var
  %lndak = getelementptr inbounds i64, i64* %lndaj, i32 -3
  store i64 %R4_Arg, i64* %lndak, !tbaa !1
  %lndal = load i64*, i64** %Sp_Var
  %lndam = getelementptr inbounds i64, i64* %lndal, i32 -2
  store i64 %R5_Arg, i64* %lndam, !tbaa !1
  %lndan = load i64*, i64** %Sp_Var
  %lndao = getelementptr inbounds i64, i64* %lndan, i32 -1
  store i64 %R6_Arg, i64* %lndao, !tbaa !1
  %lndap = load i64*, i64** %Sp_Var
  %lndaq = getelementptr inbounds i64, i64* %lndap, i32 -5
  %lndar = ptrtoint i64* %lndaq to i64
  %lndas = inttoptr i64 %lndar to i64*
  store i64* %lndas, i64** %Sp_Var
  %lndat = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lndau = bitcast i64* %lndat to i64*
  %lndav = load i64, i64* %lndau, !tbaa !4
  %lndaw = inttoptr i64 %lndav to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndax = load i64*, i64** %Sp_Var
  %lnday = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndaw( i64* %Base_Arg, i64* %lndax, i64* %Hp_Arg, i64 %lnday, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd7j_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7j_info$def to i8*)
define internal ghccc void @cd7j_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7j_info$def to i64)),i64 728), i64 708, i64 4294967328}>
{
cd7j:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8dr = alloca i64, i32 1
  %ls8dA = alloca i64, i32 1
  %ls8dC = alloca i64, i32 1
  %ls8dx = alloca i64, i32 1
  %ls8dw = alloca i64, i32 1
  %ls8dy = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndaz = load i64*, i64** %Hp_Var
  %lndaA = getelementptr inbounds i64, i64* %lndaz, i32 5
  %lndaB = ptrtoint i64* %lndaA to i64
  %lndaC = inttoptr i64 %lndaB to i64*
  store i64* %lndaC, i64** %Hp_Var
  %lndaD = load i64*, i64** %Hp_Var
  %lndaE = ptrtoint i64* %lndaD to i64
  %lndaF = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndaG = bitcast i64* %lndaF to i64*
  %lndaH = load i64, i64* %lndaG, !tbaa !4
  %lndaI = icmp ugt i64 %lndaE, %lndaH
  br i1 %lndaI, label %cd7D, label %cd7C
cd7C:
  %lndaJ = load i64*, i64** %Sp_Var
  %lndaK = getelementptr inbounds i64, i64* %lndaJ, i32 2
  %lndaL = bitcast i64* %lndaK to i64*
  %lndaM = load i64, i64* %lndaL, !tbaa !1
  store i64 %lndaM, i64* %ls8dr
  %lndaP = load i64, i64* %R1_Var
  %lndaQ = add i64 %lndaP, 31
  %lndaR = inttoptr i64 %lndaQ to i64*
  %lndaS = load i64, i64* %lndaR, !tbaa !3
  store i64 %lndaS, i64* %ls8dA
  %lndaT = load i64, i64* %ls8dA
  switch i64 %lndaT, label %cd7r [i64 0, label %cd7s]
cd7r:
  %lndaU = load i64, i64* %ls8dr
  switch i64 %lndaU, label %cd84 [i64 0, label %cd89]
cd84:
  %lndaV = load i64, i64* %ls8dA
  %lndaW = load i64, i64* %ls8dr
  %lndaX = add i64 %lndaV, %lndaW
  store i64 %lndaX, i64* %ls8dC
  %lndaY = load i64, i64* %ls8dC
  %lndaZ = icmp slt i64 %lndaY, 0
  %lndb0 = zext i1 %lndaZ to i64
  switch i64 %lndb0, label %cd7P [i64 0, label %cd7P
i64 1, label %cd7Q]
cd7P:
  %lndb3 = load i64, i64* %R1_Var
  %lndb4 = add i64 %lndb3, 7
  %lndb5 = inttoptr i64 %lndb4 to i64*
  %lndb6 = load i64, i64* %lndb5, !tbaa !3
  store i64 %lndb6, i64* %ls8dx
  %lndb9 = load i64, i64* %R1_Var
  %lndba = add i64 %lndb9, 15
  %lndbb = inttoptr i64 %lndba to i64*
  %lndbc = load i64, i64* %lndbb, !tbaa !3
  store i64 %lndbc, i64* %ls8dw
  %lndbf = load i64, i64* %R1_Var
  %lndbg = add i64 %lndbf, 23
  %lndbh = inttoptr i64 %lndbg to i64*
  %lndbi = load i64, i64* %lndbh, !tbaa !3
  store i64 %lndbi, i64* %ls8dy
  %lndbj = load i64*, i64** %Hp_Var
  %lndbk = getelementptr inbounds i64, i64* %lndbj, i32 -5
  %lndbl = ptrtoint i64* %lndbk to i64
  %lndbm = inttoptr i64 %lndbl to i64*
  store i64* %lndbm, i64** %Hp_Var
  %lndbo = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7W_info$def to i64
  %lndbn = load i64*, i64** %Sp_Var
  %lndbp = getelementptr inbounds i64, i64* %lndbn, i32 -5
  store i64 %lndbo, i64* %lndbp, !tbaa !1
  %lndbq = load i64, i64* %ls8dC
  store i64 %lndbq, i64* %R1_Var
  %lndbs = load i64, i64* %ls8dy
  %lndbr = load i64*, i64** %Sp_Var
  %lndbt = getelementptr inbounds i64, i64* %lndbr, i32 -4
  store i64 %lndbs, i64* %lndbt, !tbaa !1
  %lndbv = load i64, i64* %ls8dA
  %lndbu = load i64*, i64** %Sp_Var
  %lndbw = getelementptr inbounds i64, i64* %lndbu, i32 -3
  store i64 %lndbv, i64* %lndbw, !tbaa !1
  %lndby = load i64, i64* %ls8dr
  %lndbx = load i64*, i64** %Sp_Var
  %lndbz = getelementptr inbounds i64, i64* %lndbx, i32 -2
  store i64 %lndby, i64* %lndbz, !tbaa !1
  %lndbB = load i64, i64* %ls8dC
  %lndbA = load i64*, i64** %Sp_Var
  %lndbC = getelementptr inbounds i64, i64* %lndbA, i32 -1
  store i64 %lndbB, i64* %lndbC, !tbaa !1
  %lndbE = load i64, i64* %ls8dx
  %lndbD = load i64*, i64** %Sp_Var
  %lndbF = getelementptr inbounds i64, i64* %lndbD, i32 0
  store i64 %lndbE, i64* %lndbF, !tbaa !1
  %lndbH = load i64, i64* %ls8dw
  %lndbG = load i64*, i64** %Sp_Var
  %lndbI = getelementptr inbounds i64, i64* %lndbG, i32 2
  store i64 %lndbH, i64* %lndbI, !tbaa !1
  %lndbJ = load i64*, i64** %Sp_Var
  %lndbK = getelementptr inbounds i64, i64* %lndbJ, i32 -5
  %lndbL = ptrtoint i64* %lndbK to i64
  %lndbM = inttoptr i64 %lndbL to i64*
  store i64* %lndbM, i64** %Sp_Var
  %lndbN = bitcast i8* @stg_newPinnedByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndbO = load i64*, i64** %Sp_Var
  %lndbP = load i64*, i64** %Hp_Var
  %lndbQ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndbN( i64* %Base_Arg, i64* %lndbO, i64* %lndbP, i64 %lndbQ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd7Q:
  %lndbR = load i64*, i64** %Hp_Var
  %lndbS = getelementptr inbounds i64, i64* %lndbR, i32 -5
  %lndbT = ptrtoint i64* %lndbS to i64
  %lndbU = inttoptr i64 %lndbT to i64*
  store i64* %lndbU, i64** %Hp_Var
  %lndbW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd82_info$def to i64
  %lndbV = load i64*, i64** %Sp_Var
  %lndbX = getelementptr inbounds i64, i64* %lndbV, i32 4
  store i64 %lndbW, i64* %lndbX, !tbaa !1
  %lndbY = ptrtoint i8* @base_GHCziForeignPtr_mallocPlainForeignPtrBytes2_closure to i64
  store i64 %lndbY, i64* %R1_Var
  %lndbZ = load i64*, i64** %Sp_Var
  %lndc0 = getelementptr inbounds i64, i64* %lndbZ, i32 4
  %lndc1 = ptrtoint i64* %lndc0 to i64
  %lndc2 = inttoptr i64 %lndc1 to i64*
  store i64* %lndc2, i64** %Sp_Var
  %lndc3 = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndc4 = load i64*, i64** %Sp_Var
  %lndc5 = load i64*, i64** %Hp_Var
  %lndc6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndc3( i64* %Base_Arg, i64* %lndc4, i64* %lndc5, i64 %lndc6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd89:
  %lndc7 = load i64*, i64** %Hp_Var
  %lndc8 = getelementptr inbounds i64, i64* %lndc7, i32 -5
  %lndc9 = ptrtoint i64* %lndc8 to i64
  %lndca = inttoptr i64 %lndc9 to i64*
  store i64* %lndca, i64** %Hp_Var
  %lndcc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd88_info$def to i64
  %lndcb = load i64*, i64** %Sp_Var
  %lndcd = getelementptr inbounds i64, i64* %lndcb, i32 4
  store i64 %lndcc, i64* %lndcd, !tbaa !1
  %lndce = load i64, i64* %R1_Var
  store i64 %lndce, i64* %R1_Var
  %lndcf = load i64, i64* %R1_Var
  %lndcg = and i64 %lndcf, 7
  %lndch = icmp ne i64 %lndcg, 0
  br i1 %lndch, label %ud8T, label %ud8S
ud8S:
  %lndci = load i64*, i64** %Sp_Var
  %lndcj = getelementptr inbounds i64, i64* %lndci, i32 5
  %lndck = ptrtoint i64* %lndcj to i64
  %lndcl = inttoptr i64 %lndck to i64*
  store i64* %lndcl, i64** %Sp_Var
  %lndcm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd8a_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndcn = load i64*, i64** %Sp_Var
  %lndco = load i64*, i64** %Hp_Var
  %lndcp = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndcm( i64* %Base_Arg, i64* %lndcn, i64* %lndco, i64 %lndcp, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud8T:
  %lndcq = load i64*, i64** %Sp_Var
  %lndcr = getelementptr inbounds i64, i64* %lndcq, i32 4
  %lndcs = ptrtoint i64* %lndcr to i64
  %lndct = inttoptr i64 %lndcs to i64*
  store i64* %lndct, i64** %Sp_Var
  %lndcu = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd88_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndcv = load i64*, i64** %Sp_Var
  %lndcw = load i64*, i64** %Hp_Var
  %lndcx = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndcu( i64* %Base_Arg, i64* %lndcv, i64* %lndcw, i64 %lndcx, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd7s:
  %lndcz = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lndcy = load i64*, i64** %Hp_Var
  %lndcA = getelementptr inbounds i64, i64* %lndcy, i32 -4
  store i64 %lndcz, i64* %lndcA, !tbaa !2
  %lndcC = load i64*, i64** %Sp_Var
  %lndcD = getelementptr inbounds i64, i64* %lndcC, i32 3
  %lndcE = bitcast i64* %lndcD to i64*
  %lndcF = load i64, i64* %lndcE, !tbaa !1
  %lndcB = load i64*, i64** %Hp_Var
  %lndcG = getelementptr inbounds i64, i64* %lndcB, i32 -3
  store i64 %lndcF, i64* %lndcG, !tbaa !2
  %lndcI = load i64*, i64** %Sp_Var
  %lndcJ = getelementptr inbounds i64, i64* %lndcI, i32 4
  %lndcK = bitcast i64* %lndcJ to i64*
  %lndcL = load i64, i64* %lndcK, !tbaa !1
  %lndcH = load i64*, i64** %Hp_Var
  %lndcM = getelementptr inbounds i64, i64* %lndcH, i32 -2
  store i64 %lndcL, i64* %lndcM, !tbaa !2
  %lndcO = load i64*, i64** %Sp_Var
  %lndcP = getelementptr inbounds i64, i64* %lndcO, i32 1
  %lndcQ = bitcast i64* %lndcP to i64*
  %lndcR = load i64, i64* %lndcQ, !tbaa !1
  %lndcN = load i64*, i64** %Hp_Var
  %lndcS = getelementptr inbounds i64, i64* %lndcN, i32 -1
  store i64 %lndcR, i64* %lndcS, !tbaa !2
  %lndcU = load i64, i64* %ls8dr
  %lndcT = load i64*, i64** %Hp_Var
  %lndcV = getelementptr inbounds i64, i64* %lndcT, i32 0
  store i64 %lndcU, i64* %lndcV, !tbaa !2
  %lndcY = load i64*, i64** %Hp_Var
  %lndcZ = ptrtoint i64* %lndcY to i64
  %lndd0 = add i64 %lndcZ, -31
  %lndcW = load i64*, i64** %Sp_Var
  %lndd1 = getelementptr inbounds i64, i64* %lndcW, i32 4
  store i64 %lndd0, i64* %lndd1, !tbaa !1
  %lndd2 = load i64*, i64** %Sp_Var
  %lndd3 = getelementptr inbounds i64, i64* %lndd2, i32 4
  %lndd4 = ptrtoint i64* %lndd3 to i64
  %lndd5 = inttoptr i64 %lndd4 to i64*
  store i64* %lndd5, i64** %Sp_Var
  %lndd6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7w_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndd7 = load i64*, i64** %Sp_Var
  %lndd8 = load i64*, i64** %Hp_Var
  %lndd9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndd6( i64* %Base_Arg, i64* %lndd7, i64* %lndd8, i64 %lndd9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd7D:
  %lndda = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lndda, !tbaa !4
  %lnddb = load i64, i64* %R1_Var
  store i64 %lnddb, i64* %R1_Var
  %lnddc = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnddd = load i64*, i64** %Sp_Var
  %lndde = load i64*, i64** %Hp_Var
  %lnddf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnddc( i64* %Base_Arg, i64* %lnddd, i64* %lndde, i64 %lnddf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd82_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd82_info$def to i8*)
define internal ghccc void @cd82_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cd82:
  %lnddg = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lnddg, !tbaa !1
  %lnddh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7O_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnddh( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd7W_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7W_info$def to i8*)
define internal ghccc void @cd7W_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 23497, i64 32}>
{
cd7W:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8do = alloca i64, i32 1
  %ls8dp = alloca i64, i32 1
  %ls8dq = alloca i64, i32 1
  %ls8dx = alloca i64, i32 1
  %ls8dA = alloca i64, i32 1
  %ls8dB = alloca i64, i32 1
  %ls8dC = alloca i64, i32 1
  %ls8dI = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8dO = alloca i64, i32 1
  %ls8dW = alloca i64, i32 1
  %lcd8M = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lnddi = load i64*, i64** %Hp_Var
  %lnddj = getelementptr inbounds i64, i64* %lnddi, i32 7
  %lnddk = ptrtoint i64* %lnddj to i64
  %lnddl = inttoptr i64 %lnddk to i64*
  store i64* %lnddl, i64** %Hp_Var
  %lnddm = load i64*, i64** %Hp_Var
  %lnddn = ptrtoint i64* %lnddm to i64
  %lnddo = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lnddp = bitcast i64* %lnddo to i64*
  %lnddq = load i64, i64* %lnddp, !tbaa !4
  %lnddr = icmp ugt i64 %lnddn, %lnddq
  br i1 %lnddr, label %cd80, label %cd7Z
cd7Z:
  %lndds = load i64*, i64** %Sp_Var
  %lnddt = getelementptr inbounds i64, i64* %lndds, i32 9
  %lnddu = bitcast i64* %lnddt to i64*
  %lnddv = load i64, i64* %lnddu, !tbaa !1
  store i64 %lnddv, i64* %ls8do
  %lnddw = load i64*, i64** %Sp_Var
  %lnddx = getelementptr inbounds i64, i64* %lnddw, i32 8
  %lnddy = bitcast i64* %lnddx to i64*
  %lnddz = load i64, i64* %lnddy, !tbaa !1
  store i64 %lnddz, i64* %ls8dp
  %lnddA = load i64*, i64** %Sp_Var
  %lnddB = getelementptr inbounds i64, i64* %lnddA, i32 6
  %lnddC = bitcast i64* %lnddB to i64*
  %lnddD = load i64, i64* %lnddC, !tbaa !1
  store i64 %lnddD, i64* %ls8dq
  %lnddE = load i64*, i64** %Sp_Var
  %lnddF = getelementptr inbounds i64, i64* %lnddE, i32 5
  %lnddG = bitcast i64* %lnddF to i64*
  %lnddH = load i64, i64* %lnddG, !tbaa !1
  store i64 %lnddH, i64* %ls8dx
  %lnddI = load i64*, i64** %Sp_Var
  %lnddJ = getelementptr inbounds i64, i64* %lnddI, i32 2
  %lnddK = bitcast i64* %lnddJ to i64*
  %lnddL = load i64, i64* %lnddK, !tbaa !1
  store i64 %lnddL, i64* %ls8dA
  %lnddM = load i64*, i64** %Sp_Var
  %lnddN = getelementptr inbounds i64, i64* %lnddM, i32 3
  %lnddO = bitcast i64* %lnddN to i64*
  %lnddP = load i64, i64* %lnddO, !tbaa !1
  store i64 %lnddP, i64* %ls8dB
  %lnddQ = load i64*, i64** %Sp_Var
  %lnddR = getelementptr inbounds i64, i64* %lnddQ, i32 4
  %lnddS = bitcast i64* %lnddR to i64*
  %lnddT = load i64, i64* %lnddS, !tbaa !1
  store i64 %lnddT, i64* %ls8dC
  %lnddV = load i64, i64* %R1_Var
  %lnddW = add i64 %lnddV, 16
  store i64 %lnddW, i64* %ls8dI
  %lnddX = load i64, i64* %ls8dI
  %lnddY = inttoptr i64 %lnddX to i8*
  %lnddZ = load i64*, i64** %Sp_Var
  %lnde0 = getelementptr inbounds i64, i64* %lnddZ, i32 7
  %lnde1 = bitcast i64* %lnde0 to i64*
  %lnde2 = load i64, i64* %lnde1, !tbaa !1
  %lnde3 = load i64*, i64** %Sp_Var
  %lnde4 = getelementptr inbounds i64, i64* %lnde3, i32 1
  %lnde5 = bitcast i64* %lnde4 to i64*
  %lnde6 = load i64, i64* %lnde5, !tbaa !1
  %lnde7 = add i64 %lnde2, %lnde6
  %lnde8 = inttoptr i64 %lnde7 to i8*
  %lnde9 = load i64, i64* %ls8dA
  %lndea = bitcast i8* @memcpy to i8* (i8*, i8*, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lndeb = call ccc i8* (i8*, i8*, i64) %lndea( i8* %lnddY, i8* %lnde8, i64 %lnde9 ) nounwind
  %lndec = ptrtoint i8* %lndeb to i64
  store i64 %lndec, i64* %ls8dO
  %lnded = load i64, i64* %ls8dI
  %lndee = load i64, i64* %ls8dA
  %lndef = add i64 %lnded, %lndee
  %lndeg = inttoptr i64 %lndef to i8*
  %lndeh = load i64, i64* %ls8do
  %lndei = load i64, i64* %ls8dq
  %lndej = add i64 %lndeh, %lndei
  %lndek = inttoptr i64 %lndej to i8*
  %lndel = load i64, i64* %ls8dB
  %lndem = bitcast i8* @memcpy to i8* (i8*, i8*, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lnden = call ccc i8* (i8*, i8*, i64) %lndem( i8* %lndeg, i8* %lndek, i64 %lndel ) nounwind
  %lndeo = ptrtoint i8* %lnden to i64
  store i64 %lndeo, i64* %ls8dW
  %lndeq = ptrtoint i8* @base_GHCziForeignPtr_PlainPtr_con_info to i64
  %lndep = load i64*, i64** %Hp_Var
  %lnder = getelementptr inbounds i64, i64* %lndep, i32 -6
  store i64 %lndeq, i64* %lnder, !tbaa !2
  %lndet = load i64, i64* %R1_Var
  %lndes = load i64*, i64** %Hp_Var
  %lndeu = getelementptr inbounds i64, i64* %lndes, i32 -5
  store i64 %lndet, i64* %lndeu, !tbaa !2
  %lndew = load i64*, i64** %Hp_Var
  %lndex = ptrtoint i64* %lndew to i64
  %lndey = add i64 %lndex, -45
  store i64 %lndey, i64* %lcd8M
  %lndeA = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lndez = load i64*, i64** %Hp_Var
  %lndeB = getelementptr inbounds i64, i64* %lndez, i32 -4
  store i64 %lndeA, i64* %lndeB, !tbaa !2
  %lndeD = load i64, i64* %lcd8M
  %lndeC = load i64*, i64** %Hp_Var
  %lndeE = getelementptr inbounds i64, i64* %lndeC, i32 -3
  store i64 %lndeD, i64* %lndeE, !tbaa !2
  %lndeG = load i64, i64* %ls8dI
  %lndeF = load i64*, i64** %Hp_Var
  %lndeH = getelementptr inbounds i64, i64* %lndeF, i32 -2
  store i64 %lndeG, i64* %lndeH, !tbaa !2
  %lndeI = load i64*, i64** %Hp_Var
  %lndeJ = getelementptr inbounds i64, i64* %lndeI, i32 -1
  store i64 0, i64* %lndeJ, !tbaa !2
  %lndeL = load i64, i64* %ls8dC
  %lndeK = load i64*, i64** %Hp_Var
  %lndeM = getelementptr inbounds i64, i64* %lndeK, i32 0
  store i64 %lndeL, i64* %lndeM, !tbaa !2
  %lndeP = load i64*, i64** %Hp_Var
  %lndeQ = ptrtoint i64* %lndeP to i64
  %lndeR = add i64 %lndeQ, -31
  %lndeN = load i64*, i64** %Sp_Var
  %lndeS = getelementptr inbounds i64, i64* %lndeN, i32 9
  store i64 %lndeR, i64* %lndeS, !tbaa !1
  %lndeT = load i64*, i64** %Sp_Var
  %lndeU = getelementptr inbounds i64, i64* %lndeT, i32 9
  %lndeV = ptrtoint i64* %lndeU to i64
  %lndeW = inttoptr i64 %lndeV to i64*
  store i64* %lndeW, i64** %Sp_Var
  %lndeX = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7O_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndeY = load i64*, i64** %Sp_Var
  %lndeZ = load i64*, i64** %Hp_Var
  %lndf0 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndeX( i64* %Base_Arg, i64* %lndeY, i64* %lndeZ, i64 %lndf0, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd80:
  %lndf1 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lndf1, !tbaa !4
  %lndf2 = load i64, i64* %R1_Var
  store i64 %lndf2, i64* %R1_Var
  %lndf3 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndf4 = load i64*, i64** %Sp_Var
  %lndf5 = load i64*, i64** %Hp_Var
  %lndf6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndf3( i64* %Base_Arg, i64* %lndf4, i64* %lndf5, i64 %lndf6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd7O_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7O_entry$def to i8*)
define internal ghccc void @cd7O_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cd7O:
  %ls8e4 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndf7 = load i64*, i64** %Sp_Var
  %lndf8 = getelementptr inbounds i64, i64* %lndf7, i32 0
  %lndf9 = bitcast i64* %lndf8 to i64*
  %lndfa = load i64, i64* %lndf9, !tbaa !1
  store i64 %lndfa, i64* %ls8e4
  %lndfc = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd88_info$def to i64
  %lndfb = load i64*, i64** %Sp_Var
  %lndfd = getelementptr inbounds i64, i64* %lndfb, i32 0
  store i64 %lndfc, i64* %lndfd, !tbaa !1
  %lndfe = load i64, i64* %ls8e4
  store i64 %lndfe, i64* %R1_Var
  %lndff = load i64, i64* %R1_Var
  %lndfg = and i64 %lndff, 7
  %lndfh = icmp ne i64 %lndfg, 0
  br i1 %lndfh, label %ud92, label %ud8W
ud8W:
  %lndfi = load i64*, i64** %Sp_Var
  %lndfj = getelementptr inbounds i64, i64* %lndfi, i32 1
  %lndfk = ptrtoint i64* %lndfj to i64
  %lndfl = inttoptr i64 %lndfk to i64*
  store i64* %lndfl, i64** %Sp_Var
  %lndfm = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd8a_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndfn = load i64*, i64** %Sp_Var
  %lndfo = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndfm( i64* %Base_Arg, i64* %lndfn, i64* %Hp_Arg, i64 %lndfo, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ud92:
  %lndfp = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd88_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndfq = load i64*, i64** %Sp_Var
  %lndfr = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndfp( i64* %Base_Arg, i64* %lndfq, i64* %Hp_Arg, i64 %lndfr, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd8a_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd8a_entry$def to i8*)
define internal ghccc void @cd8a_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cd8a:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndfs = load i64*, i64** %Sp_Var
  %lndft = getelementptr inbounds i64, i64* %lndfs, i32 -1
  %lndfu = ptrtoint i64* %lndft to i64
  %lndfv = inttoptr i64 %lndfu to i64*
  store i64* %lndfv, i64** %Sp_Var
  %lndfw = inttoptr i64 %R1_Arg to i64*
  %lndfx = load i64, i64* %lndfw, !tbaa !3
  %lndfy = inttoptr i64 %lndfx to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndfz = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndfy( i64* %Base_Arg, i64* %lndfz, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd88_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd88_info$def to i8*)
define internal ghccc void @cd88_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cd88:
  %lndfA = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lndfA, !tbaa !1
  %lndfB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7w_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndfB( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cd7w_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd7w_entry$def to i8*)
define internal ghccc void @cd7w_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cd7w:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8e5 = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndfC = load i64*, i64** %Hp_Var
  %lndfD = getelementptr inbounds i64, i64* %lndfC, i32 2
  %lndfE = ptrtoint i64* %lndfD to i64
  %lndfF = inttoptr i64 %lndfE to i64*
  store i64* %lndfF, i64** %Hp_Var
  %lndfG = load i64*, i64** %Sp_Var
  %lndfH = getelementptr inbounds i64, i64* %lndfG, i32 0
  %lndfI = bitcast i64* %lndfH to i64*
  %lndfJ = load i64, i64* %lndfI, !tbaa !1
  store i64 %lndfJ, i64* %ls8e5
  %lndfK = load i64*, i64** %Hp_Var
  %lndfL = ptrtoint i64* %lndfK to i64
  %lndfM = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndfN = bitcast i64* %lndfM to i64*
  %lndfO = load i64, i64* %lndfN, !tbaa !4
  %lndfP = icmp ugt i64 %lndfL, %lndfO
  br i1 %lndfP, label %cd8d, label %cd8c
cd8c:
  %lndfR = ptrtoint i8* @Word_WBS_con_info to i64
  %lndfQ = load i64*, i64** %Hp_Var
  %lndfS = getelementptr inbounds i64, i64* %lndfQ, i32 -1
  store i64 %lndfR, i64* %lndfS, !tbaa !2
  %lndfU = load i64, i64* %ls8e5
  %lndfT = load i64*, i64** %Hp_Var
  %lndfV = getelementptr inbounds i64, i64* %lndfT, i32 0
  store i64 %lndfU, i64* %lndfV, !tbaa !2
  %lndfX = load i64*, i64** %Hp_Var
  %lndfY = ptrtoint i64* %lndfX to i64
  %lndfZ = add i64 %lndfY, -5
  store i64 %lndfZ, i64* %R1_Var
  %lndg0 = load i64*, i64** %Sp_Var
  %lndg1 = getelementptr inbounds i64, i64* %lndg0, i32 1
  %lndg2 = ptrtoint i64* %lndg1 to i64
  %lndg3 = inttoptr i64 %lndg2 to i64*
  store i64* %lndg3, i64** %Sp_Var
  %lndg4 = load i64*, i64** %Sp_Var
  %lndg5 = getelementptr inbounds i64, i64* %lndg4, i32 0
  %lndg6 = bitcast i64* %lndg5 to i64*
  %lndg7 = load i64, i64* %lndg6, !tbaa !1
  %lndg8 = inttoptr i64 %lndg7 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndg9 = load i64*, i64** %Sp_Var
  %lndga = load i64*, i64** %Hp_Var
  %lndgb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndg8( i64* %Base_Arg, i64* %lndg9, i64* %lndga, i64 %lndgb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cd8d:
  %lndgc = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndgc, !tbaa !4
  %lndge = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cd88_info$def to i64
  %lndgd = load i64*, i64** %Sp_Var
  %lndgf = getelementptr inbounds i64, i64* %lndgd, i32 0
  store i64 %lndge, i64* %lndgf, !tbaa !1
  %lndgg = load i64, i64* %ls8e5
  store i64 %lndgg, i64* %R1_Var
  %lndgh = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndgi = load i64*, i64** %Sp_Var
  %lndgj = load i64*, i64** %Hp_Var
  %lndgk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndgh( i64* %Base_Arg, i64* %lndgi, i64* %lndgj, i64 %lndgk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_combinezuzdscombine1_closure_struct = type <{i64, i64}>
@Word_combinezuzdscombine1_closure$def = internal global %Word_combinezuzdscombine1_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_info$def to i64), i64 0}>
@Word_combinezuzdscombine1_closure = alias i8* bitcast (%Word_combinezuzdscombine1_closure_struct* @Word_combinezuzdscombine1_closure$def to i8*)
@Word_combinezuzdscombine1_slow = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_slow$def to i8*)
define ghccc void @Word_combinezuzdscombine1_slow$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdhh:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndj9 = load i64*, i64** %Sp_Var
  %lndja = getelementptr inbounds i64, i64* %lndj9, i32 4
  %lndjb = bitcast i64* %lndja to i64*
  %lndjc = load i64, i64* %lndjb, !tbaa !1
  store i64 %lndjc, i64* %R6_Var
  %lndjd = load i64*, i64** %Sp_Var
  %lndje = getelementptr inbounds i64, i64* %lndjd, i32 3
  %lndjf = bitcast i64* %lndje to i64*
  %lndjg = load i64, i64* %lndjf, !tbaa !1
  store i64 %lndjg, i64* %R5_Var
  %lndjh = load i64*, i64** %Sp_Var
  %lndji = getelementptr inbounds i64, i64* %lndjh, i32 2
  %lndjj = bitcast i64* %lndji to i64*
  %lndjk = load i64, i64* %lndjj, !tbaa !1
  store i64 %lndjk, i64* %R4_Var
  %lndjl = load i64*, i64** %Sp_Var
  %lndjm = getelementptr inbounds i64, i64* %lndjl, i32 1
  %lndjn = bitcast i64* %lndjm to i64*
  %lndjo = load i64, i64* %lndjn, !tbaa !1
  store i64 %lndjo, i64* %R3_Var
  %lndjp = load i64*, i64** %Sp_Var
  %lndjq = getelementptr inbounds i64, i64* %lndjp, i32 0
  %lndjr = bitcast i64* %lndjq to i64*
  %lndjs = load i64, i64* %lndjr, !tbaa !1
  store i64 %lndjs, i64* %R2_Var
  %lndjt = load i64, i64* %R1_Var
  store i64 %lndjt, i64* %R1_Var
  %lndju = load i64*, i64** %Sp_Var
  %lndjv = getelementptr inbounds i64, i64* %lndju, i32 5
  %lndjw = ptrtoint i64* %lndjv to i64
  %lndjx = inttoptr i64 %lndjw to i64*
  store i64* %lndjx, i64** %Sp_Var
  %lndjy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndjz = load i64*, i64** %Sp_Var
  %lndjA = load i64, i64* %R1_Var
  %lndjB = load i64, i64* %R2_Var
  %lndjC = load i64, i64* %R3_Var
  %lndjD = load i64, i64* %R4_Var
  %lndjE = load i64, i64* %R5_Var
  %lndjF = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndjy( i64* %Base_Arg, i64* %lndjz, i64* %Hp_Arg, i64 %lndjA, i64 %lndjB, i64 %lndjC, i64 %lndjD, i64 %lndjE, i64 %lndjF, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_combinezuzdscombine1_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_info$def to i8*)
define ghccc void @Word_combinezuzdscombine1_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_slow$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_info$def to i64)),i64 0), i64 3335, i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_info$def to i64)),i64 728), i64 30064771072, i64 0, i64 141733920783}>
{
cdho:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndjG = load i64*, i64** %Sp_Var
  %lndjH = getelementptr inbounds i64, i64* %lndjG, i32 -8
  %lndjI = ptrtoint i64* %lndjH to i64
  %lndjJ = icmp ult i64 %lndjI, %SpLim_Arg
  br i1 %lndjJ, label %cdhB, label %cdhC
cdhC:
  %lndjL = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhl_info$def to i64
  %lndjK = load i64*, i64** %Sp_Var
  %lndjM = getelementptr inbounds i64, i64* %lndjK, i32 -3
  store i64 %lndjL, i64* %lndjM, !tbaa !1
  store i64 %R2_Arg, i64* %R1_Var
  %lndjN = load i64*, i64** %Sp_Var
  %lndjO = getelementptr inbounds i64, i64* %lndjN, i32 -2
  store i64 %R5_Arg, i64* %lndjO, !tbaa !1
  %lndjP = load i64*, i64** %Sp_Var
  %lndjQ = getelementptr inbounds i64, i64* %lndjP, i32 -1
  store i64 %R6_Arg, i64* %lndjQ, !tbaa !1
  %lndjR = load i64*, i64** %Sp_Var
  %lndjS = getelementptr inbounds i64, i64* %lndjR, i32 1
  store i64 %R4_Arg, i64* %lndjS, !tbaa !1
  %lndjT = load i64*, i64** %Sp_Var
  %lndjU = getelementptr inbounds i64, i64* %lndjT, i32 -3
  %lndjV = ptrtoint i64* %lndjU to i64
  %lndjW = inttoptr i64 %lndjV to i64*
  store i64* %lndjW, i64** %Sp_Var
  %lndjX = load i64, i64* %R1_Var
  %lndjY = and i64 %lndjX, 7
  %lndjZ = icmp ne i64 %lndjY, 0
  br i1 %lndjZ, label %udj3, label %cdhm
cdhm:
  %lndk1 = load i64, i64* %R1_Var
  %lndk2 = inttoptr i64 %lndk1 to i64*
  %lndk3 = load i64, i64* %lndk2, !tbaa !3
  %lndk4 = inttoptr i64 %lndk3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndk5 = load i64*, i64** %Sp_Var
  %lndk6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndk4( i64* %Base_Arg, i64* %lndk5, i64* %Hp_Arg, i64 %lndk6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udj3:
  %lndk7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhl_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndk8 = load i64*, i64** %Sp_Var
  %lndk9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndk7( i64* %Base_Arg, i64* %lndk8, i64* %Hp_Arg, i64 %lndk9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdhB:
  %lndka = ptrtoint %Word_combinezuzdscombine1_closure_struct* @Word_combinezuzdscombine1_closure$def to i64
  store i64 %lndka, i64* %R1_Var
  %lndkb = load i64*, i64** %Sp_Var
  %lndkc = getelementptr inbounds i64, i64* %lndkb, i32 -5
  store i64 %R2_Arg, i64* %lndkc, !tbaa !1
  %lndkd = load i64*, i64** %Sp_Var
  %lndke = getelementptr inbounds i64, i64* %lndkd, i32 -4
  store i64 %R3_Arg, i64* %lndke, !tbaa !1
  %lndkf = load i64*, i64** %Sp_Var
  %lndkg = getelementptr inbounds i64, i64* %lndkf, i32 -3
  store i64 %R4_Arg, i64* %lndkg, !tbaa !1
  %lndkh = load i64*, i64** %Sp_Var
  %lndki = getelementptr inbounds i64, i64* %lndkh, i32 -2
  store i64 %R5_Arg, i64* %lndki, !tbaa !1
  %lndkj = load i64*, i64** %Sp_Var
  %lndkk = getelementptr inbounds i64, i64* %lndkj, i32 -1
  store i64 %R6_Arg, i64* %lndkk, !tbaa !1
  %lndkl = load i64*, i64** %Sp_Var
  %lndkm = getelementptr inbounds i64, i64* %lndkl, i32 -5
  %lndkn = ptrtoint i64* %lndkm to i64
  %lndko = inttoptr i64 %lndkn to i64*
  store i64* %lndko, i64** %Sp_Var
  %lndkp = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lndkq = bitcast i64* %lndkp to i64*
  %lndkr = load i64, i64* %lndkq, !tbaa !4
  %lndks = inttoptr i64 %lndkr to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndkt = load i64*, i64** %Sp_Var
  %lndku = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndks( i64* %Base_Arg, i64* %lndkt, i64* %Hp_Arg, i64 %lndku, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdhl_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhl_info$def to i8*)
define internal ghccc void @cdhl_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhl_info$def to i64)),i64 728), i64 900, i64 4294967328}>
{
cdhl:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8em = alloca i64, i32 1
  %ls8en = alloca i64, i32 1
  %ls8eo = alloca i64, i32 1
  %ls8ej = alloca i64, i32 1
  %ls8ei = alloca i64, i32 1
  %ls8ek = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndkv = load i64*, i64** %Hp_Var
  %lndkw = getelementptr inbounds i64, i64* %lndkv, i32 5
  %lndkx = ptrtoint i64* %lndkw to i64
  %lndky = inttoptr i64 %lndkx to i64*
  store i64* %lndky, i64** %Hp_Var
  %lndkz = load i64*, i64** %Hp_Var
  %lndkA = ptrtoint i64* %lndkz to i64
  %lndkB = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndkC = bitcast i64* %lndkB to i64*
  %lndkD = load i64, i64* %lndkC, !tbaa !4
  %lndkE = icmp ugt i64 %lndkA, %lndkD
  br i1 %lndkE, label %cdhF, label %cdhE
cdhE:
  %lndkF = load i64*, i64** %Sp_Var
  %lndkG = getelementptr inbounds i64, i64* %lndkF, i32 3
  %lndkH = bitcast i64* %lndkG to i64*
  %lndkI = load i64, i64* %lndkH, !tbaa !1
  store i64 %lndkI, i64* %ls8em
  %lndkJ = load i64, i64* %ls8em
  switch i64 %lndkJ, label %cdht [i64 0, label %cdhu]
cdht:
  %lndkM = load i64, i64* %R1_Var
  %lndkN = add i64 %lndkM, 31
  %lndkO = inttoptr i64 %lndkN to i64*
  %lndkP = load i64, i64* %lndkO, !tbaa !3
  store i64 %lndkP, i64* %ls8en
  %lndkQ = load i64, i64* %ls8en
  switch i64 %lndkQ, label %cdi6 [i64 0, label %cdi9]
cdi6:
  %lndkR = load i64, i64* %ls8em
  %lndkS = load i64, i64* %ls8en
  %lndkT = add i64 %lndkR, %lndkS
  store i64 %lndkT, i64* %ls8eo
  %lndkU = load i64, i64* %ls8eo
  %lndkV = icmp slt i64 %lndkU, 0
  %lndkW = zext i1 %lndkV to i64
  switch i64 %lndkW, label %cdhR [i64 0, label %cdhR
i64 1, label %cdhS]
cdhR:
  %lndkZ = load i64, i64* %R1_Var
  %lndl0 = add i64 %lndkZ, 7
  %lndl1 = inttoptr i64 %lndl0 to i64*
  %lndl2 = load i64, i64* %lndl1, !tbaa !3
  store i64 %lndl2, i64* %ls8ej
  %lndl5 = load i64, i64* %R1_Var
  %lndl6 = add i64 %lndl5, 15
  %lndl7 = inttoptr i64 %lndl6 to i64*
  %lndl8 = load i64, i64* %lndl7, !tbaa !3
  store i64 %lndl8, i64* %ls8ei
  %lndlb = load i64, i64* %R1_Var
  %lndlc = add i64 %lndlb, 23
  %lndld = inttoptr i64 %lndlc to i64*
  %lndle = load i64, i64* %lndld, !tbaa !3
  store i64 %lndle, i64* %ls8ek
  %lndlf = load i64*, i64** %Hp_Var
  %lndlg = getelementptr inbounds i64, i64* %lndlf, i32 -5
  %lndlh = ptrtoint i64* %lndlg to i64
  %lndli = inttoptr i64 %lndlh to i64*
  store i64* %lndli, i64** %Hp_Var
  %lndlk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhY_info$def to i64
  %lndlj = load i64*, i64** %Sp_Var
  %lndll = getelementptr inbounds i64, i64* %lndlj, i32 -5
  store i64 %lndlk, i64* %lndll, !tbaa !1
  %lndlm = load i64, i64* %ls8eo
  store i64 %lndlm, i64* %R1_Var
  %lndlo = load i64, i64* %ls8ek
  %lndln = load i64*, i64** %Sp_Var
  %lndlp = getelementptr inbounds i64, i64* %lndln, i32 -4
  store i64 %lndlo, i64* %lndlp, !tbaa !1
  %lndlr = load i64, i64* %ls8em
  %lndlq = load i64*, i64** %Sp_Var
  %lndls = getelementptr inbounds i64, i64* %lndlq, i32 -3
  store i64 %lndlr, i64* %lndls, !tbaa !1
  %lndlu = load i64, i64* %ls8en
  %lndlt = load i64*, i64** %Sp_Var
  %lndlv = getelementptr inbounds i64, i64* %lndlt, i32 -2
  store i64 %lndlu, i64* %lndlv, !tbaa !1
  %lndlx = load i64, i64* %ls8eo
  %lndlw = load i64*, i64** %Sp_Var
  %lndly = getelementptr inbounds i64, i64* %lndlw, i32 -1
  store i64 %lndlx, i64* %lndly, !tbaa !1
  %lndlA = load i64, i64* %ls8ej
  %lndlz = load i64*, i64** %Sp_Var
  %lndlB = getelementptr inbounds i64, i64* %lndlz, i32 0
  store i64 %lndlA, i64* %lndlB, !tbaa !1
  %lndlD = load i64, i64* %ls8ei
  %lndlC = load i64*, i64** %Sp_Var
  %lndlE = getelementptr inbounds i64, i64* %lndlC, i32 3
  store i64 %lndlD, i64* %lndlE, !tbaa !1
  %lndlF = load i64*, i64** %Sp_Var
  %lndlG = getelementptr inbounds i64, i64* %lndlF, i32 -5
  %lndlH = ptrtoint i64* %lndlG to i64
  %lndlI = inttoptr i64 %lndlH to i64*
  store i64* %lndlI, i64** %Sp_Var
  %lndlJ = bitcast i8* @stg_newPinnedByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndlK = load i64*, i64** %Sp_Var
  %lndlL = load i64*, i64** %Hp_Var
  %lndlM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndlJ( i64* %Base_Arg, i64* %lndlK, i64* %lndlL, i64 %lndlM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdhS:
  %lndlN = load i64*, i64** %Hp_Var
  %lndlO = getelementptr inbounds i64, i64* %lndlN, i32 -5
  %lndlP = ptrtoint i64* %lndlO to i64
  %lndlQ = inttoptr i64 %lndlP to i64*
  store i64* %lndlQ, i64** %Hp_Var
  %lndlS = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdi4_info$def to i64
  %lndlR = load i64*, i64** %Sp_Var
  %lndlT = getelementptr inbounds i64, i64* %lndlR, i32 4
  store i64 %lndlS, i64* %lndlT, !tbaa !1
  %lndlU = ptrtoint i8* @base_GHCziForeignPtr_mallocPlainForeignPtrBytes2_closure to i64
  store i64 %lndlU, i64* %R1_Var
  %lndlV = load i64*, i64** %Sp_Var
  %lndlW = getelementptr inbounds i64, i64* %lndlV, i32 4
  %lndlX = ptrtoint i64* %lndlW to i64
  %lndlY = inttoptr i64 %lndlX to i64*
  store i64* %lndlY, i64** %Sp_Var
  %lndlZ = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndm0 = load i64*, i64** %Sp_Var
  %lndm1 = load i64*, i64** %Hp_Var
  %lndm2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndlZ( i64* %Base_Arg, i64* %lndm0, i64* %lndm1, i64 %lndm2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdi9:
  %lndm4 = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lndm3 = load i64*, i64** %Hp_Var
  %lndm5 = getelementptr inbounds i64, i64* %lndm3, i32 -4
  store i64 %lndm4, i64* %lndm5, !tbaa !2
  %lndm7 = load i64*, i64** %Sp_Var
  %lndm8 = getelementptr inbounds i64, i64* %lndm7, i32 1
  %lndm9 = bitcast i64* %lndm8 to i64*
  %lndma = load i64, i64* %lndm9, !tbaa !1
  %lndm6 = load i64*, i64** %Hp_Var
  %lndmb = getelementptr inbounds i64, i64* %lndm6, i32 -3
  store i64 %lndma, i64* %lndmb, !tbaa !2
  %lndmd = load i64*, i64** %Sp_Var
  %lndme = getelementptr inbounds i64, i64* %lndmd, i32 4
  %lndmf = bitcast i64* %lndme to i64*
  %lndmg = load i64, i64* %lndmf, !tbaa !1
  %lndmc = load i64*, i64** %Hp_Var
  %lndmh = getelementptr inbounds i64, i64* %lndmc, i32 -2
  store i64 %lndmg, i64* %lndmh, !tbaa !2
  %lndmj = load i64*, i64** %Sp_Var
  %lndmk = getelementptr inbounds i64, i64* %lndmj, i32 2
  %lndml = bitcast i64* %lndmk to i64*
  %lndmm = load i64, i64* %lndml, !tbaa !1
  %lndmi = load i64*, i64** %Hp_Var
  %lndmn = getelementptr inbounds i64, i64* %lndmi, i32 -1
  store i64 %lndmm, i64* %lndmn, !tbaa !2
  %lndmp = load i64, i64* %ls8em
  %lndmo = load i64*, i64** %Hp_Var
  %lndmq = getelementptr inbounds i64, i64* %lndmo, i32 0
  store i64 %lndmp, i64* %lndmq, !tbaa !2
  %lndmt = load i64*, i64** %Hp_Var
  %lndmu = ptrtoint i64* %lndmt to i64
  %lndmv = add i64 %lndmu, -31
  %lndmr = load i64*, i64** %Sp_Var
  %lndmw = getelementptr inbounds i64, i64* %lndmr, i32 4
  store i64 %lndmv, i64* %lndmw, !tbaa !1
  %lndmx = load i64*, i64** %Sp_Var
  %lndmy = getelementptr inbounds i64, i64* %lndmx, i32 4
  %lndmz = ptrtoint i64* %lndmy to i64
  %lndmA = inttoptr i64 %lndmz to i64*
  store i64* %lndmA, i64** %Sp_Var
  %lndmB = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhy_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndmC = load i64*, i64** %Sp_Var
  %lndmD = load i64*, i64** %Hp_Var
  %lndmE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndmB( i64* %Base_Arg, i64* %lndmC, i64* %lndmD, i64 %lndmE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdhu:
  %lndmF = load i64*, i64** %Hp_Var
  %lndmG = getelementptr inbounds i64, i64* %lndmF, i32 -5
  %lndmH = ptrtoint i64* %lndmG to i64
  %lndmI = inttoptr i64 %lndmH to i64*
  store i64* %lndmI, i64** %Hp_Var
  %lndmK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdib_info$def to i64
  %lndmJ = load i64*, i64** %Sp_Var
  %lndmL = getelementptr inbounds i64, i64* %lndmJ, i32 4
  store i64 %lndmK, i64* %lndmL, !tbaa !1
  %lndmM = load i64, i64* %R1_Var
  store i64 %lndmM, i64* %R1_Var
  %lndmN = load i64, i64* %R1_Var
  %lndmO = and i64 %lndmN, 7
  %lndmP = icmp ne i64 %lndmO, 0
  br i1 %lndmP, label %udiU, label %udiT
udiT:
  %lndmQ = load i64*, i64** %Sp_Var
  %lndmR = getelementptr inbounds i64, i64* %lndmQ, i32 5
  %lndmS = ptrtoint i64* %lndmR to i64
  %lndmT = inttoptr i64 %lndmS to i64*
  store i64* %lndmT, i64** %Sp_Var
  %lndmU = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdic_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndmV = load i64*, i64** %Sp_Var
  %lndmW = load i64*, i64** %Hp_Var
  %lndmX = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndmU( i64* %Base_Arg, i64* %lndmV, i64* %lndmW, i64 %lndmX, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udiU:
  %lndmY = load i64*, i64** %Sp_Var
  %lndmZ = getelementptr inbounds i64, i64* %lndmY, i32 4
  %lndn0 = ptrtoint i64* %lndmZ to i64
  %lndn1 = inttoptr i64 %lndn0 to i64*
  store i64* %lndn1, i64** %Sp_Var
  %lndn2 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdib_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndn3 = load i64*, i64** %Sp_Var
  %lndn4 = load i64*, i64** %Hp_Var
  %lndn5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndn2( i64* %Base_Arg, i64* %lndn3, i64* %lndn4, i64 %lndn5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdhF:
  %lndn6 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 40, i64* %lndn6, !tbaa !4
  %lndn7 = load i64, i64* %R1_Var
  store i64 %lndn7, i64* %R1_Var
  %lndn8 = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndn9 = load i64*, i64** %Sp_Var
  %lndna = load i64*, i64** %Hp_Var
  %lndnb = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndn8( i64* %Base_Arg, i64* %lndn9, i64* %lndna, i64 %lndnb, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdi4_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdi4_info$def to i8*)
define internal ghccc void @cdi4_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cdi4:
  %lndnc = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lndnc, !tbaa !1
  %lndnd = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhQ_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndnd( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdhY_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhY_info$def to i8*)
define internal ghccc void @cdhY_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 29641, i64 32}>
{
cdhY:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8ed = alloca i64, i32 1
  %ls8ei = alloca i64, i32 1
  %ls8ej = alloca i64, i32 1
  %ls8ek = alloca i64, i32 1
  %ls8em = alloca i64, i32 1
  %ls8en = alloca i64, i32 1
  %ls8eo = alloca i64, i32 1
  %ls8eu = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8eA = alloca i64, i32 1
  %ls8eI = alloca i64, i32 1
  %lcdiO = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndne = load i64*, i64** %Hp_Var
  %lndnf = getelementptr inbounds i64, i64* %lndne, i32 7
  %lndng = ptrtoint i64* %lndnf to i64
  %lndnh = inttoptr i64 %lndng to i64*
  store i64* %lndnh, i64** %Hp_Var
  %lndni = load i64*, i64** %Hp_Var
  %lndnj = ptrtoint i64* %lndni to i64
  %lndnk = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndnl = bitcast i64* %lndnk to i64*
  %lndnm = load i64, i64* %lndnl, !tbaa !4
  %lndnn = icmp ugt i64 %lndnj, %lndnm
  br i1 %lndnn, label %cdi2, label %cdi1
cdi1:
  %lndno = load i64*, i64** %Sp_Var
  %lndnp = getelementptr inbounds i64, i64* %lndno, i32 6
  %lndnq = bitcast i64* %lndnp to i64*
  %lndnr = load i64, i64* %lndnq, !tbaa !1
  store i64 %lndnr, i64* %ls8ed
  %lndns = load i64*, i64** %Sp_Var
  %lndnt = getelementptr inbounds i64, i64* %lndns, i32 8
  %lndnu = bitcast i64* %lndnt to i64*
  %lndnv = load i64, i64* %lndnu, !tbaa !1
  store i64 %lndnv, i64* %ls8ei
  %lndnw = load i64*, i64** %Sp_Var
  %lndnx = getelementptr inbounds i64, i64* %lndnw, i32 5
  %lndny = bitcast i64* %lndnx to i64*
  %lndnz = load i64, i64* %lndny, !tbaa !1
  store i64 %lndnz, i64* %ls8ej
  %lndnA = load i64*, i64** %Sp_Var
  %lndnB = getelementptr inbounds i64, i64* %lndnA, i32 1
  %lndnC = bitcast i64* %lndnB to i64*
  %lndnD = load i64, i64* %lndnC, !tbaa !1
  store i64 %lndnD, i64* %ls8ek
  %lndnE = load i64*, i64** %Sp_Var
  %lndnF = getelementptr inbounds i64, i64* %lndnE, i32 2
  %lndnG = bitcast i64* %lndnF to i64*
  %lndnH = load i64, i64* %lndnG, !tbaa !1
  store i64 %lndnH, i64* %ls8em
  %lndnI = load i64*, i64** %Sp_Var
  %lndnJ = getelementptr inbounds i64, i64* %lndnI, i32 3
  %lndnK = bitcast i64* %lndnJ to i64*
  %lndnL = load i64, i64* %lndnK, !tbaa !1
  store i64 %lndnL, i64* %ls8en
  %lndnM = load i64*, i64** %Sp_Var
  %lndnN = getelementptr inbounds i64, i64* %lndnM, i32 4
  %lndnO = bitcast i64* %lndnN to i64*
  %lndnP = load i64, i64* %lndnO, !tbaa !1
  store i64 %lndnP, i64* %ls8eo
  %lndnR = load i64, i64* %R1_Var
  %lndnS = add i64 %lndnR, 16
  store i64 %lndnS, i64* %ls8eu
  %lndnT = load i64, i64* %ls8eu
  %lndnU = inttoptr i64 %lndnT to i8*
  %lndnV = load i64*, i64** %Sp_Var
  %lndnW = getelementptr inbounds i64, i64* %lndnV, i32 9
  %lndnX = bitcast i64* %lndnW to i64*
  %lndnY = load i64, i64* %lndnX, !tbaa !1
  %lndnZ = load i64*, i64** %Sp_Var
  %lndo0 = getelementptr inbounds i64, i64* %lndnZ, i32 7
  %lndo1 = bitcast i64* %lndo0 to i64*
  %lndo2 = load i64, i64* %lndo1, !tbaa !1
  %lndo3 = add i64 %lndnY, %lndo2
  %lndo4 = inttoptr i64 %lndo3 to i8*
  %lndo5 = load i64, i64* %ls8em
  %lndo6 = bitcast i8* @memcpy to i8* (i8*, i8*, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lndo7 = call ccc i8* (i8*, i8*, i64) %lndo6( i8* %lndnU, i8* %lndo4, i64 %lndo5 ) nounwind
  %lndo8 = ptrtoint i8* %lndo7 to i64
  store i64 %lndo8, i64* %ls8eA
  %lndo9 = load i64, i64* %ls8eu
  %lndoa = load i64, i64* %ls8em
  %lndob = add i64 %lndo9, %lndoa
  %lndoc = inttoptr i64 %lndob to i8*
  %lndod = load i64, i64* %ls8ei
  %lndoe = load i64, i64* %ls8ek
  %lndof = add i64 %lndod, %lndoe
  %lndog = inttoptr i64 %lndof to i8*
  %lndoh = load i64, i64* %ls8en
  %lndoi = bitcast i8* @memcpy to i8* (i8*, i8*, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lndoj = call ccc i8* (i8*, i8*, i64) %lndoi( i8* %lndoc, i8* %lndog, i64 %lndoh ) nounwind
  %lndok = ptrtoint i8* %lndoj to i64
  store i64 %lndok, i64* %ls8eI
  %lndom = ptrtoint i8* @base_GHCziForeignPtr_PlainPtr_con_info to i64
  %lndol = load i64*, i64** %Hp_Var
  %lndon = getelementptr inbounds i64, i64* %lndol, i32 -6
  store i64 %lndom, i64* %lndon, !tbaa !2
  %lndop = load i64, i64* %R1_Var
  %lndoo = load i64*, i64** %Hp_Var
  %lndoq = getelementptr inbounds i64, i64* %lndoo, i32 -5
  store i64 %lndop, i64* %lndoq, !tbaa !2
  %lndos = load i64*, i64** %Hp_Var
  %lndot = ptrtoint i64* %lndos to i64
  %lndou = add i64 %lndot, -45
  store i64 %lndou, i64* %lcdiO
  %lndow = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lndov = load i64*, i64** %Hp_Var
  %lndox = getelementptr inbounds i64, i64* %lndov, i32 -4
  store i64 %lndow, i64* %lndox, !tbaa !2
  %lndoz = load i64, i64* %lcdiO
  %lndoy = load i64*, i64** %Hp_Var
  %lndoA = getelementptr inbounds i64, i64* %lndoy, i32 -3
  store i64 %lndoz, i64* %lndoA, !tbaa !2
  %lndoC = load i64, i64* %ls8eu
  %lndoB = load i64*, i64** %Hp_Var
  %lndoD = getelementptr inbounds i64, i64* %lndoB, i32 -2
  store i64 %lndoC, i64* %lndoD, !tbaa !2
  %lndoE = load i64*, i64** %Hp_Var
  %lndoF = getelementptr inbounds i64, i64* %lndoE, i32 -1
  store i64 0, i64* %lndoF, !tbaa !2
  %lndoH = load i64, i64* %ls8eo
  %lndoG = load i64*, i64** %Hp_Var
  %lndoI = getelementptr inbounds i64, i64* %lndoG, i32 0
  store i64 %lndoH, i64* %lndoI, !tbaa !2
  %lndoL = load i64*, i64** %Hp_Var
  %lndoM = ptrtoint i64* %lndoL to i64
  %lndoN = add i64 %lndoM, -31
  %lndoJ = load i64*, i64** %Sp_Var
  %lndoO = getelementptr inbounds i64, i64* %lndoJ, i32 9
  store i64 %lndoN, i64* %lndoO, !tbaa !1
  %lndoP = load i64*, i64** %Sp_Var
  %lndoQ = getelementptr inbounds i64, i64* %lndoP, i32 9
  %lndoR = ptrtoint i64* %lndoQ to i64
  %lndoS = inttoptr i64 %lndoR to i64*
  store i64* %lndoS, i64** %Sp_Var
  %lndoT = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhQ_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndoU = load i64*, i64** %Sp_Var
  %lndoV = load i64*, i64** %Hp_Var
  %lndoW = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndoT( i64* %Base_Arg, i64* %lndoU, i64* %lndoV, i64 %lndoW, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdi2:
  %lndoX = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lndoX, !tbaa !4
  %lndoY = load i64, i64* %R1_Var
  store i64 %lndoY, i64* %R1_Var
  %lndoZ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndp0 = load i64*, i64** %Sp_Var
  %lndp1 = load i64*, i64** %Hp_Var
  %lndp2 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndoZ( i64* %Base_Arg, i64* %lndp0, i64* %lndp1, i64 %lndp2, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdhQ_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhQ_entry$def to i8*)
define internal ghccc void @cdhQ_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdhQ:
  %ls8eQ = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndp3 = load i64*, i64** %Sp_Var
  %lndp4 = getelementptr inbounds i64, i64* %lndp3, i32 0
  %lndp5 = bitcast i64* %lndp4 to i64*
  %lndp6 = load i64, i64* %lndp5, !tbaa !1
  store i64 %lndp6, i64* %ls8eQ
  %lndp8 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdib_info$def to i64
  %lndp7 = load i64*, i64** %Sp_Var
  %lndp9 = getelementptr inbounds i64, i64* %lndp7, i32 0
  store i64 %lndp8, i64* %lndp9, !tbaa !1
  %lndpa = load i64, i64* %ls8eQ
  store i64 %lndpa, i64* %R1_Var
  %lndpb = load i64, i64* %R1_Var
  %lndpc = and i64 %lndpb, 7
  %lndpd = icmp ne i64 %lndpc, 0
  br i1 %lndpd, label %udj4, label %udiY
udiY:
  %lndpe = load i64*, i64** %Sp_Var
  %lndpf = getelementptr inbounds i64, i64* %lndpe, i32 1
  %lndpg = ptrtoint i64* %lndpf to i64
  %lndph = inttoptr i64 %lndpg to i64*
  store i64* %lndph, i64** %Sp_Var
  %lndpi = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdic_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndpj = load i64*, i64** %Sp_Var
  %lndpk = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndpi( i64* %Base_Arg, i64* %lndpj, i64* %Hp_Arg, i64 %lndpk, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udj4:
  %lndpl = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdib_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndpm = load i64*, i64** %Sp_Var
  %lndpn = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndpl( i64* %Base_Arg, i64* %lndpm, i64* %Hp_Arg, i64 %lndpn, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdic_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdic_entry$def to i8*)
define internal ghccc void @cdic_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdic:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndpo = load i64*, i64** %Sp_Var
  %lndpp = getelementptr inbounds i64, i64* %lndpo, i32 -1
  %lndpq = ptrtoint i64* %lndpp to i64
  %lndpr = inttoptr i64 %lndpq to i64*
  store i64* %lndpr, i64** %Sp_Var
  %lndps = inttoptr i64 %R1_Arg to i64*
  %lndpt = load i64, i64* %lndps, !tbaa !3
  %lndpu = inttoptr i64 %lndpt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndpv = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndpu( i64* %Base_Arg, i64* %lndpv, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdib_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdib_info$def to i8*)
define internal ghccc void @cdib_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cdib:
  %lndpw = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lndpw, !tbaa !1
  %lndpx = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhy_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndpx( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdhy_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdhy_entry$def to i8*)
define internal ghccc void @cdhy_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdhy:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8eR = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndpy = load i64*, i64** %Hp_Var
  %lndpz = getelementptr inbounds i64, i64* %lndpy, i32 2
  %lndpA = ptrtoint i64* %lndpz to i64
  %lndpB = inttoptr i64 %lndpA to i64*
  store i64* %lndpB, i64** %Hp_Var
  %lndpC = load i64*, i64** %Sp_Var
  %lndpD = getelementptr inbounds i64, i64* %lndpC, i32 0
  %lndpE = bitcast i64* %lndpD to i64*
  %lndpF = load i64, i64* %lndpE, !tbaa !1
  store i64 %lndpF, i64* %ls8eR
  %lndpG = load i64*, i64** %Hp_Var
  %lndpH = ptrtoint i64* %lndpG to i64
  %lndpI = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndpJ = bitcast i64* %lndpI to i64*
  %lndpK = load i64, i64* %lndpJ, !tbaa !4
  %lndpL = icmp ugt i64 %lndpH, %lndpK
  br i1 %lndpL, label %cdif, label %cdie
cdie:
  %lndpN = ptrtoint i8* @Word_WBS_con_info to i64
  %lndpM = load i64*, i64** %Hp_Var
  %lndpO = getelementptr inbounds i64, i64* %lndpM, i32 -1
  store i64 %lndpN, i64* %lndpO, !tbaa !2
  %lndpQ = load i64, i64* %ls8eR
  %lndpP = load i64*, i64** %Hp_Var
  %lndpR = getelementptr inbounds i64, i64* %lndpP, i32 0
  store i64 %lndpQ, i64* %lndpR, !tbaa !2
  %lndpT = load i64*, i64** %Hp_Var
  %lndpU = ptrtoint i64* %lndpT to i64
  %lndpV = add i64 %lndpU, -5
  store i64 %lndpV, i64* %R1_Var
  %lndpW = load i64*, i64** %Sp_Var
  %lndpX = getelementptr inbounds i64, i64* %lndpW, i32 1
  %lndpY = ptrtoint i64* %lndpX to i64
  %lndpZ = inttoptr i64 %lndpY to i64*
  store i64* %lndpZ, i64** %Sp_Var
  %lndq0 = load i64*, i64** %Sp_Var
  %lndq1 = getelementptr inbounds i64, i64* %lndq0, i32 0
  %lndq2 = bitcast i64* %lndq1 to i64*
  %lndq3 = load i64, i64* %lndq2, !tbaa !1
  %lndq4 = inttoptr i64 %lndq3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndq5 = load i64*, i64** %Sp_Var
  %lndq6 = load i64*, i64** %Hp_Var
  %lndq7 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndq4( i64* %Base_Arg, i64* %lndq5, i64* %lndq6, i64 %lndq7, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdif:
  %lndq8 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndq8, !tbaa !4
  %lndqa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdib_info$def to i64
  %lndq9 = load i64*, i64** %Sp_Var
  %lndqb = getelementptr inbounds i64, i64* %lndq9, i32 0
  store i64 %lndqa, i64* %lndqb, !tbaa !1
  %lndqc = load i64, i64* %ls8eR
  store i64 %lndqc, i64* %R1_Var
  %lndqd = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndqe = load i64*, i64** %Sp_Var
  %lndqf = load i64*, i64** %Hp_Var
  %lndqg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndqd( i64* %Base_Arg, i64* %lndqe, i64* %lndqf, i64 %lndqg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_combinezuzdscombine2_closure_struct = type <{i64, i64}>
%udrk_srtd_struct = type <{i64, i64, i64}>
@Word_combinezuzdscombine2_closure$def = internal global %Word_combinezuzdscombine2_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine2_info$def to i64), i64 0}>
@Word_combinezuzdscombine2_closure = alias i8* bitcast (%Word_combinezuzdscombine2_closure_struct* @Word_combinezuzdscombine2_closure$def to i8*)
@udrk_srtd$def = internal constant %udrk_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 328), i64 57, i64 72057594306363395}>
@udrk_srtd = internal alias i8* bitcast (%udrk_srtd_struct* @udrk_srtd$def to i8*)
@s8f6_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8f6_info$def to i8*)
define internal ghccc void @s8f6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8f6_info$def to i64)),i64 328), i64 3, i64 1152921517491748880}>
{
cdqM:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndrl = load i64*, i64** %Sp_Var
  %lndrm = getelementptr inbounds i64, i64* %lndrl, i32 -5
  %lndrn = ptrtoint i64* %lndrm to i64
  %lndro = icmp ult i64 %lndrn, %SpLim_Arg
  br i1 %lndro, label %cdqN, label %cdqO
cdqO:
  %lndrq = ptrtoint i8* @stg_upd_frame_info to i64
  %lndrp = load i64*, i64** %Sp_Var
  %lndrr = getelementptr inbounds i64, i64* %lndrp, i32 -2
  store i64 %lndrq, i64* %lndrr, !tbaa !1
  %lndrt = load i64, i64* %R1_Var
  %lndrs = load i64*, i64** %Sp_Var
  %lndru = getelementptr inbounds i64, i64* %lndrs, i32 -1
  store i64 %lndrt, i64* %lndru, !tbaa !1
  %lndrw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqK_info$def to i64
  %lndrv = load i64*, i64** %Sp_Var
  %lndrx = getelementptr inbounds i64, i64* %lndrv, i32 -5
  store i64 %lndrw, i64* %lndrx, !tbaa !1
  %lndrA = load i64, i64* %R1_Var
  %lndrB = add i64 %lndrA, 32
  %lndrC = inttoptr i64 %lndrB to i64*
  %lndrD = load i64, i64* %lndrC, !tbaa !3
  store i64 %lndrD, i64* %R2_Var
  %lndrH = load i64, i64* %R1_Var
  %lndrI = add i64 %lndrH, 16
  %lndrJ = inttoptr i64 %lndrI to i64*
  %lndrK = load i64, i64* %lndrJ, !tbaa !3
  %lndrE = load i64*, i64** %Sp_Var
  %lndrL = getelementptr inbounds i64, i64* %lndrE, i32 -4
  store i64 %lndrK, i64* %lndrL, !tbaa !1
  %lndrP = load i64, i64* %R1_Var
  %lndrQ = add i64 %lndrP, 24
  %lndrR = inttoptr i64 %lndrQ to i64*
  %lndrS = load i64, i64* %lndrR, !tbaa !3
  %lndrM = load i64*, i64** %Sp_Var
  %lndrT = getelementptr inbounds i64, i64* %lndrM, i32 -3
  store i64 %lndrS, i64* %lndrT, !tbaa !1
  %lndrU = load i64*, i64** %Sp_Var
  %lndrV = getelementptr inbounds i64, i64* %lndrU, i32 -5
  %lndrW = ptrtoint i64* %lndrV to i64
  %lndrX = inttoptr i64 %lndrW to i64*
  store i64* %lndrX, i64** %Sp_Var
  %lndrY = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndrZ = load i64*, i64** %Sp_Var
  %lnds0 = load i64, i64* %R1_Var
  %lnds1 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndrY( i64* %Base_Arg, i64* %lndrZ, i64* %Hp_Arg, i64 %lnds0, i64 %lnds1, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdqN:
  %lnds2 = load i64, i64* %R1_Var
  store i64 %lnds2, i64* %R1_Var
  %lnds3 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lnds4 = bitcast i64* %lnds3 to i64*
  %lnds5 = load i64, i64* %lnds4, !tbaa !4
  %lnds6 = inttoptr i64 %lnds5 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lnds7 = load i64*, i64** %Sp_Var
  %lnds8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lnds6( i64* %Base_Arg, i64* %lnds7, i64* %Hp_Arg, i64 %lnds8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdqK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqK_info$def to i8*)
define internal ghccc void @cdqK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdqK_info$def to i64)),i64 328), i64 2, i64 1152921517491748896}>
{
cdqK:
  %ls8eW = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lnds9 = load i64*, i64** %Sp_Var
  %lndsa = getelementptr inbounds i64, i64* %lnds9, i32 1
  %lndsb = bitcast i64* %lndsa to i64*
  %lndsc = load i64, i64* %lndsb, !tbaa !1
  store i64 %lndsc, i64* %ls8eW
  %lndsd = icmp sge i64 %R1_Arg, 0
  %lndse = zext i1 %lndsd to i64
  switch i64 %lndse, label %cdr2 [i64 0, label %cdr2
i64 1, label %cdr9]
cdr2:
  %lndsg = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr0_info$def to i64
  %lndsf = load i64*, i64** %Sp_Var
  %lndsh = getelementptr inbounds i64, i64* %lndsf, i32 1
  store i64 %lndsg, i64* %lndsh, !tbaa !1
  %lndsi = sub i64 0, %R1_Arg
  store i64 %lndsi, i64* %R3_Var
  %lndsj = load i64, i64* %ls8eW
  store i64 %lndsj, i64* %R2_Var
  %lndsk = load i64*, i64** %Sp_Var
  %lndsl = getelementptr inbounds i64, i64* %lndsk, i32 1
  %lndsm = ptrtoint i64* %lndsl to i64
  %lndsn = inttoptr i64 %lndsm to i64*
  store i64* %lndsn, i64** %Sp_Var
  %lndso = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndsp = load i64*, i64** %Sp_Var
  %lndsq = load i64, i64* %R2_Var
  %lndsr = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndso( i64* %Base_Arg, i64* %lndsp, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndsq, i64 %lndsr, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdr9:
  %lndst = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr8_info$def to i64
  %lndss = load i64*, i64** %Sp_Var
  %lndsu = getelementptr inbounds i64, i64* %lndss, i32 1
  store i64 %lndst, i64* %lndsu, !tbaa !1
  store i64 %R1_Arg, i64* %R3_Var
  %lndsv = load i64, i64* %ls8eW
  store i64 %lndsv, i64* %R2_Var
  %lndsw = load i64*, i64** %Sp_Var
  %lndsx = getelementptr inbounds i64, i64* %lndsw, i32 1
  %lndsy = ptrtoint i64* %lndsx to i64
  %lndsz = inttoptr i64 %lndsy to i64*
  store i64* %lndsz, i64** %Sp_Var
  %lndsA = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndsB = load i64*, i64** %Sp_Var
  %lndsC = load i64, i64* %R2_Var
  %lndsD = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndsA( i64* %Base_Arg, i64* %lndsB, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndsC, i64 %lndsD, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdr8_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr8_info$def to i8*)
define internal ghccc void @cdr8_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr8_info$def to i64)),i64 552), i64 1, i64 4294967328}>
{
cdr8:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lndsE = load i64*, i64** %Sp_Var
  %lndsF = getelementptr inbounds i64, i64* %lndsE, i32 1
  %lndsG = bitcast i64* %lndsF to i64*
  %lndsH = load i64, i64* %lndsG, !tbaa !1
  store i64 %lndsH, i64* %R2_Var
  %lndsI = load i64*, i64** %Sp_Var
  %lndsJ = getelementptr inbounds i64, i64* %lndsI, i32 2
  %lndsK = ptrtoint i64* %lndsJ to i64
  %lndsL = inttoptr i64 %lndsK to i64*
  store i64* %lndsL, i64** %Sp_Var
  %lndsM = bitcast i8* @integerzmgmp_GHCziIntegerziType_plusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndsN = load i64*, i64** %Sp_Var
  %lndsO = load i64, i64* %R2_Var
  %lndsP = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndsM( i64* %Base_Arg, i64* %lndsN, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndsO, i64 %lndsP, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdr0_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr0_info$def to i8*)
define internal ghccc void @cdr0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdr0_info$def to i64)),i64 552), i64 1, i64 4294967328}>
{
cdr0:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lndsQ = load i64*, i64** %Sp_Var
  %lndsR = getelementptr inbounds i64, i64* %lndsQ, i32 1
  %lndsS = bitcast i64* %lndsR to i64*
  %lndsT = load i64, i64* %lndsS, !tbaa !1
  store i64 %lndsT, i64* %R2_Var
  %lndsU = load i64*, i64** %Sp_Var
  %lndsV = getelementptr inbounds i64, i64* %lndsU, i32 2
  %lndsW = ptrtoint i64* %lndsV to i64
  %lndsX = inttoptr i64 %lndsW to i64*
  store i64* %lndsX, i64** %Sp_Var
  %lndsY = bitcast i8* @integerzmgmp_GHCziIntegerziType_plusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndsZ = load i64*, i64** %Sp_Var
  %lndt0 = load i64, i64* %R2_Var
  %lndt1 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndsY( i64* %Base_Arg, i64* %lndsZ, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndt0, i64 %lndt1, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_combinezuzdscombine2_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine2_info$def to i8*)
define ghccc void @Word_combinezuzdscombine2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udrk_srtd_struct* @udrk_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine2_info$def to i64)),i64 0), i64 17179869208, i64 0, i64 -4294967281}>
{
cdrf:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lndt2 = load i64*, i64** %Hp_Var
  %lndt3 = getelementptr inbounds i64, i64* %lndt2, i32 7
  %lndt4 = ptrtoint i64* %lndt3 to i64
  %lndt5 = inttoptr i64 %lndt4 to i64*
  store i64* %lndt5, i64** %Hp_Var
  %lndt6 = load i64*, i64** %Hp_Var
  %lndt7 = ptrtoint i64* %lndt6 to i64
  %lndt8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndt9 = bitcast i64* %lndt8 to i64*
  %lndta = load i64, i64* %lndt9, !tbaa !4
  %lndtb = icmp ugt i64 %lndt7, %lndta
  br i1 %lndtb, label %cdrj, label %cdri
cdri:
  %lndtd = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8f6_info$def to i64
  %lndtc = load i64*, i64** %Hp_Var
  %lndte = getelementptr inbounds i64, i64* %lndtc, i32 -6
  store i64 %lndtd, i64* %lndte, !tbaa !2
  %lndtg = load i64, i64* %R2_Var
  %lndtf = load i64*, i64** %Hp_Var
  %lndth = getelementptr inbounds i64, i64* %lndtf, i32 -4
  store i64 %lndtg, i64* %lndth, !tbaa !2
  %lndtj = load i64, i64* %R4_Var
  %lndti = load i64*, i64** %Hp_Var
  %lndtk = getelementptr inbounds i64, i64* %lndti, i32 -3
  store i64 %lndtj, i64* %lndtk, !tbaa !2
  %lndtm = load i64, i64* %R5_Var
  %lndtl = load i64*, i64** %Hp_Var
  %lndtn = getelementptr inbounds i64, i64* %lndtl, i32 -2
  store i64 %lndtm, i64* %lndtn, !tbaa !2
  %lndtp = ptrtoint i8* @Word_W_con_info to i64
  %lndto = load i64*, i64** %Hp_Var
  %lndtq = getelementptr inbounds i64, i64* %lndto, i32 -1
  store i64 %lndtp, i64* %lndtq, !tbaa !2
  %lndts = load i64*, i64** %Hp_Var
  %lndtt = getelementptr inbounds i64, i64* %lndts, i32 -6
  %lndtu = ptrtoint i64* %lndtt to i64
  %lndtr = load i64*, i64** %Hp_Var
  %lndtv = getelementptr inbounds i64, i64* %lndtr, i32 0
  store i64 %lndtu, i64* %lndtv, !tbaa !2
  %lndtx = load i64*, i64** %Hp_Var
  %lndty = ptrtoint i64* %lndtx to i64
  %lndtz = add i64 %lndty, -7
  store i64 %lndtz, i64* %R1_Var
  %lndtA = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lndtB = bitcast i64* %lndtA to i64*
  %lndtC = load i64, i64* %lndtB, !tbaa !1
  %lndtD = inttoptr i64 %lndtC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndtE = load i64*, i64** %Hp_Var
  %lndtF = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndtD( i64* %Base_Arg, i64* %Sp_Arg, i64* %lndtE, i64 %lndtF, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdrj:
  %lndtG = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lndtG, !tbaa !4
  %lndtH = load i64, i64* %R5_Var
  store i64 %lndtH, i64* %R5_Var
  %lndtI = load i64, i64* %R4_Var
  store i64 %lndtI, i64* %R4_Var
  %lndtJ = load i64, i64* %R3_Var
  store i64 %lndtJ, i64* %R3_Var
  %lndtK = load i64, i64* %R2_Var
  store i64 %lndtK, i64* %R2_Var
  %lndtL = ptrtoint %Word_combinezuzdscombine2_closure_struct* @Word_combinezuzdscombine2_closure$def to i64
  store i64 %lndtL, i64* %R1_Var
  %lndtM = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lndtN = bitcast i64* %lndtM to i64*
  %lndtO = load i64, i64* %lndtN, !tbaa !4
  %lndtP = inttoptr i64 %lndtO to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndtQ = load i64*, i64** %Hp_Var
  %lndtR = load i64, i64* %R1_Var
  %lndtS = load i64, i64* %R2_Var
  %lndtT = load i64, i64* %R3_Var
  %lndtU = load i64, i64* %R4_Var
  %lndtV = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndtP( i64* %Base_Arg, i64* %Sp_Arg, i64* %lndtQ, i64 %lndtR, i64 %lndtS, i64 %lndtT, i64 %lndtU, i64 %lndtV, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_combine_closure_struct = type <{i64, i64}>
%udDd_srtd_struct = type <{i64, i64, i64}>
%udDe_srtd_struct = type <{i64, i64, i64}>
%udDf_srtd_struct = type <{i64, i64, i64}>
%udDg_srtd_struct = type <{i64, i64, i64}>
%udDh_srtd_struct = type <{i64, i64, i64}>
%udDi_srtd_struct = type <{i64, i64, i64}>
%udDj_srtd_struct = type <{i64, i64, i64}>
%udDk_srtd_struct = type <{i64, i64, i64}>
%udDl_srtd_struct = type <{i64, i64, i64}>
%udDm_srtd_struct = type <{i64, i64, i64}>
%udDn_srtd_struct = type <{i64, i64, i64}>
%udDo_srtd_struct = type <{i64, i64, i64}>
%udDp_srtd_struct = type <{i64, i64, i64}>
%udDq_srtd_struct = type <{i64, i64, i64}>
@Word_combine_closure$def = internal global %Word_combine_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combine_info$def to i64), i64 0}>
@Word_combine_closure = alias i8* bitcast (%Word_combine_closure_struct* @Word_combine_closure$def to i8*)
@udDd_srtd$def = internal constant %udDd_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 59, i64 560838891632869383}>
@udDd_srtd = internal alias i8* bitcast (%udDd_srtd_struct* @udDd_srtd$def to i8*)
@udDe_srtd$def = internal constant %udDe_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDe_srtd = internal alias i8* bitcast (%udDe_srtd_struct* @udDe_srtd$def to i8*)
@udDf_srtd$def = internal constant %udDf_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDf_srtd = internal alias i8* bitcast (%udDf_srtd_struct* @udDf_srtd$def to i8*)
@udDg_srtd$def = internal constant %udDg_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDg_srtd = internal alias i8* bitcast (%udDg_srtd_struct* @udDg_srtd$def to i8*)
@udDh_srtd$def = internal constant %udDh_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDh_srtd = internal alias i8* bitcast (%udDh_srtd_struct* @udDh_srtd$def to i8*)
@udDi_srtd$def = internal constant %udDi_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDi_srtd = internal alias i8* bitcast (%udDi_srtd_struct* @udDi_srtd$def to i8*)
@udDj_srtd$def = internal constant %udDj_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDj_srtd = internal alias i8* bitcast (%udDj_srtd_struct* @udDj_srtd$def to i8*)
@udDk_srtd$def = internal constant %udDk_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDk_srtd = internal alias i8* bitcast (%udDk_srtd_struct* @udDk_srtd$def to i8*)
@udDl_srtd$def = internal constant %udDl_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDl_srtd = internal alias i8* bitcast (%udDl_srtd_struct* @udDl_srtd$def to i8*)
@udDm_srtd$def = internal constant %udDm_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDm_srtd = internal alias i8* bitcast (%udDm_srtd_struct* @udDm_srtd$def to i8*)
@udDn_srtd$def = internal constant %udDn_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDn_srtd = internal alias i8* bitcast (%udDn_srtd_struct* @udDn_srtd$def to i8*)
@udDo_srtd$def = internal constant %udDo_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDo_srtd = internal alias i8* bitcast (%udDo_srtd_struct* @udDo_srtd$def to i8*)
@udDp_srtd$def = internal constant %udDp_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDp_srtd = internal alias i8* bitcast (%udDp_srtd_struct* @udDp_srtd$def to i8*)
@udDq_srtd$def = internal constant %udDq_srtd_struct<{i64 add (i64 ptrtoint (i8* @S8lm_srt to i64),i64 320), i64 58, i64 272608515481157639}>
@udDq_srtd = internal alias i8* bitcast (%udDq_srtd_struct* @udDq_srtd$def to i8*)
@s8fq_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fq_info$def to i8*)
define internal ghccc void @s8fq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 17}>
{
cdx7:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndDr = load i64*, i64** %Sp_Var
  %lndDs = getelementptr inbounds i64, i64* %lndDr, i32 -1
  %lndDt = ptrtoint i64* %lndDs to i64
  %lndDu = icmp ult i64 %lndDt, %SpLim_Arg
  br i1 %lndDu, label %cdxe, label %cdxf
cdxf:
  %lndDw = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdx5_info$def to i64
  %lndDv = load i64*, i64** %Sp_Var
  %lndDx = getelementptr inbounds i64, i64* %lndDv, i32 -1
  store i64 %lndDw, i64* %lndDx, !tbaa !1
  %lndDA = load i64, i64* %R1_Var
  %lndDB = add i64 %lndDA, 16
  %lndDC = inttoptr i64 %lndDB to i64*
  %lndDD = load i64, i64* %lndDC, !tbaa !3
  store i64 %lndDD, i64* %R2_Var
  %lndDE = load i64*, i64** %Sp_Var
  %lndDF = getelementptr inbounds i64, i64* %lndDE, i32 -1
  %lndDG = ptrtoint i64* %lndDF to i64
  %lndDH = inttoptr i64 %lndDG to i64*
  store i64* %lndDH, i64** %Sp_Var
  %lndDI = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndDJ = load i64*, i64** %Sp_Var
  %lndDK = load i64, i64* %R1_Var
  %lndDL = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndDI( i64* %Base_Arg, i64* %lndDJ, i64* %Hp_Arg, i64 %lndDK, i64 %lndDL, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxe:
  %lndDM = load i64, i64* %R1_Var
  store i64 %lndDM, i64* %R1_Var
  %lndDN = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndDO = bitcast i64* %lndDN to i64*
  %lndDP = load i64, i64* %lndDO, !tbaa !4
  %lndDQ = inttoptr i64 %lndDP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndDR = load i64*, i64** %Sp_Var
  %lndDS = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndDQ( i64* %Base_Arg, i64* %lndDR, i64* %Hp_Arg, i64 %lndDS, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdx5_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdx5_info$def to i8*)
define internal ghccc void @cdx5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cdx5:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndDT = load i64*, i64** %Hp_Var
  %lndDU = getelementptr inbounds i64, i64* %lndDT, i32 2
  %lndDV = ptrtoint i64* %lndDU to i64
  %lndDW = inttoptr i64 %lndDV to i64*
  store i64* %lndDW, i64** %Hp_Var
  %lndDX = load i64*, i64** %Hp_Var
  %lndDY = ptrtoint i64* %lndDX to i64
  %lndDZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndE0 = bitcast i64* %lndDZ to i64*
  %lndE1 = load i64, i64* %lndE0, !tbaa !4
  %lndE2 = icmp ugt i64 %lndDY, %lndE1
  br i1 %lndE2, label %cdxi, label %cdxh
cdxh:
  %lndE4 = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %lndE3 = load i64*, i64** %Hp_Var
  %lndE5 = getelementptr inbounds i64, i64* %lndE3, i32 -1
  store i64 %lndE4, i64* %lndE5, !tbaa !2
  %lndE7 = load i64, i64* %R1_Var
  %lndE8 = load i64, i64* %R1_Var
  %lndE9 = ashr i64 %lndE8, 63
  %lndEa = and i64 %lndE9, 7
  %lndEb = add i64 %lndE7, %lndEa
  %lndEc = ashr i64 %lndEb, 3
  %lndE6 = load i64*, i64** %Hp_Var
  %lndEd = getelementptr inbounds i64, i64* %lndE6, i32 0
  store i64 %lndEc, i64* %lndEd, !tbaa !2
  %lndEf = load i64*, i64** %Hp_Var
  %lndEg = ptrtoint i64* %lndEf to i64
  %lndEh = add i64 %lndEg, -7
  store i64 %lndEh, i64* %R1_Var
  %lndEi = load i64*, i64** %Sp_Var
  %lndEj = getelementptr inbounds i64, i64* %lndEi, i32 1
  %lndEk = ptrtoint i64* %lndEj to i64
  %lndEl = inttoptr i64 %lndEk to i64*
  store i64* %lndEl, i64** %Sp_Var
  %lndEm = load i64*, i64** %Sp_Var
  %lndEn = getelementptr inbounds i64, i64* %lndEm, i32 0
  %lndEo = bitcast i64* %lndEn to i64*
  %lndEp = load i64, i64* %lndEo, !tbaa !1
  %lndEq = inttoptr i64 %lndEp to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndEr = load i64*, i64** %Sp_Var
  %lndEs = load i64*, i64** %Hp_Var
  %lndEt = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndEq( i64* %Base_Arg, i64* %lndEr, i64* %lndEs, i64 %lndEt, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxi:
  %lndEu = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndEu, !tbaa !4
  %lndEv = load i64, i64* %R1_Var
  store i64 %lndEv, i64* %R1_Var
  %lndEw = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndEx = load i64*, i64** %Sp_Var
  %lndEy = load i64*, i64** %Hp_Var
  %lndEz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndEw( i64* %Base_Arg, i64* %lndEx, i64* %lndEy, i64 %lndEz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8fD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fD_info$def to i8*)
define internal ghccc void @s8fD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 1, i64 17}>
{
cdxG:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndEA = load i64*, i64** %Sp_Var
  %lndEB = getelementptr inbounds i64, i64* %lndEA, i32 -1
  %lndEC = ptrtoint i64* %lndEB to i64
  %lndED = icmp ult i64 %lndEC, %SpLim_Arg
  br i1 %lndED, label %cdxN, label %cdxO
cdxO:
  %lndEF = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxE_info$def to i64
  %lndEE = load i64*, i64** %Sp_Var
  %lndEG = getelementptr inbounds i64, i64* %lndEE, i32 -1
  store i64 %lndEF, i64* %lndEG, !tbaa !1
  %lndEJ = load i64, i64* %R1_Var
  %lndEK = add i64 %lndEJ, 16
  %lndEL = inttoptr i64 %lndEK to i64*
  %lndEM = load i64, i64* %lndEL, !tbaa !3
  store i64 %lndEM, i64* %R2_Var
  %lndEN = load i64*, i64** %Sp_Var
  %lndEO = getelementptr inbounds i64, i64* %lndEN, i32 -1
  %lndEP = ptrtoint i64* %lndEO to i64
  %lndEQ = inttoptr i64 %lndEP to i64*
  store i64* %lndEQ, i64** %Sp_Var
  %lndER = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndES = load i64*, i64** %Sp_Var
  %lndET = load i64, i64* %R1_Var
  %lndEU = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndER( i64* %Base_Arg, i64* %lndES, i64* %Hp_Arg, i64 %lndET, i64 %lndEU, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxN:
  %lndEV = load i64, i64* %R1_Var
  store i64 %lndEV, i64* %R1_Var
  %lndEW = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndEX = bitcast i64* %lndEW to i64*
  %lndEY = load i64, i64* %lndEX, !tbaa !4
  %lndEZ = inttoptr i64 %lndEY to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndF0 = load i64*, i64** %Sp_Var
  %lndF1 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndEZ( i64* %Base_Arg, i64* %lndF0, i64* %Hp_Arg, i64 %lndF1, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxE_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxE_info$def to i8*)
define internal ghccc void @cdxE_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cdxE:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndF2 = load i64*, i64** %Hp_Var
  %lndF3 = getelementptr inbounds i64, i64* %lndF2, i32 2
  %lndF4 = ptrtoint i64* %lndF3 to i64
  %lndF5 = inttoptr i64 %lndF4 to i64*
  store i64* %lndF5, i64** %Hp_Var
  %lndF6 = load i64*, i64** %Hp_Var
  %lndF7 = ptrtoint i64* %lndF6 to i64
  %lndF8 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndF9 = bitcast i64* %lndF8 to i64*
  %lndFa = load i64, i64* %lndF9, !tbaa !4
  %lndFb = icmp ugt i64 %lndF7, %lndFa
  br i1 %lndFb, label %cdxR, label %cdxQ
cdxQ:
  %lndFd = ptrtoint i8* @ghczmprim_GHCziTypes_Izh_con_info to i64
  %lndFc = load i64*, i64** %Hp_Var
  %lndFe = getelementptr inbounds i64, i64* %lndFc, i32 -1
  store i64 %lndFd, i64* %lndFe, !tbaa !2
  %lndFg = load i64, i64* %R1_Var
  %lndFh = load i64, i64* %R1_Var
  %lndFi = ashr i64 %lndFh, 63
  %lndFj = and i64 %lndFi, 7
  %lndFk = add i64 %lndFg, %lndFj
  %lndFl = ashr i64 %lndFk, 3
  %lndFf = load i64*, i64** %Hp_Var
  %lndFm = getelementptr inbounds i64, i64* %lndFf, i32 0
  store i64 %lndFl, i64* %lndFm, !tbaa !2
  %lndFo = load i64*, i64** %Hp_Var
  %lndFp = ptrtoint i64* %lndFo to i64
  %lndFq = add i64 %lndFp, -7
  store i64 %lndFq, i64* %R1_Var
  %lndFr = load i64*, i64** %Sp_Var
  %lndFs = getelementptr inbounds i64, i64* %lndFr, i32 1
  %lndFt = ptrtoint i64* %lndFs to i64
  %lndFu = inttoptr i64 %lndFt to i64*
  store i64* %lndFu, i64** %Sp_Var
  %lndFv = load i64*, i64** %Sp_Var
  %lndFw = getelementptr inbounds i64, i64* %lndFv, i32 0
  %lndFx = bitcast i64* %lndFw to i64*
  %lndFy = load i64, i64* %lndFx, !tbaa !1
  %lndFz = inttoptr i64 %lndFy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndFA = load i64*, i64** %Sp_Var
  %lndFB = load i64*, i64** %Hp_Var
  %lndFC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndFz( i64* %Base_Arg, i64* %lndFA, i64* %lndFB, i64 %lndFC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdxR:
  %lndFD = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndFD, !tbaa !4
  %lndFE = load i64, i64* %R1_Var
  store i64 %lndFE, i64* %R1_Var
  %lndFF = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndFG = load i64*, i64** %Sp_Var
  %lndFH = load i64*, i64** %Hp_Var
  %lndFI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndFF( i64* %Base_Arg, i64* %lndFG, i64* %lndFH, i64 %lndFI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8fT_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fT_info$def to i8*)
define internal ghccc void @s8fT_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fT_info$def to i64)),i64 328), i64 3, i64 1152921517491748880}>
{
cdy8:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndFJ = load i64*, i64** %Sp_Var
  %lndFK = getelementptr inbounds i64, i64* %lndFJ, i32 -5
  %lndFL = ptrtoint i64* %lndFK to i64
  %lndFM = icmp ult i64 %lndFL, %SpLim_Arg
  br i1 %lndFM, label %cdy9, label %cdya
cdya:
  %lndFO = ptrtoint i8* @stg_upd_frame_info to i64
  %lndFN = load i64*, i64** %Sp_Var
  %lndFP = getelementptr inbounds i64, i64* %lndFN, i32 -2
  store i64 %lndFO, i64* %lndFP, !tbaa !1
  %lndFR = load i64, i64* %R1_Var
  %lndFQ = load i64*, i64** %Sp_Var
  %lndFS = getelementptr inbounds i64, i64* %lndFQ, i32 -1
  store i64 %lndFR, i64* %lndFS, !tbaa !1
  %lndFU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdy6_info$def to i64
  %lndFT = load i64*, i64** %Sp_Var
  %lndFV = getelementptr inbounds i64, i64* %lndFT, i32 -5
  store i64 %lndFU, i64* %lndFV, !tbaa !1
  %lndFY = load i64, i64* %R1_Var
  %lndFZ = add i64 %lndFY, 16
  %lndG0 = inttoptr i64 %lndFZ to i64*
  %lndG1 = load i64, i64* %lndG0, !tbaa !3
  store i64 %lndG1, i64* %R2_Var
  %lndG5 = load i64, i64* %R1_Var
  %lndG6 = add i64 %lndG5, 24
  %lndG7 = inttoptr i64 %lndG6 to i64*
  %lndG8 = load i64, i64* %lndG7, !tbaa !3
  %lndG2 = load i64*, i64** %Sp_Var
  %lndG9 = getelementptr inbounds i64, i64* %lndG2, i32 -4
  store i64 %lndG8, i64* %lndG9, !tbaa !1
  %lndGd = load i64, i64* %R1_Var
  %lndGe = add i64 %lndGd, 32
  %lndGf = inttoptr i64 %lndGe to i64*
  %lndGg = load i64, i64* %lndGf, !tbaa !3
  %lndGa = load i64*, i64** %Sp_Var
  %lndGh = getelementptr inbounds i64, i64* %lndGa, i32 -3
  store i64 %lndGg, i64* %lndGh, !tbaa !1
  %lndGi = load i64*, i64** %Sp_Var
  %lndGj = getelementptr inbounds i64, i64* %lndGi, i32 -5
  %lndGk = ptrtoint i64* %lndGj to i64
  %lndGl = inttoptr i64 %lndGk to i64*
  store i64* %lndGl, i64** %Sp_Var
  %lndGm = bitcast i8* @integerzmgmp_GHCziIntegerziType_integerToInt_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGn = load i64*, i64** %Sp_Var
  %lndGo = load i64, i64* %R1_Var
  %lndGp = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGm( i64* %Base_Arg, i64* %lndGn, i64* %Hp_Arg, i64 %lndGo, i64 %lndGp, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdy9:
  %lndGq = load i64, i64* %R1_Var
  store i64 %lndGq, i64* %R1_Var
  %lndGr = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndGs = bitcast i64* %lndGr to i64*
  %lndGt = load i64, i64* %lndGs, !tbaa !4
  %lndGu = inttoptr i64 %lndGt to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGv = load i64*, i64** %Sp_Var
  %lndGw = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGu( i64* %Base_Arg, i64* %lndGv, i64* %Hp_Arg, i64 %lndGw, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdy6_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdy6_info$def to i8*)
define internal ghccc void @cdy6_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdy6_info$def to i64)),i64 328), i64 2, i64 1152921517491748896}>
{
cdy6:
  %ls8fM = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lndGx = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lndGy = bitcast i64* %lndGx to i64*
  %lndGz = load i64, i64* %lndGy, !tbaa !1
  store i64 %lndGz, i64* %ls8fM
  %lndGA = icmp sge i64 %R1_Arg, 0
  %lndGB = zext i1 %lndGA to i64
  switch i64 %lndGB, label %cdyo [i64 0, label %cdyo
i64 1, label %cdyv]
cdyo:
  %lndGC = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdym_info$def to i64
  %lndGD = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndGC, i64* %lndGD, !tbaa !1
  %lndGE = sub i64 0, %R1_Arg
  store i64 %lndGE, i64* %R3_Var
  %lndGF = load i64, i64* %ls8fM
  store i64 %lndGF, i64* %R2_Var
  %lndGG = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGH = load i64, i64* %R2_Var
  %lndGI = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGG( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndGH, i64 %lndGI, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyv:
  %lndGJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyu_info$def to i64
  %lndGK = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndGJ, i64* %lndGK, !tbaa !1
  store i64 %R1_Arg, i64* %R3_Var
  %lndGL = load i64, i64* %ls8fM
  store i64 %lndGL, i64* %R2_Var
  %lndGM = bitcast i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGN = load i64, i64* %R2_Var
  %lndGO = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGM( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndGN, i64 %lndGO, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdyu_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyu_info$def to i8*)
define internal ghccc void @cdyu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyu_info$def to i64)),i64 552), i64 130, i64 4294967328}>
{
cdyu:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lndGP = load i64*, i64** %Sp_Var
  %lndGQ = getelementptr inbounds i64, i64* %lndGP, i32 1
  %lndGR = bitcast i64* %lndGQ to i64*
  %lndGS = load i64, i64* %lndGR, !tbaa !1
  store i64 %lndGS, i64* %R2_Var
  %lndGT = load i64*, i64** %Sp_Var
  %lndGU = getelementptr inbounds i64, i64* %lndGT, i32 3
  %lndGV = ptrtoint i64* %lndGU to i64
  %lndGW = inttoptr i64 %lndGV to i64*
  store i64* %lndGW, i64** %Sp_Var
  %lndGX = bitcast i8* @integerzmgmp_GHCziIntegerziType_plusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndGY = load i64*, i64** %Sp_Var
  %lndGZ = load i64, i64* %R2_Var
  %lndH0 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndGX( i64* %Base_Arg, i64* %lndGY, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndGZ, i64 %lndH0, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdym_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdym_info$def to i8*)
define internal ghccc void @cdym_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdym_info$def to i64)),i64 552), i64 130, i64 4294967328}>
{
cdym:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  store i64 %R1_Arg, i64* %R3_Var
  %lndH1 = load i64*, i64** %Sp_Var
  %lndH2 = getelementptr inbounds i64, i64* %lndH1, i32 1
  %lndH3 = bitcast i64* %lndH2 to i64*
  %lndH4 = load i64, i64* %lndH3, !tbaa !1
  store i64 %lndH4, i64* %R2_Var
  %lndH5 = load i64*, i64** %Sp_Var
  %lndH6 = getelementptr inbounds i64, i64* %lndH5, i32 3
  %lndH7 = ptrtoint i64* %lndH6 to i64
  %lndH8 = inttoptr i64 %lndH7 to i64*
  store i64* %lndH8, i64** %Sp_Var
  %lndH9 = bitcast i8* @integerzmgmp_GHCziIntegerziType_plusInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHa = load i64*, i64** %Sp_Var
  %lndHb = load i64, i64* %R2_Var
  %lndHc = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndH9( i64* %Base_Arg, i64* %lndHa, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndHb, i64 %lndHc, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8fV_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fV_info$def to i8*)
define internal ghccc void @s8fV_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fV_info$def to i64)),i64 696), i64 4294967296, i64 4294967314}>
{
cdyG:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndHd = load i64*, i64** %Sp_Var
  %lndHe = getelementptr inbounds i64, i64* %lndHd, i32 -2
  %lndHf = ptrtoint i64* %lndHe to i64
  %lndHg = icmp ult i64 %lndHf, %SpLim_Arg
  br i1 %lndHg, label %cdyH, label %cdyI
cdyI:
  %lndHi = ptrtoint i8* @stg_upd_frame_info to i64
  %lndHh = load i64*, i64** %Sp_Var
  %lndHj = getelementptr inbounds i64, i64* %lndHh, i32 -2
  store i64 %lndHi, i64* %lndHj, !tbaa !1
  %lndHl = load i64, i64* %R1_Var
  %lndHk = load i64*, i64** %Sp_Var
  %lndHm = getelementptr inbounds i64, i64* %lndHk, i32 -1
  store i64 %lndHl, i64* %lndHm, !tbaa !1
  %lndHp = load i64, i64* %R1_Var
  %lndHq = add i64 %lndHp, 16
  %lndHr = inttoptr i64 %lndHq to i64*
  %lndHs = load i64, i64* %lndHr, !tbaa !3
  store i64 %lndHs, i64* %R2_Var
  %lndHt = load i64*, i64** %Sp_Var
  %lndHu = getelementptr inbounds i64, i64* %lndHt, i32 -2
  %lndHv = ptrtoint i64* %lndHu to i64
  %lndHw = inttoptr i64 %lndHv to i64*
  store i64* %lndHw, i64** %Sp_Var
  %lndHx = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHy = load i64*, i64** %Sp_Var
  %lndHz = load i64, i64* %R1_Var
  %lndHA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHx( i64* %Base_Arg, i64* %lndHy, i64* %Hp_Arg, i64 %lndHz, i64 %lndHA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyH:
  %lndHB = load i64, i64* %R1_Var
  store i64 %lndHB, i64* %R1_Var
  %lndHC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndHD = bitcast i64* %lndHC to i64*
  %lndHE = load i64, i64* %lndHD, !tbaa !4
  %lndHF = inttoptr i64 %lndHE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndHG = load i64*, i64** %Sp_Var
  %lndHH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndHF( i64* %Base_Arg, i64* %lndHG, i64* %Hp_Arg, i64 %lndHH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8g0_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g0_info$def to i8*)
define internal ghccc void @s8g0_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g0_info$def to i64)),i64 696), i64 4294967296, i64 4294967314}>
{
cdyU:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndHI = load i64*, i64** %Sp_Var
  %lndHJ = getelementptr inbounds i64, i64* %lndHI, i32 -2
  %lndHK = ptrtoint i64* %lndHJ to i64
  %lndHL = icmp ult i64 %lndHK, %SpLim_Arg
  br i1 %lndHL, label %cdyV, label %cdyW
cdyW:
  %lndHN = ptrtoint i8* @stg_upd_frame_info to i64
  %lndHM = load i64*, i64** %Sp_Var
  %lndHO = getelementptr inbounds i64, i64* %lndHM, i32 -2
  store i64 %lndHN, i64* %lndHO, !tbaa !1
  %lndHQ = load i64, i64* %R1_Var
  %lndHP = load i64*, i64** %Sp_Var
  %lndHR = getelementptr inbounds i64, i64* %lndHP, i32 -1
  store i64 %lndHQ, i64* %lndHR, !tbaa !1
  %lndHU = load i64, i64* %R1_Var
  %lndHV = add i64 %lndHU, 16
  %lndHW = inttoptr i64 %lndHV to i64*
  %lndHX = load i64, i64* %lndHW, !tbaa !3
  store i64 %lndHX, i64* %R2_Var
  %lndHY = load i64*, i64** %Sp_Var
  %lndHZ = getelementptr inbounds i64, i64* %lndHY, i32 -2
  %lndI0 = ptrtoint i64* %lndHZ to i64
  %lndI1 = inttoptr i64 %lndI0 to i64*
  store i64* %lndI1, i64** %Sp_Var
  %lndI2 = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndI3 = load i64*, i64** %Sp_Var
  %lndI4 = load i64, i64* %R1_Var
  %lndI5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndI2( i64* %Base_Arg, i64* %lndI3, i64* %Hp_Arg, i64 %lndI4, i64 %lndI5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdyV:
  %lndI6 = load i64, i64* %R1_Var
  store i64 %lndI6, i64* %R1_Var
  %lndI7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndI8 = bitcast i64* %lndI7 to i64*
  %lndI9 = load i64, i64* %lndI8, !tbaa !4
  %lndIa = inttoptr i64 %lndI9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndIb = load i64*, i64** %Sp_Var
  %lndIc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndIa( i64* %Base_Arg, i64* %lndIb, i64* %Hp_Arg, i64 %lndIc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8g3_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g3_info$def to i8*)
define internal ghccc void @s8g3_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g3_info$def to i64)),i64 696), i64 4294967296, i64 4294967314}>
{
cdz3:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndId = load i64*, i64** %Sp_Var
  %lndIe = getelementptr inbounds i64, i64* %lndId, i32 -2
  %lndIf = ptrtoint i64* %lndIe to i64
  %lndIg = icmp ult i64 %lndIf, %SpLim_Arg
  br i1 %lndIg, label %cdz4, label %cdz5
cdz5:
  %lndIi = ptrtoint i8* @stg_upd_frame_info to i64
  %lndIh = load i64*, i64** %Sp_Var
  %lndIj = getelementptr inbounds i64, i64* %lndIh, i32 -2
  store i64 %lndIi, i64* %lndIj, !tbaa !1
  %lndIl = load i64, i64* %R1_Var
  %lndIk = load i64*, i64** %Sp_Var
  %lndIm = getelementptr inbounds i64, i64* %lndIk, i32 -1
  store i64 %lndIl, i64* %lndIm, !tbaa !1
  %lndIp = load i64, i64* %R1_Var
  %lndIq = add i64 %lndIp, 16
  %lndIr = inttoptr i64 %lndIq to i64*
  %lndIs = load i64, i64* %lndIr, !tbaa !3
  store i64 %lndIs, i64* %R2_Var
  %lndIt = load i64*, i64** %Sp_Var
  %lndIu = getelementptr inbounds i64, i64* %lndIt, i32 -2
  %lndIv = ptrtoint i64* %lndIu to i64
  %lndIw = inttoptr i64 %lndIv to i64*
  store i64* %lndIw, i64** %Sp_Var
  %lndIx = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndIy = load i64*, i64** %Sp_Var
  %lndIz = load i64, i64* %R1_Var
  %lndIA = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndIx( i64* %Base_Arg, i64* %lndIy, i64* %Hp_Arg, i64 %lndIz, i64 %lndIA, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdz4:
  %lndIB = load i64, i64* %R1_Var
  store i64 %lndIB, i64* %R1_Var
  %lndIC = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndID = bitcast i64* %lndIC to i64*
  %lndIE = load i64, i64* %lndID, !tbaa !4
  %lndIF = inttoptr i64 %lndIE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndIG = load i64*, i64** %Sp_Var
  %lndIH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndIF( i64* %Base_Arg, i64* %lndIG, i64* %Hp_Arg, i64 %lndIH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8g2_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g2_info$def to i8*)
define internal ghccc void @s8g2_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g2_info$def to i64)),i64 696), i64 4294967296, i64 4294967314}>
{
cdza:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndII = load i64*, i64** %Sp_Var
  %lndIJ = getelementptr inbounds i64, i64* %lndII, i32 -2
  %lndIK = ptrtoint i64* %lndIJ to i64
  %lndIL = icmp ult i64 %lndIK, %SpLim_Arg
  br i1 %lndIL, label %cdzb, label %cdzc
cdzc:
  %lndIN = ptrtoint i8* @stg_upd_frame_info to i64
  %lndIM = load i64*, i64** %Sp_Var
  %lndIO = getelementptr inbounds i64, i64* %lndIM, i32 -2
  store i64 %lndIN, i64* %lndIO, !tbaa !1
  %lndIQ = load i64, i64* %R1_Var
  %lndIP = load i64*, i64** %Sp_Var
  %lndIR = getelementptr inbounds i64, i64* %lndIP, i32 -1
  store i64 %lndIQ, i64* %lndIR, !tbaa !1
  %lndIU = load i64, i64* %R1_Var
  %lndIV = add i64 %lndIU, 16
  %lndIW = inttoptr i64 %lndIV to i64*
  %lndIX = load i64, i64* %lndIW, !tbaa !3
  store i64 %lndIX, i64* %R2_Var
  %lndIY = load i64*, i64** %Sp_Var
  %lndIZ = getelementptr inbounds i64, i64* %lndIY, i32 -2
  %lndJ0 = ptrtoint i64* %lndIZ to i64
  %lndJ1 = inttoptr i64 %lndJ0 to i64*
  store i64* %lndJ1, i64** %Sp_Var
  %lndJ2 = bitcast i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndJ3 = load i64*, i64** %Sp_Var
  %lndJ4 = load i64, i64* %R1_Var
  %lndJ5 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndJ2( i64* %Base_Arg, i64* %lndJ3, i64* %Hp_Arg, i64 %lndJ4, i64 %lndJ5, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzb:
  %lndJ6 = load i64, i64* %R1_Var
  store i64 %lndJ6, i64* %R1_Var
  %lndJ7 = getelementptr inbounds i64, i64* %Base_Arg, i32 -2
  %lndJ8 = bitcast i64* %lndJ7 to i64*
  %lndJ9 = load i64, i64* %lndJ8, !tbaa !4
  %lndJa = inttoptr i64 %lndJ9 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndJb = load i64*, i64** %Sp_Var
  %lndJc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndJa( i64* %Base_Arg, i64* %lndJb, i64* %Hp_Arg, i64 %lndJc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_combine_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combine_info$def to i8*)
define ghccc void @Word_combine_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDd_srtd_struct* @udDd_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combine_info$def to i64)),i64 0), i64 17179869208, i64 0, i64 -4294967281}>
{
cdzi:
  %R5_Var = alloca i64, i32 1
  store i64 %R5_Arg, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 %R4_Arg, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndJd = load i64*, i64** %Sp_Var
  %lndJe = getelementptr inbounds i64, i64* %lndJd, i32 -10
  %lndJf = ptrtoint i64* %lndJe to i64
  %lndJg = icmp uge i64 %lndJf, %SpLim_Arg
  br i1 %lndJg, label %udCy, label %cdzj
cdzj:
  %lndJh = load i64, i64* %R5_Var
  store i64 %lndJh, i64* %R5_Var
  %lndJi = load i64, i64* %R4_Var
  store i64 %lndJi, i64* %R4_Var
  %lndJj = load i64, i64* %R3_Var
  store i64 %lndJj, i64* %R3_Var
  %lndJk = load i64, i64* %R2_Var
  store i64 %lndJk, i64* %R2_Var
  %lndJl = ptrtoint %Word_combine_closure_struct* @Word_combine_closure$def to i64
  store i64 %lndJl, i64* %R1_Var
  %lndJm = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lndJn = bitcast i64* %lndJm to i64*
  %lndJo = load i64, i64* %lndJn, !tbaa !4
  %lndJp = inttoptr i64 %lndJo to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndJq = load i64*, i64** %Sp_Var
  %lndJr = load i64, i64* %R1_Var
  %lndJs = load i64, i64* %R2_Var
  %lndJt = load i64, i64* %R3_Var
  %lndJu = load i64, i64* %R4_Var
  %lndJv = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndJp( i64* %Base_Arg, i64* %lndJq, i64* %Hp_Arg, i64 %lndJr, i64 %lndJs, i64 %lndJt, i64 %lndJu, i64 %lndJv, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCy:
  %lndJx = load i64, i64* %R2_Var
  %lndJw = load i64*, i64** %Sp_Var
  %lndJy = getelementptr inbounds i64, i64* %lndJw, i32 -4
  store i64 %lndJx, i64* %lndJy, !tbaa !1
  %lndJA = load i64, i64* %R3_Var
  %lndJz = load i64*, i64** %Sp_Var
  %lndJB = getelementptr inbounds i64, i64* %lndJz, i32 -3
  store i64 %lndJA, i64* %lndJB, !tbaa !1
  %lndJD = load i64, i64* %R4_Var
  %lndJC = load i64*, i64** %Sp_Var
  %lndJE = getelementptr inbounds i64, i64* %lndJC, i32 -2
  store i64 %lndJD, i64* %lndJE, !tbaa !1
  %lndJG = load i64, i64* %R5_Var
  %lndJF = load i64*, i64** %Sp_Var
  %lndJH = getelementptr inbounds i64, i64* %lndJF, i32 -1
  store i64 %lndJG, i64* %lndJH, !tbaa !1
  %lndJI = load i64*, i64** %Sp_Var
  %lndJJ = getelementptr inbounds i64, i64* %lndJI, i32 -4
  %lndJK = ptrtoint i64* %lndJJ to i64
  %lndJL = inttoptr i64 %lndJK to i64*
  store i64* %lndJL, i64** %Sp_Var
  %lndJM = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwv_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndJN = load i64*, i64** %Sp_Var
  %lndJO = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndJM( i64* %Base_Arg, i64* %lndJN, i64* %Hp_Arg, i64 %lndJO, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwv_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwv_entry$def to i8*)
define internal ghccc void @cdwv_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdwv:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndJQ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxS_info$def to i64
  %lndJP = load i64*, i64** %Sp_Var
  %lndJR = getelementptr inbounds i64, i64* %lndJP, i32 -1
  store i64 %lndJQ, i64* %lndJR, !tbaa !1
  %lndJS = load i64*, i64** %Sp_Var
  %lndJT = getelementptr inbounds i64, i64* %lndJS, i32 1
  %lndJU = bitcast i64* %lndJT to i64*
  %lndJV = load i64, i64* %lndJU, !tbaa !1
  store i64 %lndJV, i64* %R1_Var
  %lndJW = load i64*, i64** %Sp_Var
  %lndJX = getelementptr inbounds i64, i64* %lndJW, i32 -1
  %lndJY = ptrtoint i64* %lndJX to i64
  %lndJZ = inttoptr i64 %lndJY to i64*
  store i64* %lndJZ, i64** %Sp_Var
  %lndK0 = load i64, i64* %R1_Var
  %lndK1 = and i64 %lndK0, 7
  %lndK2 = icmp ne i64 %lndK1, 0
  br i1 %lndK2, label %udCO, label %cdxT
cdxT:
  %lndK4 = load i64, i64* %R1_Var
  %lndK5 = inttoptr i64 %lndK4 to i64*
  %lndK6 = load i64, i64* %lndK5, !tbaa !3
  %lndK7 = inttoptr i64 %lndK6 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndK8 = load i64*, i64** %Sp_Var
  %lndK9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndK7( i64* %Base_Arg, i64* %lndK8, i64* %Hp_Arg, i64 %lndK9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCO:
  %lndKa = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxS_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndKb = load i64*, i64** %Sp_Var
  %lndKc = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndKa( i64* %Base_Arg, i64* %lndKb, i64* %Hp_Arg, i64 %lndKc, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxS_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxS_info$def to i8*)
define internal ghccc void @cdxS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDe_srtd_struct* @udDe_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxS_info$def to i64)),i64 0), i64 4, i64 -4294967264}>
{
cdxS:
  %ls8fa = alloca i64, i32 1
  %ls8fK = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8fX = alloca i64, i32 1
  %lndKd = load i64*, i64** %Sp_Var
  %lndKe = getelementptr inbounds i64, i64* %lndKd, i32 4
  %lndKf = bitcast i64* %lndKe to i64*
  %lndKg = load i64, i64* %lndKf, !tbaa !1
  store i64 %lndKg, i64* %ls8fa
  %lndKh = load i64, i64* %R1_Var
  %lndKi = and i64 %lndKh, 7
  switch i64 %lndKi, label %cdze [i64 1, label %cdze
i64 2, label %cdzf
i64 3, label %cdzg]
cdze:
  %lndKk = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxX_info$def to i64
  %lndKj = load i64*, i64** %Sp_Var
  %lndKl = getelementptr inbounds i64, i64* %lndKj, i32 -1
  store i64 %lndKk, i64* %lndKl, !tbaa !1
  %lndKo = load i64, i64* %R1_Var
  %lndKp = add i64 %lndKo, 7
  %lndKq = inttoptr i64 %lndKp to i64*
  %lndKr = load i64, i64* %lndKq, !tbaa !3
  store i64 %lndKr, i64* %ls8fK
  %lndKs = load i64, i64* %ls8fa
  store i64 %lndKs, i64* %R1_Var
  %lndKu = load i64, i64* %ls8fK
  %lndKt = load i64*, i64** %Sp_Var
  %lndKv = getelementptr inbounds i64, i64* %lndKt, i32 0
  store i64 %lndKu, i64* %lndKv, !tbaa !1
  %lndKw = load i64*, i64** %Sp_Var
  %lndKx = getelementptr inbounds i64, i64* %lndKw, i32 -1
  %lndKy = ptrtoint i64* %lndKx to i64
  %lndKz = inttoptr i64 %lndKy to i64*
  store i64* %lndKz, i64** %Sp_Var
  %lndKA = load i64, i64* %R1_Var
  %lndKB = and i64 %lndKA, 7
  %lndKC = icmp ne i64 %lndKB, 0
  br i1 %lndKC, label %udCT, label %cdxY
cdxY:
  %lndKE = load i64, i64* %R1_Var
  %lndKF = inttoptr i64 %lndKE to i64*
  %lndKG = load i64, i64* %lndKF, !tbaa !3
  %lndKH = inttoptr i64 %lndKG to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndKI = load i64*, i64** %Sp_Var
  %lndKJ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndKH( i64* %Base_Arg, i64* %lndKI, i64* %Hp_Arg, i64 %lndKJ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCT:
  %lndKK = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndKL = load i64*, i64** %Sp_Var
  %lndKM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndKK( i64* %Base_Arg, i64* %lndKL, i64* %Hp_Arg, i64 %lndKM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzf:
  %lndKO = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyL_info$def to i64
  %lndKN = load i64*, i64** %Sp_Var
  %lndKP = getelementptr inbounds i64, i64* %lndKN, i32 -1
  store i64 %lndKO, i64* %lndKP, !tbaa !1
  %lndKS = load i64, i64* %R1_Var
  %lndKT = add i64 %lndKS, 6
  %lndKU = inttoptr i64 %lndKT to i64*
  %lndKV = load i64, i64* %lndKU, !tbaa !3
  store i64 %lndKV, i64* %ls8fX
  %lndKW = load i64, i64* %ls8fa
  store i64 %lndKW, i64* %R1_Var
  %lndKY = load i64, i64* %ls8fX
  %lndKX = load i64*, i64** %Sp_Var
  %lndKZ = getelementptr inbounds i64, i64* %lndKX, i32 0
  store i64 %lndKY, i64* %lndKZ, !tbaa !1
  %lndL0 = load i64*, i64** %Sp_Var
  %lndL1 = getelementptr inbounds i64, i64* %lndL0, i32 -1
  %lndL2 = ptrtoint i64* %lndL1 to i64
  %lndL3 = inttoptr i64 %lndL2 to i64*
  store i64* %lndL3, i64** %Sp_Var
  %lndL4 = load i64, i64* %R1_Var
  %lndL5 = and i64 %lndL4, 7
  %lndL6 = icmp ne i64 %lndL5, 0
  br i1 %lndL6, label %udCU, label %cdyM
cdyM:
  %lndL8 = load i64, i64* %R1_Var
  %lndL9 = inttoptr i64 %lndL8 to i64*
  %lndLa = load i64, i64* %lndL9, !tbaa !3
  %lndLb = inttoptr i64 %lndLa to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLc = load i64*, i64** %Sp_Var
  %lndLd = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLb( i64* %Base_Arg, i64* %lndLc, i64* %Hp_Arg, i64 %lndLd, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCU:
  %lndLe = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyL_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLf = load i64*, i64** %Sp_Var
  %lndLg = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLe( i64* %Base_Arg, i64* %lndLf, i64* %Hp_Arg, i64 %lndLg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzg:
  %lndLi = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAG_info$def to i64
  %lndLh = load i64*, i64** %Sp_Var
  %lndLj = getelementptr inbounds i64, i64* %lndLh, i32 0
  store i64 %lndLi, i64* %lndLj, !tbaa !1
  %lndLm = load i64, i64* %R1_Var
  %lndLn = add i64 %lndLm, 5
  %lndLo = inttoptr i64 %lndLn to i64*
  %lndLp = load i64, i64* %lndLo, !tbaa !3
  store i64 %lndLp, i64* %R1_Var
  %lndLq = load i64, i64* %R1_Var
  %lndLr = and i64 %lndLq, 7
  %lndLs = icmp ne i64 %lndLr, 0
  br i1 %lndLs, label %udCV, label %cdAI
cdAI:
  %lndLu = load i64, i64* %R1_Var
  %lndLv = inttoptr i64 %lndLu to i64*
  %lndLw = load i64, i64* %lndLv, !tbaa !3
  %lndLx = inttoptr i64 %lndLw to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLy = load i64*, i64** %Sp_Var
  %lndLz = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLx( i64* %Base_Arg, i64* %lndLy, i64* %Hp_Arg, i64 %lndLz, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCV:
  %lndLA = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAG_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndLB = load i64*, i64** %Sp_Var
  %lndLC = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndLA( i64* %Base_Arg, i64* %lndLB, i64* %Hp_Arg, i64 %lndLC, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdAG_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAG_info$def to i8*)
define internal ghccc void @cdAG_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDf_srtd_struct* @udDf_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAG_info$def to i64)),i64 0), i64 4, i64 -4294967264}>
{
cdAG:
  %ls8g6 = alloca i64, i32 1
  %ls8g8 = alloca i64, i32 1
  %ls8g7 = alloca i64, i32 1
  %ls8g9 = alloca i64, i32 1
  %ls8ga = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndLE = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAM_info$def to i64
  %lndLD = load i64*, i64** %Sp_Var
  %lndLF = getelementptr inbounds i64, i64* %lndLD, i32 -5
  store i64 %lndLE, i64* %lndLF, !tbaa !1
  %lndLG = load i64, i64* %R1_Var
  store i64 %lndLG, i64* %ls8g6
  %lndLJ = load i64, i64* %R1_Var
  %lndLK = add i64 %lndLJ, 7
  %lndLL = inttoptr i64 %lndLK to i64*
  %lndLM = load i64, i64* %lndLL, !tbaa !3
  store i64 %lndLM, i64* %ls8g8
  %lndLP = load i64, i64* %R1_Var
  %lndLQ = add i64 %lndLP, 15
  %lndLR = inttoptr i64 %lndLQ to i64*
  %lndLS = load i64, i64* %lndLR, !tbaa !3
  store i64 %lndLS, i64* %ls8g7
  %lndLV = load i64, i64* %R1_Var
  %lndLW = add i64 %lndLV, 23
  %lndLX = inttoptr i64 %lndLW to i64*
  %lndLY = load i64, i64* %lndLX, !tbaa !3
  store i64 %lndLY, i64* %ls8g9
  %lndM1 = load i64, i64* %R1_Var
  %lndM2 = add i64 %lndM1, 31
  %lndM3 = inttoptr i64 %lndM2 to i64*
  %lndM4 = load i64, i64* %lndM3, !tbaa !3
  store i64 %lndM4, i64* %ls8ga
  %lndM5 = load i64*, i64** %Sp_Var
  %lndM6 = getelementptr inbounds i64, i64* %lndM5, i32 4
  %lndM7 = bitcast i64* %lndM6 to i64*
  %lndM8 = load i64, i64* %lndM7, !tbaa !1
  store i64 %lndM8, i64* %R1_Var
  %lndMa = load i64, i64* %ls8g7
  %lndM9 = load i64*, i64** %Sp_Var
  %lndMb = getelementptr inbounds i64, i64* %lndM9, i32 -4
  store i64 %lndMa, i64* %lndMb, !tbaa !1
  %lndMd = load i64, i64* %ls8g8
  %lndMc = load i64*, i64** %Sp_Var
  %lndMe = getelementptr inbounds i64, i64* %lndMc, i32 -3
  store i64 %lndMd, i64* %lndMe, !tbaa !1
  %lndMg = load i64, i64* %ls8g9
  %lndMf = load i64*, i64** %Sp_Var
  %lndMh = getelementptr inbounds i64, i64* %lndMf, i32 -2
  store i64 %lndMg, i64* %lndMh, !tbaa !1
  %lndMj = load i64, i64* %ls8ga
  %lndMi = load i64*, i64** %Sp_Var
  %lndMk = getelementptr inbounds i64, i64* %lndMi, i32 -1
  store i64 %lndMj, i64* %lndMk, !tbaa !1
  %lndMm = load i64, i64* %ls8g6
  %lndMl = load i64*, i64** %Sp_Var
  %lndMn = getelementptr inbounds i64, i64* %lndMl, i32 0
  store i64 %lndMm, i64* %lndMn, !tbaa !1
  %lndMo = load i64*, i64** %Sp_Var
  %lndMp = getelementptr inbounds i64, i64* %lndMo, i32 -5
  %lndMq = ptrtoint i64* %lndMp to i64
  %lndMr = inttoptr i64 %lndMq to i64*
  store i64* %lndMr, i64** %Sp_Var
  %lndMs = load i64, i64* %R1_Var
  %lndMt = and i64 %lndMs, 7
  %lndMu = icmp ne i64 %lndMt, 0
  br i1 %lndMu, label %udD0, label %cdAO
cdAO:
  %lndMw = load i64, i64* %R1_Var
  %lndMx = inttoptr i64 %lndMw to i64*
  %lndMy = load i64, i64* %lndMx, !tbaa !3
  %lndMz = inttoptr i64 %lndMy to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndMA = load i64*, i64** %Sp_Var
  %lndMB = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndMz( i64* %Base_Arg, i64* %lndMA, i64* %Hp_Arg, i64 %lndMB, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD0:
  %lndMC = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAM_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndMD = load i64*, i64** %Sp_Var
  %lndME = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndMC( i64* %Base_Arg, i64* %lndMD, i64* %Hp_Arg, i64 %lndME, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdAM_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAM_info$def to i8*)
define internal ghccc void @cdAM_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDg_srtd_struct* @udDg_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAM_info$def to i64)),i64 0), i64 841, i64 -4294967264}>
{
cdAM:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndMF = load i64, i64* %R1_Var
  %lndMG = and i64 %lndMF, 7
  switch i64 %lndMG, label %udCz [i64 3, label %cdBd]
udCz:
  %lndMH = load i64*, i64** %Sp_Var
  %lndMI = getelementptr inbounds i64, i64* %lndMH, i32 6
  %lndMJ = ptrtoint i64* %lndMI to i64
  %lndMK = inttoptr i64 %lndMJ to i64*
  store i64* %lndMK, i64** %Sp_Var
  %lndML = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fb_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndMM = load i64*, i64** %Sp_Var
  %lndMN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndML( i64* %Base_Arg, i64* %lndMM, i64* %Hp_Arg, i64 %lndMN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBd:
  %lndMP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAX_info$def to i64
  %lndMO = load i64*, i64** %Sp_Var
  %lndMQ = getelementptr inbounds i64, i64* %lndMO, i32 0
  store i64 %lndMP, i64* %lndMQ, !tbaa !1
  %lndMT = load i64, i64* %R1_Var
  %lndMU = add i64 %lndMT, 5
  %lndMV = inttoptr i64 %lndMU to i64*
  %lndMW = load i64, i64* %lndMV, !tbaa !3
  store i64 %lndMW, i64* %R1_Var
  %lndMX = load i64, i64* %R1_Var
  %lndMY = and i64 %lndMX, 7
  %lndMZ = icmp ne i64 %lndMY, 0
  br i1 %lndMZ, label %udD1, label %cdAY
cdAY:
  %lndN1 = load i64, i64* %R1_Var
  %lndN2 = inttoptr i64 %lndN1 to i64*
  %lndN3 = load i64, i64* %lndN2, !tbaa !3
  %lndN4 = inttoptr i64 %lndN3 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndN5 = load i64*, i64** %Sp_Var
  %lndN6 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndN4( i64* %Base_Arg, i64* %lndN5, i64* %Hp_Arg, i64 %lndN6, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD1:
  %lndN7 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAX_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndN8 = load i64*, i64** %Sp_Var
  %lndN9 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndN7( i64* %Base_Arg, i64* %lndN8, i64* %Hp_Arg, i64 %lndN9, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdAX_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAX_info$def to i8*)
define internal ghccc void @cdAX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdAX_info$def to i64)),i64 728), i64 31561, i64 4294967328}>
{
cdAX:
  %ls8gi = alloca i64, i32 1
  %ls8gj = alloca i64, i32 1
  %ls8gk = alloca i64, i32 1
  %ls8gf = alloca i64, i32 1
  %ls8ge = alloca i64, i32 1
  %ls8gg = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndNa = load i64*, i64** %Sp_Var
  %lndNb = getelementptr inbounds i64, i64* %lndNa, i32 4
  %lndNc = bitcast i64* %lndNb to i64*
  %lndNd = load i64, i64* %lndNc, !tbaa !1
  store i64 %lndNd, i64* %ls8gi
  %lndNe = load i64, i64* %ls8gi
  switch i64 %lndNe, label %cdB4 [i64 0, label %cdB5]
cdB4:
  %lndNh = load i64, i64* %R1_Var
  %lndNi = add i64 %lndNh, 31
  %lndNj = inttoptr i64 %lndNi to i64*
  %lndNk = load i64, i64* %lndNj, !tbaa !3
  store i64 %lndNk, i64* %ls8gj
  %lndNl = load i64, i64* %ls8gj
  switch i64 %lndNl, label %cdBF [i64 0, label %cdBK]
cdBF:
  %lndNm = load i64, i64* %ls8gi
  %lndNn = load i64, i64* %ls8gj
  %lndNo = add i64 %lndNm, %lndNn
  store i64 %lndNo, i64* %ls8gk
  %lndNp = load i64, i64* %ls8gk
  %lndNq = icmp slt i64 %lndNp, 0
  %lndNr = zext i1 %lndNq to i64
  switch i64 %lndNr, label %cdBq [i64 0, label %cdBq
i64 1, label %cdBr]
cdBq:
  %lndNt = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBx_info$def to i64
  %lndNs = load i64*, i64** %Sp_Var
  %lndNu = getelementptr inbounds i64, i64* %lndNs, i32 0
  store i64 %lndNt, i64* %lndNu, !tbaa !1
  %lndNx = load i64, i64* %R1_Var
  %lndNy = add i64 %lndNx, 7
  %lndNz = inttoptr i64 %lndNy to i64*
  %lndNA = load i64, i64* %lndNz, !tbaa !3
  store i64 %lndNA, i64* %ls8gf
  %lndND = load i64, i64* %R1_Var
  %lndNE = add i64 %lndND, 15
  %lndNF = inttoptr i64 %lndNE to i64*
  %lndNG = load i64, i64* %lndNF, !tbaa !3
  store i64 %lndNG, i64* %ls8ge
  %lndNJ = load i64, i64* %R1_Var
  %lndNK = add i64 %lndNJ, 23
  %lndNL = inttoptr i64 %lndNK to i64*
  %lndNM = load i64, i64* %lndNL, !tbaa !3
  store i64 %lndNM, i64* %ls8gg
  %lndNN = load i64, i64* %ls8gk
  store i64 %lndNN, i64* %R1_Var
  %lndNP = load i64, i64* %ls8gk
  %lndNO = load i64*, i64** %Sp_Var
  %lndNQ = getelementptr inbounds i64, i64* %lndNO, i32 4
  store i64 %lndNP, i64* %lndNQ, !tbaa !1
  %lndNS = load i64, i64* %ls8gj
  %lndNR = load i64*, i64** %Sp_Var
  %lndNT = getelementptr inbounds i64, i64* %lndNR, i32 5
  store i64 %lndNS, i64* %lndNT, !tbaa !1
  %lndNV = load i64, i64* %ls8gi
  %lndNU = load i64*, i64** %Sp_Var
  %lndNW = getelementptr inbounds i64, i64* %lndNU, i32 6
  store i64 %lndNV, i64* %lndNW, !tbaa !1
  %lndNY = load i64, i64* %ls8gg
  %lndNX = load i64*, i64** %Sp_Var
  %lndNZ = getelementptr inbounds i64, i64* %lndNX, i32 7
  store i64 %lndNY, i64* %lndNZ, !tbaa !1
  %lndO1 = load i64, i64* %ls8gf
  %lndO0 = load i64*, i64** %Sp_Var
  %lndO2 = getelementptr inbounds i64, i64* %lndO0, i32 8
  store i64 %lndO1, i64* %lndO2, !tbaa !1
  %lndO4 = load i64, i64* %ls8ge
  %lndO3 = load i64*, i64** %Sp_Var
  %lndO5 = getelementptr inbounds i64, i64* %lndO3, i32 9
  store i64 %lndO4, i64* %lndO5, !tbaa !1
  %lndO6 = bitcast i8* @stg_newPinnedByteArrayzh to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndO7 = load i64*, i64** %Sp_Var
  %lndO8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndO6( i64* %Base_Arg, i64* %lndO7, i64* %Hp_Arg, i64 %lndO8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBr:
  %lndOa = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBD_info$def to i64
  %lndO9 = load i64*, i64** %Sp_Var
  %lndOb = getelementptr inbounds i64, i64* %lndO9, i32 9
  store i64 %lndOa, i64* %lndOb, !tbaa !1
  %lndOc = ptrtoint i8* @base_GHCziForeignPtr_mallocPlainForeignPtrBytes2_closure to i64
  store i64 %lndOc, i64* %R1_Var
  %lndOd = load i64*, i64** %Sp_Var
  %lndOe = getelementptr inbounds i64, i64* %lndOd, i32 9
  %lndOf = ptrtoint i64* %lndOe to i64
  %lndOg = inttoptr i64 %lndOf to i64*
  store i64* %lndOg, i64** %Sp_Var
  %lndOh = bitcast i8* @stg_ap_0_fast to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOi = load i64*, i64** %Sp_Var
  %lndOj = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOh( i64* %Base_Arg, i64* %lndOi, i64* %Hp_Arg, i64 %lndOj, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBK:
  %lndOl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to i64
  %lndOk = load i64*, i64** %Sp_Var
  %lndOm = getelementptr inbounds i64, i64* %lndOk, i32 9
  store i64 %lndOl, i64* %lndOm, !tbaa !1
  %lndOn = load i64*, i64** %Sp_Var
  %lndOo = getelementptr inbounds i64, i64* %lndOn, i32 5
  %lndOp = bitcast i64* %lndOo to i64*
  %lndOq = load i64, i64* %lndOp, !tbaa !1
  store i64 %lndOq, i64* %R1_Var
  %lndOr = load i64, i64* %R1_Var
  %lndOs = and i64 %lndOr, 7
  %lndOt = icmp ne i64 %lndOs, 0
  br i1 %lndOt, label %udCD, label %udCC
udCC:
  %lndOu = load i64*, i64** %Sp_Var
  %lndOv = getelementptr inbounds i64, i64* %lndOu, i32 10
  %lndOw = ptrtoint i64* %lndOv to i64
  %lndOx = inttoptr i64 %lndOw to i64*
  store i64* %lndOx, i64** %Sp_Var
  br label %udD5
udD5:
  %lndOy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBO_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOz = load i64*, i64** %Sp_Var
  %lndOA = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOy( i64* %Base_Arg, i64* %lndOz, i64* %Hp_Arg, i64 %lndOA, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udCD:
  %lndOB = load i64*, i64** %Sp_Var
  %lndOC = getelementptr inbounds i64, i64* %lndOB, i32 9
  %lndOD = ptrtoint i64* %lndOC to i64
  %lndOE = inttoptr i64 %lndOD to i64*
  store i64* %lndOE, i64** %Sp_Var
  br label %udD6
udD6:
  %lndOF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndOG = load i64*, i64** %Sp_Var
  %lndOH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOF( i64* %Base_Arg, i64* %lndOG, i64* %Hp_Arg, i64 %lndOH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdB5:
  %lndOJ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to i64
  %lndOI = load i64*, i64** %Sp_Var
  %lndOK = getelementptr inbounds i64, i64* %lndOI, i32 9
  store i64 %lndOJ, i64* %lndOK, !tbaa !1
  %lndOL = load i64, i64* %R1_Var
  store i64 %lndOL, i64* %R1_Var
  %lndOM = load i64, i64* %R1_Var
  %lndON = and i64 %lndOM, 7
  %lndOO = icmp ne i64 %lndON, 0
  br i1 %lndOO, label %udCB, label %udCA
udCA:
  %lndOP = load i64*, i64** %Sp_Var
  %lndOQ = getelementptr inbounds i64, i64* %lndOP, i32 10
  %lndOR = ptrtoint i64* %lndOQ to i64
  %lndOS = inttoptr i64 %lndOR to i64*
  store i64* %lndOS, i64** %Sp_Var
  br label %udD5
udCB:
  %lndOT = load i64*, i64** %Sp_Var
  %lndOU = getelementptr inbounds i64, i64* %lndOT, i32 9
  %lndOV = ptrtoint i64* %lndOU to i64
  %lndOW = inttoptr i64 %lndOV to i64*
  store i64* %lndOW, i64** %Sp_Var
  br label %udD6
}
@cdBD_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBD_info$def to i8*)
define internal ghccc void @cdBD_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cdBD:
  %lndOX = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %R1_Arg, i64* %lndOX, !tbaa !1
  %lndOY = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBp_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndOY( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBx_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBx_info$def to i8*)
define internal ghccc void @cdBx_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 24393, i64 32}>
{
cdBx:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8g8 = alloca i64, i32 1
  %ls8ge = alloca i64, i32 1
  %ls8gf = alloca i64, i32 1
  %ls8gg = alloca i64, i32 1
  %ls8gi = alloca i64, i32 1
  %ls8gj = alloca i64, i32 1
  %ls8gk = alloca i64, i32 1
  %ls8gq = alloca i64, i32 1
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %F1_Var = alloca float, i32 1
  store float undef, float* %F1_Var
  %D1_Var = alloca double, i32 1
  store double undef, double* %D1_Var
  %F2_Var = alloca float, i32 1
  store float undef, float* %F2_Var
  %D2_Var = alloca double, i32 1
  store double undef, double* %D2_Var
  %F3_Var = alloca float, i32 1
  store float undef, float* %F3_Var
  %D3_Var = alloca double, i32 1
  store double undef, double* %D3_Var
  %F4_Var = alloca float, i32 1
  store float undef, float* %F4_Var
  %D4_Var = alloca double, i32 1
  store double undef, double* %D4_Var
  %F5_Var = alloca float, i32 1
  store float undef, float* %F5_Var
  %D5_Var = alloca double, i32 1
  store double undef, double* %D5_Var
  %F6_Var = alloca float, i32 1
  store float undef, float* %F6_Var
  %D6_Var = alloca double, i32 1
  store double undef, double* %D6_Var
  %ls8gw = alloca i64, i32 1
  %ls8gE = alloca i64, i32 1
  %lcdCp = alloca i64, i32 1
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndOZ = load i64*, i64** %Hp_Var
  %lndP0 = getelementptr inbounds i64, i64* %lndOZ, i32 7
  %lndP1 = ptrtoint i64* %lndP0 to i64
  %lndP2 = inttoptr i64 %lndP1 to i64*
  store i64* %lndP2, i64** %Hp_Var
  %lndP3 = load i64*, i64** %Hp_Var
  %lndP4 = ptrtoint i64* %lndP3 to i64
  %lndP5 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndP6 = bitcast i64* %lndP5 to i64*
  %lndP7 = load i64, i64* %lndP6, !tbaa !4
  %lndP8 = icmp ugt i64 %lndP4, %lndP7
  br i1 %lndP8, label %cdBB, label %cdBA
cdBA:
  %lndP9 = load i64*, i64** %Sp_Var
  %lndPa = getelementptr inbounds i64, i64* %lndP9, i32 2
  %lndPb = bitcast i64* %lndPa to i64*
  %lndPc = load i64, i64* %lndPb, !tbaa !1
  store i64 %lndPc, i64* %ls8g8
  %lndPd = load i64*, i64** %Sp_Var
  %lndPe = getelementptr inbounds i64, i64* %lndPd, i32 9
  %lndPf = bitcast i64* %lndPe to i64*
  %lndPg = load i64, i64* %lndPf, !tbaa !1
  store i64 %lndPg, i64* %ls8ge
  %lndPh = load i64*, i64** %Sp_Var
  %lndPi = getelementptr inbounds i64, i64* %lndPh, i32 8
  %lndPj = bitcast i64* %lndPi to i64*
  %lndPk = load i64, i64* %lndPj, !tbaa !1
  store i64 %lndPk, i64* %ls8gf
  %lndPl = load i64*, i64** %Sp_Var
  %lndPm = getelementptr inbounds i64, i64* %lndPl, i32 7
  %lndPn = bitcast i64* %lndPm to i64*
  %lndPo = load i64, i64* %lndPn, !tbaa !1
  store i64 %lndPo, i64* %ls8gg
  %lndPp = load i64*, i64** %Sp_Var
  %lndPq = getelementptr inbounds i64, i64* %lndPp, i32 6
  %lndPr = bitcast i64* %lndPq to i64*
  %lndPs = load i64, i64* %lndPr, !tbaa !1
  store i64 %lndPs, i64* %ls8gi
  %lndPt = load i64*, i64** %Sp_Var
  %lndPu = getelementptr inbounds i64, i64* %lndPt, i32 5
  %lndPv = bitcast i64* %lndPu to i64*
  %lndPw = load i64, i64* %lndPv, !tbaa !1
  store i64 %lndPw, i64* %ls8gj
  %lndPx = load i64*, i64** %Sp_Var
  %lndPy = getelementptr inbounds i64, i64* %lndPx, i32 4
  %lndPz = bitcast i64* %lndPy to i64*
  %lndPA = load i64, i64* %lndPz, !tbaa !1
  store i64 %lndPA, i64* %ls8gk
  %lndPC = load i64, i64* %R1_Var
  %lndPD = add i64 %lndPC, 16
  store i64 %lndPD, i64* %ls8gq
  %lndPE = load i64, i64* %ls8gq
  %lndPF = inttoptr i64 %lndPE to i8*
  %lndPG = load i64*, i64** %Sp_Var
  %lndPH = getelementptr inbounds i64, i64* %lndPG, i32 1
  %lndPI = bitcast i64* %lndPH to i64*
  %lndPJ = load i64, i64* %lndPI, !tbaa !1
  %lndPK = load i64*, i64** %Sp_Var
  %lndPL = getelementptr inbounds i64, i64* %lndPK, i32 3
  %lndPM = bitcast i64* %lndPL to i64*
  %lndPN = load i64, i64* %lndPM, !tbaa !1
  %lndPO = add i64 %lndPJ, %lndPN
  %lndPP = inttoptr i64 %lndPO to i8*
  %lndPQ = load i64, i64* %ls8gi
  %lndPR = bitcast i8* @memcpy to i8* (i8*, i8*, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lndPS = call ccc i8* (i8*, i8*, i64) %lndPR( i8* %lndPF, i8* %lndPP, i64 %lndPQ ) nounwind
  %lndPT = ptrtoint i8* %lndPS to i64
  store i64 %lndPT, i64* %ls8gw
  %lndPU = load i64, i64* %ls8gq
  %lndPV = load i64, i64* %ls8gi
  %lndPW = add i64 %lndPU, %lndPV
  %lndPX = inttoptr i64 %lndPW to i8*
  %lndPY = load i64, i64* %ls8ge
  %lndPZ = load i64, i64* %ls8gg
  %lndQ0 = add i64 %lndPY, %lndPZ
  %lndQ1 = inttoptr i64 %lndQ0 to i8*
  %lndQ2 = load i64, i64* %ls8gj
  %lndQ3 = bitcast i8* @memcpy to i8* (i8*, i8*, i64)*
  store i64 undef, i64* %R3_Var
  store i64 undef, i64* %R4_Var
  store i64 undef, i64* %R5_Var
  store i64 undef, i64* %R6_Var
  store float undef, float* %F1_Var
  store double undef, double* %D1_Var
  store float undef, float* %F2_Var
  store double undef, double* %D2_Var
  store float undef, float* %F3_Var
  store double undef, double* %D3_Var
  store float undef, float* %F4_Var
  store double undef, double* %D4_Var
  store float undef, float* %F5_Var
  store double undef, double* %D5_Var
  store float undef, float* %F6_Var
  store double undef, double* %D6_Var
  %lndQ4 = call ccc i8* (i8*, i8*, i64) %lndQ3( i8* %lndPX, i8* %lndQ1, i64 %lndQ2 ) nounwind
  %lndQ5 = ptrtoint i8* %lndQ4 to i64
  store i64 %lndQ5, i64* %ls8gE
  %lndQ7 = ptrtoint i8* @base_GHCziForeignPtr_PlainPtr_con_info to i64
  %lndQ6 = load i64*, i64** %Hp_Var
  %lndQ8 = getelementptr inbounds i64, i64* %lndQ6, i32 -6
  store i64 %lndQ7, i64* %lndQ8, !tbaa !2
  %lndQa = load i64, i64* %R1_Var
  %lndQ9 = load i64*, i64** %Hp_Var
  %lndQb = getelementptr inbounds i64, i64* %lndQ9, i32 -5
  store i64 %lndQa, i64* %lndQb, !tbaa !2
  %lndQd = load i64*, i64** %Hp_Var
  %lndQe = ptrtoint i64* %lndQd to i64
  %lndQf = add i64 %lndQe, -45
  store i64 %lndQf, i64* %lcdCp
  %lndQh = ptrtoint i8* @bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info to i64
  %lndQg = load i64*, i64** %Hp_Var
  %lndQi = getelementptr inbounds i64, i64* %lndQg, i32 -4
  store i64 %lndQh, i64* %lndQi, !tbaa !2
  %lndQk = load i64, i64* %lcdCp
  %lndQj = load i64*, i64** %Hp_Var
  %lndQl = getelementptr inbounds i64, i64* %lndQj, i32 -3
  store i64 %lndQk, i64* %lndQl, !tbaa !2
  %lndQn = load i64, i64* %ls8gq
  %lndQm = load i64*, i64** %Hp_Var
  %lndQo = getelementptr inbounds i64, i64* %lndQm, i32 -2
  store i64 %lndQn, i64* %lndQo, !tbaa !2
  %lndQp = load i64*, i64** %Hp_Var
  %lndQq = getelementptr inbounds i64, i64* %lndQp, i32 -1
  store i64 0, i64* %lndQq, !tbaa !2
  %lndQs = load i64, i64* %ls8gk
  %lndQr = load i64*, i64** %Hp_Var
  %lndQt = getelementptr inbounds i64, i64* %lndQr, i32 0
  store i64 %lndQs, i64* %lndQt, !tbaa !2
  %lndQw = load i64*, i64** %Hp_Var
  %lndQx = ptrtoint i64* %lndQw to i64
  %lndQy = add i64 %lndQx, -31
  %lndQu = load i64*, i64** %Sp_Var
  %lndQz = getelementptr inbounds i64, i64* %lndQu, i32 9
  store i64 %lndQy, i64* %lndQz, !tbaa !1
  %lndQA = load i64*, i64** %Sp_Var
  %lndQB = getelementptr inbounds i64, i64* %lndQA, i32 9
  %lndQC = ptrtoint i64* %lndQB to i64
  %lndQD = inttoptr i64 %lndQC to i64*
  store i64* %lndQD, i64** %Sp_Var
  %lndQE = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBp_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndQF = load i64*, i64** %Sp_Var
  %lndQG = load i64*, i64** %Hp_Var
  %lndQH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndQE( i64* %Base_Arg, i64* %lndQF, i64* %lndQG, i64 %lndQH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBB:
  %lndQI = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lndQI, !tbaa !4
  %lndQJ = load i64, i64* %R1_Var
  store i64 %lndQJ, i64* %R1_Var
  %lndQK = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndQL = load i64*, i64** %Sp_Var
  %lndQM = load i64*, i64** %Hp_Var
  %lndQN = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndQK( i64* %Base_Arg, i64* %lndQL, i64* %lndQM, i64 %lndQN, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBp_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBp_entry$def to i8*)
define internal ghccc void @cdBp_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdBp:
  %ls8gM = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndQO = load i64*, i64** %Sp_Var
  %lndQP = getelementptr inbounds i64, i64* %lndQO, i32 0
  %lndQQ = bitcast i64* %lndQP to i64*
  %lndQR = load i64, i64* %lndQQ, !tbaa !1
  store i64 %lndQR, i64* %ls8gM
  %lndQT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to i64
  %lndQS = load i64*, i64** %Sp_Var
  %lndQU = getelementptr inbounds i64, i64* %lndQS, i32 0
  store i64 %lndQT, i64* %lndQU, !tbaa !1
  %lndQV = load i64, i64* %ls8gM
  store i64 %lndQV, i64* %R1_Var
  %lndQW = load i64, i64* %R1_Var
  %lndQX = and i64 %lndQW, 7
  %lndQY = icmp ne i64 %lndQX, 0
  br i1 %lndQY, label %udD7, label %udCG
udCG:
  %lndQZ = load i64*, i64** %Sp_Var
  %lndR0 = getelementptr inbounds i64, i64* %lndQZ, i32 1
  %lndR1 = ptrtoint i64* %lndR0 to i64
  %lndR2 = inttoptr i64 %lndR1 to i64*
  store i64* %lndR2, i64** %Sp_Var
  %lndR3 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBO_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndR4 = load i64*, i64** %Sp_Var
  %lndR5 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndR3( i64* %Base_Arg, i64* %lndR4, i64* %Hp_Arg, i64 %lndR5, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udD7:
  %lndR6 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndR7 = load i64*, i64** %Sp_Var
  %lndR8 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndR6( i64* %Base_Arg, i64* %lndR7, i64* %Hp_Arg, i64 %lndR8, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBO_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBO_entry$def to i8*)
define internal ghccc void @cdBO_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
cdBO:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndR9 = load i64*, i64** %Sp_Var
  %lndRa = getelementptr inbounds i64, i64* %lndR9, i32 -1
  %lndRb = ptrtoint i64* %lndRa to i64
  %lndRc = inttoptr i64 %lndRb to i64*
  store i64* %lndRc, i64** %Sp_Var
  %lndRd = inttoptr i64 %R1_Arg to i64*
  %lndRe = load i64, i64* %lndRd, !tbaa !3
  %lndRf = inttoptr i64 %lndRe to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndRg = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndRf( i64* %Base_Arg, i64* %lndRg, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdBN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to i8*)
define internal ghccc void @cdBN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64}><{i64 0, i64 32}>
{
cdBN:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndRh = load i64*, i64** %Hp_Var
  %lndRi = getelementptr inbounds i64, i64* %lndRh, i32 2
  %lndRj = ptrtoint i64* %lndRi to i64
  %lndRk = inttoptr i64 %lndRj to i64*
  store i64* %lndRk, i64** %Hp_Var
  %lndRl = load i64*, i64** %Hp_Var
  %lndRm = ptrtoint i64* %lndRl to i64
  %lndRn = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndRo = bitcast i64* %lndRn to i64*
  %lndRp = load i64, i64* %lndRo, !tbaa !4
  %lndRq = icmp ugt i64 %lndRm, %lndRp
  br i1 %lndRq, label %cdBR, label %cdBQ
cdBQ:
  %lndRs = ptrtoint i8* @Word_WBS_con_info to i64
  %lndRr = load i64*, i64** %Hp_Var
  %lndRt = getelementptr inbounds i64, i64* %lndRr, i32 -1
  store i64 %lndRs, i64* %lndRt, !tbaa !2
  %lndRv = load i64, i64* %R1_Var
  %lndRu = load i64*, i64** %Hp_Var
  %lndRw = getelementptr inbounds i64, i64* %lndRu, i32 0
  store i64 %lndRv, i64* %lndRw, !tbaa !2
  %lndRy = load i64*, i64** %Hp_Var
  %lndRz = ptrtoint i64* %lndRy to i64
  %lndRA = add i64 %lndRz, -5
  store i64 %lndRA, i64* %R1_Var
  %lndRB = load i64*, i64** %Sp_Var
  %lndRC = getelementptr inbounds i64, i64* %lndRB, i32 1
  %lndRD = ptrtoint i64* %lndRC to i64
  %lndRE = inttoptr i64 %lndRD to i64*
  store i64* %lndRE, i64** %Sp_Var
  %lndRF = load i64*, i64** %Sp_Var
  %lndRG = getelementptr inbounds i64, i64* %lndRF, i32 0
  %lndRH = bitcast i64* %lndRG to i64*
  %lndRI = load i64, i64* %lndRH, !tbaa !1
  %lndRJ = inttoptr i64 %lndRI to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndRK = load i64*, i64** %Sp_Var
  %lndRL = load i64*, i64** %Hp_Var
  %lndRM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndRJ( i64* %Base_Arg, i64* %lndRK, i64* %lndRL, i64 %lndRM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdBR:
  %lndRN = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lndRN, !tbaa !4
  %lndRP = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdBN_info$def to i64
  %lndRO = load i64*, i64** %Sp_Var
  %lndRQ = getelementptr inbounds i64, i64* %lndRO, i32 0
  store i64 %lndRP, i64* %lndRQ, !tbaa !1
  %lndRR = load i64, i64* %R1_Var
  store i64 %lndRR, i64* %R1_Var
  %lndRS = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndRT = load i64*, i64** %Sp_Var
  %lndRU = load i64*, i64** %Hp_Var
  %lndRV = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndRS( i64* %Base_Arg, i64* %lndRT, i64* %lndRU, i64 %lndRV, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdyL_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyL_info$def to i8*)
define internal ghccc void @cdyL_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDh_srtd_struct* @udDh_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdyL_info$def to i64)),i64 0), i64 69, i64 -4294967264}>
{
cdyL:
  %ls8f7 = alloca i64, i32 1
  %ls8f9 = alloca i64, i32 1
  %ls8fX = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8fZ = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ls8g1 = alloca i64, i32 1
  %lndRW = load i64*, i64** %Sp_Var
  %lndRX = getelementptr inbounds i64, i64* %lndRW, i32 2
  %lndRY = bitcast i64* %lndRX to i64*
  %lndRZ = load i64, i64* %lndRY, !tbaa !1
  store i64 %lndRZ, i64* %ls8f7
  %lndS0 = load i64*, i64** %Sp_Var
  %lndS1 = getelementptr inbounds i64, i64* %lndS0, i32 4
  %lndS2 = bitcast i64* %lndS1 to i64*
  %lndS3 = load i64, i64* %lndS2, !tbaa !1
  store i64 %lndS3, i64* %ls8f9
  %lndS4 = load i64*, i64** %Sp_Var
  %lndS5 = getelementptr inbounds i64, i64* %lndS4, i32 1
  %lndS6 = bitcast i64* %lndS5 to i64*
  %lndS7 = load i64, i64* %lndS6, !tbaa !1
  store i64 %lndS7, i64* %ls8fX
  %lndS8 = load i64, i64* %R1_Var
  %lndS9 = and i64 %lndS8, 7
  switch i64 %lndS9, label %cdAs [i64 1, label %cdAs
i64 2, label %cdAw
i64 3, label %cdAD]
cdAs:
  %lndSa = load i64*, i64** %Hp_Var
  %lndSb = getelementptr inbounds i64, i64* %lndSa, i32 3
  %lndSc = ptrtoint i64* %lndSb to i64
  %lndSd = inttoptr i64 %lndSc to i64*
  store i64* %lndSd, i64** %Hp_Var
  %lndSe = load i64*, i64** %Hp_Var
  %lndSf = ptrtoint i64* %lndSe to i64
  %lndSg = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndSh = bitcast i64* %lndSg to i64*
  %lndSi = load i64, i64* %lndSh, !tbaa !4
  %lndSj = icmp ugt i64 %lndSf, %lndSi
  br i1 %lndSj, label %cdAv, label %cdAu
cdAu:
  %lndSm = load i64, i64* %R1_Var
  %lndSn = add i64 %lndSm, 7
  %lndSo = inttoptr i64 %lndSn to i64*
  %lndSp = load i64, i64* %lndSo, !tbaa !3
  store i64 %lndSp, i64* %ls8fZ
  %lndSr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g0_info$def to i64
  %lndSq = load i64*, i64** %Hp_Var
  %lndSs = getelementptr inbounds i64, i64* %lndSq, i32 -2
  store i64 %lndSr, i64* %lndSs, !tbaa !2
  %lndSu = load i64, i64* %ls8fX
  %lndSt = load i64*, i64** %Hp_Var
  %lndSv = getelementptr inbounds i64, i64* %lndSt, i32 0
  store i64 %lndSu, i64* %lndSv, !tbaa !2
  %lndSw = load i64, i64* %ls8f7
  store i64 %lndSw, i64* %R5_Var
  %lndSx = load i64*, i64** %Hp_Var
  %lndSy = getelementptr inbounds i64, i64* %lndSx, i32 -2
  %lndSz = ptrtoint i64* %lndSy to i64
  store i64 %lndSz, i64* %R4_Var
  %lndSA = load i64, i64* %ls8f9
  store i64 %lndSA, i64* %R3_Var
  %lndSB = load i64, i64* %ls8fZ
  store i64 %lndSB, i64* %R2_Var
  %lndSC = load i64*, i64** %Sp_Var
  %lndSD = getelementptr inbounds i64, i64* %lndSC, i32 6
  %lndSE = ptrtoint i64* %lndSD to i64
  %lndSF = inttoptr i64 %lndSE to i64*
  store i64* %lndSF, i64** %Sp_Var
  %lndSG = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndSH = load i64*, i64** %Sp_Var
  %lndSI = load i64*, i64** %Hp_Var
  %lndSJ = load i64, i64* %R1_Var
  %lndSK = load i64, i64* %R2_Var
  %lndSL = load i64, i64* %R3_Var
  %lndSM = load i64, i64* %R4_Var
  %lndSN = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndSG( i64* %Base_Arg, i64* %lndSH, i64* %lndSI, i64 %lndSJ, i64 %lndSK, i64 %lndSL, i64 %lndSM, i64 %lndSN, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAv:
  %lndSO = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lndSO, !tbaa !4
  %lndSP = load i64, i64* %R1_Var
  store i64 %lndSP, i64* %R1_Var
  %lndSQ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndSR = load i64*, i64** %Sp_Var
  %lndSS = load i64*, i64** %Hp_Var
  %lndST = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndSQ( i64* %Base_Arg, i64* %lndSR, i64* %lndSS, i64 %lndST, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAw:
  %lndSU = load i64*, i64** %Hp_Var
  %lndSV = getelementptr inbounds i64, i64* %lndSU, i32 6
  %lndSW = ptrtoint i64* %lndSV to i64
  %lndSX = inttoptr i64 %lndSW to i64*
  store i64* %lndSX, i64** %Hp_Var
  %lndSY = load i64*, i64** %Hp_Var
  %lndSZ = ptrtoint i64* %lndSY to i64
  %lndT0 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndT1 = bitcast i64* %lndT0 to i64*
  %lndT2 = load i64, i64* %lndT1, !tbaa !4
  %lndT3 = icmp ugt i64 %lndSZ, %lndT2
  br i1 %lndT3, label %cdAz, label %cdAy
cdAy:
  %lndT6 = load i64, i64* %R1_Var
  %lndT7 = add i64 %lndT6, 6
  %lndT8 = inttoptr i64 %lndT7 to i64*
  %lndT9 = load i64, i64* %lndT8, !tbaa !3
  store i64 %lndT9, i64* %ls8g1
  %lndTb = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g3_info$def to i64
  %lndTa = load i64*, i64** %Hp_Var
  %lndTc = getelementptr inbounds i64, i64* %lndTa, i32 -5
  store i64 %lndTb, i64* %lndTc, !tbaa !2
  %lndTe = load i64, i64* %ls8fX
  %lndTd = load i64*, i64** %Hp_Var
  %lndTf = getelementptr inbounds i64, i64* %lndTd, i32 -3
  store i64 %lndTe, i64* %lndTf, !tbaa !2
  %lndTh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8g2_info$def to i64
  %lndTg = load i64*, i64** %Hp_Var
  %lndTi = getelementptr inbounds i64, i64* %lndTg, i32 -2
  store i64 %lndTh, i64* %lndTi, !tbaa !2
  %lndTk = load i64, i64* %ls8g1
  %lndTj = load i64*, i64** %Hp_Var
  %lndTl = getelementptr inbounds i64, i64* %lndTj, i32 0
  store i64 %lndTk, i64* %lndTl, !tbaa !2
  %lndTm = load i64, i64* %ls8f7
  store i64 %lndTm, i64* %R5_Var
  %lndTn = load i64*, i64** %Hp_Var
  %lndTo = getelementptr inbounds i64, i64* %lndTn, i32 -5
  %lndTp = ptrtoint i64* %lndTo to i64
  store i64 %lndTp, i64* %R4_Var
  %lndTq = load i64, i64* %ls8f9
  store i64 %lndTq, i64* %R3_Var
  %lndTr = load i64*, i64** %Hp_Var
  %lndTs = getelementptr inbounds i64, i64* %lndTr, i32 -2
  %lndTt = ptrtoint i64* %lndTs to i64
  store i64 %lndTt, i64* %R2_Var
  %lndTu = load i64*, i64** %Sp_Var
  %lndTv = getelementptr inbounds i64, i64* %lndTu, i32 6
  %lndTw = ptrtoint i64* %lndTv to i64
  %lndTx = inttoptr i64 %lndTw to i64*
  store i64* %lndTx, i64** %Sp_Var
  %lndTy = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndTz = load i64*, i64** %Sp_Var
  %lndTA = load i64*, i64** %Hp_Var
  %lndTB = load i64, i64* %R1_Var
  %lndTC = load i64, i64* %R2_Var
  %lndTD = load i64, i64* %R3_Var
  %lndTE = load i64, i64* %R4_Var
  %lndTF = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndTy( i64* %Base_Arg, i64* %lndTz, i64* %lndTA, i64 %lndTB, i64 %lndTC, i64 %lndTD, i64 %lndTE, i64 %lndTF, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAz:
  %lndTG = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 48, i64* %lndTG, !tbaa !4
  %lndTH = load i64, i64* %R1_Var
  store i64 %lndTH, i64* %R1_Var
  %lndTI = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndTJ = load i64*, i64** %Sp_Var
  %lndTK = load i64*, i64** %Hp_Var
  %lndTL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndTI( i64* %Base_Arg, i64* %lndTJ, i64* %lndTK, i64 %lndTL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAD:
  %lndTM = load i64*, i64** %Sp_Var
  %lndTN = getelementptr inbounds i64, i64* %lndTM, i32 2
  %lndTO = ptrtoint i64* %lndTN to i64
  %lndTP = inttoptr i64 %lndTO to i64*
  store i64* %lndTP, i64** %Sp_Var
  %lndTQ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fb_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndTR = load i64*, i64** %Sp_Var
  %lndTS = load i64*, i64** %Hp_Var
  %lndTT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndTQ( i64* %Base_Arg, i64* %lndTR, i64* %lndTS, i64 %lndTT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxX_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxX_info$def to i8*)
define internal ghccc void @cdxX_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDi_srtd_struct* @udDi_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxX_info$def to i64)),i64 0), i64 5, i64 -4294967264}>
{
cdxX:
  %ls8f7 = alloca i64, i32 1
  %ls8fK = alloca i64, i32 1
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %ls8fM = alloca i64, i32 1
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ls8fU = alloca i64, i32 1
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lndTU = load i64*, i64** %Sp_Var
  %lndTV = getelementptr inbounds i64, i64* %lndTU, i32 2
  %lndTW = bitcast i64* %lndTV to i64*
  %lndTX = load i64, i64* %lndTW, !tbaa !1
  store i64 %lndTX, i64* %ls8f7
  %lndTY = load i64*, i64** %Sp_Var
  %lndTZ = getelementptr inbounds i64, i64* %lndTY, i32 1
  %lndU0 = bitcast i64* %lndTZ to i64*
  %lndU1 = load i64, i64* %lndU0, !tbaa !1
  store i64 %lndU1, i64* %ls8fK
  %lndU2 = load i64, i64* %R1_Var
  %lndU3 = and i64 %lndU2, 7
  switch i64 %lndU3, label %cdAe [i64 1, label %cdAe
i64 2, label %cdAi
i64 3, label %cdAp]
cdAe:
  %lndU4 = load i64*, i64** %Hp_Var
  %lndU5 = getelementptr inbounds i64, i64* %lndU4, i32 7
  %lndU6 = ptrtoint i64* %lndU5 to i64
  %lndU7 = inttoptr i64 %lndU6 to i64*
  store i64* %lndU7, i64** %Hp_Var
  %lndU8 = load i64*, i64** %Hp_Var
  %lndU9 = ptrtoint i64* %lndU8 to i64
  %lndUa = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndUb = bitcast i64* %lndUa to i64*
  %lndUc = load i64, i64* %lndUb, !tbaa !4
  %lndUd = icmp ugt i64 %lndU9, %lndUc
  br i1 %lndUd, label %cdAh, label %cdAg
cdAg:
  %lndUg = load i64, i64* %R1_Var
  %lndUh = add i64 %lndUg, 7
  %lndUi = inttoptr i64 %lndUh to i64*
  %lndUj = load i64, i64* %lndUi, !tbaa !3
  store i64 %lndUj, i64* %ls8fM
  %lndUl = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fT_info$def to i64
  %lndUk = load i64*, i64** %Hp_Var
  %lndUm = getelementptr inbounds i64, i64* %lndUk, i32 -6
  store i64 %lndUl, i64* %lndUm, !tbaa !2
  %lndUo = load i64, i64* %ls8f7
  %lndUn = load i64*, i64** %Hp_Var
  %lndUp = getelementptr inbounds i64, i64* %lndUn, i32 -4
  store i64 %lndUo, i64* %lndUp, !tbaa !2
  %lndUr = load i64, i64* %ls8fK
  %lndUq = load i64*, i64** %Hp_Var
  %lndUs = getelementptr inbounds i64, i64* %lndUq, i32 -3
  store i64 %lndUr, i64* %lndUs, !tbaa !2
  %lndUu = load i64, i64* %ls8fM
  %lndUt = load i64*, i64** %Hp_Var
  %lndUv = getelementptr inbounds i64, i64* %lndUt, i32 -2
  store i64 %lndUu, i64* %lndUv, !tbaa !2
  %lndUx = ptrtoint i8* @Word_W_con_info to i64
  %lndUw = load i64*, i64** %Hp_Var
  %lndUy = getelementptr inbounds i64, i64* %lndUw, i32 -1
  store i64 %lndUx, i64* %lndUy, !tbaa !2
  %lndUA = load i64*, i64** %Hp_Var
  %lndUB = getelementptr inbounds i64, i64* %lndUA, i32 -6
  %lndUC = ptrtoint i64* %lndUB to i64
  %lndUz = load i64*, i64** %Hp_Var
  %lndUD = getelementptr inbounds i64, i64* %lndUz, i32 0
  store i64 %lndUC, i64* %lndUD, !tbaa !2
  %lndUF = load i64*, i64** %Hp_Var
  %lndUG = ptrtoint i64* %lndUF to i64
  %lndUH = add i64 %lndUG, -7
  store i64 %lndUH, i64* %R1_Var
  %lndUI = load i64*, i64** %Sp_Var
  %lndUJ = getelementptr inbounds i64, i64* %lndUI, i32 6
  %lndUK = ptrtoint i64* %lndUJ to i64
  %lndUL = inttoptr i64 %lndUK to i64*
  store i64* %lndUL, i64** %Sp_Var
  %lndUM = load i64*, i64** %Sp_Var
  %lndUN = getelementptr inbounds i64, i64* %lndUM, i32 0
  %lndUO = bitcast i64* %lndUN to i64*
  %lndUP = load i64, i64* %lndUO, !tbaa !1
  %lndUQ = inttoptr i64 %lndUP to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndUR = load i64*, i64** %Sp_Var
  %lndUS = load i64*, i64** %Hp_Var
  %lndUT = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndUQ( i64* %Base_Arg, i64* %lndUR, i64* %lndUS, i64 %lndUT, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAh:
  %lndUU = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 56, i64* %lndUU, !tbaa !4
  %lndUV = load i64, i64* %R1_Var
  store i64 %lndUV, i64* %R1_Var
  %lndUW = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndUX = load i64*, i64** %Sp_Var
  %lndUY = load i64*, i64** %Hp_Var
  %lndUZ = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndUW( i64* %Base_Arg, i64* %lndUX, i64* %lndUY, i64 %lndUZ, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAi:
  %lndV0 = load i64*, i64** %Hp_Var
  %lndV1 = getelementptr inbounds i64, i64* %lndV0, i32 3
  %lndV2 = ptrtoint i64* %lndV1 to i64
  %lndV3 = inttoptr i64 %lndV2 to i64*
  store i64* %lndV3, i64** %Hp_Var
  %lndV4 = load i64*, i64** %Hp_Var
  %lndV5 = ptrtoint i64* %lndV4 to i64
  %lndV6 = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndV7 = bitcast i64* %lndV6 to i64*
  %lndV8 = load i64, i64* %lndV7, !tbaa !4
  %lndV9 = icmp ugt i64 %lndV5, %lndV8
  br i1 %lndV9, label %cdAl, label %cdAk
cdAk:
  %lndVc = load i64, i64* %R1_Var
  %lndVd = add i64 %lndVc, 6
  %lndVe = inttoptr i64 %lndVd to i64*
  %lndVf = load i64, i64* %lndVe, !tbaa !3
  store i64 %lndVf, i64* %ls8fU
  %lndVh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fV_info$def to i64
  %lndVg = load i64*, i64** %Hp_Var
  %lndVi = getelementptr inbounds i64, i64* %lndVg, i32 -2
  store i64 %lndVh, i64* %lndVi, !tbaa !2
  %lndVk = load i64, i64* %ls8fU
  %lndVj = load i64*, i64** %Hp_Var
  %lndVl = getelementptr inbounds i64, i64* %lndVj, i32 0
  store i64 %lndVk, i64* %lndVl, !tbaa !2
  %lndVm = load i64, i64* %ls8f7
  store i64 %lndVm, i64* %R5_Var
  %lndVn = load i64, i64* %ls8fK
  store i64 %lndVn, i64* %R4_Var
  %lndVo = load i64*, i64** %Sp_Var
  %lndVp = getelementptr inbounds i64, i64* %lndVo, i32 4
  %lndVq = bitcast i64* %lndVp to i64*
  %lndVr = load i64, i64* %lndVq, !tbaa !1
  store i64 %lndVr, i64* %R3_Var
  %lndVs = load i64*, i64** %Hp_Var
  %lndVt = getelementptr inbounds i64, i64* %lndVs, i32 -2
  %lndVu = ptrtoint i64* %lndVt to i64
  store i64 %lndVu, i64* %R2_Var
  %lndVv = load i64*, i64** %Sp_Var
  %lndVw = getelementptr inbounds i64, i64* %lndVv, i32 6
  %lndVx = ptrtoint i64* %lndVw to i64
  %lndVy = inttoptr i64 %lndVx to i64*
  store i64* %lndVy, i64** %Sp_Var
  %lndVz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine2_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndVA = load i64*, i64** %Sp_Var
  %lndVB = load i64*, i64** %Hp_Var
  %lndVC = load i64, i64* %R1_Var
  %lndVD = load i64, i64* %R2_Var
  %lndVE = load i64, i64* %R3_Var
  %lndVF = load i64, i64* %R4_Var
  %lndVG = load i64, i64* %R5_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndVz( i64* %Base_Arg, i64* %lndVA, i64* %lndVB, i64 %lndVC, i64 %lndVD, i64 %lndVE, i64 %lndVF, i64 %lndVG, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAl:
  %lndVH = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lndVH, !tbaa !4
  %lndVI = load i64, i64* %R1_Var
  store i64 %lndVI, i64* %R1_Var
  %lndVJ = bitcast i8* @stg_gc_unpt_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndVK = load i64*, i64** %Sp_Var
  %lndVL = load i64*, i64** %Hp_Var
  %lndVM = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndVJ( i64* %Base_Arg, i64* %lndVK, i64* %lndVL, i64 %lndVM, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdAp:
  %lndVN = load i64*, i64** %Sp_Var
  %lndVO = getelementptr inbounds i64, i64* %lndVN, i32 2
  %lndVP = ptrtoint i64* %lndVO to i64
  %lndVQ = inttoptr i64 %lndVP to i64*
  store i64* %lndVQ, i64** %Sp_Var
  %lndVR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fb_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndVS = load i64*, i64** %Sp_Var
  %lndVT = load i64*, i64** %Hp_Var
  %lndVU = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndVR( i64* %Base_Arg, i64* %lndVS, i64* %lndVT, i64 %lndVU, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8fb_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fb_entry$def to i8*)
define internal ghccc void @s8fb_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s8fb:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndVW = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxj_info$def to i64
  %lndVV = load i64*, i64** %Sp_Var
  %lndVX = getelementptr inbounds i64, i64* %lndVV, i32 -1
  store i64 %lndVW, i64* %lndVX, !tbaa !1
  %lndVY = load i64*, i64** %Sp_Var
  %lndVZ = getelementptr inbounds i64, i64* %lndVY, i32 3
  %lndW0 = bitcast i64* %lndVZ to i64*
  %lndW1 = load i64, i64* %lndW0, !tbaa !1
  store i64 %lndW1, i64* %R1_Var
  %lndW2 = load i64*, i64** %Sp_Var
  %lndW3 = getelementptr inbounds i64, i64* %lndW2, i32 -1
  %lndW4 = ptrtoint i64* %lndW3 to i64
  %lndW5 = inttoptr i64 %lndW4 to i64*
  store i64* %lndW5, i64** %Sp_Var
  %lndW6 = load i64, i64* %R1_Var
  %lndW7 = and i64 %lndW6, 7
  %lndW8 = icmp ne i64 %lndW7, 0
  br i1 %lndW8, label %udDb, label %cdxk
cdxk:
  %lndWa = load i64, i64* %R1_Var
  %lndWb = inttoptr i64 %lndWa to i64*
  %lndWc = load i64, i64* %lndWb, !tbaa !3
  %lndWd = inttoptr i64 %lndWc to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWe = load i64*, i64** %Sp_Var
  %lndWf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWd( i64* %Base_Arg, i64* %lndWe, i64* %Hp_Arg, i64 %lndWf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDb:
  %lndWg = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxj_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWh = load i64*, i64** %Sp_Var
  %lndWi = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWg( i64* %Base_Arg, i64* %lndWh, i64* %Hp_Arg, i64 %lndWi, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxj_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxj_info$def to i8*)
define internal ghccc void @cdxj_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDj_srtd_struct* @udDj_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxj_info$def to i64)),i64 0), i64 4, i64 -4294967264}>
{
cdxj:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lndWj = and i64 %R1_Arg, 7
  switch i64 %lndWj, label %udCJ [i64 3, label %cdzY]
udCJ:
  %lndWk = load i64*, i64** %Sp_Var
  %lndWl = getelementptr inbounds i64, i64* %lndWk, i32 1
  %lndWm = ptrtoint i64* %lndWl to i64
  %lndWn = inttoptr i64 %lndWm to i64*
  store i64* %lndWn, i64** %Sp_Var
  %lndWo = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fd_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWp = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWo( i64* %Base_Arg, i64* %lndWp, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzY:
  %lndWr = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxp_info$def to i64
  %lndWq = load i64*, i64** %Sp_Var
  %lndWs = getelementptr inbounds i64, i64* %lndWq, i32 -1
  store i64 %lndWr, i64* %lndWs, !tbaa !1
  %lndWt = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lndWu = add i64 %lndWt, 1
  store i64 %lndWu, i64* %R3_Var
  %lndWv = load i64*, i64** %Sp_Var
  %lndWw = getelementptr inbounds i64, i64* %lndWv, i32 1
  %lndWx = bitcast i64* %lndWw to i64*
  %lndWy = load i64, i64* %lndWx, !tbaa !1
  store i64 %lndWy, i64* %R2_Var
  %lndWA = add i64 %R1_Arg, 5
  %lndWB = inttoptr i64 %lndWA to i64*
  %lndWC = load i64, i64* %lndWB, !tbaa !3
  %lndWz = load i64*, i64** %Sp_Var
  %lndWD = getelementptr inbounds i64, i64* %lndWz, i32 0
  store i64 %lndWC, i64* %lndWD, !tbaa !1
  %lndWE = load i64*, i64** %Sp_Var
  %lndWF = getelementptr inbounds i64, i64* %lndWE, i32 -1
  %lndWG = ptrtoint i64* %lndWF to i64
  %lndWH = inttoptr i64 %lndWG to i64*
  store i64* %lndWH, i64** %Sp_Var
  %lndWI = bitcast i8* @integerzmgmp_GHCziIntegerziType_remInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWJ = load i64*, i64** %Sp_Var
  %lndWK = load i64, i64* %R2_Var
  %lndWL = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWI( i64* %Base_Arg, i64* %lndWJ, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndWK, i64 %lndWL, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxp_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxp_info$def to i8*)
define internal ghccc void @cdxp_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDk_srtd_struct* @udDk_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxp_info$def to i64)),i64 0), i64 5, i64 -4294967264}>
{
cdxp:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lndWM = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxt_info$def to i64
  %lndWN = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndWM, i64* %lndWN, !tbaa !1
  %lndWO = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lndWP = add i64 %lndWO, 1
  store i64 %lndWP, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lndWQ = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndWR = load i64, i64* %R2_Var
  %lndWS = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndWQ( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndWR, i64 %lndWS, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdxt_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxt_info$def to i8*)
define internal ghccc void @cdxt_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDl_srtd_struct* @udDl_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdxt_info$def to i64)),i64 0), i64 5, i64 -4294967264}>
{
cdxt:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndWT = load i64*, i64** %Hp_Var
  %lndWU = getelementptr inbounds i64, i64* %lndWT, i32 3
  %lndWV = ptrtoint i64* %lndWU to i64
  %lndWW = inttoptr i64 %lndWV to i64*
  store i64* %lndWW, i64** %Hp_Var
  %lndWX = load i64*, i64** %Hp_Var
  %lndWY = ptrtoint i64* %lndWX to i64
  %lndWZ = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndX0 = bitcast i64* %lndWZ to i64*
  %lndX1 = load i64, i64* %lndX0, !tbaa !4
  %lndX2 = icmp ugt i64 %lndWY, %lndX1
  br i1 %lndX2, label %cdA2, label %cdA1
cdA1:
  %lndX3 = load i64, i64* %R1_Var
  switch i64 %lndX3, label %cdA4 [i64 0, label %cdA4
i64 1, label %cdA6]
cdA4:
  %lndX4 = load i64*, i64** %Hp_Var
  %lndX5 = getelementptr inbounds i64, i64* %lndX4, i32 -3
  %lndX6 = ptrtoint i64* %lndX5 to i64
  %lndX7 = inttoptr i64 %lndX6 to i64*
  store i64* %lndX7, i64** %Hp_Var
  %lndX8 = load i64*, i64** %Sp_Var
  %lndX9 = getelementptr inbounds i64, i64* %lndX8, i32 2
  %lndXa = ptrtoint i64* %lndX9 to i64
  %lndXb = inttoptr i64 %lndXa to i64*
  store i64* %lndXb, i64** %Sp_Var
  %lndXc = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fd_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndXd = load i64*, i64** %Sp_Var
  %lndXe = load i64*, i64** %Hp_Var
  %lndXf = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndXc( i64* %Base_Arg, i64* %lndXd, i64* %lndXe, i64 %lndXf, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdA6:
  %lndXh = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fD_info$def to i64
  %lndXg = load i64*, i64** %Hp_Var
  %lndXi = getelementptr inbounds i64, i64* %lndXg, i32 -2
  store i64 %lndXh, i64* %lndXi, !tbaa !2
  %lndXk = load i64*, i64** %Sp_Var
  %lndXl = getelementptr inbounds i64, i64* %lndXk, i32 2
  %lndXm = bitcast i64* %lndXl to i64*
  %lndXn = load i64, i64* %lndXm, !tbaa !1
  %lndXj = load i64*, i64** %Hp_Var
  %lndXo = getelementptr inbounds i64, i64* %lndXj, i32 0
  store i64 %lndXn, i64* %lndXo, !tbaa !2
  %lndXq = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdA5_info$def to i64
  %lndXp = load i64*, i64** %Sp_Var
  %lndXr = getelementptr inbounds i64, i64* %lndXp, i32 0
  store i64 %lndXq, i64* %lndXr, !tbaa !1
  %lndXs = load i64*, i64** %Hp_Var
  %lndXt = getelementptr inbounds i64, i64* %lndXs, i32 -2
  %lndXu = ptrtoint i64* %lndXt to i64
  store i64 %lndXu, i64* %R3_Var
  %lndXv = load i64*, i64** %Sp_Var
  %lndXw = getelementptr inbounds i64, i64* %lndXv, i32 3
  %lndXx = bitcast i64* %lndXw to i64*
  %lndXy = load i64, i64* %lndXx, !tbaa !1
  store i64 %lndXy, i64* %R2_Var
  %lndXz = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_w2bs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndXA = load i64*, i64** %Sp_Var
  %lndXB = load i64*, i64** %Hp_Var
  %lndXC = load i64, i64* %R1_Var
  %lndXD = load i64, i64* %R2_Var
  %lndXE = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndXz( i64* %Base_Arg, i64* %lndXA, i64* %lndXB, i64 %lndXC, i64 %lndXD, i64 %lndXE, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdA2:
  %lndXF = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lndXF, !tbaa !4
  %lndXG = load i64, i64* %R1_Var
  store i64 %lndXG, i64* %R1_Var
  %lndXH = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndXI = load i64*, i64** %Sp_Var
  %lndXJ = load i64*, i64** %Hp_Var
  %lndXK = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndXH( i64* %Base_Arg, i64* %lndXI, i64* %lndXJ, i64 %lndXK, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdA5_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdA5_info$def to i8*)
define internal ghccc void @cdA5_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdA5_info$def to i64)),i64 768), i64 1285, i64 4294967328}>
{
cdA5:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndXL = add i64 %R1_Arg, 23
  %lndXM = inttoptr i64 %lndXL to i64*
  %lndXN = load i64, i64* %lndXM, !tbaa !3
  store i64 %lndXN, i64* %R6_Var
  %lndXO = add i64 %R1_Arg, 7
  %lndXP = inttoptr i64 %lndXO to i64*
  %lndXQ = load i64, i64* %lndXP, !tbaa !3
  store i64 %lndXQ, i64* %R5_Var
  %lndXR = add i64 %R1_Arg, 15
  %lndXS = inttoptr i64 %lndXR to i64*
  %lndXT = load i64, i64* %lndXS, !tbaa !3
  store i64 %lndXT, i64* %R4_Var
  %lndXU = load i64*, i64** %Sp_Var
  %lndXV = getelementptr inbounds i64, i64* %lndXU, i32 4
  %lndXW = bitcast i64* %lndXV to i64*
  %lndXX = load i64, i64* %lndXW, !tbaa !1
  store i64 %lndXX, i64* %R3_Var
  %lndXY = load i64*, i64** %Sp_Var
  %lndXZ = getelementptr inbounds i64, i64* %lndXY, i32 1
  %lndY0 = bitcast i64* %lndXZ to i64*
  %lndY1 = load i64, i64* %lndY0, !tbaa !1
  store i64 %lndY1, i64* %R2_Var
  %lndY3 = add i64 %R1_Arg, 31
  %lndY4 = inttoptr i64 %lndY3 to i64*
  %lndY5 = load i64, i64* %lndY4, !tbaa !3
  %lndY2 = load i64*, i64** %Sp_Var
  %lndY6 = getelementptr inbounds i64, i64* %lndY2, i32 4
  store i64 %lndY5, i64* %lndY6, !tbaa !1
  %lndY8 = load i64*, i64** %Sp_Var
  %lndY9 = getelementptr inbounds i64, i64* %lndY8, i32 2
  %lndYa = bitcast i64* %lndY9 to i64*
  %lndYb = load i64, i64* %lndYa, !tbaa !1
  %lndY7 = load i64*, i64** %Sp_Var
  %lndYc = getelementptr inbounds i64, i64* %lndY7, i32 5
  store i64 %lndYb, i64* %lndYc, !tbaa !1
  %lndYd = load i64*, i64** %Sp_Var
  %lndYe = getelementptr inbounds i64, i64* %lndYd, i32 4
  %lndYf = ptrtoint i64* %lndYe to i64
  %lndYg = inttoptr i64 %lndYf to i64*
  store i64* %lndYg, i64** %Sp_Var
  %lndYh = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine1_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndYi = load i64*, i64** %Sp_Var
  %lndYj = load i64, i64* %R2_Var
  %lndYk = load i64, i64* %R3_Var
  %lndYl = load i64, i64* %R4_Var
  %lndYm = load i64, i64* %R5_Var
  %lndYn = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndYh( i64* %Base_Arg, i64* %lndYi, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndYj, i64 %lndYk, i64 %lndYl, i64 %lndYm, i64 %lndYn, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8fd_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fd_entry$def to i8*)
define internal ghccc void @s8fd_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s8fd:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lndYp = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwK_info$def to i64
  %lndYo = load i64*, i64** %Sp_Var
  %lndYq = getelementptr inbounds i64, i64* %lndYo, i32 -1
  store i64 %lndYp, i64* %lndYq, !tbaa !1
  %lndYr = load i64*, i64** %Sp_Var
  %lndYs = getelementptr inbounds i64, i64* %lndYr, i32 1
  %lndYt = bitcast i64* %lndYs to i64*
  %lndYu = load i64, i64* %lndYt, !tbaa !1
  store i64 %lndYu, i64* %R1_Var
  %lndYv = load i64*, i64** %Sp_Var
  %lndYw = getelementptr inbounds i64, i64* %lndYv, i32 -1
  %lndYx = ptrtoint i64* %lndYw to i64
  %lndYy = inttoptr i64 %lndYx to i64*
  store i64* %lndYy, i64** %Sp_Var
  %lndYz = load i64, i64* %R1_Var
  %lndYA = and i64 %lndYz, 7
  %lndYB = icmp ne i64 %lndYA, 0
  br i1 %lndYB, label %udDc, label %cdwL
cdwL:
  %lndYD = load i64, i64* %R1_Var
  %lndYE = inttoptr i64 %lndYD to i64*
  %lndYF = load i64, i64* %lndYE, !tbaa !3
  %lndYG = inttoptr i64 %lndYF to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndYH = load i64*, i64** %Sp_Var
  %lndYI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndYG( i64* %Base_Arg, i64* %lndYH, i64* %Hp_Arg, i64 %lndYI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
udDc:
  %lndYJ = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwK_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndYK = load i64*, i64** %Sp_Var
  %lndYL = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndYJ( i64* %Base_Arg, i64* %lndYK, i64* %Hp_Arg, i64 %lndYL, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwK_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwK_info$def to i8*)
define internal ghccc void @cdwK_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDm_srtd_struct* @udDm_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwK_info$def to i64)),i64 0), i64 4, i64 -4294967264}>
{
cdwK:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lndYM = and i64 %R1_Arg, 7
  switch i64 %lndYM, label %udCL [i64 3, label %cdzG]
udCL:
  %lndYN = load i64*, i64** %Sp_Var
  %lndYO = getelementptr inbounds i64, i64* %lndYN, i32 1
  %lndYP = ptrtoint i64* %lndYO to i64
  %lndYQ = inttoptr i64 %lndYP to i64*
  store i64* %lndYQ, i64** %Sp_Var
  %lndYR = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ff_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndYS = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndYR( i64* %Base_Arg, i64* %lndYS, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzG:
  %lndYU = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwQ_info$def to i64
  %lndYT = load i64*, i64** %Sp_Var
  %lndYV = getelementptr inbounds i64, i64* %lndYT, i32 -1
  store i64 %lndYU, i64* %lndYV, !tbaa !1
  %lndYW = ptrtoint %Word_split4_closure_struct* @Word_split4_closure$def to i64
  %lndYX = add i64 %lndYW, 1
  store i64 %lndYX, i64* %R3_Var
  %lndYY = load i64*, i64** %Sp_Var
  %lndYZ = getelementptr inbounds i64, i64* %lndYY, i32 3
  %lndZ0 = bitcast i64* %lndYZ to i64*
  %lndZ1 = load i64, i64* %lndZ0, !tbaa !1
  store i64 %lndZ1, i64* %R2_Var
  %lndZ3 = add i64 %R1_Arg, 5
  %lndZ4 = inttoptr i64 %lndZ3 to i64*
  %lndZ5 = load i64, i64* %lndZ4, !tbaa !3
  %lndZ2 = load i64*, i64** %Sp_Var
  %lndZ6 = getelementptr inbounds i64, i64* %lndZ2, i32 0
  store i64 %lndZ5, i64* %lndZ6, !tbaa !1
  %lndZ7 = load i64*, i64** %Sp_Var
  %lndZ8 = getelementptr inbounds i64, i64* %lndZ7, i32 -1
  %lndZ9 = ptrtoint i64* %lndZ8 to i64
  %lndZa = inttoptr i64 %lndZ9 to i64*
  store i64* %lndZa, i64** %Sp_Var
  %lndZb = bitcast i8* @integerzmgmp_GHCziIntegerziType_remInteger_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndZc = load i64*, i64** %Sp_Var
  %lndZd = load i64, i64* %R2_Var
  %lndZe = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndZb( i64* %Base_Arg, i64* %lndZc, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndZd, i64 %lndZe, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwQ_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwQ_info$def to i8*)
define internal ghccc void @cdwQ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDn_srtd_struct* @udDn_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwQ_info$def to i64)),i64 0), i64 5, i64 -4294967264}>
{
cdwQ:
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lndZf = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwU_info$def to i64
  %lndZg = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lndZf, i64* %lndZg, !tbaa !1
  %lndZh = ptrtoint %Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i64
  %lndZi = add i64 %lndZh, 1
  store i64 %lndZi, i64* %R3_Var
  store i64 %R1_Arg, i64* %R2_Var
  %lndZj = bitcast i8* @integerzmgmp_GHCziIntegerziType_eqIntegerzh_info to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndZk = load i64, i64* %R2_Var
  %lndZl = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndZj( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lndZk, i64 %lndZl, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdwU_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwU_info$def to i8*)
define internal ghccc void @cdwU_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDo_srtd_struct* @udDo_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwU_info$def to i64)),i64 0), i64 5, i64 -4294967264}>
{
cdwU:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lndZm = load i64*, i64** %Hp_Var
  %lndZn = getelementptr inbounds i64, i64* %lndZm, i32 3
  %lndZo = ptrtoint i64* %lndZn to i64
  %lndZp = inttoptr i64 %lndZo to i64*
  store i64* %lndZp, i64** %Hp_Var
  %lndZq = load i64*, i64** %Hp_Var
  %lndZr = ptrtoint i64* %lndZq to i64
  %lndZs = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lndZt = bitcast i64* %lndZs to i64*
  %lndZu = load i64, i64* %lndZt, !tbaa !4
  %lndZv = icmp ugt i64 %lndZr, %lndZu
  br i1 %lndZv, label %cdzK, label %cdzJ
cdzJ:
  %lndZw = load i64, i64* %R1_Var
  switch i64 %lndZw, label %cdzM [i64 0, label %cdzM
i64 1, label %cdzO]
cdzM:
  %lndZx = load i64*, i64** %Hp_Var
  %lndZy = getelementptr inbounds i64, i64* %lndZx, i32 -3
  %lndZz = ptrtoint i64* %lndZy to i64
  %lndZA = inttoptr i64 %lndZz to i64*
  store i64* %lndZA, i64** %Hp_Var
  %lndZB = load i64*, i64** %Sp_Var
  %lndZC = getelementptr inbounds i64, i64* %lndZB, i32 2
  %lndZD = ptrtoint i64* %lndZC to i64
  %lndZE = inttoptr i64 %lndZD to i64*
  store i64* %lndZE, i64** %Sp_Var
  %lndZF = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ff_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lndZG = load i64*, i64** %Sp_Var
  %lndZH = load i64*, i64** %Hp_Var
  %lndZI = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lndZF( i64* %Base_Arg, i64* %lndZG, i64* %lndZH, i64 %lndZI, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzO:
  %lndZK = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8fq_info$def to i64
  %lndZJ = load i64*, i64** %Hp_Var
  %lndZL = getelementptr inbounds i64, i64* %lndZJ, i32 -2
  store i64 %lndZK, i64* %lndZL, !tbaa !2
  %lndZN = load i64*, i64** %Sp_Var
  %lndZO = getelementptr inbounds i64, i64* %lndZN, i32 4
  %lndZP = bitcast i64* %lndZO to i64*
  %lndZQ = load i64, i64* %lndZP, !tbaa !1
  %lndZM = load i64*, i64** %Hp_Var
  %lndZR = getelementptr inbounds i64, i64* %lndZM, i32 0
  store i64 %lndZQ, i64* %lndZR, !tbaa !2
  %lndZT = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzN_info$def to i64
  %lndZS = load i64*, i64** %Sp_Var
  %lndZU = getelementptr inbounds i64, i64* %lndZS, i32 0
  store i64 %lndZT, i64* %lndZU, !tbaa !1
  %lndZV = load i64*, i64** %Hp_Var
  %lndZW = getelementptr inbounds i64, i64* %lndZV, i32 -2
  %lndZX = ptrtoint i64* %lndZW to i64
  store i64 %lndZX, i64* %R3_Var
  %lndZY = load i64*, i64** %Sp_Var
  %lndZZ = getelementptr inbounds i64, i64* %lndZY, i32 5
  %lne00 = bitcast i64* %lndZZ to i64*
  %lne01 = load i64, i64* %lne00, !tbaa !1
  store i64 %lne01, i64* %R2_Var
  %lne02 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_w2bs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne03 = load i64*, i64** %Sp_Var
  %lne04 = load i64*, i64** %Hp_Var
  %lne05 = load i64, i64* %R1_Var
  %lne06 = load i64, i64* %R2_Var
  %lne07 = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne02( i64* %Base_Arg, i64* %lne03, i64* %lne04, i64 %lne05, i64 %lne06, i64 %lne07, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
cdzK:
  %lne08 = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 24, i64* %lne08, !tbaa !4
  %lne09 = load i64, i64* %R1_Var
  store i64 %lne09, i64* %R1_Var
  %lne0a = bitcast i8* @stg_gc_unbx_r1 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0b = load i64*, i64** %Sp_Var
  %lne0c = load i64*, i64** %Hp_Var
  %lne0d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0a( i64* %Base_Arg, i64* %lne0b, i64* %lne0c, i64 %lne0d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdzN_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzN_info$def to i8*)
define internal ghccc void @cdzN_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (i8* @S8lm_srt to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzN_info$def to i64)),i64 760), i64 1285, i64 4294967328}>
{
cdzN:
  %R6_Var = alloca i64, i32 1
  store i64 undef, i64* %R6_Var
  %R5_Var = alloca i64, i32 1
  store i64 undef, i64* %R5_Var
  %R4_Var = alloca i64, i32 1
  store i64 undef, i64* %R4_Var
  %R3_Var = alloca i64, i32 1
  store i64 undef, i64* %R3_Var
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lne0e = load i64*, i64** %Sp_Var
  %lne0f = getelementptr inbounds i64, i64* %lne0e, i32 4
  %lne0g = bitcast i64* %lne0f to i64*
  %lne0h = load i64, i64* %lne0g, !tbaa !1
  store i64 %lne0h, i64* %R6_Var
  %lne0i = add i64 %R1_Arg, 31
  %lne0j = inttoptr i64 %lne0i to i64*
  %lne0k = load i64, i64* %lne0j, !tbaa !3
  store i64 %lne0k, i64* %R5_Var
  %lne0l = add i64 %R1_Arg, 23
  %lne0m = inttoptr i64 %lne0l to i64*
  %lne0n = load i64, i64* %lne0m, !tbaa !3
  store i64 %lne0n, i64* %R4_Var
  %lne0o = add i64 %R1_Arg, 7
  %lne0p = inttoptr i64 %lne0o to i64*
  %lne0q = load i64, i64* %lne0p, !tbaa !3
  store i64 %lne0q, i64* %R3_Var
  %lne0r = add i64 %R1_Arg, 15
  %lne0s = inttoptr i64 %lne0r to i64*
  %lne0t = load i64, i64* %lne0s, !tbaa !3
  store i64 %lne0t, i64* %R2_Var
  %lne0v = load i64*, i64** %Sp_Var
  %lne0w = getelementptr inbounds i64, i64* %lne0v, i32 1
  %lne0x = bitcast i64* %lne0w to i64*
  %lne0y = load i64, i64* %lne0x, !tbaa !1
  %lne0u = load i64*, i64** %Sp_Var
  %lne0z = getelementptr inbounds i64, i64* %lne0u, i32 4
  store i64 %lne0y, i64* %lne0z, !tbaa !1
  %lne0B = load i64*, i64** %Sp_Var
  %lne0C = getelementptr inbounds i64, i64* %lne0B, i32 2
  %lne0D = bitcast i64* %lne0C to i64*
  %lne0E = load i64, i64* %lne0D, !tbaa !1
  %lne0A = load i64*, i64** %Sp_Var
  %lne0F = getelementptr inbounds i64, i64* %lne0A, i32 5
  store i64 %lne0E, i64* %lne0F, !tbaa !1
  %lne0G = load i64*, i64** %Sp_Var
  %lne0H = getelementptr inbounds i64, i64* %lne0G, i32 4
  %lne0I = ptrtoint i64* %lne0H to i64
  %lne0J = inttoptr i64 %lne0I to i64*
  store i64* %lne0J, i64** %Sp_Var
  %lne0K = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_combinezuzdscombine_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne0L = load i64*, i64** %Sp_Var
  %lne0M = load i64, i64* %R2_Var
  %lne0N = load i64, i64* %R3_Var
  %lne0O = load i64, i64* %R4_Var
  %lne0P = load i64, i64* %R5_Var
  %lne0Q = load i64, i64* %R6_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne0K( i64* %Base_Arg, i64* %lne0L, i64* %Hp_Arg, i64 %R1_Arg, i64 %lne0M, i64 %lne0N, i64 %lne0O, i64 %lne0P, i64 %lne0Q, i64 %SpLim_Arg ) nounwind
  ret void
}
@s8ff_entry = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @s8ff_entry$def to i8*)
define internal ghccc void @s8ff_entry$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind
{
s8ff:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lne0S = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzq_info$def to i64
  %lne0R = load i64*, i64** %Sp_Var
  %lne0T = getelementptr inbounds i64, i64* %lne0R, i32 -1
  store i64 %lne0S, i64* %lne0T, !tbaa !1
  %lne0U = load i64*, i64** %Sp_Var
  %lne0V = getelementptr inbounds i64, i64* %lne0U, i32 3
  %lne0W = bitcast i64* %lne0V to i64*
  %lne0X = load i64, i64* %lne0W, !tbaa !1
  store i64 %lne0X, i64* %R2_Var
  %lne0Y = load i64*, i64** %Sp_Var
  %lne0Z = getelementptr inbounds i64, i64* %lne0Y, i32 -1
  %lne10 = ptrtoint i64* %lne0Z to i64
  %lne11 = inttoptr i64 %lne10 to i64*
  store i64* %lne11, i64** %Sp_Var
  %lne12 = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_unbs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne13 = load i64*, i64** %Sp_Var
  %lne14 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne12( i64* %Base_Arg, i64* %lne13, i64* %Hp_Arg, i64 %R1_Arg, i64 %lne14, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdzq_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzq_info$def to i8*)
define internal ghccc void @cdzq_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDp_srtd_struct* @udDp_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzq_info$def to i64)),i64 0), i64 516, i64 -4294967264}>
{
cdzq:
  %R2_Var = alloca i64, i32 1
  store i64 undef, i64* %R2_Var
  %lne15 = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzu_info$def to i64
  %lne16 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  store i64 %lne15, i64* %lne16, !tbaa !1
  %lne17 = getelementptr inbounds i64, i64* %Sp_Arg, i32 2
  %lne18 = bitcast i64* %lne17 to i64*
  %lne19 = load i64, i64* %lne18, !tbaa !1
  store i64 %lne19, i64* %R2_Var
  %lne1a = getelementptr inbounds i64, i64* %Sp_Arg, i32 4
  store i64 %R1_Arg, i64* %lne1a, !tbaa !1
  %lne1b = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_unbs_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne1c = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne1b( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %R1_Arg, i64 %lne1c, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@cdzu_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzu_info$def to i8*)
define internal ghccc void @cdzu_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%udDq_srtd_struct* @udDq_srtd$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdzu_info$def to i64)),i64 0), i64 132, i64 -4294967264}>
{
cdzu:
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %lne1e = load i64*, i64** %Sp_Var
  %lne1f = getelementptr inbounds i64, i64* %lne1e, i32 1
  %lne1g = bitcast i64* %lne1f to i64*
  %lne1h = load i64, i64* %lne1g, !tbaa !1
  %lne1d = load i64*, i64** %Sp_Var
  %lne1i = getelementptr inbounds i64, i64* %lne1d, i32 1
  store i64 %lne1h, i64* %lne1i, !tbaa !1
  %lne1j = load i64*, i64** %Sp_Var
  %lne1k = getelementptr inbounds i64, i64* %lne1j, i32 2
  store i64 %R1_Arg, i64* %lne1k, !tbaa !1
  %lne1m = load i64*, i64** %Sp_Var
  %lne1n = getelementptr inbounds i64, i64* %lne1m, i32 3
  %lne1o = bitcast i64* %lne1n to i64*
  %lne1p = load i64, i64* %lne1o, !tbaa !1
  %lne1l = load i64*, i64** %Sp_Var
  %lne1q = getelementptr inbounds i64, i64* %lne1l, i32 3
  store i64 %lne1p, i64* %lne1q, !tbaa !1
  %lne1s = load i64*, i64** %Sp_Var
  %lne1t = getelementptr inbounds i64, i64* %lne1s, i32 4
  %lne1u = bitcast i64* %lne1t to i64*
  %lne1v = load i64, i64* %lne1u, !tbaa !1
  %lne1r = load i64*, i64** %Sp_Var
  %lne1w = getelementptr inbounds i64, i64* %lne1r, i32 4
  store i64 %lne1v, i64* %lne1w, !tbaa !1
  %lne1x = load i64*, i64** %Sp_Var
  %lne1y = getelementptr inbounds i64, i64* %lne1x, i32 1
  %lne1z = ptrtoint i64* %lne1y to i64
  %lne1A = inttoptr i64 %lne1z to i64*
  store i64* %lne1A, i64** %Sp_Var
  %lne1B = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @cdwv_entry$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne1C = load i64*, i64** %Sp_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne1B( i64* %Base_Arg, i64* %lne1C, i64* %Hp_Arg, i64 %R1_Arg, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_W_closure_struct = type <{i64}>
@Word_W_closure$def = internal global %Word_W_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W_info$def to i64)}>
@Word_W_closure = alias i8* bitcast (%Word_W_closure_struct* @Word_W_closure$def to i8*)
@Word_W_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W_info$def to i8*)
define internal ghccc void @Word_W_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
ce1J:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lne1O = load i64*, i64** %Hp_Var
  %lne1P = getelementptr inbounds i64, i64* %lne1O, i32 2
  %lne1Q = ptrtoint i64* %lne1P to i64
  %lne1R = inttoptr i64 %lne1Q to i64*
  store i64* %lne1R, i64** %Hp_Var
  %lne1S = load i64*, i64** %Hp_Var
  %lne1T = ptrtoint i64* %lne1S to i64
  %lne1U = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne1V = bitcast i64* %lne1U to i64*
  %lne1W = load i64, i64* %lne1V, !tbaa !4
  %lne1X = icmp ugt i64 %lne1T, %lne1W
  br i1 %lne1X, label %ce1N, label %ce1M
ce1M:
  %lne1Z = ptrtoint i8* @Word_W_con_info to i64
  %lne1Y = load i64*, i64** %Hp_Var
  %lne20 = getelementptr inbounds i64, i64* %lne1Y, i32 -1
  store i64 %lne1Z, i64* %lne20, !tbaa !2
  %lne22 = load i64, i64* %R2_Var
  %lne21 = load i64*, i64** %Hp_Var
  %lne23 = getelementptr inbounds i64, i64* %lne21, i32 0
  store i64 %lne22, i64* %lne23, !tbaa !2
  %lne25 = load i64*, i64** %Hp_Var
  %lne26 = ptrtoint i64* %lne25 to i64
  %lne27 = add i64 %lne26, -7
  store i64 %lne27, i64* %R1_Var
  %lne28 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne29 = bitcast i64* %lne28 to i64*
  %lne2a = load i64, i64* %lne29, !tbaa !1
  %lne2b = inttoptr i64 %lne2a to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2c = load i64*, i64** %Hp_Var
  %lne2d = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2b( i64* %Base_Arg, i64* %Sp_Arg, i64* %lne2c, i64 %lne2d, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ce1N:
  %lne2e = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne2e, !tbaa !4
  %lne2f = load i64, i64* %R2_Var
  store i64 %lne2f, i64* %R2_Var
  %lne2g = ptrtoint %Word_W_closure_struct* @Word_W_closure$def to i64
  store i64 %lne2g, i64* %R1_Var
  %lne2h = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lne2i = bitcast i64* %lne2h to i64*
  %lne2j = load i64, i64* %lne2i, !tbaa !4
  %lne2k = inttoptr i64 %lne2j to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2l = load i64*, i64** %Hp_Var
  %lne2m = load i64, i64* %R1_Var
  %lne2n = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2k( i64* %Base_Arg, i64* %Sp_Arg, i64* %lne2l, i64 %lne2m, i64 %lne2n, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_W64_closure_struct = type <{i64}>
@Word_W64_closure$def = internal global %Word_W64_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W64_info$def to i64)}>
@Word_W64_closure = alias i8* bitcast (%Word_W64_closure_struct* @Word_W64_closure$def to i8*)
@Word_W64_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W64_info$def to i8*)
define internal ghccc void @Word_W64_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967300, i64 0, i64 15}>
{
ce2u:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lne2z = load i64*, i64** %Hp_Var
  %lne2A = getelementptr inbounds i64, i64* %lne2z, i32 2
  %lne2B = ptrtoint i64* %lne2A to i64
  %lne2C = inttoptr i64 %lne2B to i64*
  store i64* %lne2C, i64** %Hp_Var
  %lne2D = load i64*, i64** %Hp_Var
  %lne2E = ptrtoint i64* %lne2D to i64
  %lne2F = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne2G = bitcast i64* %lne2F to i64*
  %lne2H = load i64, i64* %lne2G, !tbaa !4
  %lne2I = icmp ugt i64 %lne2E, %lne2H
  br i1 %lne2I, label %ce2y, label %ce2x
ce2x:
  %lne2K = ptrtoint i8* @Word_W64_con_info to i64
  %lne2J = load i64*, i64** %Hp_Var
  %lne2L = getelementptr inbounds i64, i64* %lne2J, i32 -1
  store i64 %lne2K, i64* %lne2L, !tbaa !2
  %lne2N = load i64, i64* %R2_Var
  %lne2M = load i64*, i64** %Hp_Var
  %lne2O = getelementptr inbounds i64, i64* %lne2M, i32 0
  store i64 %lne2N, i64* %lne2O, !tbaa !2
  %lne2Q = load i64*, i64** %Hp_Var
  %lne2R = ptrtoint i64* %lne2Q to i64
  %lne2S = add i64 %lne2R, -6
  store i64 %lne2S, i64* %R1_Var
  %lne2T = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne2U = bitcast i64* %lne2T to i64*
  %lne2V = load i64, i64* %lne2U, !tbaa !1
  %lne2W = inttoptr i64 %lne2V to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne2X = load i64*, i64** %Hp_Var
  %lne2Y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne2W( i64* %Base_Arg, i64* %Sp_Arg, i64* %lne2X, i64 %lne2Y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ce2y:
  %lne2Z = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne2Z, !tbaa !4
  %lne30 = load i64, i64* %R2_Var
  store i64 %lne30, i64* %R2_Var
  %lne31 = ptrtoint %Word_W64_closure_struct* @Word_W64_closure$def to i64
  store i64 %lne31, i64* %R1_Var
  %lne32 = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lne33 = bitcast i64* %lne32 to i64*
  %lne34 = load i64, i64* %lne33, !tbaa !4
  %lne35 = inttoptr i64 %lne34 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne36 = load i64*, i64** %Hp_Var
  %lne37 = load i64, i64* %R1_Var
  %lne38 = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne35( i64* %Base_Arg, i64* %Sp_Arg, i64* %lne36, i64 %lne37, i64 %lne38, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%Word_WBS_closure_struct = type <{i64}>
@Word_WBS_closure$def = internal global %Word_WBS_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_WBS_info$def to i64)}>
@Word_WBS_closure = alias i8* bitcast (%Word_WBS_closure_struct* @Word_WBS_closure$def to i8*)
@Word_WBS_info = internal alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_WBS_info$def to i8*)
define internal ghccc void @Word_WBS_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 4294967301, i64 0, i64 15}>
{
ce3f:
  %Hp_Var = alloca i64*, i32 1
  store i64* %Hp_Arg, i64** %Hp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %lne3k = load i64*, i64** %Hp_Var
  %lne3l = getelementptr inbounds i64, i64* %lne3k, i32 2
  %lne3m = ptrtoint i64* %lne3l to i64
  %lne3n = inttoptr i64 %lne3m to i64*
  store i64* %lne3n, i64** %Hp_Var
  %lne3o = load i64*, i64** %Hp_Var
  %lne3p = ptrtoint i64* %lne3o to i64
  %lne3q = getelementptr inbounds i64, i64* %Base_Arg, i32 107
  %lne3r = bitcast i64* %lne3q to i64*
  %lne3s = load i64, i64* %lne3r, !tbaa !4
  %lne3t = icmp ugt i64 %lne3p, %lne3s
  br i1 %lne3t, label %ce3j, label %ce3i
ce3i:
  %lne3v = ptrtoint i8* @Word_WBS_con_info to i64
  %lne3u = load i64*, i64** %Hp_Var
  %lne3w = getelementptr inbounds i64, i64* %lne3u, i32 -1
  store i64 %lne3v, i64* %lne3w, !tbaa !2
  %lne3y = load i64, i64* %R2_Var
  %lne3x = load i64*, i64** %Hp_Var
  %lne3z = getelementptr inbounds i64, i64* %lne3x, i32 0
  store i64 %lne3y, i64* %lne3z, !tbaa !2
  %lne3B = load i64*, i64** %Hp_Var
  %lne3C = ptrtoint i64* %lne3B to i64
  %lne3D = add i64 %lne3C, -5
  store i64 %lne3D, i64* %R1_Var
  %lne3E = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne3F = bitcast i64* %lne3E to i64*
  %lne3G = load i64, i64* %lne3F, !tbaa !1
  %lne3H = inttoptr i64 %lne3G to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3I = load i64*, i64** %Hp_Var
  %lne3J = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3H( i64* %Base_Arg, i64* %Sp_Arg, i64* %lne3I, i64 %lne3J, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
ce3j:
  %lne3K = getelementptr inbounds i64, i64* %Base_Arg, i32 113
  store i64 16, i64* %lne3K, !tbaa !4
  %lne3L = load i64, i64* %R2_Var
  store i64 %lne3L, i64* %R2_Var
  %lne3M = ptrtoint %Word_WBS_closure_struct* @Word_WBS_closure$def to i64
  store i64 %lne3M, i64* %R1_Var
  %lne3N = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %lne3O = bitcast i64* %lne3N to i64*
  %lne3P = load i64, i64* %lne3O, !tbaa !4
  %lne3Q = inttoptr i64 %lne3P to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne3R = load i64*, i64** %Hp_Var
  %lne3S = load i64, i64* %R1_Var
  %lne3T = load i64, i64* %R2_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne3Q( i64* %Base_Arg, i64* %Sp_Arg, i64* %lne3R, i64 %lne3S, i64 %lne3T, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ie3X_str_struct = type <{[12 x i8]}>
%ie3Y_str_struct = type <{[12 x i8]}>
@ie3X_str$def = internal constant %ie3X_str_struct<{[12 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 87, i8 111, i8 114, i8 100, i8 46, i8 87, i8 0]}>
@ie3X_str = internal alias i8* bitcast (%ie3X_str_struct* @ie3X_str$def to i8*)
@ie3Y_str$def = internal constant %ie3Y_str_struct<{[12 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 87, i8 111, i8 114, i8 100, i8 46, i8 87, i8 0]}>
@ie3Y_str = internal alias i8* bitcast (%ie3Y_str_struct* @ie3Y_str$def to i8*)
@Word_W_con_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W_con_info$def to i8*)
define ghccc void @Word_W_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ie3X_str_struct* @ie3X_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W_con_info$def to i64)),i64 0), i64 1, i64 2}>
{
ce3V:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lne40 = load i64, i64* %R1_Var
  %lne41 = add i64 %lne40, 1
  store i64 %lne41, i64* %R1_Var
  %lne42 = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne43 = bitcast i64* %lne42 to i64*
  %lne44 = load i64, i64* %lne43, !tbaa !1
  %lne45 = inttoptr i64 %lne44 to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne46 = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne45( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne46, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_W_static_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W_static_info$def to i8*)
define ghccc void @Word_W_static_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ie3Y_str_struct* @ie3Y_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W_static_info$def to i64)),i64 0), i64 1, i64 7}>
{
ce3W:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lne48 = load i64, i64* %R1_Var
  %lne49 = add i64 %lne48, 1
  store i64 %lne49, i64* %R1_Var
  %lne4a = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne4b = bitcast i64* %lne4a to i64*
  %lne4c = load i64, i64* %lne4b, !tbaa !1
  %lne4d = inttoptr i64 %lne4c to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4e = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4d( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne4e, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ie4h_str_struct = type <{[14 x i8]}>
%ie4i_str_struct = type <{[14 x i8]}>
@ie4h_str$def = internal constant %ie4h_str_struct<{[14 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 87, i8 111, i8 114, i8 100, i8 46, i8 87, i8 54, i8 52, i8 0]}>
@ie4h_str = internal alias i8* bitcast (%ie4h_str_struct* @ie4h_str$def to i8*)
@ie4i_str$def = internal constant %ie4i_str_struct<{[14 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 87, i8 111, i8 114, i8 100, i8 46, i8 87, i8 54, i8 52, i8 0]}>
@ie4i_str = internal alias i8* bitcast (%ie4i_str_struct* @ie4i_str$def to i8*)
@Word_W64_con_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W64_con_info$def to i8*)
define ghccc void @Word_W64_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ie4h_str_struct* @ie4h_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W64_con_info$def to i64)),i64 0), i64 4294967296, i64 4294967299}>
{
ce4f:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lne4k = load i64, i64* %R1_Var
  %lne4l = add i64 %lne4k, 2
  store i64 %lne4l, i64* %R1_Var
  %lne4m = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne4n = bitcast i64* %lne4m to i64*
  %lne4o = load i64, i64* %lne4n, !tbaa !1
  %lne4p = inttoptr i64 %lne4o to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4q = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4p( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne4q, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_W64_static_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W64_static_info$def to i8*)
define ghccc void @Word_W64_static_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ie4i_str_struct* @ie4i_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_W64_static_info$def to i64)),i64 0), i64 4294967296, i64 4294967304}>
{
ce4g:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lne4s = load i64, i64* %R1_Var
  %lne4t = add i64 %lne4s, 2
  store i64 %lne4t, i64* %R1_Var
  %lne4u = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne4v = bitcast i64* %lne4u to i64*
  %lne4w = load i64, i64* %lne4v, !tbaa !1
  %lne4x = inttoptr i64 %lne4w to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4y = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4x( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne4y, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%ie4B_str_struct = type <{[14 x i8]}>
%ie4C_str_struct = type <{[14 x i8]}>
@ie4B_str$def = internal constant %ie4B_str_struct<{[14 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 87, i8 111, i8 114, i8 100, i8 46, i8 87, i8 66, i8 83, i8 0]}>
@ie4B_str = internal alias i8* bitcast (%ie4B_str_struct* @ie4B_str$def to i8*)
@ie4C_str$def = internal constant %ie4C_str_struct<{[14 x i8] [i8 109, i8 97, i8 105, i8 110, i8 58, i8 87, i8 111, i8 114, i8 100, i8 46, i8 87, i8 66, i8 83, i8 0]}>
@ie4C_str = internal alias i8* bitcast (%ie4C_str_struct* @ie4C_str$def to i8*)
@Word_WBS_con_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_WBS_con_info$def to i8*)
define ghccc void @Word_WBS_con_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ie4B_str_struct* @ie4B_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_WBS_con_info$def to i64)),i64 0), i64 1, i64 8589934594}>
{
ce4z:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lne4E = load i64, i64* %R1_Var
  %lne4F = add i64 %lne4E, 3
  store i64 %lne4F, i64* %R1_Var
  %lne4G = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne4H = bitcast i64* %lne4G to i64*
  %lne4I = load i64, i64* %lne4H, !tbaa !1
  %lne4J = inttoptr i64 %lne4I to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4K = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4J( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne4K, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
@Word_WBS_static_info = alias i8* bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_WBS_static_info$def to i8*)
define ghccc void @Word_WBS_static_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i64}><{i64 add (i64 sub (i64 ptrtoint (%ie4C_str_struct* @ie4C_str$def to i64),i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @Word_WBS_static_info$def to i64)),i64 0), i64 1, i64 8589934599}>
{
ce4A:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %lne4M = load i64, i64* %R1_Var
  %lne4N = add i64 %lne4M, 3
  store i64 %lne4N, i64* %R1_Var
  %lne4O = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %lne4P = bitcast i64* %lne4O to i64*
  %lne4Q = load i64, i64* %lne4P, !tbaa !1
  %lne4R = inttoptr i64 %lne4Q to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %lne4S = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %lne4R( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %lne4S, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
%S8lm_srt_struct = type <{i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64}>
@S8lm_srt$def = internal constant %S8lm_srt_struct<{i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_timesInteger_closure to i64), i64 ptrtoint (%r7YJ_closure_struct* @r7YJ_closure$def to i64), i64 ptrtoint (%Word_zdwf_closure_struct* @Word_zdwf_closure$def to i64), i64 ptrtoint (i8* @base_GHCziShow_showLitString_closure to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_closure to i64), i64 ptrtoint (i8* @base_GHCziShow_zdwzdcshowsPrec3_closure to i64), i64 ptrtoint (%Word_zdwzdcshow_closure_struct* @Word_zdwzdcshow_closure$def to i64), i64 ptrtoint (%Word_zdfShowCoqzuwordzuzdcshow_closure_struct* @Word_zdfShowCoqzuwordzuzdcshow_closure$def to i64), i64 ptrtoint (%Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowsPrec_closure$def to i64), i64 ptrtoint (%Word_zdfShowCoqzuword1_closure_struct* @Word_zdfShowCoqzuword1_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_zzeroBigNat_closure to i64), i64 ptrtoint (%Word_zdwbuf2i_closure_struct* @Word_zdwbuf2i_closure$def to i64), i64 ptrtoint (%Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64), i64 ptrtoint (%Word_buf2i1_closure_struct* @Word_buf2i1_closure$def to i64), i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_complementInteger_closure to i64), i64 ptrtoint (%Word_wnot1_closure_struct* @Word_wnot1_closure$def to i64), i64 ptrtoint (%Word_wnot_closure_struct* @Word_wnot_closure$def to i64), i64 ptrtoint (%r7YK_closure_struct* @r7YK_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_orInteger_closure to i64), i64 ptrtoint (%Word_zdwwor_closure_struct* @Word_zdwwor_closure$def to i64), i64 ptrtoint (%Word_wor1_closure_struct* @Word_wor1_closure$def to i64), i64 ptrtoint (%r7YL_closure_struct* @r7YL_closure$def to i64), i64 ptrtoint (%Word_zdwwltzudec_closure_struct* @Word_zdwwltzudec_closure$def to i64), i64 ptrtoint (%Word_wltzudec1_closure_struct* @Word_wltzudec1_closure$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zczuzdszc_closure to i64), i64 ptrtoint (%Word_wordToNat1_closure_struct* @Word_wordToNat1_closure$def to i64), i64 ptrtoint (%Word_wordToNat_closure_struct* @Word_wordToNat_closure$def to i64), i64 ptrtoint (%r7YM_closure_struct* @r7YM_closure$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zdfIntegralIntegerzuzdcrem_closure to i64), i64 ptrtoint (i8* @base_GHCziReal_divZZeroError_closure to i64), i64 ptrtoint (%Word_zdwwmod_closure_struct* @Word_zdwwmod_closure$def to i64), i64 ptrtoint (%Word_wmod1_closure_struct* @Word_wmod1_closure$def to i64), i64 ptrtoint (%r7YN_closure_struct* @r7YN_closure$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zdfIntegralIntegerzuzdcquot_closure to i64), i64 ptrtoint (%Word_zdwwdiv_closure_struct* @Word_zdwwdiv_closure$def to i64), i64 ptrtoint (%Word_wdiv1_closure_struct* @Word_wdiv1_closure$def to i64), i64 ptrtoint (%Word_zdwbs2i_closure_struct* @Word_zdwbs2i_closure$def to i64), i64 ptrtoint (%Word_bs2i1_closure_struct* @Word_bs2i1_closure$def to i64), i64 ptrtoint (%Word_bs2izq_closure_struct* @Word_bs2izq_closure$def to i64), i64 ptrtoint (%Word_unbs_closure_struct* @Word_unbs_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_shiftLInteger_closure to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_shiftRInteger_closure to i64), i64 ptrtoint (%Word_split2zuzdszdwsplit2_closure_struct* @Word_split2zuzdszdwsplit2_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_closure to i64), i64 ptrtoint (%Word_zdwsplit2_closure_struct* @Word_zdwsplit2_closure$def to i64), i64 ptrtoint (%Word_split2_closure_struct* @Word_split2_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_andInteger_closure to i64), i64 ptrtoint (%Word_wandzuzdszdwwand2_closure_struct* @Word_wandzuzdszdwwand2_closure$def to i64), i64 ptrtoint (%Word_zdwwand_closure_struct* @Word_zdwwand_closure$def to i64), i64 ptrtoint (%Word_zdwweq_closure_struct* @Word_zdwweq_closure$def to i64), i64 ptrtoint (%Word_zzext_closure_struct* @Word_zzext_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_minusInteger_closure to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_quotInteger_closure to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_remInteger_closure to i64), i64 ptrtoint (%Word_wlshiftzuzdswlshift_closure_struct* @Word_wlshiftzuzdswlshift_closure$def to i64), i64 ptrtoint (%Word_wlshift_closure_struct* @Word_wlshift_closure$def to i64), i64 ptrtoint (i8* @bytestringzm0zi10zi8zi1_DataziByteString_empty_closure to i64), i64 ptrtoint (%Word_wrshiftzuzdszdwwrshift_closure_struct* @Word_wrshiftzuzdszdwwrshift_closure$def to i64), i64 ptrtoint (%Word_zdwwrshift_closure_struct* @Word_zdwwrshift_closure$def to i64), i64 ptrtoint (%Word_zdwgo_closure_struct* @Word_zdwgo_closure$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zc1_closure to i64), i64 ptrtoint (i8* @base_GHCziReal_zdwf_closure to i64), i64 ptrtoint (i8* @base_GHCziList_zdwznzn_closure to i64), i64 ptrtoint (%Word_bitmask_closure_struct* @Word_bitmask_closure$def to i64), i64 ptrtoint (%Word_wones_closure_struct* @Word_wones_closure$def to i64), i64 ptrtoint (%Word_wrap_closure_struct* @Word_wrap_closure$def to i64), i64 ptrtoint (i8* @base_ControlziExceptionziBase_patError_closure to i64), i64 ptrtoint (%r7YO_closure_struct* @r7YO_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_plusInteger_closure to i64), i64 ptrtoint (%Word_wplus1_closure_struct* @Word_wplus1_closure$def to i64), i64 ptrtoint (%Word_wplus_closure_struct* @Word_wplus_closure$def to i64), i64 ptrtoint (%r7YP_closure_struct* @r7YP_closure$def to i64), i64 ptrtoint (%Word_wminus1_closure_struct* @Word_wminus1_closure$def to i64), i64 ptrtoint (%Word_wminus_closure_struct* @Word_wminus_closure$def to i64), i64 ptrtoint (%r7YQ_closure_struct* @r7YQ_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_timesInteger_closure to i64), i64 ptrtoint (%Word_wmult1_closure_struct* @Word_wmult1_closure$def to i64), i64 ptrtoint (%Word_wmult_closure_struct* @Word_wmult_closure$def to i64), i64 ptrtoint (i8* @base_GHCziReal_zczuzdszc_closure to i64), i64 ptrtoint (%Word_zdwf_closure_struct* @Word_zdwf_closure$def to i64), i64 ptrtoint (%Word_zdwwbit_closure_struct* @Word_zdwwbit_closure$def to i64), i64 ptrtoint (%Word_wbit1_closure_struct* @Word_wbit1_closure$def to i64), i64 ptrtoint (%Word_natToWord_closure_struct* @Word_natToWord_closure$def to i64), i64 ptrtoint (%Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_zzeroBigNat_closure to i64), i64 ptrtoint (%Word_split1zuzdssplit1_closure_struct* @Word_split1zuzdssplit1_closure$def to i64), i64 ptrtoint (i8* @integerzmgmp_GHCziIntegerziType_wordToInteger_closure to i64), i64 ptrtoint (%Word_zdwbs2i_closure_struct* @Word_zdwbs2i_closure$def to i64), i64 ptrtoint (%Word_split1_closure_struct* @Word_split1_closure$def to i64), i64 ptrtoint (%Word_zdwi2bs_closure_struct* @Word_zdwi2bs_closure$def to i64), i64 ptrtoint (i8* @base_GHCziForeignPtr_mallocPlainForeignPtrBytes2_closure to i64), i64 ptrtoint (%Word_i2bs1_closure_struct* @Word_i2bs1_closure$def to i64), i64 ptrtoint (%Word_i2bszq_closure_struct* @Word_i2bszq_closure$def to i64), i64 ptrtoint (%Word_w2bs_closure_struct* @Word_w2bs_closure$def to i64), i64 ptrtoint (%Word_combinezuzdscombine_closure_struct* @Word_combinezuzdscombine_closure$def to i64), i64 ptrtoint (%Word_combinezuzdscombine1_closure_struct* @Word_combinezuzdscombine1_closure$def to i64), i64 ptrtoint (%Word_combinezuzdscombine2_closure_struct* @Word_combinezuzdscombine2_closure$def to i64), i64 ptrtoint (%Word_combine_closure_struct* @Word_combine_closure$def to i64)}>
@S8lm_srt = internal alias i8* bitcast (%S8lm_srt_struct* @S8lm_srt$def to i8*)
@integer_gmp_mpn_import = external global i8
@integer_gmp_rscan_nzbyte = external global i8
@memcpy = external global i8
@memset = external global i8
@newCAF = external global i8
@stg_bh_upd_frame_info = external global i8
@ghczmprim_GHCziTypes_True_closure = external global i8
@stg_upd_frame_info = external global i8
@ghczmprim_GHCziTypes_ZMZN_closure = external global i8
@ghczmprim_GHCziTypes_ZC_con_info = external global i8
@stg_gc_pp = external global i8
@base_GHCziBase_zpzp_info = external global i8
@stg_gc_unpt_r1 = external global i8
@ghczmprim_GHCziTypes_TrNameS_static_info = external global i8
@ghczmprim_GHCziTypes_Module_static_info = external global i8
@integerzmgmp_GHCziIntegerziType_Szh_static_info = external global i8
@ghczmprim_GHCziTypes_TyCon_static_info = external global i8
@integerzmgmp_GHCziIntegerziType_timesInteger_info = external global i8
@ghczmprim_GHCziTypes_ZC_static_info = external global i8
@base_GHCziShow_shows8_closure = external global i8
@bytestringzm0zi10zi8zi1_DataziByteStringziInternal_zdwunpackAppendCharsLazzy_info = external global i8
@base_GHCziShow_showLitString_info = external global i8
@base_GHCziShow_zdwzdcshowsPrec3_info = external global i8
@integerzmgmp_GHCziIntegerziType_wordToInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_smallInteger_info = external global i8
@base_GHCziShow_showListzuzu_info = external global i8
@base_GHCziShow_CZCShow_static_info = external global i8
@integerzmgmp_GHCziIntegerziType_zzeroBigNat_closure = external global i8
@integerzmgmp_GHCziIntegerziType_Jpzh_con_info = external global i8
@integerzmgmp_GHCziIntegerziType_Szh_con_info = external global i8
@stg_gc_unbx_r1 = external global i8
@integerzmgmp_GHCziIntegerziType_zdwbigNatToInteger_info = external global i8
@stg_newByteArrayzh = external global i8
@integerzmgmp_GHCziIntegerziType_eqIntegerzh_info = external global i8
@ghczmprim_GHCziTypes_False_closure = external global i8
@ghczmprim_GHCziTypes_Bool_closure_tbl = external global i8
@base_ControlziExceptionziBase_patError_info = external global i8
@integerzmgmp_GHCziIntegerziType_complementInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_orInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_integerToWord_info = external global i8
@integerzmgmp_GHCziIntegerziType_ltInteger_info = external global i8
@base_GHCziReal_zczuzdszc_info = external global i8
@base_GHCziReal_zdfIntegralIntegerzuzdcrem_info = external global i8
@base_GHCziReal_divZZeroError_closure = external global i8
@stg_ap_0_fast = external global i8
@base_GHCziReal_zdfIntegralIntegerzuzdcquot_info = external global i8
@stg_noDuplicatezh = external global i8
@integerzmgmp_GHCziIntegerziType_integerToInt_info = external global i8
@integerzmgmp_GHCziIntegerziType_shiftRInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_shiftLInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_andInteger_info = external global i8
@bytestringzm0zi10zi8zi1_DataziByteStringziInternal_zdwcompareBytes_info = external global i8
@integerzmgmp_GHCziIntegerziType_eqInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_gtIntegerzh_info = external global i8
@integerzmgmp_GHCziIntegerziType_minusInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_remInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_quotInteger_info = external global i8
@bytestringzm0zi10zi8zi1_DataziByteStringziInternal_PS_con_info = external global i8
@bytestringzm0zi10zi8zi1_DataziByteString_empty_closure = external global i8
@base_GHCziReal_zdwf_info = external global i8
@base_GHCziReal_zc1_closure = external global i8
@base_GHCziList_zdwznzn_info = external global i8
@integerzmgmp_GHCziIntegerziType_plusInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_BNzh_con_info = external global i8
@integerzmgmp_GHCziIntegerziType_bigNatToInteger_info = external global i8
@integerzmgmp_GHCziIntegerziType_geIntegerzh_info = external global i8
@integerzmgmp_GHCziIntegerziGMPziInternals_exportIntegerToAddr1_info = external global i8
@ghczmprim_GHCziTuple_Z0T_closure = external global i8
@stg_newPinnedByteArrayzh = external global i8
@base_GHCziForeignPtr_mallocPlainForeignPtrBytes2_closure = external global i8
@base_GHCziForeignPtr_PlainPtr_con_info = external global i8
@ghczmprim_GHCziTypes_Izh_con_info = external global i8
@integerzmgmp_GHCziIntegerziType_timesInteger_closure = external global i8
@base_GHCziShow_showLitString_closure = external global i8
@integerzmgmp_GHCziIntegerziType_wordToInteger_closure = external global i8
@base_GHCziShow_zdwzdcshowsPrec3_closure = external global i8
@base_ControlziExceptionziBase_patError_closure = external global i8
@integerzmgmp_GHCziIntegerziType_complementInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_orInteger_closure = external global i8
@base_GHCziReal_zczuzdszc_closure = external global i8
@base_GHCziReal_zdfIntegralIntegerzuzdcrem_closure = external global i8
@base_GHCziReal_zdfIntegralIntegerzuzdcquot_closure = external global i8
@integerzmgmp_GHCziIntegerziType_shiftLInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_shiftRInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_andInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_minusInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_quotInteger_closure = external global i8
@integerzmgmp_GHCziIntegerziType_remInteger_closure = external global i8
@base_GHCziReal_zdwf_closure = external global i8
@base_GHCziList_zdwznzn_closure = external global i8
@integerzmgmp_GHCziIntegerziType_plusInteger_closure = external global i8
@llvm.used = appending constant [162 x i8*] [i8* bitcast (%S8lm_srt_struct* @S8lm_srt$def to i8*), i8* bitcast (%ie4C_str_struct* @ie4C_str$def to i8*), i8* bitcast (%ie4B_str_struct* @ie4B_str$def to i8*), i8* bitcast (%ie4i_str_struct* @ie4i_str$def to i8*), i8* bitcast (%ie4h_str_struct* @ie4h_str$def to i8*), i8* bitcast (%ie3Y_str_struct* @ie3Y_str$def to i8*), i8* bitcast (%ie3X_str_struct* @ie3X_str$def to i8*), i8* bitcast (%Word_WBS_closure_struct* @Word_WBS_closure$def to i8*), i8* bitcast (%Word_W64_closure_struct* @Word_W64_closure$def to i8*), i8* bitcast (%Word_W_closure_struct* @Word_W_closure$def to i8*), i8* bitcast (%udDq_srtd_struct* @udDq_srtd$def to i8*), i8* bitcast (%udDp_srtd_struct* @udDp_srtd$def to i8*), i8* bitcast (%udDo_srtd_struct* @udDo_srtd$def to i8*), i8* bitcast (%udDn_srtd_struct* @udDn_srtd$def to i8*), i8* bitcast (%udDm_srtd_struct* @udDm_srtd$def to i8*), i8* bitcast (%udDl_srtd_struct* @udDl_srtd$def to i8*), i8* bitcast (%udDk_srtd_struct* @udDk_srtd$def to i8*), i8* bitcast (%udDj_srtd_struct* @udDj_srtd$def to i8*), i8* bitcast (%udDi_srtd_struct* @udDi_srtd$def to i8*), i8* bitcast (%udDh_srtd_struct* @udDh_srtd$def to i8*), i8* bitcast (%udDg_srtd_struct* @udDg_srtd$def to i8*), i8* bitcast (%udDf_srtd_struct* @udDf_srtd$def to i8*), i8* bitcast (%udDe_srtd_struct* @udDe_srtd$def to i8*), i8* bitcast (%udDd_srtd_struct* @udDd_srtd$def to i8*), i8* bitcast (%Word_combine_closure_struct* @Word_combine_closure$def to i8*), i8* bitcast (%udrk_srtd_struct* @udrk_srtd$def to i8*), i8* bitcast (%Word_combinezuzdscombine2_closure_struct* @Word_combinezuzdscombine2_closure$def to i8*), i8* bitcast (%Word_combinezuzdscombine1_closure_struct* @Word_combinezuzdscombine1_closure$def to i8*), i8* bitcast (%Word_combinezuzdscombine_closure_struct* @Word_combinezuzdscombine_closure$def to i8*), i8* bitcast (%Word_w2bs_closure_struct* @Word_w2bs_closure$def to i8*), i8* bitcast (%Word_i2bszq_closure_struct* @Word_i2bszq_closure$def to i8*), i8* bitcast (%Word_i2bs_closure_struct* @Word_i2bs_closure$def to i8*), i8* bitcast (%Word_i2bs1_closure_struct* @Word_i2bs1_closure$def to i8*), i8* bitcast (%Word_zdwi2bs_closure_struct* @Word_zdwi2bs_closure$def to i8*), i8* bitcast (%Word_i2buf_closure_struct* @Word_i2buf_closure$def to i8*), i8* bitcast (%Word_i2buf1_closure_struct* @Word_i2buf1_closure$def to i8*), i8* bitcast (%Word_zdwi2buf_closure_struct* @Word_zdwi2buf_closure$def to i8*), i8* bitcast (%ucGQ_srtd_struct* @ucGQ_srtd$def to i8*), i8* bitcast (%ucGP_srtd_struct* @ucGP_srtd$def to i8*), i8* bitcast (%Word_split1_closure_struct* @Word_split1_closure$def to i8*), i8* bitcast (%ucuh_srtd_struct* @ucuh_srtd$def to i8*), i8* bitcast (%Word_split1zuzdssplit1_closure_struct* @Word_split1zuzdssplit1_closure$def to i8*), i8* bitcast (%Word_split5_closure_struct* @Word_split5_closure$def to i8*), i8* bitcast (%Word_split6_closure_struct* @Word_split6_closure$def to i8*), i8* bitcast (%Word_natToWord_closure_struct* @Word_natToWord_closure$def to i8*), i8* bitcast (%Word_wbit_closure_struct* @Word_wbit_closure$def to i8*), i8* bitcast (%Word_zdwwbit_closure_struct* @Word_zdwwbit_closure$def to i8*), i8* bitcast (%ccjO_str_struct* @ccjO_str$def to i8*), i8* bitcast (%Word_wbit1_closure_struct* @Word_wbit1_closure$def to i8*), i8* bitcast (%Word_wmult_closure_struct* @Word_wmult_closure$def to i8*), i8* bitcast (%Word_wmult1_closure_struct* @Word_wmult1_closure$def to i8*), i8* bitcast (%cca7_str_struct* @cca7_str$def to i8*), i8* bitcast (%r7YQ_closure_struct* @r7YQ_closure$def to i8*), i8* bitcast (%uc2G_srtd_struct* @uc2G_srtd$def to i8*), i8* bitcast (%uc2F_srtd_struct* @uc2F_srtd$def to i8*), i8* bitcast (%uc2E_srtd_struct* @uc2E_srtd$def to i8*), i8* bitcast (%uc2D_srtd_struct* @uc2D_srtd$def to i8*), i8* bitcast (%Word_wminus_closure_struct* @Word_wminus_closure$def to i8*), i8* bitcast (%Word_wminus1_closure_struct* @Word_wminus1_closure$def to i8*), i8* bitcast (%cbZm_str_struct* @cbZm_str$def to i8*), i8* bitcast (%r7YP_closure_struct* @r7YP_closure$def to i8*), i8* bitcast (%Word_wplus_closure_struct* @Word_wplus_closure$def to i8*), i8* bitcast (%Word_wplus1_closure_struct* @Word_wplus1_closure$def to i8*), i8* bitcast (%cbPH_str_struct* @cbPH_str$def to i8*), i8* bitcast (%r7YO_closure_struct* @r7YO_closure$def to i8*), i8* bitcast (%Word_wrap_closure_struct* @Word_wrap_closure$def to i8*), i8* bitcast (%Word_wones_closure_struct* @Word_wones_closure$def to i8*), i8* bitcast (%Word_bitmask_closure_struct* @Word_bitmask_closure$def to i8*), i8* bitcast (%Word_zdwgo_closure_struct* @Word_zdwgo_closure$def to i8*), i8* bitcast (%Word_ascii2byte_closure_struct* @Word_ascii2byte_closure$def to i8*), i8* bitcast (%Word_wrshift_closure_struct* @Word_wrshift_closure$def to i8*), i8* bitcast (%Word_wrshiftzuzdszdwwrshift_closure_struct* @Word_wrshiftzuzdszdwwrshift_closure$def to i8*), i8* bitcast (%Word_zdwwrshift_closure_struct* @Word_zdwwrshift_closure$def to i8*), i8* bitcast (%Word_wlshiftzuzdswlshift_closure_struct* @Word_wlshiftzuzdswlshift_closure$def to i8*), i8* bitcast (%Word_wlshift_closure_struct* @Word_wlshift_closure$def to i8*), i8* bitcast (%Word_split4_closure_struct* @Word_split4_closure$def to i8*), i8* bitcast (%Word_maxShift_closure_struct* @Word_maxShift_closure$def to i8*), i8* bitcast (%Word_zzext_closure_struct* @Word_zzext_closure$def to i8*), i8* bitcast (%Word_weq_closure_struct* @Word_weq_closure$def to i8*), i8* bitcast (%Word_zdwweq_closure_struct* @Word_zdwweq_closure$def to i8*), i8* bitcast (%Word_wand_closure_struct* @Word_wand_closure$def to i8*), i8* bitcast (%Word_zdwwand_closure_struct* @Word_zdwwand_closure$def to i8*), i8* bitcast (%Word_wandzuzdszdwwand2_closure_struct* @Word_wandzuzdszdwwand2_closure$def to i8*), i8* bitcast (%Word_split2_closure_struct* @Word_split2_closure$def to i8*), i8* bitcast (%Word_zdwsplit2_closure_struct* @Word_zdwsplit2_closure$def to i8*), i8* bitcast (%Word_split2zuzdszdwsplit2_closure_struct* @Word_split2zuzdszdwsplit2_closure$def to i8*), i8* bitcast (%Word_unbs_closure_struct* @Word_unbs_closure$def to i8*), i8* bitcast (%Word_bs2izq_closure_struct* @Word_bs2izq_closure$def to i8*), i8* bitcast (%Word_bs2i_closure_struct* @Word_bs2i_closure$def to i8*), i8* bitcast (%Word_bs2i1_closure_struct* @Word_bs2i1_closure$def to i8*), i8* bitcast (%Word_zdwbs2i_closure_struct* @Word_zdwbs2i_closure$def to i8*), i8* bitcast (%Word_wdiv_closure_struct* @Word_wdiv_closure$def to i8*), i8* bitcast (%Word_zdwwdiv_closure_struct* @Word_zdwwdiv_closure$def to i8*), i8* bitcast (%Word_wdiv1_closure_struct* @Word_wdiv1_closure$def to i8*), i8* bitcast (%c9qV_str_struct* @c9qV_str$def to i8*), i8* bitcast (%r7YN_closure_struct* @r7YN_closure$def to i8*), i8* bitcast (%Word_wmod_closure_struct* @Word_wmod_closure$def to i8*), i8* bitcast (%Word_zdwwmod_closure_struct* @Word_zdwwmod_closure$def to i8*), i8* bitcast (%Word_wmod1_closure_struct* @Word_wmod1_closure$def to i8*), i8* bitcast (%c9g4_str_struct* @c9g4_str$def to i8*), i8* bitcast (%r7YM_closure_struct* @r7YM_closure$def to i8*), i8* bitcast (%Word_wordToNat_closure_struct* @Word_wordToNat_closure$def to i8*), i8* bitcast (%c9dq_str_struct* @c9dq_str$def to i8*), i8* bitcast (%Word_wordToNat1_closure_struct* @Word_wordToNat1_closure$def to i8*), i8* bitcast (%Word_pow2_closure_struct* @Word_pow2_closure$def to i8*), i8* bitcast (%Word_pow1_closure_struct* @Word_pow1_closure$def to i8*), i8* bitcast (%Word_wltzudec_closure_struct* @Word_wltzudec_closure$def to i8*), i8* bitcast (%Word_zdwwltzudec_closure_struct* @Word_zdwwltzudec_closure$def to i8*), i8* bitcast (%Word_wltzudec1_closure_struct* @Word_wltzudec1_closure$def to i8*), i8* bitcast (%c963_str_struct* @c963_str$def to i8*), i8* bitcast (%r7YL_closure_struct* @r7YL_closure$def to i8*), i8* bitcast (%Word_wor_closure_struct* @Word_wor_closure$def to i8*), i8* bitcast (%Word_zdwwor_closure_struct* @Word_zdwwor_closure$def to i8*), i8* bitcast (%Word_wor1_closure_struct* @Word_wor1_closure$def to i8*), i8* bitcast (%c8Wg_str_struct* @c8Wg_str$def to i8*), i8* bitcast (%r7YK_closure_struct* @r7YK_closure$def to i8*), i8* bitcast (%Word_wnot_closure_struct* @Word_wnot_closure$def to i8*), i8* bitcast (%c8RK_str_struct* @c8RK_str$def to i8*), i8* bitcast (%Word_wnot1_closure_struct* @Word_wnot1_closure$def to i8*), i8* bitcast (%Word_bitzudec_closure_struct* @Word_bitzudec_closure$def to i8*), i8* bitcast (%Word_wzzero_closure_struct* @Word_wzzero_closure$def to i8*), i8* bitcast (%Word_wzzero1_closure_struct* @Word_wzzero1_closure$def to i8*), i8* bitcast (%Word_natToWord1_closure_struct* @Word_natToWord1_closure$def to i8*), i8* bitcast (%Word_bitzudec1_closure_struct* @Word_bitzudec1_closure$def to i8*), i8* bitcast (%Word_wone_closure_struct* @Word_wone_closure$def to i8*), i8* bitcast (%Word_wrap1_closure_struct* @Word_wrap1_closure$def to i8*), i8* bitcast (%Word_wone1_closure_struct* @Word_wone1_closure$def to i8*), i8* bitcast (%Word_wone2_closure_struct* @Word_wone2_closure$def to i8*), i8* bitcast (%Word_zdtcCoqzuword_closure_struct* @Word_zdtcCoqzuword_closure$def to i8*), i8* bitcast (%Word_zdtcCoqzuword1_closure_struct* @Word_zdtcCoqzuword1_closure$def to i8*), i8* bitcast (%c8Mm_str_struct* @c8Mm_str$def to i8*), i8* bitcast (%Word_zdtczqW_closure_struct* @Word_zdtczqW_closure$def to i8*), i8* bitcast (%Word_zdtczqW1_closure_struct* @Word_zdtczqW1_closure$def to i8*), i8* bitcast (%c8Mj_str_struct* @c8Mj_str$def to i8*), i8* bitcast (%Word_zdtczqW64_closure_struct* @Word_zdtczqW64_closure$def to i8*), i8* bitcast (%Word_zdtczqW2_closure_struct* @Word_zdtczqW2_closure$def to i8*), i8* bitcast (%c8Mg_str_struct* @c8Mg_str$def to i8*), i8* bitcast (%Word_zdtczqWBS_closure_struct* @Word_zdtczqWBS_closure$def to i8*), i8* bitcast (%Word_zdtczqWBS1_closure_struct* @Word_zdtczqWBS1_closure$def to i8*), i8* bitcast (%c8Md_str_struct* @c8Md_str$def to i8*), i8* bitcast (%Word_zdtrModule_closure_struct* @Word_zdtrModule_closure$def to i8*), i8* bitcast (%Word_zdtrModule1_closure_struct* @Word_zdtrModule1_closure$def to i8*), i8* bitcast (%c8Ma_str_struct* @c8Ma_str$def to i8*), i8* bitcast (%Word_zdtrModule2_closure_struct* @Word_zdtrModule2_closure$def to i8*), i8* bitcast (%c8M8_str_struct* @c8M8_str$def to i8*), i8* bitcast (%Word_buf2i_closure_struct* @Word_buf2i_closure$def to i8*), i8* bitcast (%Word_buf2i1_closure_struct* @Word_buf2i1_closure$def to i8*), i8* bitcast (%Word_zdwbuf2i_closure_struct* @Word_zdwbuf2i_closure$def to i8*), i8* bitcast (%Word_bs2i2_closure_struct* @Word_bs2i2_closure$def to i8*), i8* bitcast (%Word_zdfShowCoqzuword_closure_struct* @Word_zdfShowCoqzuword_closure$def to i8*), i8* bitcast (%Word_zdfShowCoqzuwordzuzdcshowList_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowList_closure$def to i8*), i8* bitcast (%Word_zdfShowCoqzuword1_closure_struct* @Word_zdfShowCoqzuword1_closure$def to i8*), i8* bitcast (%Word_zdfShowCoqzuwordzuzdcshowsPrec_closure_struct* @Word_zdfShowCoqzuwordzuzdcshowsPrec_closure$def to i8*), i8* bitcast (%Word_zdfShowCoqzuwordzuzdcshow_closure_struct* @Word_zdfShowCoqzuwordzuzdcshow_closure$def to i8*), i8* bitcast (%Word_zdwzdcshow_closure_struct* @Word_zdwzdcshow_closure$def to i8*), i8* bitcast (%Word_zdfShowCoqzuword2_closure_struct* @Word_zdfShowCoqzuword2_closure$def to i8*), i8* bitcast (%Word_zdwf_closure_struct* @Word_zdwf_closure$def to i8*), i8* bitcast (%r7YJ_closure_struct* @r7YJ_closure$def to i8*), i8* bitcast (%Word_zdszc1_closure_struct* @Word_zdszc1_closure$def to i8*), i8* bitcast (%Word_zdWWBS_closure_struct* @Word_zdWWBS_closure$def to i8*), i8* bitcast (%Word_zdWW64_closure_struct* @Word_zdWW64_closure$def to i8*), i8* bitcast (%__stginit_Word_struct* @__stginit_Word$def to i8*)], section "llvm.metadata"
